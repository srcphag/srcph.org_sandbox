var CABLES;
(() => {
  "use strict";
  var __webpack_modules__ = {
      122: () => {
        let GLOB_EXP = /(?:^|[^\\])\*/,
          NOT_LINE_ENDING = /[^\r\n]/g;
        const Preprocessor = function (t, e, i) {
          (this.source = "" + t),
            (this.baseDir = "string" == typeof e ? e : "."),
            (this.includes = "object" == typeof e ? e : {}),
            (this.preserveLineNumbers = "boolean" == typeof i && i),
            (this.isNode = !("undefined" != typeof window && window.window)),
            (this.errorSourceAhead = 50),
            (this.defines = []);
        };
        (Preprocessor.EXPR =
          /([ ]*)\/\/[ ]+#(include_once|include|ifn?def|if|endif|else|elif|put|define)/g),
          (Preprocessor.ALL = /([^\r\n]*)\r?(?:\n|$)/),
          (Preprocessor.INCLUDE =
            /(include_once|include)[ ]+"([^"\\]*(\\.[^"\\]*)*)"[ ]*\r?(?:\n|$)/g),
          (Preprocessor.IF = /(ifdef|ifndef|if)[ ]*([^\r\n]+)\r?\n/g),
          (Preprocessor.ENDIF = /(endif|else|elif)([ ]+[^\r\n]+)?\r?(?:\n|$)/g),
          (Preprocessor.PUT = /put[ ]+([^\n]+)[ ]*/g),
          (Preprocessor.DEFINE = /define[ ]+([^\n\r]+)\r?(?:\n|$)/g),
          (Preprocessor.VAR =
            /define[ ]+var[ ]+([a-zA-Z_][a-zA-Z0-9_]*)[ ]*=[ ]*(.+)/g),
          (Preprocessor.BOOLVAR = /define[ ]+([a-zA-Z_][a-zA-Z0-9_]*)[ ]*/g),
          (Preprocessor.FUNCTION =
            /define[ ]+function[ ]+([a-zA-Z_][a-zA-Z0-9_]*)[ ]*(.+)/g),
          (Preprocessor.stripSlashes = function (t) {
            return (t + "").replace(/\\(.?)/g, function (t, e) {
              switch (e) {
                case "\\":
                  return "\\";
                case "0":
                  return "\0";
                case "":
                  return "";
                default:
                  return e;
              }
            });
          }),
          (Preprocessor.addSlashes = function (t) {
            return (t + "").replace(/([\\"'])/g, "\\$1").replace(/\0/g, "\\0");
          }),
          (Preprocessor.indent = function (t, e) {
            let i = t.split("\n");
            for (let t = 0; t < i.length; t++) i[t] = e + i[t];
            return i.join("\n");
          }),
          (Preprocessor.nlToStr = function (t) {
            return "[" + t.replace(/\r/g, "").replace(/\n/g, "\\n") + "]";
          }),
          (Preprocessor.evaluate = function (defines, expr) {
            let evalFunction = function () {
              for (let key in defines)
                defines.hasOwnProperty(key) &&
                  ("var" === defines[key].type
                    ? eval("var " + key + " = " + defines[key].value + ";")
                    : eval("function " + key + defines[key].value));
              return eval(expr);
            };
            return evalFunction();
          }),
          (Preprocessor.prototype.process = function (t, e) {
            (t = t || {}),
              (e = "function" == typeof e ? e : function () {})(
                "Defines: " + JSON.stringify(t),
              );
            let i,
              s,
              r,
              n,
              o,
              a,
              h = [],
              l = !1;
            for (; null !== (i = Preprocessor.EXPR.exec(this.source)); ) {
              e(i[2] + " @ " + i.index + "-" + Preprocessor.EXPR.lastIndex);
              let d = i[1];
              if (
                l &&
                h.length > 0 &&
                "endif" !== i[2] &&
                "else" !== i[2] &&
                "elif" !== i[2]
              ) {
                if (
                  ((a = h.pop()),
                  e("  pop (" + h.length + "): " + JSON.stringify(a)),
                  (Preprocessor.ALL.lastIndex = i.index),
                  null === (s = Preprocessor.ALL.exec(this.source)))
                )
                  throw new Error(
                    "Illegal #" +
                      i[2] +
                      ": " +
                      this.source.substring(
                        i.index,
                        i.index + this.errorSourceAhead,
                      ) +
                      "...",
                  );
                h.push(
                  (o = {
                    include: a.include,
                    index: a.index,
                    lastIndex: Preprocessor.ALL.lastIndex,
                  }),
                ),
                  e("  push (" + h.length + "): " + JSON.stringify(o));
              } else
                switch (i[2]) {
                  case "ifdef":
                  case "ifndef":
                  case "if":
                    if (
                      ((Preprocessor.IF.lastIndex = i.index),
                      null === (s = Preprocessor.IF.exec(this.source)))
                    )
                      throw new Error(
                        "Illegal #" +
                          i[2] +
                          ": " +
                          this.source.substring(
                            i.index,
                            i.index + this.errorSourceAhead,
                          ) +
                          "...",
                      );
                    e("  test: " + s[2]),
                      e("  defines  " + JSON.stringify(t)),
                      (n =
                        "ifdef" === s[1]
                          ? void 0 !== t[s[2]]
                          : "ifndef" === s[1]
                            ? void 0 === t[s[2]]
                            : Preprocessor.evaluate(t, s[2])),
                      (l = !n),
                      e("  value: " + n + ", isSkip: " + l),
                      h.push(
                        (o = {
                          include: n,
                          index: i.index,
                          lastIndex: Preprocessor.IF.lastIndex,
                        }),
                      ),
                      e("  push (" + h.length + "): " + JSON.stringify(o));
                    break;
                  case "endif":
                  case "else":
                  case "elif":
                    if (
                      ((Preprocessor.ENDIF.lastIndex = i.index),
                      null === (s = Preprocessor.ENDIF.exec(this.source)))
                    )
                      throw new Error(
                        "Illegal #" +
                          i[2] +
                          ': "' +
                          this.source.substring(
                            i.index,
                            i.index + this.errorSourceAhead,
                          ) +
                          "...",
                      );
                    if (0 === h.length)
                      throw new Error(
                        "Unexpected #" +
                          s[1] +
                          ': "' +
                          this.source.substring(
                            i.index,
                            i.index + this.errorSourceAhead,
                          ) +
                          "...",
                      );
                    (a = h.pop()),
                      e("  pop (" + h.length + "): " + JSON.stringify(a)),
                      (n = this.preserveLineNumbers
                        ? this.source
                            .substring(a.index, a.lastIndex)
                            .replace(NOT_LINE_ENDING, "") +
                          this.source.substring(a.lastIndex, i.index) +
                          this.source
                            .substring(i.index, Preprocessor.ENDIF.lastIndex)
                            .replace(NOT_LINE_ENDING, "")
                        : this.source.substring(a.lastIndex, i.index)),
                      a.include
                        ? (e(
                            "  incl: " +
                              Preprocessor.nlToStr(n) +
                              ", 0-" +
                              a.index +
                              " + " +
                              n.length +
                              " bytes + " +
                              Preprocessor.ENDIF.lastIndex +
                              "-" +
                              this.source.length,
                          ),
                          (this.source =
                            this.source.substring(0, a.index) +
                            n +
                            this.source.substring(
                              Preprocessor.ENDIF.lastIndex,
                            )))
                        : this.preserveLineNumbers
                          ? (e(
                              "  excl(\\n): " +
                                Preprocessor.nlToStr(n) +
                                ", 0-" +
                                a.index +
                                " + " +
                                Preprocessor.ENDIF.lastIndex +
                                "-" +
                                this.source.length,
                            ),
                            (n = n.replace(NOT_LINE_ENDING, "")),
                            (this.source =
                              this.source.substring(0, a.index) +
                              n +
                              this.source.substring(
                                Preprocessor.ENDIF.lastIndex,
                              )))
                          : (e(
                              "  excl: " +
                                Preprocessor.nlToStr(n) +
                                ", 0-" +
                                a.index +
                                " + " +
                                Preprocessor.ENDIF.lastIndex +
                                "-" +
                                this.source.length,
                            ),
                            (n = ""),
                            (this.source =
                              this.source.substring(0, a.index) +
                              this.source.substring(
                                Preprocessor.ENDIF.lastIndex,
                              ))),
                      "" === this.source && e("  result empty"),
                      (l = !1),
                      (Preprocessor.EXPR.lastIndex = a.index + n.length),
                      e("  continue at " + Preprocessor.EXPR.lastIndex),
                      ("else" !== s[1] && "elif" !== s[1]) ||
                        ((n =
                          "else" === s[1]
                            ? !a.include
                            : Preprocessor.evaluate(t, s[2])),
                        (l = !n),
                        e("  isSkip: " + l),
                        h.push(
                          (o = {
                            include: n,
                            index: Preprocessor.EXPR.lastIndex,
                            lastIndex: Preprocessor.EXPR.lastIndex,
                          }),
                        ),
                        e("  push (" + h.length + "): " + JSON.stringify(o)));
                    break;
                  case "define":
                    if (
                      ((Preprocessor.DEFINE.lastIndex = i.index),
                      (Preprocessor.VAR.lastIndex = i.index),
                      (Preprocessor.FUNCTION.lastIndex = i.index),
                      (Preprocessor.BOOLVAR.lastIndex = i.index),
                      null === (s = Preprocessor.DEFINE.exec(this.source)))
                    )
                      throw new Error(
                        "Illegal #" +
                          i[2] +
                          ": " +
                          this.source.substring(
                            i.index,
                            i.index + this.errorSourceAhead,
                          ) +
                          "...",
                      );
                    var c, u, p;
                    if (
                      (e('  def: "' + s[1] + '"'),
                      null !== (r = Preprocessor.VAR.exec(this.source)))
                    )
                      (p = "var"),
                        (c = r[1]),
                        (u = r[2]),
                        e(" match3(var): " + JSON.stringify(r));
                    else if (
                      null !== (r = Preprocessor.FUNCTION.exec(this.source))
                    )
                      (p = "function"),
                        (c = r[1]),
                        (u = r[2]),
                        e(" match3(function): " + JSON.stringify(r));
                    else {
                      if (null === (r = Preprocessor.BOOLVAR.exec(this.source)))
                        throw new Error(
                          "Illegal #" +
                            i[2] +
                            ": " +
                            this.source.substring(
                              i.index,
                              i.index + this.errorSourceAhead,
                            ) +
                            "...",
                        );
                      (p = "var"),
                        (c = r[1]),
                        (u = !0),
                        e(" match3(boolvar): " + JSON.stringify(r));
                    }
                    e("  type: " + p),
                      e("  identifier: " + c),
                      e("  value: " + u),
                      (t[c] = { type: p, value: u }),
                      e("  defines  " + JSON.stringify(t));
                    var _ = "";
                    this.preserveLineNumbers &&
                      (_ = this.source
                        .substring(i.index, Preprocessor.DEFINE.lastIndex)
                        .replace(NOT_LINE_ENDING, "")),
                      (this.source =
                        this.source.substring(0, i.index) +
                        d +
                        _ +
                        this.source.substring(Preprocessor.DEFINE.lastIndex)),
                      (Preprocessor.EXPR.lastIndex = i.index),
                      e("  continue at " + Preprocessor.EXPR.lastIndex);
                }
            }
            return (
              h.length > 0 &&
                e(
                  "Still on stack (" +
                    h.length +
                    "): " +
                    JSON.stringify(h.pop()),
                ),
              this.source
            );
          });
        var __WEBPACK_DEFAULT_EXPORT__ = Preprocessor;
      },
    },
    __webpack_module_cache__ = {};
  function __webpack_require__(t) {
    var e = __webpack_module_cache__[t];
    if (void 0 !== e) return e.exports;
    var i = (__webpack_module_cache__[t] = { exports: {} });
    return __webpack_modules__[t](i, i.exports, __webpack_require__), i.exports;
  }
  (__webpack_require__.d = (t, e) => {
    for (var i in e)
      __webpack_require__.o(e, i) &&
        !__webpack_require__.o(t, i) &&
        Object.defineProperty(t, i, { enumerable: !0, get: e[i] });
  }),
    (__webpack_require__.o = (t, e) =>
      Object.prototype.hasOwnProperty.call(t, e)),
    (__webpack_require__.r = (t) => {
      "undefined" != typeof Symbol &&
        Symbol.toStringTag &&
        Object.defineProperty(t, Symbol.toStringTag, { value: "Module" }),
        Object.defineProperty(t, "__esModule", { value: !0 });
    });
  var __webpack_exports__ = {};
  (() => {
    __webpack_require__.d(__webpack_exports__, { default: () => jt });
    var t = {};
    __webpack_require__.r(t),
      __webpack_require__.d(t, {
        UTILS: () => l,
        ajax: () => O,
        ajaxSync: () => F,
        basename: () => P,
        cacheBust: () => R,
        clamp: () => y,
        cleanJson: () => E,
        copyArray: () => S,
        generateUUID: () => m,
        getShortOpName: () => c,
        keyCodeToName: () => C,
        map: () => I,
        prefixedHash: () => T,
        request: () => N,
        shortId: () => d,
        shuffleArray: () => u,
        simpleId: () => b,
        smoothStep: () => x,
        smootherStep: () => v,
        uuid: () => f,
      });
    var e = {};
    __webpack_require__.r(e),
      __webpack_require__.d(e, {
        b64decTypedArray: () => D,
        b64encTypesArray: () => k,
        base64Chars: () => U,
        base64lookup: () => L,
      });
    var i = {};
    __webpack_require__.r(i),
      __webpack_require__.d(i, { ANIM: () => Y, Anim: () => W });
    var s = {};
    __webpack_require__.r(s),
      __webpack_require__.d(s, {
        PatchConnectionReceiver: () => Bt,
        PatchConnectionSender: () => Lt,
        PatchConnectorBroadcastChannel: () => kt,
      });
    class r {
      constructor(t) {
        (this._logs = []), (this.initiator = t);
      }
      stack(t) {
        console.info("[" + this.initiator + "] ", t),
          console.log(new Error().stack);
      }
      groupCollapsed(t) {
        console.groupCollapsed("[" + this.initiator + "] " + t);
      }
      table(t) {
        console.table(t);
      }
      groupEnd() {
        console.groupEnd();
      }
      error(t) {
        console.error("[" + this.initiator + "]", ...arguments),
          window.gui &&
            window.gui.emitEvent(
              "coreLogEvent",
              this.initiator,
              "error",
              arguments,
            );
      }
      info(t) {
        console.error("[" + this.initiator + "]", ...arguments),
          window.gui &&
            window.gui.emitEvent(
              "coreLogEvent",
              this.initiator,
              "info",
              arguments,
            );
      }
      warn(t) {
        console.warn("[" + this.initiator + "]", ...arguments),
          window.gui &&
            window.gui.emitEvent(
              "coreLogEvent",
              this.initiator,
              "warn",
              arguments,
            );
      }
      verbose() {
        ((CABLES.UI &&
          CABLES.UI.logFilter.shouldPrint(this.initiator, ...arguments)) ||
          !CABLES.logSilent) &&
          console.log("[" + this.initiator + "]", ...arguments),
          window.gui &&
            window.gui.emitEvent(
              "coreLogEvent",
              this.initiator,
              "verbose",
              arguments,
            );
      }
      log(t) {
        ((CABLES.UI &&
          CABLES.UI.logFilter.shouldPrint(this.initiator, ...arguments)) ||
          !CABLES.logSilent) &&
          console.log("[" + this.initiator + "]", ...arguments),
          window.gui &&
            window.gui.emitEvent(
              "coreLogEvent",
              this.initiator,
              "log",
              arguments,
            );
      }
      userInteraction(t) {}
    }
    const n = {
        EASINGS: [
          "linear",
          "absolute",
          "smoothstep",
          "smootherstep",
          "Cubic In",
          "Cubic Out",
          "Cubic In Out",
          "Expo In",
          "Expo Out",
          "Expo In Out",
          "Sin In",
          "Sin Out",
          "Sin In Out",
          "Quart In",
          "Quart Out",
          "Quart In Out",
          "Quint In",
          "Quint Out",
          "Quint In Out",
          "Back In",
          "Back Out",
          "Back In Out",
          "Elastic In",
          "Elastic Out",
          "Bounce In",
          "Bounce Out",
        ],
        EASING_LINEAR: 0,
        EASING_ABSOLUTE: 1,
        EASING_SMOOTHSTEP: 2,
        EASING_SMOOTHERSTEP: 3,
        EASING_CUBICSPLINE: 4,
        EASING_CUBIC_IN: 5,
        EASING_CUBIC_OUT: 6,
        EASING_CUBIC_INOUT: 7,
        EASING_EXPO_IN: 8,
        EASING_EXPO_OUT: 9,
        EASING_EXPO_INOUT: 10,
        EASING_SIN_IN: 11,
        EASING_SIN_OUT: 12,
        EASING_SIN_INOUT: 13,
        EASING_BACK_IN: 14,
        EASING_BACK_OUT: 15,
        EASING_BACK_INOUT: 16,
        EASING_ELASTIC_IN: 17,
        EASING_ELASTIC_OUT: 18,
        EASING_BOUNCE_IN: 19,
        EASING_BOUNCE_OUT: 21,
        EASING_QUART_IN: 22,
        EASING_QUART_OUT: 23,
        EASING_QUART_INOUT: 24,
        EASING_QUINT_IN: 25,
        EASING_QUINT_OUT: 26,
        EASING_QUINT_INOUT: 27,
      },
      o = {
        OP_PORT_TYPE_VALUE: 0,
        OP_PORT_TYPE_FUNCTION: 1,
        OP_PORT_TYPE_TRIGGER: 1,
        OP_PORT_TYPE_OBJECT: 2,
        OP_PORT_TYPE_TEXTURE: 2,
        OP_PORT_TYPE_ARRAY: 3,
        OP_PORT_TYPE_DYNAMIC: 4,
        OP_PORT_TYPE_STRING: 5,
        OP_VERSION_PREFIX: "_v",
      },
      a = { PORT_DIR_IN: 0, PORT_DIR_OUT: 1 },
      h = {
        PACO_CLEAR: 0,
        PACO_VALUECHANGE: 1,
        PACO_OP_DELETE: 2,
        PACO_UNLINK: 3,
        PACO_LINK: 4,
        PACO_LOAD: 5,
        PACO_OP_CREATE: 6,
        PACO_OP_ENABLE: 7,
        PACO_OP_DISABLE: 8,
        PACO_UIATTRIBS: 9,
        PACO_VARIABLES: 10,
        PACO_TRIGGERS: 11,
        PACO_PORT_SETVARIABLE: 12,
        PACO_PORT_SETANIMATED: 13,
        PACO_PORT_ANIM_UPDATED: 14,
        PACO_DESERIALIZE: 15,
      },
      l = {
        float32Concat: function (t, e) {
          t instanceof Float32Array || (t = new Float32Array(t)),
            e instanceof Float32Array || (e = new Float32Array(e));
          const i = new Float32Array(t.length + e.length);
          return i.set(t), i.set(e, t.length), i;
        },
      },
      c = function (t) {
        let e = t.split(".")[t.split(".").length - 1];
        if (e.indexOf(o.OP_VERSION_PREFIX) > 0) {
          const t = e.split(o.OP_VERSION_PREFIX)[1];
          e = e.substring(0, e.length - (o.OP_VERSION_PREFIX + t).length);
        }
        return e;
      },
      u = function (t) {
        for (let e = t.length - 1; e > 0; e--) {
          const i = Math.floor(Math.seededRandom() * (e + 1)),
            s = t[e];
          (t[e] = t[i]), (t[i] = s);
        }
        return t;
      },
      p = {},
      _ = function () {
        let t = Math.random().toString(36).substr(2, 9);
        return p.hasOwnProperty(t) && (t = _()), (p[t] = !0), t;
      },
      d = _,
      g = function () {
        let t = new Date().getTime();
        return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, (e) => {
          const i = (t + 16 * Math.random()) % 16 | 0;
          return (
            (t = Math.floor(t / 16)), ("x" == e ? i : (3 & i) | 8).toString(16)
          );
        });
      },
      f = g,
      m = g;
    function E(t) {
      for (const e in t)
        t[e] &&
          "object" == typeof objValue &&
          t[e].constructor === Object &&
          (t[e] = E(t[e])),
          (null === t[e] ||
            void 0 === t[e] ||
            (Array.isArray(t[e]) && 0 == t[e].length)) &&
            delete t[e];
      return t;
    }
    const T = function (t, e = "id") {
      let i = 0;
      if (Array.prototype.reduce)
        i = t
          .split("")
          .reduce((t, e) => (t = (t << 5) - t + e.charCodeAt(0)) & t, 0);
      else if (t.length > 0)
        for (let e = 0; e < t.length; e++)
          (i = (i << 5) - i + t.charCodeAt(e)), (i &= i);
      return e + "" + i;
    };
    let A = 0;
    const b = function () {
        return A++, A;
      },
      x = function (t) {
        const e = Math.max(0, Math.min(1, (t - 0) / 1));
        return e * e * (3 - 2 * e);
      },
      v = function (t) {
        const e = Math.max(0, Math.min(1, (t - 0) / 1));
        return e * e * e * (e * (6 * e - 15) + 10);
      },
      y = function (t, e, i) {
        return Math.min(Math.max(t, e), i);
      },
      I = function (t, e, i, s, r, n) {
        if (t >= i) return r;
        if (t <= e) return s;
        let o = !1;
        const a = Math.min(e, i),
          h = Math.max(e, i);
        a != e && (o = !0);
        let l = !1;
        const c = Math.min(s, r),
          u = Math.max(s, r);
        c != s && (l = !0);
        let p = 0,
          _ = 0;
        return (
          (p = o
            ? ((h - t) * (u - c)) / (h - a)
            : ((t - a) * (u - c)) / (h - a)),
          (_ = l ? u - p : p + c),
          n
            ? 1 == n
              ? s +
                (t = Math.max(0, Math.min(1, (_ - s) / (r - s)))) *
                  t *
                  (3 - 2 * t) *
                  (r - s)
              : 2 == n
                ? s +
                  (t = Math.max(0, Math.min(1, (_ - s) / (r - s)))) *
                    t *
                    t *
                    (t * (6 * t - 15) + 10) *
                    (r - s)
                : _
            : _
        );
      };
    (Math.randomSeed = 1),
      (Math.seededRandom = function (t, e) {
        return (
          0 === Math.randomSeed && (Math.randomSeed = 999 * Math.random()),
          (t = t || 1),
          (e = e || 0),
          (Math.randomSeed = (9301 * Math.randomSeed + 49297) % 233280),
          e + (Math.randomSeed / 233280) * (t - e)
        );
      }),
      (l.arrayWriteToEnd = function (t, e) {
        for (let e = 1; e < t.length; e++) t[e - 1] = t[e];
        t[t.length - 1] = e;
      }),
      (l.isNumeric = function (t) {
        return !isNaN(parseFloat(t)) && isFinite(t);
      }),
      (l.isArray = function (t) {
        return "[object Array]" === Object.prototype.toString.call(t);
      }),
      (String.prototype.endl = function () {
        return this + "\n";
      }),
      (String.prototype.startsWith = function (t) {
        return 0 === this.indexOf(t);
      }),
      (String.prototype.endsWith =
        String.prototype.endsWith ||
        function (t) {
          return this.match(t + "$") == t;
        });
    const R = function (t) {
        return (
          t.indexOf("?") > -1 ? (t += "&") : (t += "?"),
          t + "cb=" + CABLES.uuid()
        );
      },
      S = function (t, e) {
        if (!t) return null;
        (e = e || []).length = t.length;
        for (let i = 0; i < t.length; i++) e[i] = t[i];
        return e;
      },
      P = function (t) {
        let e = "";
        if (!t) return "";
        const i = (t + "").split("/");
        if (i.length > 0) {
          let t = i[i.length - 1].split("?");
          (e = t[0]), (t = e.split(".")), (e = t[0]);
        }
        return e;
      },
      F = function (t, e, i, s, r) {
        N({ url: t, cb: e, method: i, data: s, contenttype: r, sync: !0 });
      },
      O = function (t, e, i, s, r, n, o = {}) {
        N({
          url: t,
          cb: e,
          method: i,
          data: s,
          contenttype: r,
          sync: !1,
          jsonP: n,
          headers: o,
        });
      },
      N = function (t) {
        let e;
        t.hasOwnProperty("asynch") || (t.asynch = !0);
        try {
          e = new XMLHttpRequest();
        } catch (t) {}
        (e.onreadystatechange = function () {
          4 == e.readyState &&
            t.cb &&
            (200 == e.status || 0 == e.status
              ? t.cb(!1, e.responseText, e)
              : t.cb(!0, e.responseText, e));
        }),
          e.addEventListener("progress", (t) => {});
        try {
          e.open(t.method ? t.method.toUpperCase() : "GET", t.url, !t.sync);
        } catch (i) {
          t.cb && t.cb(!0, i.msg, e);
        }
        if ("object" == typeof t.headers) {
          const i = Object.keys(t.headers);
          for (let s = 0; s < i.length; s++) {
            const r = i[s],
              n = t.headers[r];
            e.setRequestHeader(r, n);
          }
        }
        try {
          t.post || t.data
            ? (e.setRequestHeader(
                "Content-type",
                t.contenttype
                  ? t.contenttype
                  : "application/x-www-form-urlencoded",
              ),
              e.send(t.data || t.post))
            : e.send();
        } catch (i) {
          t.cb && t.cb(!0, i.msg, e);
        }
      },
      C = function (t) {
        if (!t && 0 !== t) return "Unidentified";
        const e = {
          8: "Backspace",
          9: "Tab",
          12: "Clear",
          13: "Enter",
          16: "Shift",
          17: "Control",
          18: "Alt",
          19: "Pause",
          20: "CapsLock",
          27: "Escape",
          32: "Space",
          33: "PageUp",
          34: "PageDown",
          35: "End",
          36: "Home",
          37: "ArrowLeft",
          38: "ArrowUp",
          39: "ArrowRight",
          40: "ArrowDown",
          45: "Insert",
          46: "Delete",
          112: "F1",
          113: "F2",
          114: "F3",
          115: "F4",
          116: "F5",
          117: "F6",
          118: "F7",
          119: "F8",
          120: "F9",
          121: "F10",
          122: "F11",
          123: "F12",
          144: "NumLock",
          145: "ScrollLock",
          224: "Meta",
        };
        return e[t] ? e[t] : String.fromCharCode(t);
      };
    window.performance = window.performance || {
      offset: Date.now(),
      now: function () {
        return Date.now() - this.offset;
      },
    };
    const w = function (t, e = {}) {
      if (!t) throw new Error("no cgl");
      (this._log = new r("cgl_texture")),
        (this._cgl = t),
        (this.pixelFormat = e.pixelFormat || w.PFORMATSTR_RGBA8UB),
        (this.tex = this._cgl.gl.createTexture()),
        (this.id = CABLES.uuid()),
        (this.width = 0),
        (this.height = 0),
        (this.loading = !1),
        (this.flip = !0),
        (this.flipped = !1),
        (this.shadowMap = !1),
        (this.deleted = !1),
        (this.image = null),
        (this.anisotropic = 0),
        (this.filter = w.FILTER_NEAREST),
        (this.wrap = w.WRAP_CLAMP_TO_EDGE),
        (this.texTarget = this._cgl.gl.TEXTURE_2D),
        e && e.type && (this.texTarget = e.type),
        (this.textureType = w.TYPE_DEFAULT),
        (this.unpackAlpha = !0),
        (this._fromData = !0),
        (this.name = "unknown"),
        (this._glDataType = -1),
        (this._glInternalFormat = -1),
        (this._glDataFormat = -1),
        e
          ? ((this.name = e.name || this.name),
            e.isDepthTexture && (this.textureType = w.TYPE_DEPTH),
            !0 === e.isFloatingPointTexture &&
              (this.textureType = w.TYPE_FLOAT),
            "textureType" in e && (this.textureType = e.textureType),
            "filter" in e && (this.filter = e.filter),
            "wrap" in e && (this.wrap = e.wrap),
            "unpackAlpha" in e && (this.unpackAlpha = e.unpackAlpha),
            "flip" in e && (this.flip = e.flip),
            "shadowMap" in e && (this.shadowMap = e.shadowMap),
            "anisotropic" in e && (this.anisotropic = e.anisotropic))
          : (e = {}),
        !e.pixelFormat &&
          e.isFloatingPointTexture &&
          (this.pixelFormat = w.PFORMATSTR_RGBA32F),
        this.textureType == w.TYPE_DEPTH &&
          (this.pixelFormat = w.PFORMATSTR_DEPTH),
        e.width || (e.width = 8),
        e.height || (e.height = 8),
        this._cgl.profileData.profileTextureNew++,
        this.setFormat(w.setUpGlPixelFormat(this._cgl, this.pixelFormat)),
        this._cgl.profileData.addHeavyEvent(
          "texture created",
          this.name,
          e.width + "x" + e.height,
        ),
        this.setSize(e.width, e.height),
        this.getInfoOneLine();
    };
    (w.prototype.isFloatingPoint = function () {
      return w.isPixelFormatFloat(this.pixelFormat);
    }),
      (w.prototype.compareSettings = function (t) {
        return (
          !!t &&
          t.width == this.width &&
          t.height == this.height &&
          t.filter == this.filter &&
          t.wrap == this.wrap &&
          t.textureType == this.textureType &&
          t.unpackAlpha == this.unpackAlpha &&
          t.anisotropic == this.anisotropic &&
          t.shadowMap == this.shadowMap &&
          t.texTarget == this.texTarget &&
          t.flip == this.flip
        );
      }),
      (w.prototype.clone = function () {
        const t = new w(this._cgl, {
          name: this.name,
          filter: this.filter,
          wrap: this.wrap,
          textureType: this.textureType,
          pixelFormat: this.pixelFormat,
          unpackAlpha: this.unpackAlpha,
          flip: this.flip,
          width: this.width,
          height: this.height,
        });
        return (
          this._cgl.profileData.addHeavyEvent(
            "texture created",
            this.name,
            this.width + "x" + this.height,
          ),
          this.compareSettings(t) ||
            (this._log.error("Cloned texture settings do not compare!"),
            this._log.error(this),
            this._log.error(t)),
          t
        );
      }),
      (w.prototype.setFormat = function (t) {
        (this.pixelFormat = t.pixelFormat),
          (this._glDataFormat = t.glDataFormat),
          (this._glInternalFormat = t.glInternalFormat),
          (this._glDataType = t.glDataType);
      }),
      (w.setUpGlPixelFormat = function (t, e) {
        const i = {};
        e ||
          (console.log("no pixelformatstr!"),
          console.log(new Error().stack),
          (e = w.PFORMATSTR_RGBA8UB)),
          (i.pixelFormatBase = e),
          t.glUseHalfFloatTex &&
            (e == w.PFORMATSTR_RGBA32F && (e = w.PFORMATSTR_RGBA16F),
            e == w.PFORMATSTR_RG32F && (e = w.PFORMATSTR_RG16F),
            e == w.PFORMATSTR_R32F && (e = w.PFORMATSTR_R16F)),
          (i.pixelFormat = e),
          (i.glDataType = t.gl.UNSIGNED_BYTE),
          (i.glInternalFormat = t.gl.RGBA8),
          (i.glDataFormat = t.gl.RGBA);
        let s = t.gl.FLOAT;
        if (
          1 == t.glVersion &&
          ((i.glInternalFormat = t.gl.RGBA),
          e == w.PFORMATSTR_RGBA16F ||
            e == w.PFORMATSTR_RG16F ||
            e == w.PFORMATSTR_R16F)
        ) {
          const e = t.enableExtension("OES_texture_half_float");
          if (!e) throw new Error("no half float texture extension");
          s = e.HALF_FLOAT_OES;
        }
        return (
          e == w.PFORMATSTR_RGBA8UB ||
            (e == w.PFORMATSTR_RGB565
              ? ((i.glInternalFormat = t.gl.RGB565),
                (i.glDataFormat = t.gl.RGB))
              : e == w.PFORMATSTR_R8UB
                ? ((i.glInternalFormat = t.gl.R8), (i.glDataFormat = t.gl.RED))
                : e == w.PFORMATSTR_RG8UB
                  ? ((i.glInternalFormat = t.gl.RG8),
                    (i.glDataFormat = t.gl.RG))
                  : e == w.PFORMATSTR_RGB8UB
                    ? ((i.glInternalFormat = t.gl.RGB8),
                      (i.glDataFormat = t.gl.RGB))
                    : e == w.PFORMATSTR_R32F
                      ? ((i.glInternalFormat = t.gl.R32F),
                        (i.glDataFormat = t.gl.RED),
                        (i.glDataType = s))
                      : e == w.PFORMATSTR_R16F
                        ? ((i.glInternalFormat = t.gl.R16F),
                          (i.glDataType = s),
                          (i.glDataFormat = t.gl.RED))
                        : e == w.PFORMATSTR_RG16F
                          ? ((i.glInternalFormat = t.gl.RG16F),
                            (i.glDataType = s),
                            (i.glDataFormat = t.gl.RG))
                          : e == w.PFORMATSTR_RGBA16F
                            ? (1 == t.glVersion
                                ? (i.glInternalFormat = t.gl.RGBA)
                                : (i.glInternalFormat = t.gl.RGBA16F),
                              (i.glDataType = s))
                            : e == w.PFORMATSTR_R11FG11FB10F
                              ? ((i.glInternalFormat = t.gl.R11F_G11F_B10F),
                                (i.glDataType = s),
                                (i.glDataFormat = t.gl.RGB))
                              : e == w.PFORMATSTR_RGBA32F
                                ? (1 == t.glVersion
                                    ? (i.glInternalFormat = t.gl.RGBA)
                                    : (i.glInternalFormat = t.gl.RGBA32F),
                                  (i.glDataType = s))
                                : e == w.PFORMATSTR_DEPTH
                                  ? 1 == t.glVersion
                                    ? ((i.glInternalFormat =
                                        t.gl.DEPTH_COMPONENT),
                                      (i.glDataType = t.gl.UNSIGNED_SHORT),
                                      (i.glDataFormat = t.gl.DEPTH_COMPONENT))
                                    : ((i.glInternalFormat =
                                        t.gl.DEPTH_COMPONENT32F),
                                      (i.glDataType = t.gl.FLOAT),
                                      (i.glDataFormat = t.gl.DEPTH_COMPONENT))
                                  : console.log("unknown pixelformat ", e)),
          (e.indexOf("32bit") || e == w.PFORMATSTR_R11FG11FB10F) &&
            (2 == t.glVersion && t.enableExtension("EXT_color_buffer_float"),
            2 == t.glVersion && t.enableExtension("EXT_float_blend"),
            t.enableExtension("OES_texture_float_linear")),
          e.indexOf("16bit") &&
            (t.enableExtension("EXT_color_buffer_half_float"),
            t.enableExtension("OES_texture_float_linear")),
          (i.numColorChannels = 1),
          0 == e.indexOf("R") && (i.numColorChannels = 1),
          0 == e.indexOf("RG") && (i.numColorChannels = 2),
          0 == e.indexOf("RGB") && (i.numColorChannels = 3),
          0 == e.indexOf("RGBA") && (i.numColorChannels = 4),
          (i.glDataType && i.glInternalFormat && i.glDataFormat) ||
            console.log(
              "pixelformat wrong ?!",
              e,
              i.glDataType,
              i.glInternalFormat,
              i.glDataFormat,
              this,
            ),
          i
        );
      }),
      (w.prototype.setSize = function (t, e) {
        this._cgl.aborted ||
          ((t != t || t <= 0 || !t) && (t = 8),
          (e != e || e <= 0 || !e) && (e = 8),
          (t > this._cgl.maxTexSize || e > this._cgl.maxTexSize) &&
            this._log.error(
              "texture size too big! " +
                t +
                "x" +
                e +
                " / max: " +
                this._cgl.maxTexSize,
            ),
          (t = Math.min(t, this._cgl.maxTexSize)),
          (e = Math.min(e, this._cgl.maxTexSize)),
          (t = Math.floor(t)),
          (e = Math.floor(e)),
          (this.width != t || this.height != e) &&
            ((this.width = t),
            (this.height = e),
            (this.deleted = !1),
            this.setFormat(w.setUpGlPixelFormat(this._cgl, this.pixelFormat)),
            (this.shortInfoString = this.getInfoOneLine()),
            this._cgl.gl.bindTexture(this.texTarget, this.tex),
            this._cgl.profileData.profileTextureResize++,
            this._cgl.gl.texImage2D(
              this.texTarget,
              0,
              this._glInternalFormat,
              t,
              e,
              0,
              this._glDataFormat,
              this._glDataType,
              null,
            ),
            this._setFilter(),
            this.updateMipMap(),
            this._cgl.gl.bindTexture(this.texTarget, null)));
      }),
      (w.prototype.initFromData = function (t, e, i, s, r) {
        if (
          ((this.filter = s),
          (this.wrap = r),
          null == s && (this.filter = w.FILTER_LINEAR),
          null == r && (this.wrap = w.WRAP_CLAMP_TO_EDGE),
          (this.width = e),
          (this.height = i),
          (this._fromData = !0),
          (this.deleted = !1),
          this.height > this._cgl.maxTexSize ||
            this.width > this._cgl.maxTexSize)
        ) {
          const t = CGL.Texture.getTempTexture(this._cgl);
          return (
            (this.width = t.width),
            (this.height = t.height),
            (this.tex = t.tex),
            void this._log.error(
              "[cgl_texture] texture size to big!!!",
              this.width,
              this.height,
              this._cgl.maxTexSize,
            )
          );
        }
        this.flip &&
          this._cgl.gl.pixelStorei(this._cgl.gl.UNPACK_FLIP_Y_WEBGL, this.flip),
          this._cgl.gl.bindTexture(this.texTarget, this.tex),
          this.setFormat(w.setUpGlPixelFormat(this._cgl, this.pixelFormat)),
          this._cgl.gl.texImage2D(
            this.texTarget,
            0,
            this._glInternalFormat,
            e,
            i,
            0,
            this._glDataFormat,
            this._glDataType,
            t,
          ),
          this._setFilter(),
          this.updateMipMap(),
          this.flip &&
            this._cgl.gl.pixelStorei(this._cgl.gl.UNPACK_FLIP_Y_WEBGL, !1),
          this._cgl.gl.bindTexture(this.texTarget, null);
      }),
      (w.prototype.updateMipMap = function () {
        (2 != this._cgl.glVersion && !this.isPowerOfTwo()) ||
          this.filter != w.FILTER_MIPMAP ||
          (this._cgl.gl.generateMipmap(this.texTarget),
          this._cgl.profileData.profileGenMipMap++);
      }),
      (w.prototype.initTexture = function (t, e) {
        if (
          (this._cgl.printError("before initTexture"),
          this._cgl.checkFrameStarted("texture inittexture"),
          (this._fromData = !1),
          this._cgl.gl.pixelStorei(
            this._cgl.gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,
            this.unpackAlpha,
          ),
          t.width && (this.width = t.width),
          t.height && (this.height = t.height),
          e && (this.filter = e),
          t.height > this._cgl.maxTexSize || t.width > this._cgl.maxTexSize)
        ) {
          const e = CGL.Texture.getTempTexture(this._cgl);
          return (
            (this.width = e.width),
            (this.height = e.height),
            (this.tex = e.tex),
            void this._log.error(
              "[cgl_texture] texture size to big!!!",
              t.width,
              t.height,
              this._cgl.maxTexSize,
            )
          );
        }
        this._cgl.gl.bindTexture(this.texTarget, this.tex),
          (this.deleted = !1),
          (this.flipped = !this.flip),
          this.flipped &&
            this._cgl.gl.pixelStorei(
              this._cgl.gl.UNPACK_FLIP_Y_WEBGL,
              this.flipped,
            ),
          this.setFormat(w.setUpGlPixelFormat(this._cgl, this.pixelFormat)),
          this._cgl.gl.texImage2D(
            this.texTarget,
            0,
            this._glInternalFormat,
            this._glDataFormat,
            this._glDataType,
            t,
          ),
          this._setFilter(),
          this.updateMipMap(),
          this._cgl.gl.bindTexture(this.texTarget, null),
          this._cgl.gl.pixelStorei(
            this._cgl.gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,
            !1,
          ),
          this.flipped &&
            this._cgl.gl.pixelStorei(this._cgl.gl.UNPACK_FLIP_Y_WEBGL, !1),
          this.getInfoOneLine(),
          this._cgl.printError("initTexture");
      }),
      (w.prototype.delete = function () {
        this.loading ||
          ((this.deleted = !0),
          (this.width = 0),
          (this.height = 0),
          this._cgl.profileData.profileTextureDelete++,
          this._cgl.gl.deleteTexture(this.tex),
          (this.image = null),
          (this.tex = null));
      }),
      (w.prototype.isPowerOfTwo = function () {
        return w.isPowerOfTwo(this.width) && w.isPowerOfTwo(this.height);
      }),
      (w.prototype.printInfo = function () {
        console.log(this.getInfo());
      }),
      (w.prototype.getInfoReadable = function () {
        const t = this.getInfo();
        let e = "";
        t.name = t.name.substr(0, t.name.indexOf("?rnd="));
        for (const i in t) e += "* " + i + ":  **" + t[i] + "**\n";
        return e;
      }),
      (w.prototype.getInfoOneLine = function () {
        let t = this.width + "x" + this.height;
        return (
          (t += " "),
          (t += this.pixelFormat),
          this.filter === CGL.Texture.FILTER_NEAREST && (t += " nearest"),
          this.filter === CGL.Texture.FILTER_LINEAR && (t += " linear"),
          this.filter === CGL.Texture.FILTER_MIPMAP && (t += " mipmap"),
          this.wrap === CGL.Texture.WRAP_CLAMP_TO_EDGE && (t += " clamp"),
          this.wrap === CGL.Texture.WRAP_REPEAT && (t += " repeat"),
          this.wrap === CGL.Texture.WRAP_MIRRORED_REPEAT && (t += " repeatmir"),
          (this.shortInfoString = t),
          t
        );
      }),
      (w.prototype.getInfoOneLineShort = function () {
        let t = this.width + "x" + this.height;
        return (
          (t += " "), (t += this.pixelFormat), (this.shortInfoString = t), t
        );
      }),
      (w.prototype.getInfo = function () {
        return w.getTexInfo(this);
      }),
      (w.prototype._setFilter = function () {
        if (
          (this._cgl.printError("before _setFilter"),
          this._fromData ||
            this._cgl.gl.pixelStorei(
              this._cgl.gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,
              this.unpackAlpha,
            ),
          this.shadowMap &&
            (this._cgl.gl.texParameteri(
              this._cgl.gl.TEXTURE_2D,
              this._cgl.gl.TEXTURE_COMPARE_MODE,
              this._cgl.gl.COMPARE_REF_TO_TEXTURE,
            ),
            this._cgl.gl.texParameteri(
              this._cgl.gl.TEXTURE_2D,
              this._cgl.gl.TEXTURE_COMPARE_FUNC,
              this._cgl.gl.LEQUAL,
            )),
          this.textureType == w.TYPE_FLOAT &&
            this.filter == w.FILTER_MIPMAP &&
            ((this.filter = w.FILTER_LINEAR),
            this._log.stack(
              "texture: HDR and mipmap filtering at the same time is not possible",
            )),
          1 != this._cgl.glVersion || this.isPowerOfTwo())
        ) {
          if (
            (this.wrap == w.WRAP_CLAMP_TO_EDGE
              ? (this._cgl.gl.texParameteri(
                  this.texTarget,
                  this._cgl.gl.TEXTURE_WRAP_S,
                  this._cgl.gl.CLAMP_TO_EDGE,
                ),
                this._cgl.gl.texParameteri(
                  this.texTarget,
                  this._cgl.gl.TEXTURE_WRAP_T,
                  this._cgl.gl.CLAMP_TO_EDGE,
                ))
              : this.wrap == w.WRAP_REPEAT
                ? (this._cgl.gl.texParameteri(
                    this.texTarget,
                    this._cgl.gl.TEXTURE_WRAP_S,
                    this._cgl.gl.REPEAT,
                  ),
                  this._cgl.gl.texParameteri(
                    this.texTarget,
                    this._cgl.gl.TEXTURE_WRAP_T,
                    this._cgl.gl.REPEAT,
                  ))
                : this.wrap == w.WRAP_MIRRORED_REPEAT &&
                  (this._cgl.gl.texParameteri(
                    this.texTarget,
                    this._cgl.gl.TEXTURE_WRAP_S,
                    this._cgl.gl.MIRRORED_REPEAT,
                  ),
                  this._cgl.gl.texParameteri(
                    this.texTarget,
                    this._cgl.gl.TEXTURE_WRAP_T,
                    this._cgl.gl.MIRRORED_REPEAT,
                  )),
            this.filter == w.FILTER_NEAREST)
          )
            this._cgl.gl.texParameteri(
              this.texTarget,
              this._cgl.gl.TEXTURE_MAG_FILTER,
              this._cgl.gl.NEAREST,
            ),
              this._cgl.gl.texParameteri(
                this.texTarget,
                this._cgl.gl.TEXTURE_MIN_FILTER,
                this._cgl.gl.NEAREST,
              );
          else if (this.filter == w.FILTER_LINEAR)
            this._cgl.gl.texParameteri(
              this.texTarget,
              this._cgl.gl.TEXTURE_MIN_FILTER,
              this._cgl.gl.LINEAR,
            ),
              this._cgl.gl.texParameteri(
                this.texTarget,
                this._cgl.gl.TEXTURE_MAG_FILTER,
                this._cgl.gl.LINEAR,
              );
          else {
            if (this.filter != w.FILTER_MIPMAP)
              throw (
                (this._log.log("unknown texture filter!", this.filter),
                new Error("unknown texture filter!" + this.filter))
              );
            this._cgl.gl.texParameteri(
              this.texTarget,
              this._cgl.gl.TEXTURE_MAG_FILTER,
              this._cgl.gl.LINEAR,
            ),
              this._cgl.gl.texParameteri(
                this.texTarget,
                this._cgl.gl.TEXTURE_MIN_FILTER,
                this._cgl.gl.LINEAR_MIPMAP_LINEAR,
              );
          }
          if (this.anisotropic) {
            const t = this._cgl.enableExtension(
              "EXT_texture_filter_anisotropic",
            );
            if (t) {
              const e = this._cgl.gl.getParameter(
                t.MAX_TEXTURE_MAX_ANISOTROPY_EXT,
              );
              this._cgl.gl.texParameterf(
                this._cgl.gl.TEXTURE_2D,
                t.TEXTURE_MAX_ANISOTROPY_EXT,
                Math.min(e, this.anisotropic),
              );
            }
          }
        } else
          this._cgl.gl.texParameteri(
            this.texTarget,
            this._cgl.gl.TEXTURE_MAG_FILTER,
            this._cgl.gl.NEAREST,
          ),
            this._cgl.gl.texParameteri(
              this.texTarget,
              this._cgl.gl.TEXTURE_MIN_FILTER,
              this._cgl.gl.NEAREST,
            ),
            this._cgl.gl.texParameteri(
              this.texTarget,
              this._cgl.gl.TEXTURE_WRAP_S,
              this._cgl.gl.CLAMP_TO_EDGE,
            ),
            this._cgl.gl.texParameteri(
              this.texTarget,
              this._cgl.gl.TEXTURE_WRAP_T,
              this._cgl.gl.CLAMP_TO_EDGE,
            ),
            (this.filter = w.FILTER_NEAREST),
            (this.wrap = w.WRAP_CLAMP_TO_EDGE);
        this.getInfoOneLine(), this._cgl.printError("_setFilter");
      }),
      (w.load = function (t, e, i, s) {
        if (!e) return i({ error: !0 });
        let r = null;
        t.patch.loading.existByName(e) ||
          (r = t.patch.loading.start("texture", e));
        const n = new w(t);
        return (
          (n.name = e),
          t.patch.isEditorMode() &&
            gui
              .jobs()
              .start({
                id: "loadtexture" + r,
                title: "loading texture " + CABLES.basename(e),
              }),
          (n.image = new Image()),
          (n.image.crossOrigin = "anonymous"),
          (n.loading = !0),
          s && s.hasOwnProperty("filter") && (n.filter = s.filter),
          s && s.hasOwnProperty("flip") && (n.flip = s.flip),
          s && s.hasOwnProperty("wrap") && (n.wrap = s.wrap),
          s &&
            s.hasOwnProperty("anisotropic") &&
            (n.anisotropic = s.anisotropic),
          s &&
            s.hasOwnProperty("unpackAlpha") &&
            (n.unpackAlpha = s.unpackAlpha),
          s &&
            s.hasOwnProperty("pixelFormat") &&
            (n.pixelFormat = s.pixelFormat),
          (n.image.onabort = n.image.onerror =
            (s) => {
              console.warn("[cgl.texture.load] error loading texture", e, s),
                (n.loading = !1),
                r && t.patch.loading.finished(r),
                i && i({ error: !0 }, n),
                t.patch.isEditorMode() && gui.jobs().finish("loadtexture" + r);
            }),
          (n.image.onload = function (e) {
            t.addNextFrameOnceCallback(() => {
              n.initTexture(n.image),
                r && t.patch.loading.finished(r),
                (n.loading = !1),
                t.patch.isEditorMode() && gui.jobs().finish("loadtexture" + r),
                i && i(null, n);
            });
          }),
          (n.image.src = e),
          n
        );
      }),
      (w.getTempTexture = function (t) {
        return (
          t || console.error("[getTempTexture] no cgl!"),
          t.tempTexture ||
            (t.tempTexture = w.getTemporaryTexture(
              t,
              256,
              w.FILTER_LINEAR,
              w.REPEAT,
            )),
          t.tempTexture
        );
      }),
      (w.getErrorTexture = function (t) {
        return (
          t || console.error("[getTempTexture] no cgl!"),
          t.errorTexture ||
            (t.errorTexture = w.getTemporaryTexture(
              t,
              256,
              w.FILTER_LINEAR,
              w.REPEAT,
              1,
              0.2,
              0.2,
            )),
          t.errorTexture
        );
      }),
      (w.getEmptyTexture = function (t, e) {
        if (e) return w.getEmptyTextureFloat(t);
        if (
          (t || console.error("[getEmptyTexture] no cgl!"), t.tempTextureEmpty)
        )
          return t.tempTextureEmpty;
        t.tempTextureEmpty = new w(t, { name: "emptyTexture" });
        const i = new Uint8Array(256).fill(0);
        for (let t = 0; t < 256; t += 4) i[t + 3] = 0;
        return (
          t.tempTextureEmpty.initFromData(
            i,
            8,
            8,
            w.FILTER_NEAREST,
            w.WRAP_REPEAT,
          ),
          t.tempTextureEmpty
        );
      }),
      (w.getEmptyTextureFloat = function (t) {
        if (
          (t || console.error("[getEmptyTextureFloat] no cgl!"),
          t.tempTextureEmptyFloat)
        )
          return t.tempTextureEmptyFloat;
        t.tempTextureEmptyFloat = new w(t, {
          name: "emptyTexture",
          isFloatingPointTexture: !0,
        });
        const e = new Float32Array(256).fill(1);
        for (let t = 0; t < 256; t += 4) e[t + 3] = 0;
        return (
          t.tempTextureEmptyFloat.initFromData(
            e,
            8,
            8,
            w.FILTER_NEAREST,
            w.WRAP_REPEAT,
          ),
          t.tempTextureEmptyFloat
        );
      }),
      (w.getRandomTexture = function (t) {
        if ((t || console.error("[getRandomTexture] no cgl!"), t.randomTexture))
          return t.randomTexture;
        const e = new Uint8Array(262144);
        for (let t = 0; t < 65536; t++)
          (e[4 * t + 0] = 255 * Math.random()),
            (e[4 * t + 1] = 255 * Math.random()),
            (e[4 * t + 2] = 255 * Math.random()),
            (e[4 * t + 3] = 255);
        return (
          (t.randomTexture = new w(t)),
          t.randomTexture.initFromData(
            e,
            256,
            256,
            w.FILTER_NEAREST,
            w.WRAP_REPEAT,
          ),
          t.randomTexture
        );
      }),
      (w.getRandomFloatTexture = function (t) {
        if (
          (t || console.error("[getRandomTexture] no cgl!"),
          t.getRandomFloatTexture)
        )
          return t.getRandomFloatTexture;
        const e = new Float32Array(262144);
        for (let t = 0; t < 65536; t++)
          (e[4 * t + 0] = 2 * (Math.random() - 0.5)),
            (e[4 * t + 1] = 2 * (Math.random() - 0.5)),
            (e[4 * t + 2] = 2 * (Math.random() - 0.5)),
            (e[4 * t + 3] = 1);
        return (
          (t.getRandomFloatTexture = new w(t, { isFloatingPointTexture: !0 })),
          t.getRandomFloatTexture.initFromData(
            e,
            256,
            256,
            w.FILTER_NEAREST,
            w.WRAP_REPEAT,
          ),
          t.getRandomFloatTexture
        );
      }),
      (w.getBlackTexture = function (t) {
        if ((t || this._log.error("[getBlackTexture] no cgl!"), t.blackTexture))
          return t.blackTexture;
        const e = new Uint8Array(256);
        for (let t = 0; t < 64; t++)
          (e[4 * t + 0] = e[4 * t + 1] = e[4 * t + 2] = 0),
            (e[4 * t + 3] = 255);
        return (
          (t.blackTexture = new w(t)),
          t.blackTexture.initFromData(e, 8, 8, w.FILTER_NEAREST, w.WRAP_REPEAT),
          t.blackTexture
        );
      }),
      (w.getEmptyCubemapTexture = function (t) {
        const e = [
            t.gl.TEXTURE_CUBE_MAP_POSITIVE_X,
            t.gl.TEXTURE_CUBE_MAP_NEGATIVE_X,
            t.gl.TEXTURE_CUBE_MAP_POSITIVE_Y,
            t.gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,
            t.gl.TEXTURE_CUBE_MAP_POSITIVE_Z,
            t.gl.TEXTURE_CUBE_MAP_NEGATIVE_Z,
          ],
          i = t.gl.createTexture(),
          s = t.gl.TEXTURE_CUBE_MAP,
          r = w.FILTER_NEAREST,
          n = w.WRAP_CLAMP_TO_EDGE;
        t.profileData.profileTextureNew++,
          t.gl.bindTexture(s, i),
          t.profileData.profileTextureResize++;
        for (let i = 0; i < 6; i += 1) {
          const r = new Uint8Array(256);
          t.gl.texImage2D(
            e[i],
            0,
            t.gl.RGBA,
            8,
            8,
            0,
            t.gl.RGBA,
            t.gl.UNSIGNED_BYTE,
            r,
          ),
            t.gl.texParameteri(s, t.gl.TEXTURE_MAG_FILTER, t.gl.NEAREST),
            t.gl.texParameteri(s, t.gl.TEXTURE_MIN_FILTER, t.gl.NEAREST),
            t.gl.texParameteri(s, t.gl.TEXTURE_WRAP_S, t.gl.CLAMP_TO_EDGE),
            t.gl.texParameteri(s, t.gl.TEXTURE_WRAP_T, t.gl.CLAMP_TO_EDGE);
        }
        return (
          t.gl.bindTexture(s, null),
          {
            id: CABLES.uuid(),
            tex: i,
            cubemap: i,
            width: 8,
            height: 8,
            filter: r,
            wrap: n,
            unpackAlpha: !0,
            flip: !0,
            _fromData: !0,
            name: "emptyCubemapTexture",
            anisotropic: 0,
          }
        );
      }),
      (w.getTempGradientTexture = function (t) {
        if (
          (t || console.error("[getTempGradientTexture] no cgl!"),
          t.tempTextureGradient)
        )
          return t.tempTextureGradient;
        const e = new w(t),
          i = 256,
          s = new Uint8Array(262144);
        for (let t = 0; t < i; t++)
          for (let e = 0; e < i; e++)
            (s[4 * (e + t * i) + 0] =
              s[4 * (e + t * i) + 1] =
              s[4 * (e + t * i) + 2] =
                255 - t),
              (s[4 * (e + t * i) + 3] = 255);
        return (
          e.initFromData(s, i, i, w.FILTER_NEAREST, w.WRAP_REPEAT),
          (t.tempTextureGradient = e),
          e
        );
      }),
      (w.getTemporaryTexture = function (t, e, i, s, r, n, o) {
        void 0 === r && (r = 1),
          void 0 === n && (n = 1),
          void 0 === o && (o = 1);
        const a = new w(t),
          h = [];
        for (let t = 0; t < e; t++)
          for (let i = 0; i < e; i++)
            (i + t) % 64 < 32
              ? (h.push((200 + (t / e) * 25 + (i / e) * 25) * r),
                h.push((200 + (t / e) * 25 + (i / e) * 25) * n),
                h.push((200 + (t / e) * 25 + (i / e) * 25) * o))
              : (h.push((40 + (t / e) * 25 + (i / e) * 25) * r),
                h.push((40 + (t / e) * 25 + (i / e) * 25) * n),
                h.push((40 + (t / e) * 25 + (i / e) * 25) * o)),
              h.push(255);
        const l = new Uint8Array(h);
        return a.initFromData(l, e, e, i, s), a;
      }),
      (w.createFromImage = function (t, e, i) {
        const s = new w(t, (i = i || {}));
        return (
          (s.flip = !1),
          (s.image = e),
          (s.width = e.width),
          (s.height = e.height),
          i.hasOwnProperty("wrap") && (s.wrap = i.wrap),
          s.initTexture(e, i.filter),
          s
        );
      }),
      (w.fromImage = function (t, e, i, s) {
        console.error("deprecated texture from image...");
        const r = new w(t);
        return (
          (r.flip = !1),
          i && (r.filter = i),
          s && (r.wrap = s),
          (r.image = e),
          r.initTexture(e),
          r
        );
      }),
      (w.isPowerOfTwo = function (t) {
        return (
          1 == t ||
          2 == t ||
          4 == t ||
          8 == t ||
          16 == t ||
          32 == t ||
          64 == t ||
          128 == t ||
          256 == t ||
          512 == t ||
          1024 == t ||
          2048 == t ||
          4096 == t ||
          8192 == t ||
          16384 == t
        );
      }),
      (w.getTexInfo = function (t) {
        const e = {};
        (e.name = t.name),
          (e["power of two"] = t.isPowerOfTwo()),
          (e.size = t.width + " x " + t.height);
        let i = t.texTarget;
        return (
          t.texTarget == t._cgl.gl.TEXTURE_2D && (i = "TEXTURE_2D"),
          (e.target = i),
          (e.unpackAlpha = t.unpackAlpha),
          t.cubemap && (e.cubemap = !0),
          t.textureType == w.TYPE_FLOAT && (e.textureType = "TYPE_FLOAT"),
          t.textureType == w.TYPE_HALF_FLOAT
            ? (e.textureType = "TYPE_HALF_FLOAT")
            : t.textureType == w.TYPE_DEPTH
              ? (e.textureType = "TYPE_DEPTH")
              : t.textureType == w.TYPE_DEFAULT
                ? (e.textureType = "TYPE_DEFAULT")
                : (e.textureType = "UNKNOWN " + this.textureType),
          t.wrap == w.WRAP_CLAMP_TO_EDGE
            ? (e.wrap = "CLAMP_TO_EDGE")
            : t.wrap == w.WRAP_REPEAT
              ? (e.wrap = "WRAP_REPEAT")
              : t.wrap == w.WRAP_MIRRORED_REPEAT
                ? (e.wrap = "WRAP_MIRRORED_REPEAT")
                : (e.wrap = "UNKNOWN"),
          t.filter == w.FILTER_NEAREST
            ? (e.filter = "FILTER_NEAREST")
            : t.filter == w.FILTER_LINEAR
              ? (e.filter = "FILTER_LINEAR")
              : t.filter == w.FILTER_MIPMAP
                ? (e.filter = "FILTER_MIPMAP")
                : (e.filter = "UNKNOWN"),
          (e.pixelFormat = t.pixelFormat || "unknown"),
          e
        );
      }),
      (w.FILTER_NEAREST = 0),
      (w.FILTER_LINEAR = 1),
      (w.FILTER_MIPMAP = 2),
      (w.WRAP_REPEAT = 0),
      (w.WRAP_MIRRORED_REPEAT = 1),
      (w.WRAP_CLAMP_TO_EDGE = 2),
      (w.TYPE_DEFAULT = 0),
      (w.TYPE_DEPTH = 1),
      (w.TYPE_FLOAT = 2),
      (w.PFORMATSTR_RGB565 = "RGB 5/6/5bit ubyte"),
      (w.PFORMATSTR_R8UB = "R 8bit ubyte"),
      (w.PFORMATSTR_RG8UB = "RG 8bit ubyte"),
      (w.PFORMATSTR_RGB8UB = "RGB 8bit ubyte"),
      (w.PFORMATSTR_RGBA8UB = "RGBA 8bit ubyte"),
      (w.PFORMATSTR_R11FG11FB10F = "RGB 11/11/10bit float"),
      (w.PFORMATSTR_R16F = "R 16bit float"),
      (w.PFORMATSTR_RG16F = "RG 16bit float"),
      (w.PFORMATSTR_RGB16F = "RGB 16bit float"),
      (w.PFORMATSTR_RGBA16F = "RGBA 16bit float"),
      (w.PFORMATSTR_R32F = "R 32bit float"),
      (w.PFORMATSTR_RGBA32F = "RGBA 32bit float"),
      (w.PFORMATSTR_DEPTH = "DEPTH"),
      (w.PIXELFORMATS = [
        w.PFORMATSTR_RGB565,
        w.PFORMATSTR_R8UB,
        w.PFORMATSTR_RG8UB,
        w.PFORMATSTR_RGB8UB,
        w.PFORMATSTR_RGBA8UB,
        w.PFORMATSTR_R11FG11FB10F,
        w.PFORMATSTR_R16F,
        w.PFORMATSTR_RG16F,
        w.PFORMATSTR_RGBA16F,
        w.PFORMATSTR_R32F,
        w.PFORMATSTR_RGBA32F,
      ]),
      (w.isPixelFormatFloat = (t) => (t || "").indexOf("float") > -1),
      (w.isPixelFormatHalfFloat = (t) =>
        (t || "").indexOf("float") > -1 && (t || "").indexOf("16bit") > -1);
    const M = function (t, e, i, s) {
      if (1 == t.glVersion) return console.log("framebuffer2 used on webgl1");
      (this._log = new r("cgl_framebuffer2")),
        (this.Framebuffer2DrawTargetsDefault = null),
        (this.Framebuffer2BlittingFramebuffer = null),
        (this.Framebuffer2FinalFramebuffer = null),
        (this._cgl = t),
        this._cgl.printError("before framebuffer2 constructor"),
        (this._width = 0),
        (this._height = 0),
        (this.valid = !0),
        (this._depthRenderbuffer = null),
        (this._frameBuffer = null),
        (this._textureFrameBuffer = null),
        (this._colorRenderbuffers = []),
        (this._drawTargetArray = []),
        (this._disposed = !1),
        this.Framebuffer2BlittingFramebuffer ||
          (this.Framebuffer2BlittingFramebuffer = t.gl.createFramebuffer()),
        this.Framebuffer2FinalFramebuffer ||
          (this.Framebuffer2FinalFramebuffer = t.gl.createFramebuffer()),
        this.Framebuffer2DrawTargetsDefault ||
          (this.Framebuffer2DrawTargetsDefault = [t.gl.COLOR_ATTACHMENT0]),
        (this._options = s || { isFloatingPointTexture: !1 }),
        (this.name = this._options.name || "unknown"),
        this._cgl.profileData.addHeavyEvent("framebuffer create", this.name),
        this._options.hasOwnProperty("numRenderBuffers") ||
          (this._options.numRenderBuffers = 1),
        this._options.hasOwnProperty("depth") || (this._options.depth = !0),
        this._options.hasOwnProperty("clear") || (this._options.clear = !0),
        this._options.hasOwnProperty("multisampling") ||
          ((this._options.multisampling = !1),
          (this._options.multisamplingSamples = 0)),
        this._options.multisamplingSamples &&
          (this._cgl.glSlowRenderer && (this._options.multisamplingSamples = 0),
          this._cgl.gl.MAX_SAMPLES
            ? (this._options.multisamplingSamples = Math.min(
                this._cgl.maxSamples,
                this._options.multisamplingSamples,
              ))
            : (this._options.multisamplingSamples = 0)),
        this._options.hasOwnProperty("filter") ||
          (this._options.filter = w.FILTER_LINEAR),
        this._options.hasOwnProperty("wrap") ||
          (this._options.wrap = w.WRAP_REPEAT),
        (this._numRenderBuffers = this._options.numRenderBuffers),
        (this._colorTextures = []),
        s.pixelFormat ||
          (s.isFloatingPointTexture
            ? (this._options.pixelFormat = w.PFORMATSTR_RGBA32F)
            : (this._options.pixelFormat = w.PFORMATSTR_RGBA8UB));
      for (let e = 0; e < this._numRenderBuffers; e++)
        this._colorTextures[e] = new w(t, {
          name: "fb2 " + this.name + " " + e,
          isFloatingPointTexture: this._options.isFloatingPointTexture,
          pixelFormat: this._options.pixelFormat,
          filter: this._options.filter,
          wrap: this._options.wrap,
        });
      let n = w.FILTER_NEAREST;
      this._options.shadowMap && (n = w.FILTER_LINEAR);
      const o = 512;
      this._options.depth &&
        (this._textureDepth = new w(t, {
          name: "fb2 depth " + this.name,
          isDepthTexture: !0,
          filter: n,
          shadowMap: this._options.shadowMap || !1,
          width: e || o,
          height: i || o,
        })),
        t.aborted ||
          (this.setSize(e || o, i || o),
          this._cgl.printError("framebuffer2 constructor"));
    };
    (M.prototype.getWidth = function () {
      return this._width;
    }),
      (M.prototype.getHeight = function () {
        return this._height;
      }),
      (M.prototype.getGlFrameBuffer = function () {
        return this._frameBuffer;
      }),
      (M.prototype.getDepthRenderBuffer = function () {
        return this._depthRenderbuffer;
      }),
      (M.prototype.getTextureColor = function () {
        return this._colorTextures[0];
      }),
      (M.prototype.getTextureColorNum = function (t) {
        return this._colorTextures[t];
      }),
      (M.prototype.getTextureDepth = function () {
        return this._textureDepth;
      }),
      (M.prototype.setFilter = function (t) {
        for (let e = 0; e < this._numRenderBuffers; e++)
          (this._colorTextures[e].filter = t),
            this._colorTextures[e].setSize(this._width, this._height);
      }),
      (M.prototype.delete = M.prototype.dispose =
        function () {
          this._disposed = !0;
          let t = 0;
          for (t = 0; t < this._numRenderBuffers; t++)
            this._colorTextures[t].delete();
          for (
            this._textureDepth && this._textureDepth.delete(), t = 0;
            t < this._numRenderBuffers;
            t++
          )
            this._cgl.gl.deleteRenderbuffer(this._colorRenderbuffers[t]);
          this._cgl.gl.deleteRenderbuffer(this._depthRenderbuffer),
            this._cgl.gl.deleteFramebuffer(this._frameBuffer),
            this._cgl.gl.deleteFramebuffer(this._textureFrameBuffer);
        }),
      (M.prototype.setSize = function (t, e) {
        if (this._disposed)
          return this._log.warn("disposed framebuffer setsize...");
        this._cgl.profileData.addHeavyEvent("framebuffer resize", this.name);
        let i = 0;
        if (
          ((this._width = Math.floor(t)),
          (this._height = Math.floor(e)),
          (this._width = Math.min(this._width, this._cgl.maxTexSize)),
          (this._height = Math.min(this._height, this._cgl.maxTexSize)),
          this._cgl.profileData.profileFrameBuffercreate++,
          this._frameBuffer)
        ) {
          for (i = 0; i < this._numRenderBuffers; i++)
            this._cgl.gl.deleteRenderbuffer(this._colorRenderbuffers[i]);
          this._cgl.gl.deleteRenderbuffer(this._depthRenderbuffer),
            this._cgl.gl.deleteFramebuffer(this._frameBuffer),
            this._cgl.gl.deleteFramebuffer(this._textureFrameBuffer);
        }
        (this._frameBuffer = this._cgl.gl.createFramebuffer()),
          (this._textureFrameBuffer = this._cgl.gl.createFramebuffer());
        const s = this._options.depth;
        for (i = 0; i < this._numRenderBuffers; i++)
          this._colorTextures[i].setSize(this._width, this._height);
        for (i = 0; i < this._numRenderBuffers; i++) {
          const t = this._cgl.gl.createRenderbuffer();
          this._cgl.gl.bindFramebuffer(
            this._cgl.gl.FRAMEBUFFER,
            this._frameBuffer,
          ),
            this._cgl.gl.bindRenderbuffer(this._cgl.gl.RENDERBUFFER, t);
          const e = w.setUpGlPixelFormat(this._cgl, this._options.pixelFormat);
          let s = e.glInternalFormat;
          CGL.Texture.isPixelFormatHalfFloat(e.pixelFormat)
            ? (this._cgl.enableExtension("EXT_color_buffer_half_float"),
              this._cgl.enableExtension("OES_texture_float_linear") ||
                ((this._options.filter = w.FILTER_NEAREST),
                this.setFilter(this._options.filter)))
            : CGL.Texture.isPixelFormatFloat(e.pixelFormat) &&
              (this._cgl.enableExtension("OES_texture_float_linear") ||
                (console.log("no linear pixelformat,using nearest"),
                (this._options.filter = w.FILTER_NEAREST),
                this.setFilter(this._options.filter))),
            this._options.multisampling && this._options.multisamplingSamples
              ? this._cgl.gl.renderbufferStorageMultisample(
                  this._cgl.gl.RENDERBUFFER,
                  this._options.multisamplingSamples,
                  s,
                  this._width,
                  this._height,
                )
              : this._cgl.gl.renderbufferStorage(
                  this._cgl.gl.RENDERBUFFER,
                  s,
                  this._width,
                  this._height,
                ),
            this._cgl.gl.framebufferRenderbuffer(
              this._cgl.gl.FRAMEBUFFER,
              this._cgl.gl.COLOR_ATTACHMENT0 + i,
              this._cgl.gl.RENDERBUFFER,
              t,
            ),
            (this._colorRenderbuffers[i] = t);
        }
        for (
          this._cgl.gl.bindFramebuffer(
            this._cgl.gl.FRAMEBUFFER,
            this._textureFrameBuffer,
          ),
            i = 0;
          i < this._numRenderBuffers;
          i++
        )
          this._cgl.gl.framebufferTexture2D(
            this._cgl.gl.FRAMEBUFFER,
            this._cgl.gl.COLOR_ATTACHMENT0 + i,
            this._cgl.gl.TEXTURE_2D,
            this._colorTextures[i].tex,
            0,
          );
        this._options.depth &&
          this._cgl.gl.framebufferTexture2D(
            this._cgl.gl.FRAMEBUFFER,
            this._cgl.gl.DEPTH_ATTACHMENT,
            this._cgl.gl.TEXTURE_2D,
            this._textureDepth.tex,
            0,
          ),
          this._cgl.gl.bindFramebuffer(
            this._cgl.gl.FRAMEBUFFER,
            this._frameBuffer,
          );
        let r = this._cgl.gl.DEPTH_COMPONENT32F;
        for (
          this._cgl.glSlowRenderer && (r = this._cgl.gl.DEPTH_COMPONENT16),
            s &&
              (this._textureDepth.setSize(this._width, this._height),
              (this._depthRenderbuffer = this._cgl.gl.createRenderbuffer()),
              this._cgl.gl.bindRenderbuffer(
                this._cgl.gl.RENDERBUFFER,
                this._depthRenderbuffer,
              ),
              this._options.isFloatingPointTexture,
              this._options.multisampling
                ? this._cgl.gl.renderbufferStorageMultisample(
                    this._cgl.gl.RENDERBUFFER,
                    this._options.multisamplingSamples,
                    r,
                    this._width,
                    this._height,
                  )
                : this._cgl.gl.renderbufferStorage(
                    this._cgl.gl.RENDERBUFFER,
                    r,
                    this._width,
                    this._height,
                  ),
              this._cgl.gl.framebufferRenderbuffer(
                this._cgl.gl.FRAMEBUFFER,
                this._cgl.gl.DEPTH_ATTACHMENT,
                this._cgl.gl.RENDERBUFFER,
                this._depthRenderbuffer,
              )),
            this._drawTargetArray.length = 0,
            i = 0;
          i < this._numRenderBuffers;
          i++
        )
          this._drawTargetArray.push(this._cgl.gl.COLOR_ATTACHMENT0 + i);
        this._cgl.gl.isFramebuffer(this._textureFrameBuffer) ||
          this._log.warn("invalid framebuffer");
        const n = this._cgl.gl.checkFramebufferStatus(this._cgl.gl.FRAMEBUFFER);
        if (n != this._cgl.gl.FRAMEBUFFER_COMPLETE)
          switch (
            (this._log.error("framebuffer incomplete: " + this.name, this), n)
          ) {
            case this._cgl.gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:
              throw (
                (this._log.warn("FRAMEBUFFER_INCOMPLETE_ATTACHMENT...", this),
                new Error(
                  "Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_ATTACHMENT",
                ))
              );
            case this._cgl.gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:
              throw (
                (this._log.warn("FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT"),
                new Error(
                  "Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT",
                ))
              );
            case this._cgl.gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:
              throw (
                (this._log.warn("FRAMEBUFFER_INCOMPLETE_DIMENSIONS"),
                new Error(
                  "Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_DIMENSIONS",
                ))
              );
            case this._cgl.gl.FRAMEBUFFER_UNSUPPORTED:
              throw (
                (this._log.warn("FRAMEBUFFER_UNSUPPORTED"),
                new Error("Incomplete framebuffer: FRAMEBUFFER_UNSUPPORTED"))
              );
            default:
              throw (
                ((this.valid = !1),
                this._log.warn("incomplete framebuffer", n, this._frameBuffer),
                this._cgl.printError(),
                this._cgl.exitError("Framebuffer incomplete..."),
                (this._frameBuffer = null),
                new Error("Incomplete framebuffer: " + n))
              );
          }
        this._cgl.gl.bindFramebuffer(this._cgl.gl.FRAMEBUFFER, null),
          this._cgl.gl.bindRenderbuffer(this._cgl.gl.RENDERBUFFER, null);
      }),
      (M.prototype.renderStart = function () {
        if (this._disposed)
          return this._log.warn("disposed framebuffer renderStart...");
        this._cgl.checkFrameStarted("fb2 renderstart"),
          this._cgl.pushModelMatrix(),
          this._cgl.gl.bindFramebuffer(
            this._cgl.gl.FRAMEBUFFER,
            this._frameBuffer,
          ),
          this._cgl.pushGlFrameBuffer(this._frameBuffer),
          this._cgl.pushFrameBuffer(this),
          this._cgl.pushPMatrix(),
          this._cgl.pushViewPort(0, 0, this._width, this._height),
          this._cgl.gl.drawBuffers(this._drawTargetArray),
          this._options.clear &&
            (this._cgl.gl.clearColor(0, 0, 0, 0),
            this._cgl.gl.clear(
              this._cgl.gl.COLOR_BUFFER_BIT | this._cgl.gl.DEPTH_BUFFER_BIT,
            ));
      }),
      (M.prototype.clear = function () {
        this._numRenderBuffers <= 1
          ? (this._cgl.gl.bindFramebuffer(
              this._cgl.gl.READ_FRAMEBUFFER,
              this._frameBuffer,
            ),
            this._cgl.gl.bindFramebuffer(
              this._cgl.gl.DRAW_FRAMEBUFFER,
              this._textureFrameBuffer,
            ))
          : this._cgl.gl.bindFramebuffer(
              this._cgl.gl.FRAMEBUFFER,
              this._frameBuffer,
            ),
          this._cgl.gl.drawBuffers(this._drawTargetArray);
        for (let t = 0; t < this._numRenderBuffers; t++)
          this._cgl.gl.framebufferTexture2D(
            this._cgl.gl.FRAMEBUFFER,
            this._cgl.gl.COLOR_ATTACHMENT0 + t,
            this._cgl.gl.TEXTURE_2D,
            this._colorTextures[t].tex,
            0,
          ),
            this._cgl.gl.clearBufferfv(this._cgl.gl.COLOR, t, [0, 0, 0, 0]);
        this._cgl.gl.bindFramebuffer(this._cgl.gl.FRAMEBUFFER, null);
      }),
      (M.prototype.renderEnd = function () {
        if (this._disposed)
          return this._log.warn("disposed framebuffer renderEnd...");
        if (
          (this._cgl.popPMatrix(),
          this._cgl.profileData.profileFramebuffer++,
          this._numRenderBuffers <= 1)
        )
          this._cgl.gl.bindFramebuffer(
            this._cgl.gl.READ_FRAMEBUFFER,
            this._frameBuffer,
          ),
            this._cgl.gl.bindFramebuffer(
              this._cgl.gl.DRAW_FRAMEBUFFER,
              this._textureFrameBuffer,
            ),
            this._cgl.gl.clearBufferfv(this._cgl.gl.COLOR, 0, [0, 0, 0, 1]),
            this._cgl.gl.blitFramebuffer(
              0,
              0,
              this._width,
              this._height,
              0,
              0,
              this._width,
              this._height,
              this._cgl.gl.COLOR_BUFFER_BIT | this._cgl.gl.DEPTH_BUFFER_BIT,
              this._cgl.gl.NEAREST,
            );
        else {
          this._cgl.gl.bindFramebuffer(
            this._cgl.gl.FRAMEBUFFER,
            this.Framebuffer2BlittingFramebuffer,
          ),
            this._cgl.gl.framebufferRenderbuffer(
              this._cgl.gl.FRAMEBUFFER,
              this._cgl.gl.DEPTH_ATTACHMENT,
              this._cgl.gl.RENDERBUFFER,
              this._depthRenderbuffer,
            ),
            this._cgl.gl.bindFramebuffer(
              this._cgl.gl.FRAMEBUFFER,
              this.Framebuffer2FinalFramebuffer,
            ),
            this._cgl.gl.framebufferTexture2D(
              this._cgl.gl.FRAMEBUFFER,
              this._cgl.gl.DEPTH_ATTACHMENT,
              this._cgl.gl.TEXTURE_2D,
              this._textureDepth.tex,
              0,
            );
          for (let t = 0; t < this._numRenderBuffers; t++) {
            this._cgl.gl.bindFramebuffer(
              this._cgl.gl.FRAMEBUFFER,
              this.Framebuffer2BlittingFramebuffer,
            ),
              this._cgl.gl.framebufferRenderbuffer(
                this._cgl.gl.FRAMEBUFFER,
                this._cgl.gl.COLOR_ATTACHMENT0,
                this._cgl.gl.RENDERBUFFER,
                this._colorRenderbuffers[t],
              ),
              this._cgl.gl.bindFramebuffer(
                this._cgl.gl.FRAMEBUFFER,
                this.Framebuffer2FinalFramebuffer,
              ),
              this._cgl.gl.framebufferTexture2D(
                this._cgl.gl.FRAMEBUFFER,
                this._cgl.gl.COLOR_ATTACHMENT0,
                this._cgl.gl.TEXTURE_2D,
                this._colorTextures[t].tex,
                0,
              ),
              this._cgl.gl.bindFramebuffer(this._cgl.gl.FRAMEBUFFER, null),
              this._cgl.gl.bindFramebuffer(
                this._cgl.gl.READ_FRAMEBUFFER,
                this.Framebuffer2BlittingFramebuffer,
              ),
              this._cgl.gl.bindFramebuffer(
                this._cgl.gl.DRAW_FRAMEBUFFER,
                this.Framebuffer2FinalFramebuffer,
              );
            let e = this._cgl.gl.COLOR_BUFFER_BIT;
            0 == t && (e |= this._cgl.gl.DEPTH_BUFFER_BIT),
              this._cgl.gl.blitFramebuffer(
                0,
                0,
                this._width,
                this._height,
                0,
                0,
                this._width,
                this._height,
                e,
                this._cgl.gl.NEAREST,
              );
          }
        }
        if (
          (this._cgl.gl.bindFramebuffer(
            this._cgl.gl.FRAMEBUFFER,
            this._cgl.popGlFrameBuffer(),
          ),
          this._cgl.popFrameBuffer(),
          this._cgl.popModelMatrix(),
          this._cgl.popViewPort(),
          this._colorTextures[0].filter == w.FILTER_MIPMAP)
        )
          for (let t = 0; t < this._numRenderBuffers; t++)
            this._cgl.gl.bindTexture(
              this._cgl.gl.TEXTURE_2D,
              this._colorTextures[t].tex,
            ),
              this._colorTextures[t].updateMipMap(),
              this._cgl.gl.bindTexture(this._cgl.gl.TEXTURE_2D, null);
      });
    const U =
        "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
      B = new Uint8Array(256);
    for (let t = 0; t < U.length; t++) B[U.charCodeAt(t)] = t;
    const L = B,
      k = function (t) {
        t.buffer && (t = t.buffer);
        let e,
          i = new Uint8Array(t),
          s = i.length,
          r = "";
        for (e = 0; e < s; e += 3)
          (r += U[i[e] >> 2]),
            (r += U[((3 & i[e]) << 4) | (i[e + 1] >> 4)]),
            (r += U[((15 & i[e + 1]) << 2) | (i[e + 2] >> 6)]),
            (r += U[63 & i[e + 2]]);
        return (
          s % 3 == 2
            ? (r = r.substring(0, r.length - 1) + "=")
            : s % 3 == 1 && (r = r.substring(0, r.length - 2) + "=="),
          r
        );
      },
      D = function (t) {
        let e,
          i,
          s,
          r,
          n,
          o = 0.75 * t.length,
          a = t.length,
          h = 0;
        "=" === t[t.length - 1] && (o--, "=" === t[t.length - 2] && o--);
        let l = new ArrayBuffer(o),
          c = new Uint8Array(l);
        for (e = 0; e < a; e += 4)
          (i = L[t.charCodeAt(e)]),
            (s = L[t.charCodeAt(e + 1)]),
            (r = L[t.charCodeAt(e + 2)]),
            (n = L[t.charCodeAt(e + 3)]),
            (c[h++] = (i << 2) | (s >> 4)),
            (c[h++] = ((15 & s) << 4) | (r >> 2)),
            (c[h++] = ((3 & r) << 6) | (63 & n));
        return l;
      };
    class V {
      constructor(t) {
        this._init(),
          (this._first = !0),
          (this._wireMesh = null),
          t && this.apply(t);
      }
      _init() {
        (this._max = [-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE]),
          (this._min = [Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE]),
          (this._center = [0, 0, 0]),
          (this._size = [0, 0, 0]),
          (this._maxAxis = 0),
          (this._first = !0);
      }
      get maxAxis() {
        return this._maxAxis || 1;
      }
      get size() {
        return this._size;
      }
      get center() {
        return this._center;
      }
      get x() {
        return this._center[0];
      }
      get y() {
        return this._center[1];
      }
      get z() {
        return this._center[2];
      }
      get minX() {
        return this._min[0];
      }
      get minY() {
        return this._min[1];
      }
      get minZ() {
        return this._min[2];
      }
      get maxX() {
        return this._max[0];
      }
      get maxY() {
        return this._max[1];
      }
      get maxZ() {
        return this._max[2];
      }
      apply(t, e) {
        if (t) {
          if (t instanceof V) {
            const e = t;
            this.applyPos(e.maxX, e.maxY, e.maxZ),
              this.applyPos(e.minX, e.minY, e.minZ);
          } else
            for (let e = 0; e < t.vertices.length; e += 3)
              this.applyPos(
                t.vertices[e],
                t.vertices[e + 1],
                t.vertices[e + 2],
              );
          this.calcCenterSize();
        }
      }
      copy() {
        return new V(this);
      }
      get changed() {
        return !(
          this._max[0] == -Number.MAX_VALUE &&
          this._max[1] == -Number.MAX_VALUE &&
          this._max[2] == -Number.MAX_VALUE
        );
      }
      applyPos(t, e, i) {
        if (
          t != Number.MAX_VALUE &&
          t != -Number.MAX_VALUE &&
          e != Number.MAX_VALUE &&
          e != -Number.MAX_VALUE &&
          i != Number.MAX_VALUE &&
          i != -Number.MAX_VALUE &&
          CABLES.UTILS.isNumeric(t) &&
          CABLES.UTILS.isNumeric(e) &&
          CABLES.UTILS.isNumeric(i)
        ) {
          if (this._first)
            return (
              (this._max[0] = t),
              (this._max[1] = e),
              (this._max[2] = i),
              (this._min[0] = t),
              (this._min[1] = e),
              (this._min[2] = i),
              void (this._first = !1)
            );
          (this._max[0] = Math.max(this._max[0], t)),
            (this._max[1] = Math.max(this._max[1], e)),
            (this._max[2] = Math.max(this._max[2], i)),
            (this._min[0] = Math.min(this._min[0], t)),
            (this._min[1] = Math.min(this._min[1], e)),
            (this._min[2] = Math.min(this._min[2], i));
        }
      }
      calcCenterSize() {
        this._first ||
          ((this._size[0] = this._max[0] - this._min[0]),
          (this._size[1] = this._max[1] - this._min[1]),
          (this._size[2] = this._max[2] - this._min[2]),
          (this._center[0] = (this._min[0] + this._max[0]) / 2),
          (this._center[1] = (this._min[1] + this._max[1]) / 2),
          (this._center[2] = (this._min[2] + this._max[2]) / 2),
          (this._maxAxis = Math.max(
            this._size[2],
            Math.max(this._size[0], this._size[1]),
          )));
      }
      mulMat4(t) {
        this._first &&
          ((this._max[0] = 0),
          (this._max[1] = 0),
          (this._max[2] = 0),
          (this._min[0] = 0),
          (this._min[1] = 0),
          (this._min[2] = 0),
          (this._first = !1)),
          vec3.transformMat4(this._max, this._max, t),
          vec3.transformMat4(this._min, this._min, t),
          this.calcCenterSize();
      }
      render(t, e) {
        this._wireMesh || (this._wireMesh = new CGL.WireCube(t)),
          t.pushModelMatrix(),
          mat4.translate(t.mMatrix, t.mMatrix, this._center),
          this._wireMesh.render(
            t,
            this._size[0] / 2,
            this._size[1] / 2,
            this._size[2] / 2,
          ),
          t.popModelMatrix();
      }
    }
    const G = function (t) {
      (this.name = t || "unknown"),
        (this._log = new r("cgl_geometry")),
        (this.faceVertCount = 3),
        (this.glPrimitive = null),
        (this._attributes = {}),
        (this._vertices = []),
        (this.verticesIndices = []),
        (this.isGeometry = !0),
        (this.morphTargets = []),
        Object.defineProperty(this, "vertices", {
          get() {
            return this._vertices;
          },
          set(t) {
            this.setVertices(t);
          },
        }),
        Object.defineProperty(this, "texCoords", {
          get() {
            const t = this.getAttribute("texCoords");
            return t ? t.data : [];
          },
          set(t) {
            this.setAttribute("texCoords", t, 2);
          },
        }),
        Object.defineProperty(this, "vertexNormals", {
          get() {
            const t = this.getAttribute("vertexNormals");
            return t ? t.data : [];
          },
          set(t) {
            this.setAttribute("vertexNormals", t, 3);
          },
        }),
        Object.defineProperty(this, "tangents", {
          get() {
            const t = this.getAttribute("tangents");
            return t ? t.data : [];
          },
          set(t) {
            this.setAttribute("tangents", t, 3);
          },
        }),
        Object.defineProperty(this, "biTangents", {
          get() {
            const t = this.getAttribute("biTangents");
            return t ? t.data : [];
          },
          set(t) {
            this.setAttribute("biTangents", t, 3);
          },
        }),
        Object.defineProperty(this, "vertexColors", {
          get() {
            const t = this.getAttribute("vertexColors");
            return t ? t.data : [];
          },
          set(t) {
            this.setAttribute("vertexColors", t, 4);
          },
        });
    };
    (G.prototype.clear = function () {
      (this._vertices = new Float32Array([])),
        (this.verticesIndices = []),
        (this.texCoords = new Float32Array([])),
        (this.vertexNormals = new Float32Array([])),
        (this.tangents = []),
        (this.biTangents = []),
        (this._attributes = {});
    }),
      (G.prototype.getAttributes = function () {
        return this._attributes;
      }),
      (G.prototype.getAttribute = function (t) {
        for (const e in this._attributes)
          if (this._attributes[e].name == t) return this._attributes[e];
        return null;
      }),
      (G.prototype.setAttribute = function (t, e, i) {
        let s = "";
        (!i || i > 4) &&
          (console.log("itemsize wrong?", i, t),
          this._log.stack("itemsize"),
          (i = 3)),
          1 == i
            ? (s = "float")
            : 2 == i
              ? (s = "vec2")
              : 3 == i
                ? (s = "vec3")
                : 4 == i && (s = "vec4");
        const r = { name: t, data: e, itemSize: i, type: s };
        this._attributes[t] = r;
      }),
      (G.prototype.copyAttribute = function (t, e) {
        const i = this.getAttribute(t);
        e.setAttribute(t, new Float32Array(i.data), i.itemSize);
      }),
      (G.prototype.setVertices = function (t) {
        t instanceof Float32Array
          ? (this._vertices = t)
          : (this._vertices = new Float32Array(t));
      }),
      (G.prototype.setTexCoords = function (t) {
        t instanceof Float32Array
          ? (this.texCoords = t)
          : (this.texCoords = new Float32Array(t));
      }),
      (G.prototype.calcNormals = function (t) {
        const e = { smooth: t };
        this.calculateNormals(e);
      }),
      (G.prototype.flipNormals = function (t, e, i) {
        let s = vec3.create();
        null == t && (t = 1), null == e && (e = 1), null == i && (i = 1);
        for (let r = 0; r < this.vertexNormals.length; r += 3)
          vec3.set(
            s,
            this.vertexNormals[r + 0],
            this.vertexNormals[r + 1],
            this.vertexNormals[r + 2],
          ),
            (s[0] *= -t),
            (s[1] *= -e),
            (s[2] *= -i),
            vec3.normalize(s, s),
            (this.vertexNormals[r + 0] = s[0]),
            (this.vertexNormals[r + 1] = s[1]),
            (this.vertexNormals[r + 2] = s[2]);
      }),
      (G.prototype.getNumTriangles = function () {
        return this.verticesIndices && this.verticesIndices.length
          ? this.verticesIndices.length / 3
          : this.vertices.length / 3;
      }),
      (G.prototype.flipVertDir = function () {
        const t = [];
        t.length = this.verticesIndices.length;
        for (let e = 0; e < this.verticesIndices.length; e += 3)
          (t[e] = this.verticesIndices[e + 2]),
            (t[e + 1] = this.verticesIndices[e + 1]),
            (t[e + 2] = this.verticesIndices[e]);
        this.verticesIndices = t;
      }),
      (G.prototype.setPointVertices = function (t) {
        if (t.length % 3 == 0) {
          t instanceof Float32Array
            ? (this.vertices = t)
            : (this.vertices = new Float32Array(t)),
            this.texCoords instanceof Float32Array ||
              (this.texCoords = new Float32Array((t.length / 3) * 2)),
            (this.verticesIndices.length = t.length / 3);
          for (let e = 0; e < t.length / 3; e++)
            (this.verticesIndices[e] = e),
              (this.texCoords[2 * e] = 0),
              (this.texCoords[2 * e + 1] = 0);
        } else
          this._log.error("SetPointVertices: Array must be multiple of three.");
      }),
      (G.prototype.merge = function (t) {
        if (!t) return;
        if (
          this.isIndexed() != t.isIndexed() &&
          (this.isIndexed() && this.unIndex(!1, !0), t.isIndexed())
        ) {
          const e = t.copy();
          e.unIndex(!1, !0), (t = e);
        }
        const e = this.verticesIndices.length,
          i = this._vertices.length / 3;
        this.verticesIndices.length =
          this.verticesIndices.length + t.verticesIndices.length;
        for (let s = 0; s < t.verticesIndices.length; s++)
          this.verticesIndices[e + s] = t.verticesIndices[s] + i;
        (this.vertices = l.float32Concat(this._vertices, t.vertices)),
          (this.texCoords = l.float32Concat(this.texCoords, t.texCoords)),
          (this.vertexNormals = l.float32Concat(
            this.vertexNormals,
            t.vertexNormals,
          )),
          (this.tangents = l.float32Concat(this.tangents, t.tangents)),
          (this.biTangents = l.float32Concat(this.biTangents, t.biTangents));
      }),
      (G.prototype.copy = function () {
        const t = new G(this.name + " copy");
        if (
          ((t.faceVertCount = this.faceVertCount),
          (t.glPrimitive = this.glPrimitive),
          t.setVertices(this._vertices.slice(0)),
          this.verticesIndices)
        ) {
          t.verticesIndices.length = this.verticesIndices.length;
          for (let e = 0; e < this.verticesIndices.length; e++)
            t.verticesIndices[e] = this.verticesIndices[e];
        }
        for (let e in this._attributes) this.copyAttribute(e, t);
        t.morphTargets.length = this.morphTargets.length;
        for (let e = 0; e < this.morphTargets.length; e++)
          t.morphTargets[e] = this.morphTargets[e];
        return t;
      }),
      (G.prototype.calculateNormals = function (t) {
        !1 === (t = t || {}).smooth && this.unIndex();
        const e = vec3.create(),
          i = vec3.create(),
          s = vec3.create();
        function r(r) {
          return (
            vec3.subtract(e, r[0], r[1]),
            vec3.subtract(i, r[0], r[2]),
            vec3.cross(s, e, i),
            vec3.normalize(s, s),
            t &&
              t.forceZUp &&
              s[2] < 0 &&
              ((s[0] *= -1), (s[1] *= -1), (s[2] *= -1)),
            s
          );
        }
        (this.getVertexVec = function (t) {
          const e = [0, 0, 0];
          return (
            (e[0] = this.vertices[3 * t + 0]),
            (e[1] = this.vertices[3 * t + 1]),
            (e[2] = this.vertices[3 * t + 2]),
            e
          );
        }),
          (this.vertexNormals instanceof Float32Array &&
            this.vertexNormals.length == this.vertices.length) ||
            (this.vertexNormals = new Float32Array(this.vertices.length));
        for (let t = 0; t < this.vertices.length; t++)
          this.vertexNormals[t] = 0;
        if (this.isIndexed()) {
          const t = [];
          t.length = Math.floor(this.verticesIndices.length / 3);
          for (let e = 0; e < this.verticesIndices.length; e += 3) {
            const i = [
              this.getVertexVec(this.verticesIndices[e + 0]),
              this.getVertexVec(this.verticesIndices[e + 1]),
              this.getVertexVec(this.verticesIndices[e + 2]),
            ];
            (t[e / 3] = r(i)),
              (this.vertexNormals[3 * this.verticesIndices[e + 0] + 0] +=
                t[e / 3][0]),
              (this.vertexNormals[3 * this.verticesIndices[e + 0] + 1] +=
                t[e / 3][1]),
              (this.vertexNormals[3 * this.verticesIndices[e + 0] + 2] +=
                t[e / 3][2]),
              (this.vertexNormals[3 * this.verticesIndices[e + 1] + 0] +=
                t[e / 3][0]),
              (this.vertexNormals[3 * this.verticesIndices[e + 1] + 1] +=
                t[e / 3][1]),
              (this.vertexNormals[3 * this.verticesIndices[e + 1] + 2] +=
                t[e / 3][2]),
              (this.vertexNormals[3 * this.verticesIndices[e + 2] + 0] +=
                t[e / 3][0]),
              (this.vertexNormals[3 * this.verticesIndices[e + 2] + 1] +=
                t[e / 3][1]),
              (this.vertexNormals[3 * this.verticesIndices[e + 2] + 2] +=
                t[e / 3][2]);
          }
          for (let t = 0; t < this.verticesIndices.length; t += 3)
            for (let e = 0; e < 3; e++) {
              const i = [
                this.vertexNormals[3 * this.verticesIndices[t + e] + 0],
                this.vertexNormals[3 * this.verticesIndices[t + e] + 1],
                this.vertexNormals[3 * this.verticesIndices[t + e] + 2],
              ];
              vec3.normalize(i, i),
                (this.vertexNormals[3 * this.verticesIndices[t + e] + 0] =
                  i[0]),
                (this.vertexNormals[3 * this.verticesIndices[t + e] + 1] =
                  i[1]),
                (this.vertexNormals[3 * this.verticesIndices[t + e] + 2] =
                  i[2]);
            }
        } else {
          const t = [];
          for (let e = 0; e < this.vertices.length; e += 9) {
            const i = r([
              [
                this.vertices[e + 0],
                this.vertices[e + 1],
                this.vertices[e + 2],
              ],
              [
                this.vertices[e + 3],
                this.vertices[e + 4],
                this.vertices[e + 5],
              ],
              [
                this.vertices[e + 6],
                this.vertices[e + 7],
                this.vertices[e + 8],
              ],
            ]);
            t.push(i[0], i[1], i[2], i[0], i[1], i[2], i[0], i[1], i[2]);
          }
          this.vertexNormals = t;
        }
      }),
      (G.prototype.calcTangentsBitangents = function () {
        if (!this.vertices.length) return;
        if (!this.vertexNormals.length) return;
        if (!this.texCoords.length) {
          const t = (this.vertices.length / 3) * 2;
          this.texCoords = new Float32Array(t);
          for (let e = 0; e < t; e += 1) this.texCoords[e] = 0;
        }
        if (!this.verticesIndices || !this.verticesIndices.length) return;
        if (this.verticesIndices.length % 3 != 0)
          return void this._log.error("Vertex indices mismatch!");
        const t = this.verticesIndices.length / 3,
          e = this.vertices.length / 3;
        (this.tangents = new Float32Array(this.vertexNormals.length)),
          (this.biTangents = new Float32Array(this.vertexNormals.length));
        const i = [];
        i.length = 2 * e;
        const s = vec3.create(),
          r = vec3.create(),
          n = vec3.create(),
          o = vec2.create(),
          a = vec2.create(),
          h = vec2.create(),
          l = vec3.create(),
          c = vec3.create();
        for (let u = 0; u < t; u += 1) {
          const t = this.verticesIndices[3 * u],
            p = this.verticesIndices[3 * u + 1],
            _ = this.verticesIndices[3 * u + 2];
          vec3.set(
            s,
            this.vertices[3 * t],
            this.vertices[3 * t + 1],
            this.vertices[3 * t + 2],
          ),
            vec3.set(
              r,
              this.vertices[3 * p],
              this.vertices[3 * p + 1],
              this.vertices[3 * p + 2],
            ),
            vec3.set(
              n,
              this.vertices[3 * _],
              this.vertices[3 * _ + 1],
              this.vertices[3 * _ + 2],
            ),
            vec2.set(o, this.texCoords[2 * t], this.texCoords[2 * t + 1]),
            vec2.set(a, this.texCoords[2 * p], this.texCoords[2 * p + 1]),
            vec2.set(h, this.texCoords[2 * _], this.texCoords[2 * _ + 1]);
          const d = r[0] - s[0],
            g = n[0] - s[0],
            f = r[1] - s[1],
            m = n[1] - s[1],
            E = r[2] - s[2],
            T = n[2] - s[2],
            A = a[0] - o[0],
            b = h[0] - o[0],
            x = a[1] - o[1],
            v = h[1] - o[1],
            y = 1 / (A * v - b * x);
          vec3.set(
            l,
            (v * d - x * g) * y,
            (v * f - x * m) * y,
            (v * E - x * T) * y,
          ),
            vec3.set(
              c,
              (A * g - b * d) * y,
              (A * m - b * f) * y,
              (A * T - b * E) * y,
            ),
            (i[t] = l),
            (i[p] = l),
            (i[_] = l),
            (i[t + e] = c),
            (i[p + e] = c),
            (i[_ + e] = c);
        }
        const u = vec3.create(),
          p = vec3.create(),
          _ = vec3.create(),
          d = vec3.create(),
          g = vec3.create(),
          f = vec3.create(),
          m = vec3.create(),
          E = vec3.create();
        for (let t = 0; t < e; t += 1) {
          if (!i[t]) continue;
          vec3.set(
            u,
            this.vertexNormals[3 * t],
            this.vertexNormals[3 * t + 1],
            this.vertexNormals[3 * t + 2],
          ),
            vec3.set(p, i[t][0], i[t][1], i[t][2]);
          const s = vec3.dot(u, p);
          vec3.scale(g, u, s),
            vec3.subtract(f, p, g),
            vec3.normalize(E, f),
            vec3.cross(m, u, p),
            vec3.dot(m, i[t + e]);
          const r = 1;
          vec3.scale(_, E, 1 / r),
            vec3.cross(d, u, _),
            (this.tangents[3 * t + 0] = _[0]),
            (this.tangents[3 * t + 1] = _[1]),
            (this.tangents[3 * t + 2] = _[2]),
            (this.biTangents[3 * t + 0] = d[0]),
            (this.biTangents[3 * t + 1] = d[1]),
            (this.biTangents[3 * t + 2] = d[2]);
        }
      }),
      (G.prototype.isIndexed = function () {
        return 0 == this._vertices.length || 0 != this.verticesIndices.length;
      }),
      (G.prototype.unIndex = function (t, e) {
        const i = [],
          s = [];
        let r = 0;
        for (let t in this._attributes) {
          const e = this._attributes[t];
          let i = [];
          for (let t = 0; t < this.verticesIndices.length; t += 3)
            for (let s = 0; s < 3; s++)
              3 == e.itemSize
                ? i.push(
                    e.data[3 * this.verticesIndices[t + s] + 0],
                    e.data[3 * this.verticesIndices[t + s] + 1],
                    e.data[3 * this.verticesIndices[t + s] + 2],
                  )
                : 4 == e.itemSize
                  ? i.push(
                      e.data[4 * this.verticesIndices[t + s] + 0],
                      e.data[4 * this.verticesIndices[t + s] + 1],
                      e.data[4 * this.verticesIndices[t + s] + 2],
                      e.data[4 * this.verticesIndices[t + s] + 3],
                    )
                  : 2 == e.itemSize
                    ? i.push(
                        e.data[2 * this.verticesIndices[t + s] + 0],
                        e.data[2 * this.verticesIndices[t + s] + 1],
                      )
                    : 1 == e.itemSize
                      ? i.push(e.data[this.verticesIndices[t + s]])
                      : console.log("unknown attr", e);
          this.setAttribute(e.name, i, e.itemSize);
        }
        for (let t = 0; t < this.verticesIndices.length; t += 3)
          i.push(
            this.vertices[3 * this.verticesIndices[t + 0] + 0],
            this.vertices[3 * this.verticesIndices[t + 0] + 1],
            this.vertices[3 * this.verticesIndices[t + 0] + 2],
          ),
            s.push(r),
            r++,
            i.push(
              this.vertices[3 * this.verticesIndices[t + 1] + 0],
              this.vertices[3 * this.verticesIndices[t + 1] + 1],
              this.vertices[3 * this.verticesIndices[t + 1] + 2],
            ),
            s.push(r),
            r++,
            i.push(
              this.vertices[3 * this.verticesIndices[t + 2] + 0],
              this.vertices[3 * this.verticesIndices[t + 2] + 1],
              this.vertices[3 * this.verticesIndices[t + 2] + 2],
            ),
            s.push(r),
            r++;
        (this.vertices = i),
          (this.verticesIndices = []),
          t && (this.verticesIndices = s),
          e || this.calculateNormals();
      }),
      (G.prototype.calcBarycentric = function () {
        let t = [];
        t.length = this.vertices.length;
        for (let e = 0; e < this.vertices.length; e++) t[e] = 0;
        let e = 0;
        for (let i = 0; i < this.vertices.length; i += 3)
          (t[i + e] = 1), e++, 3 == e && (e = 0);
        this.setAttribute("attrBarycentric", t, 3);
      }),
      (G.prototype.getBounds = function () {
        return new V(this);
      }),
      (G.prototype.center = function (t, e, i) {
        void 0 === t && ((t = !0), (e = !0), (i = !0));
        let s = 0;
        const r = this.getBounds(),
          n = [
            r.minX + (r.maxX - r.minX) / 2,
            r.minY + (r.maxY - r.minY) / 2,
            r.minZ + (r.maxZ - r.minZ) / 2,
          ];
        for (s = 0; s < this.vertices.length; s += 3)
          this.vertices[s + 0] == this.vertices[s + 0] &&
            (t && (this.vertices[s + 0] -= n[0]),
            e && (this.vertices[s + 1] -= n[1]),
            i && (this.vertices[s + 2] -= n[2]));
        return n;
      }),
      (G.prototype.mapTexCoords2d = function () {
        const t = this.getBounds(),
          e = this.vertices.length / 3;
        this.texCoords = new Float32Array(2 * e);
        for (let i = 0; i < e; i++) {
          const e = this.vertices[3 * i + 0],
            s = this.vertices[3 * i + 1];
          (this.texCoords[2 * i + 0] = e / (t.maxX - t.minX) + 0.5),
            (this.texCoords[2 * i + 1] = 1 - s / (t.maxY - t.minY) + 0.5);
        }
      }),
      (G.prototype.getInfoOneLine = function () {
        let t = "";
        return (
          3 == this.faceVertCount && this.verticesIndices
            ? (t += this.verticesIndices.length / 3)
            : (t += 0),
          (t += " tris "),
          this.vertices ? (t += this.vertices.length / 3) : (t += 0),
          (t += " verts"),
          t
        );
      }),
      (G.prototype.getInfo = function () {
        const t = {};
        return (
          3 == this.faceVertCount && this.verticesIndices
            ? (t.numFaces = this.verticesIndices.length / 3)
            : (t.numFaces = 0),
          this.verticesIndices &&
            this.verticesIndices.length &&
            (t.indices = this.verticesIndices.length),
          this.vertices
            ? (t.numVerts = this.vertices.length / 3)
            : (t.numVerts = 0),
          this.vertexNormals
            ? (t.numNormals = this.vertexNormals.length / 3)
            : (t.numNormals = 0),
          this.texCoords
            ? (t.numTexCoords = this.texCoords.length / 2)
            : (t.numTexCoords = 0),
          this.tangents
            ? (t.numTangents = this.tangents.length / 3)
            : (t.numTangents = 0),
          this.biTangents
            ? (t.numBiTangents = this.biTangents.length / 3)
            : (t.numBiTangents = 0),
          this.biTangents
            ? (t.numBiTangents = this.biTangents.length / 3)
            : (t.numBiTangents = 0),
          this.vertexColors
            ? (t.numVertexColors = this.vertexColors.length / 4)
            : (t.numVertexColors = 0),
          this.getAttributes()
            ? (t.numAttribs = Object.keys(this.getAttributes()).length)
            : (t.numAttribs = 0),
          (t.isIndexed = this.isIndexed()),
          t
        );
      }),
      (G.buildFromFaces = function (t, e, i) {
        const s = [],
          r = [];
        for (let e = 0; e < t.length; e += 3) {
          const n = t[e + 0],
            o = t[e + 1],
            a = t[e + 2],
            h = [-1, -1, -1];
          if (i)
            for (let t = 0; t < s.length; t += 3)
              s[t + 0] == n[0] &&
                s[t + 1] == n[1] &&
                s[t + 2] == n[2] &&
                (h[0] = t / 3),
                s[t + 0] == o[0] &&
                  s[t + 1] == o[1] &&
                  s[t + 2] == o[2] &&
                  (h[1] = t / 3),
                s[t + 0] == a[0] &&
                  s[t + 1] == a[1] &&
                  s[t + 2] == a[2] &&
                  (h[2] = t / 3);
          -1 == h[0] && (s.push(n[0], n[1], n[2]), (h[0] = (s.length - 1) / 3)),
            -1 == h[1] &&
              (s.push(o[0], o[1], o[2]), (h[1] = (s.length - 1) / 3)),
            -1 == h[2] &&
              (s.push(a[0], a[1], a[2]), (h[2] = (s.length - 1) / 3)),
            r.push(parseInt(h[0], 10)),
            r.push(parseInt(h[1], 10)),
            r.push(parseInt(h[2], 10));
        }
        const n = new G(e);
        return (n.name = e), (n.vertices = s), (n.verticesIndices = r), n;
      }),
      (G.json2geom = function (t) {
        const e = new G("jsonMeshGeom");
        if (
          ((e.verticesIndices = []),
          (e.vertices = t.vertices || []),
          (e.vertexNormals = t.normals || []),
          (e.vertexColors = t.colors || []),
          (e.tangents = t.tangents || []),
          (e.biTangents = t.bitangents || []),
          t.texturecoords && e.setTexCoords(t.texturecoords[0]),
          t.vertices_b64 && (e.vertices = new Float32Array(D(t.vertices_b64))),
          t.normals_b64 &&
            (e.vertexNormals = new Float32Array(D(t.normals_b64))),
          t.tangents_b64 && (e.tangents = new Float32Array(D(t.tangents_b64))),
          t.bitangents_b64 &&
            (e.biTangents = new Float32Array(D(t.bitangents_b64))),
          t.texturecoords_b64 &&
            e.setTexCoords(new Float32Array(D(t.texturecoords_b64[0]))),
          t.faces_b64)
        )
          e.verticesIndices = new Uint32Array(D(t.faces_b64));
        else {
          e.verticesIndices.length = 3 * t.faces.length;
          for (let i = 0; i < t.faces.length; i++)
            (e.verticesIndices[3 * i] = t.faces[i][0]),
              (e.verticesIndices[3 * i + 1] = t.faces[i][1]),
              (e.verticesIndices[3 * i + 2] = t.faces[i][2]);
        }
        return e;
      });
    const H = function () {
        (this._log = new r("eventtaget")),
          (this._eventCallbacks = {}),
          (this._logName = ""),
          (this._logEvents = !1),
          (this._listeners = {}),
          (CABLES.eventTargetProfile = CABLES.eventTargetProfile || {}),
          (this.addEventListener = this.on =
            function (t, e, i) {
              const s = { id: (i || "") + CABLES.simpleId(), name: t, cb: e };
              return (
                this._eventCallbacks[t]
                  ? this._eventCallbacks[t].push(s)
                  : (this._eventCallbacks[t] = [s]),
                (this._listeners[s.id] = s),
                s.id
              );
            }),
          (this.hasEventListener = function (t, e) {
            return t && !e
              ? !!this._listeners[t]
              : (this._log.warn("old eventtarget function haseventlistener!"),
                t && e && this._eventCallbacks[t]
                  ? -1 != this._eventCallbacks[t].indexOf(e)
                  : void 0);
          }),
          (this.removeEventListener = this.off =
            function (t, e) {
              if (null == t) return;
              if (!e) {
                const e = this._listeners[t];
                if (!e) return void console.log("could not find event...");
                let i = !0;
                for (; i; ) {
                  i = !1;
                  let s = -1;
                  for (let r = 0; r < this._eventCallbacks[e.name].length; r++)
                    0 === this._eventCallbacks[e.name][r].id.indexOf(t) &&
                      ((i = !0), (s = r));
                  -1 !== s &&
                    (this._eventCallbacks[e.name].splice(s, 1),
                    delete this._listeners[t]);
                }
                return;
              }
              this._log.stack(
                " old function signature: removeEventListener! use listener id",
              );
              let i = null;
              for (let s = 0; s < this._eventCallbacks[t].length; s++)
                this._eventCallbacks[t][s].cb == e && (i = s);
              null !== i
                ? delete this._eventCallbacks[i]
                : this._log.warn("removeEventListener not found " + t);
            }),
          (this.logEvents = function (t, e) {
            (this._logEvents = t), (this._logName = e);
          }),
          (this.emitEvent = function (t, e, i, s, r, n, o) {
            if (
              (this._logEvents &&
                console.log("[event] ", this._logName, t, this._eventCallbacks),
              this._eventCallbacks[t])
            ) {
              const a = [];
              for (let e = 0; e < this._eventCallbacks[t].length; e++)
                a[t] || (a[t] = []), a[t].push(this._eventCallbacks[t][e]);
              if (a[t])
                for (let h = 0; h < a[t].length; h++)
                  if (a[t][h]) {
                    const l = this.constructor.name + " " + t;
                    (CABLES.eventTargetProfile[l] = CABLES.eventTargetProfile[
                      l
                    ] || { name: this.constructor.name, event: t, count: 0 }),
                      (CABLES.eventTargetProfile[l].active =
                        this._eventCallbacks[t].length),
                      CABLES.eventTargetProfile[l].count++,
                      a[t][h].cb(e, i, s, r, n, o);
                  }
            } else
              this._logEvents &&
                console.log(
                  "[event] has no event callback",
                  t,
                  this._eventCallbacks,
                );
          });
      },
      z = function (t) {
        (this.time = 0),
          (this.value = 0),
          (this.onChange = null),
          (this._easing = 0),
          (this.cb = null),
          (this.cbTriggered = !1),
          this.setEasing(n.EASING_LINEAR),
          this.set(t);
      };
    (z.cubicSpline = function (t, e, i) {
      let s = t * t,
        r = s * t;
      return (
        (2 * r - 3 * s + 1) * e.value +
        (r - 2 * s + t) * e.bezTangOut +
        (-2 * r + 3 * s) * i.value +
        (r - s) * i.bezTangIn
      );
    }),
      (z.easeCubicSpline = function (t, e) {
        return z.cubicSpline(t, this, e);
      }),
      (z.linear = function (t, e, i) {
        return parseFloat(e.value) + parseFloat(i.value - e.value) * t;
      }),
      (z.easeLinear = function (t, e) {
        return z.linear(t, this, e);
      }),
      (z.easeAbsolute = function (t, e) {
        return this.value;
      }),
      (z.easeExpoIn = function (t, e) {
        return (
          (t = (function (t) {
            return 2 ** (10 * (t - 1));
          })(t)),
          z.linear(t, this, e)
        );
      }),
      (z.easeExpoOut = function (t, e) {
        return (
          (t = (function (t) {
            return 1 - 2 ** (-10 * t);
          })(t)),
          z.linear(t, this, e)
        );
      }),
      (z.easeExpoInOut = function (t, e) {
        return (
          (t = (function (t) {
            return (t *= 2) < 1
              ? 0.5 * 2 ** (10 * (t - 1))
              : 0.5 * (2 - 2 ** (-10 * --t));
          })(t)),
          z.linear(t, this, e)
        );
      }),
      (z.easeSinIn = function (t, e) {
        return (t = -1 * Math.cos((t * Math.PI) / 2) + 1), z.linear(t, this, e);
      }),
      (z.easeSinOut = function (t, e) {
        return (t = Math.sin((t * Math.PI) / 2)), z.linear(t, this, e);
      }),
      (z.easeSinInOut = function (t, e) {
        return (t = -0.5 * (Math.cos(Math.PI * t) - 1)), z.linear(t, this, e);
      }),
      (z.easeCubicIn = function (t, e) {
        return (
          (t = (function (t) {
            return t * (t * t);
          })(t)),
          z.linear(t, this, e)
        );
      }),
      (z.easeInQuint = function (t, e) {
        return z.linear((t *= t * t * t * t), this, e);
      }),
      (z.easeOutQuint = function (t, e) {
        return (t = (t -= 1) * t * t * t * t + 1), z.linear(t, this, e);
      }),
      (z.easeInOutQuint = function (t, e) {
        return (
          (t /= 0.5) < 1
            ? (t *= 0.5 * t * t * t * t)
            : (t = 0.5 * ((t -= 2) * t * t * t * t + 2)),
          z.linear(t, this, e)
        );
      }),
      (z.easeInQuart = function (t, e) {
        return z.linear((t *= t * t * t), this, e);
      }),
      (z.easeOutQuart = function (t, e) {
        return (t = -1 * ((t -= 1) * t * t * t - 1)), z.linear(t, this, e);
      }),
      (z.easeInOutQuart = function (t, e) {
        return (
          (t /= 0.5) < 1
            ? (t *= 0.5 * t * t * t)
            : (t = -0.5 * ((t -= 2) * t * t * t - 2)),
          z.linear(t, this, e)
        );
      }),
      (z.bounce = function (t) {
        return (
          (t /= 1) < 1 / 2.75
            ? (t *= 7.5625 * t)
            : (t =
                t < 2 / 2.75
                  ? 7.5625 * (t -= 1.5 / 2.75) * t + 0.75
                  : t < 2.5 / 2.75
                    ? 7.5625 * (t -= 2.25 / 2.75) * t + 0.9375
                    : 7.5625 * (t -= 2.625 / 2.75) * t + 0.984375),
          t
        );
      }),
      (z.easeInBounce = function (t, e) {
        return z.linear(z.bounce(t), this, e);
      }),
      (z.easeOutBounce = function (t, e) {
        return z.linear(z.bounce(t), this, e);
      }),
      (z.easeInElastic = function (t, e) {
        let i = 1.70158,
          s = 0,
          r = 1;
        return (
          0 === t
            ? (t = 0)
            : 1 == (t /= 1)
              ? (t = 1)
              : (s || (s = 0.3),
                r < Math.abs(1)
                  ? ((r = 1), (i = s / 4))
                  : (i = (s / (2 * Math.PI)) * Math.asin(1 / r)),
                (t =
                  -r *
                    2 ** (10 * (t -= 1)) *
                    Math.sin(((1 * t - i) * (2 * Math.PI)) / s) +
                  0)),
          z.linear(t, this, e)
        );
      }),
      (z.easeOutElastic = function (t, e) {
        let i = 1.70158,
          s = 0,
          r = 1;
        return (
          0 === t
            ? (t = 0)
            : 1 == (t /= 1)
              ? (t = 1)
              : (s || (s = 0.3),
                r < Math.abs(1)
                  ? ((r = 1), (i = s / 4))
                  : (i = (s / (2 * Math.PI)) * Math.asin(1 / r)),
                (t =
                  r *
                    2 ** (-10 * t) *
                    Math.sin(((1 * t - i) * (2 * Math.PI)) / s) +
                  1 +
                  0)),
          z.linear(t, this, e)
        );
      }),
      (z.easeInBack = function (t, e) {
        const i = 1.70158;
        return z.linear((t = t * t * ((i + 1) * t - i)), this, e);
      }),
      (z.easeOutBack = function (t, e) {
        const i = 1.70158;
        return (
          (t = (t = t / 1 - 1) * t * ((i + 1) * t + i) + 1),
          z.linear(t, this, e)
        );
      }),
      (z.easeInOutBack = function (t, e) {
        let i = 1.70158;
        return (
          (t =
            (t /= 0.5) < 1
              ? t * t * ((1 + (i *= 1.525)) * t - i) * 0.5
              : 0.5 * ((t -= 2) * t * ((1 + (i *= 1.525)) * t + i) + 2)),
          z.linear(t, this, e)
        );
      }),
      (z.easeCubicOut = function (t, e) {
        return (
          (t = (function (t) {
            return --t * t * t + 1;
          })(t)),
          z.linear(t, this, e)
        );
      }),
      (z.easeCubicInOut = function (t, e) {
        return (
          (t = (function (t) {
            return (
              (t *= 2) < 1
                ? (t *= 0.5 * t * t)
                : (t = 0.5 * ((t -= 2) * t * t + 2)),
              t
            );
          })(t)),
          z.linear(t, this, e)
        );
      }),
      (z.easeSmoothStep = function (t, e) {
        const i = Math.max(0, Math.min(1, t));
        return z.linear((t = i * i * (3 - 2 * i)), this, e);
      }),
      (z.easeSmootherStep = function (t, e) {
        const i = Math.max(0, Math.min(1, (t - 0) / 1));
        return z.linear((t = i * i * i * (i * (6 * i - 15) + 10)), this, e);
      }),
      (z.prototype.setEasing = function (t) {
        (this._easing = t),
          this._easing == n.EASING_LINEAR
            ? (this.ease = z.easeLinear)
            : this._easing == n.EASING_ABSOLUTE
              ? (this.ease = z.easeAbsolute)
              : this._easing == n.EASING_SMOOTHSTEP
                ? (this.ease = z.easeSmoothStep)
                : this._easing == n.EASING_SMOOTHERSTEP
                  ? (this.ease = z.easeSmootherStep)
                  : this._easing == n.EASING_CUBIC_IN
                    ? (this.ease = z.easeCubicIn)
                    : this._easing == n.EASING_CUBIC_OUT
                      ? (this.ease = z.easeCubicOut)
                      : this._easing == n.EASING_CUBIC_INOUT
                        ? (this.ease = z.easeCubicInOut)
                        : this._easing == n.EASING_EXPO_IN
                          ? (this.ease = z.easeExpoIn)
                          : this._easing == n.EASING_EXPO_OUT
                            ? (this.ease = z.easeExpoOut)
                            : this._easing == n.EASING_EXPO_INOUT
                              ? (this.ease = z.easeExpoInOut)
                              : this._easing == n.EASING_SIN_IN
                                ? (this.ease = z.easeSinIn)
                                : this._easing == n.EASING_SIN_OUT
                                  ? (this.ease = z.easeSinOut)
                                  : this._easing == n.EASING_SIN_INOUT
                                    ? (this.ease = z.easeSinInOut)
                                    : this._easing == n.EASING_BACK_OUT
                                      ? (this.ease = z.easeOutBack)
                                      : this._easing == n.EASING_BACK_IN
                                        ? (this.ease = z.easeInBack)
                                        : this._easing == n.EASING_BACK_INOUT
                                          ? (this.ease = z.easeInOutBack)
                                          : this._easing == n.EASING_ELASTIC_IN
                                            ? (this.ease = z.easeInElastic)
                                            : this._easing ==
                                                n.EASING_ELASTIC_OUT
                                              ? (this.ease = z.easeOutElastic)
                                              : this._easing ==
                                                  n.EASING_ELASTIC_INOUT
                                                ? (this.ease =
                                                    z.easeElasticInOut)
                                                : this._easing ==
                                                    n.EASING_BOUNCE_IN
                                                  ? (this.ease = z.easeInBounce)
                                                  : this._easing ==
                                                      n.EASING_BOUNCE_OUT
                                                    ? (this.ease =
                                                        z.easeOutBounce)
                                                    : this._easing ==
                                                        n.EASING_QUART_OUT
                                                      ? (this.ease =
                                                          z.easeOutQuart)
                                                      : this._easing ==
                                                          n.EASING_QUART_IN
                                                        ? (this.ease =
                                                            z.easeInQuart)
                                                        : this._easing ==
                                                            n.EASING_QUART_INOUT
                                                          ? (this.ease =
                                                              z.easeInOutQuart)
                                                          : this._easing ==
                                                              n.EASING_QUINT_OUT
                                                            ? (this.ease =
                                                                z.easeOutQuint)
                                                            : this._easing ==
                                                                n.EASING_QUINT_IN
                                                              ? (this.ease =
                                                                  z.easeInQuint)
                                                              : this._easing ==
                                                                  n.EASING_QUINT_INOUT
                                                                ? (this.ease =
                                                                    z.easeInOutQuint)
                                                                : this
                                                                      ._easing ==
                                                                    n.EASING_CUBICSPLINE
                                                                  ? (this.ease =
                                                                      z.easeCubicSpline)
                                                                  : ((this._easing =
                                                                      n.EASING_LINEAR),
                                                                    (this.ease =
                                                                      z.easeLinear));
      }),
      (z.prototype.trigger = function () {
        this.cb(), (this.cbTriggered = !0);
      }),
      (z.prototype.setValue = function (t) {
        (this.value = t), null !== this.onChange && this.onChange();
      }),
      (z.prototype.set = function (t) {
        t &&
          (t.e && this.setEasing(t.e),
          t.cb && ((this.cb = t.cb), (this.cbTriggered = !1)),
          t.b,
          t.hasOwnProperty("t") && (this.time = t.t),
          t.hasOwnProperty("time") && (this.time = t.time),
          t.hasOwnProperty("v")
            ? (this.value = t.v)
            : t.hasOwnProperty("value") && (this.value = t.value)),
          null !== this.onChange && this.onChange();
      }),
      (z.prototype.getSerialized = function () {
        const t = {};
        return (t.t = this.time), (t.v = this.value), (t.e = this._easing), t;
      }),
      (z.prototype.getEasing = function () {
        return this._easing;
      });
    const W = function (t) {
      H.apply(this),
        (t = t || {}),
        (this.keys = []),
        (this.onChange = null),
        (this.stayInTimeline = !1),
        (this.loop = !1),
        (this._log = new r("Anim")),
        (this._lastKeyIndex = 0),
        (this._cachedIndex = 0),
        (this.name = t.name || null),
        (this.defaultEasing = t.defaultEasing || n.EASING_LINEAR),
        (this.onLooped = null),
        (this._timesLooped = 0),
        (this._needsSort = !1);
    };
    (W.prototype.forceChangeCallback = function () {
      null !== this.onChange && this.onChange(),
        this.emitEvent("onChange", this);
    }),
      (W.prototype.getLoop = function () {
        return this.loop;
      }),
      (W.prototype.setLoop = function (t) {
        (this.loop = t), this.emitEvent("onChange", this);
      }),
      (W.prototype.hasEnded = function (t) {
        return (
          0 === this.keys.length || this.keys[this._lastKeyIndex].time <= t
        );
      }),
      (W.prototype.isRising = function (t) {
        if (this.hasEnded(t)) return !1;
        const e = this.getKeyIndex(t);
        return this.keys[e].value < this.keys[e + 1].value;
      }),
      (W.prototype.clearBefore = function (t) {
        const e = this.getValue(t),
          i = this.getKeyIndex(t);
        this.setValue(t, e),
          i > 1 && this.keys.splice(0, i),
          this._updateLastIndex();
      }),
      (W.prototype.clear = function (t) {
        let e = 0;
        t && (e = this.getValue(t)),
          (this.keys.length = 0),
          this._updateLastIndex(),
          t && this.setValue(t, e),
          null !== this.onChange && this.onChange(),
          this.emitEvent("onChange", this);
      }),
      (W.prototype.sortKeys = function () {
        this.keys.sort((t, e) => parseFloat(t.time) - parseFloat(e.time)),
          this._updateLastIndex(),
          (this._needsSort = !1),
          this.keys.length % 1e3 == 0 &&
            console.log(this.name, this.keys.length);
      }),
      (W.prototype.getLength = function () {
        return 0 === this.keys.length
          ? 0
          : this.keys[this.keys.length - 1].time;
      }),
      (W.prototype.getKeyIndex = function (t) {
        let e = 0,
          i = 0;
        this._cachedIndex &&
          this.keys.length > this._cachedIndex &&
          t >= this.keys[this._cachedIndex].time &&
          (i = this._cachedIndex);
        for (let s = i; s < this.keys.length; s++)
          if ((t >= this.keys[s].time && (e = s), this.keys[s].time > t))
            return 0 != t && (this._cachedIndex = e), e;
        return e;
      }),
      (W.prototype.setValue = function (t, e, i) {
        let s = null;
        if (0 == this.keys.length || t <= this.keys[this.keys.length - 1].time)
          for (let r = 0; r < this.keys.length; r++)
            if (this.keys[r].time == t) {
              (s = this.keys[r]),
                this.keys[r].setValue(e),
                (this.keys[r].cb = i);
              break;
            }
        return (
          s ||
            ((s = new z({ time: t, value: e, e: this.defaultEasing, cb: i })),
            this.keys.push(s),
            this.keys.length % 1e3 == 0 &&
              console.log(this.name, this.keys.length),
            this._updateLastIndex()),
          this.onChange && this.onChange(),
          this.emitEvent("onChange", this),
          (this._needsSort = !0),
          s
        );
      }),
      (W.prototype.setKeyEasing = function (t, e) {
        this.keys[t] &&
          (this.keys[t].setEasing(e), this.emitEvent("onChange", this));
      }),
      (W.prototype.getSerialized = function () {
        const t = { keys: [] };
        t.loop = this.loop;
        for (let e = 0; e < this.keys.length; e++)
          t.keys.push(this.keys[e].getSerialized());
        return t;
      }),
      (W.prototype.getKey = function (t) {
        const e = this.getKeyIndex(t);
        return this.keys[e];
      }),
      (W.prototype.getNextKey = function (t) {
        let e = this.getKeyIndex(t) + 1;
        return (
          e >= this.keys.length && (e = this.keys.length - 1), this.keys[e]
        );
      }),
      (W.prototype.isFinished = function (t) {
        return (
          this.keys.length <= 0 || t > this.keys[this.keys.length - 1].time
        );
      }),
      (W.prototype.isStarted = function (t) {
        return !(this.keys.length <= 0) && t >= this.keys[0].time;
      }),
      (W.prototype.getValue = function (t) {
        if (0 === this.keys.length) return 0;
        if (
          (this._needsSort && this.sortKeys(),
          !this.loop && t > this.keys[this._lastKeyIndex].time)
        )
          return this.keys[this._lastKeyIndex].value;
        if (t < this.keys[0].time) return this.keys[0].value;
        this.loop &&
          t > this.keys[this._lastKeyIndex].time &&
          (t / this.keys[this._lastKeyIndex].time > this._timesLooped &&
            (this._timesLooped++, this.onLooped && this.onLooped()),
          (t =
            (t - this.keys[0].time) %
            (this.keys[this._lastKeyIndex].time - this.keys[0].time)),
          (t += this.keys[0].time));
        const e = this.getKeyIndex(t);
        if (e >= this._lastKeyIndex)
          return (
            this.keys[this._lastKeyIndex].cb &&
              !this.keys[this._lastKeyIndex].cbTriggered &&
              this.keys[this._lastKeyIndex].trigger(),
            this.keys[this._lastKeyIndex].value
          );
        const i = e + 1,
          s = this.keys[e],
          r = this.keys[i];
        if ((s.cb && !s.cbTriggered && s.trigger(), !r)) return -1;
        const n = (t - s.time) / (r.time - s.time);
        return s.ease || this.log._warn("has no ease", s, r), s.ease(n, r);
      }),
      (W.prototype._updateLastIndex = function () {
        this._lastKeyIndex = this.keys.length - 1;
      }),
      (W.prototype.addKey = function (t) {
        void 0 === t.time
          ? this.log.warn("key time undefined, ignoring!")
          : (this.keys.push(t),
            null !== this.onChange && this.onChange(),
            this.emitEvent("onChange", this)),
          this._updateLastIndex();
      }),
      (W.prototype.easingFromString = function (t) {
        return "linear" == t
          ? n.EASING_LINEAR
          : "absolute" == t
            ? n.EASING_ABSOLUTE
            : "smoothstep" == t
              ? n.EASING_SMOOTHSTEP
              : "smootherstep" == t
                ? n.EASING_SMOOTHERSTEP
                : "Cubic In" == t
                  ? n.EASING_CUBIC_IN
                  : "Cubic Out" == t
                    ? n.EASING_CUBIC_OUT
                    : "Cubic In Out" == t
                      ? n.EASING_CUBIC_INOUT
                      : "Expo In" == t
                        ? n.EASING_EXPO_IN
                        : "Expo Out" == t
                          ? n.EASING_EXPO_OUT
                          : "Expo In Out" == t
                            ? n.EASING_EXPO_INOUT
                            : "Sin In" == t
                              ? n.EASING_SIN_IN
                              : "Sin Out" == t
                                ? n.EASING_SIN_OUT
                                : "Sin In Out" == t
                                  ? n.EASING_SIN_INOUT
                                  : "Back In" == t
                                    ? n.EASING_BACK_IN
                                    : "Back Out" == t
                                      ? n.EASING_BACK_OUT
                                      : "Back In Out" == t
                                        ? n.EASING_BACK_INOUT
                                        : "Elastic In" == t
                                          ? n.EASING_ELASTIC_IN
                                          : "Elastic Out" == t
                                            ? n.EASING_ELASTIC_OUT
                                            : "Bounce In" == t
                                              ? n.EASING_BOUNCE_IN
                                              : "Bounce Out" == t
                                                ? n.EASING_BOUNCE_OUT
                                                : "Quart Out" == t
                                                  ? n.EASING_QUART_OUT
                                                  : "Quart In" == t
                                                    ? n.EASING_QUART_IN
                                                    : "Quart In Out" == t
                                                      ? n.EASING_QUART_INOUT
                                                      : "Quint Out" == t
                                                        ? n.EASING_QUINT_OUT
                                                        : "Quint In" == t
                                                          ? n.EASING_QUINT_IN
                                                          : "Quint In Out" == t
                                                            ? n.EASING_QUINT_INOUT
                                                            : void 0;
      }),
      (W.prototype.createPort = function (t, e, i) {
        const s = t.inDropDown(e, n.EASINGS);
        return (
          s.set("linear"),
          (s.defaultValue = "linear"),
          (s.onChange = function () {
            (this.defaultEasing = this.easingFromString(s.get())),
              this.emitEvent("onChangeDefaultEasing", this),
              i && i();
          }.bind(this)),
          s
        );
      }),
      (W.slerpQuaternion = function (t, e, i, s, r, n) {
        W.slerpQuaternion.q1 ||
          ((W.slerpQuaternion.q1 = quat.create()),
          (W.slerpQuaternion.q2 = quat.create()));
        const o = i.getKeyIndex(t);
        let a = o + 1;
        if ((a >= i.keys.length && (a = i.keys.length - 1), o == a))
          quat.set(
            e,
            i.keys[o].value,
            s.keys[o].value,
            r.keys[o].value,
            n.keys[o].value,
          );
        else {
          const h = i.keys[o].time,
            l = (t - h) / (i.keys[a].time - h);
          quat.set(
            W.slerpQuaternion.q1,
            i.keys[o].value,
            s.keys[o].value,
            r.keys[o].value,
            n.keys[o].value,
          ),
            quat.set(
              W.slerpQuaternion.q2,
              i.keys[a].value,
              s.keys[a].value,
              r.keys[a].value,
              n.keys[a].value,
            ),
            quat.slerp(e, W.slerpQuaternion.q1, W.slerpQuaternion.q2, l);
        }
        return e;
      });
    const Y = { Key: z },
      j = function (t, e, i, s) {
        H.apply(this),
          (this.data = {}),
          (this._log = new r("core_port")),
          (this.direction = a.PORT_DIR_IN),
          (this.id = String(CABLES.simpleId())),
          (this._op = t),
          (this.links = []),
          (this.value = 0),
          (this.name = e),
          (this.type = i || o.OP_PORT_TYPE_VALUE),
          (this.uiAttribs = s || {}),
          (this.anim = null),
          (this._oldAnimVal = -5711),
          (this.defaultValue = null),
          (this._uiActiveState = !0),
          (this.ignoreValueSerialize = !1),
          (this.onLinkChanged = null),
          (this.crashed = !1),
          (this._valueBeforeLink = null),
          (this._lastAnimFrame = -1),
          (this._animated = !1),
          (this.onValueChanged = null),
          (this.onTriggered = null),
          (this.onUiActiveStateChange = null),
          (this.changeAlways = !1),
          (this.forceRefChange = !1),
          (this._useVariableName = null),
          (this.activityCounter = 0),
          (this.apf = 0),
          (this.activityCounterStartFrame = 0),
          (this._tempLastUiValue = null),
          Object.defineProperty(this, "title", {
            get() {
              return this.uiAttribs.title || this.name;
            },
          }),
          Object.defineProperty(this, "parent", {
            get() {
              return this._log.stack("use port.op, not .parent"), this._op;
            },
          }),
          Object.defineProperty(this, "op", {
            get() {
              return this._op;
            },
          }),
          Object.defineProperty(this, "val", {
            get() {
              return (
                this._log.warn("val getter deprecated!", this),
                this._log.stack("val getter deprecated"),
                this.get()
              );
            },
            set(t) {
              this._log.warn("val setter deprecated!", this),
                this._log.stack("val setter deprecated"),
                this.setValue(t);
            },
          });
      };
    (j.prototype.copyLinkedUiAttrib = function (t, e) {
      if (!CABLES.UI) return;
      if (!this.isLinked()) return;
      const i = {};
      (i[t] = this.links[0].getOtherPort(this).getUiAttrib(t)),
        e.setUiAttribs(i);
    }),
      (j.prototype.getValueForDisplay = function () {
        let t = this.value;
        return (
          "string" == typeof this.value || this.value instanceof String
            ? (t.length > 1e3 && ((t = t.substring(0, 999)), (t += "...")),
              this.uiAttribs &&
                "boolnum" == this.uiAttribs.display &&
                ((t += " - "), this.value ? (t += "true") : (t += "false")),
              (t = t.replace(/[\u00A0-\u9999<>\&]/g, function (t) {
                return "&#" + t.charCodeAt(0) + ";";
              })),
              t.length > 100 && (t = t.substring(0, 100)))
            : (t = this.value),
          t
        );
      }),
      (j.prototype.onAnimToggle = function () {}),
      (j.prototype._onAnimToggle = function () {
        this.onAnimToggle();
      }),
      (j.prototype.remove = function () {
        this.removeLinks(), this._op.removePort(this);
      }),
      (j.prototype.setUiAttribs = function (t) {
        let e = !1;
        this.uiAttribs || (this.uiAttribs = {});
        for (const i in t)
          this.uiAttribs[i] != t[i] && (e = !0),
            (this.uiAttribs[i] = t[i]),
            "group" == i &&
              this.indexPort &&
              this.indexPort.setUiAttribs({ group: t[i] });
        t.hasOwnProperty("expose") &&
          this._op.patch.emitEvent(
            "subpatchExpose",
            this._op.uiAttribs.subPatch,
          ),
          e && this.emitEvent("onUiAttrChange", t, this);
      }),
      (j.prototype.getUiAttribs = function () {
        return this.uiAttribs;
      }),
      (j.prototype.getUiAttrib = function (t) {
        return this.uiAttribs && this.uiAttribs.hasOwnProperty(t)
          ? this.uiAttribs[t]
          : null;
      }),
      (j.prototype.get = function () {
        return (
          this._animated &&
            this._lastAnimFrame != this._op.patch.getFrameNum() &&
            ((this._lastAnimFrame = this._op.patch.getFrameNum()),
            (this.value = this.anim.getValue(this._op.patch.timer.getTime())),
            (this._oldAnimVal = this.value),
            this.forceChange()),
          this.value
        );
      }),
      (j.prototype.setRef = function (t) {
        (this.forceRefChange = !0), this.set(t);
      }),
      (j.prototype.set = j.prototype.setValue =
        function (t) {
          if (
            (void 0 === t && (t = null),
            this._op.enabled &&
              !this.crashed &&
              (t !== this.value ||
                this.changeAlways ||
                this.type == o.OP_PORT_TYPE_TEXTURE ||
                this.type == o.OP_PORT_TYPE_ARRAY))
          ) {
            if (this._animated)
              this.anim.setValue(this._op.patch.timer.getTime(), t);
            else {
              try {
                (this.value = t), this.forceChange();
              } catch (t) {
                (this.crashed = !0),
                  (this.setValue = function (t) {}),
                  (this.onTriggered = function () {}),
                  this._log.error("onvaluechanged exception cought", t),
                  this._log.error(t.stack),
                  this._log.warn("exception in: " + this._op.name),
                  this._op.patch.isEditorMode() && gui.showOpCrash(this._op),
                  this._op.patch.emitEvent("exception", t, this._op),
                  this._op.onError && this._op.onError(t);
              }
              this._op &&
                this._op.patch &&
                this._op.patch.isEditorMode() &&
                this.type == o.OP_PORT_TYPE_TEXTURE &&
                gui.texturePreview().updateTexturePort(this);
            }
            if (this.direction == a.PORT_DIR_OUT)
              for (let t = 0; t < this.links.length; ++t)
                this.links[t].setValue();
          }
        }),
      (j.prototype.updateAnim = function () {
        this._animated &&
          ((this.value = this.get()),
          (this._oldAnimVal != this.value || this.changeAlways) &&
            ((this._oldAnimVal = this.value), this.forceChange()),
          (this._oldAnimVal = this.value));
      }),
      (j.args = function (t) {
        return (t + "")
          .replace(/[/][/].*$/gm, "")
          .replace(/\s+/g, "")
          .replace(/[/][*][^/*]*[*][/]/g, "")
          .split("){", 1)[0]
          .replace(/^[^(]*[(]/, "")
          .replace(/=[^,]+/g, "")
          .split(",")
          .filter(Boolean);
      }),
      (j.prototype.forceChange = function () {
        this.onValueChanged || this.onChange,
          this._activity(),
          this.emitEvent("change", this.value, this),
          this.onChange
            ? this.onChange(this, this.value)
            : this.onValueChanged && this.onValueChanged(this, this.value);
      }),
      (j.prototype.getTypeString = function () {
        return this.type == o.OP_PORT_TYPE_VALUE
          ? "Number"
          : this.type == o.OP_PORT_TYPE_FUNCTION
            ? "Trigger"
            : this.type == o.OP_PORT_TYPE_OBJECT
              ? "Object"
              : this.type == o.OP_PORT_TYPE_DYNAMIC
                ? "Dynamic"
                : this.type == o.OP_PORT_TYPE_ARRAY
                  ? "Array"
                  : this.type == o.OP_PORT_TYPE_STRING
                    ? "String"
                    : "Unknown";
      }),
      (j.prototype.deSerializeSettings = function (t) {
        if (
          t &&
          (t.animated && this.setAnimated(t.animated),
          t.useVariable && this.setVariableName(t.useVariable),
          t.title && this.setUiAttribs({ title: t.title }),
          t.expose && this.setUiAttribs({ expose: !0 }),
          t.order && this.setUiAttribs({ order: t.order }),
          t.anim)
        ) {
          this.anim || (this.anim = new W({ name: "port " + this.name })),
            (this._op._hasAnimPort = !0),
            this.anim.addEventListener("onChange", () => {
              this._op.patch.emitEvent(
                "portAnimUpdated",
                this._op,
                this,
                this.anim,
              );
            }),
            t.anim.loop && (this.anim.loop = t.anim.loop);
          for (const e in t.anim.keys)
            this.anim.keys.push(new Y.Key(t.anim.keys[e]));
          this.anim.sortKeys();
        }
      }),
      (j.prototype.getSerialized = function () {
        let t = {};
        if (
          ((t.name = this.getName()),
          this.ignoreValueSerialize ||
            0 !== this.links.length ||
            (this.type == o.OP_PORT_TYPE_OBJECT &&
              this.value &&
              this.value.tex) ||
            (t.value = this.value),
          this._useVariableName && (t.useVariable = this._useVariableName),
          this._animated && (t.animated = !0),
          this.anim && (t.anim = this.anim.getSerialized()),
          "file" == this.uiAttribs.display &&
            (t.display = this.uiAttribs.display),
          this.uiAttribs.expose &&
            ((t.expose = !0),
            this.uiAttribs.hasOwnProperty("order") &&
              (t.order = this.uiAttribs.order)),
          this.uiAttribs.title && (t.title = this.uiAttribs.title),
          this.direction == a.PORT_DIR_OUT && this.links.length > 0)
        ) {
          t.links = [];
          for (const e in this.links)
            !this.links[e].ignoreInSerialize &&
              this.links[e].portIn &&
              this.links[e].portOut &&
              t.links.push(this.links[e].getSerialized());
        }
        if (this.direction == a.PORT_DIR_IN && this.links.length > 0)
          for (const e in this.links)
            this.links[e].portIn &&
              this.links[e].portOut &&
              this.links[e].getOtherPort(this).op.isInBlueprint2() &&
              !this.op.isInBlueprint2() &&
              ((t.links = t.links || []),
              t.links.push(this.links[e].getSerialized()));
        return (
          t.links && 0 == t.links.length && delete t.links,
          this.type === o.OP_PORT_TYPE_FUNCTION && delete t.value,
          this.type === o.OP_PORT_TYPE_FUNCTION &&
            0 == this.links.length &&
            (t = null),
          t && 1 == Object.keys(t).length && t.name && (t = null),
          E(t),
          t
        );
      }),
      (j.prototype.shouldLink = function () {
        return !0;
      }),
      (j.prototype.removeLinks = function () {
        let t = 0;
        for (; this.links.length > 0; ) {
          if ((t++, t > 5e3)) {
            this._log.warn("could not delete links... / infinite loop"),
              (this.links.length = 0);
            break;
          }
          this.links[0].remove();
        }
      }),
      (j.prototype.removeLink = function (t) {
        for (const e in this.links)
          this.links[e] == t && this.links.splice(e, 1);
        this.direction == a.PORT_DIR_IN &&
          (this.type == o.OP_PORT_TYPE_VALUE
            ? this.setValue(this._valueBeforeLink || 0)
            : this.setValue(this._valueBeforeLink || null)),
          CABLES.UI &&
            this._op.checkLinkTimeWarnings &&
            this._op.checkLinkTimeWarnings(),
          this.onLinkChanged && this.onLinkChanged(),
          this.emitEvent("onLinkChanged"),
          this._op.emitEvent("onLinkChanged");
      }),
      (j.prototype.getName = function () {
        return this.name;
      }),
      (j.prototype.getTitle = function () {
        return this.uiAttribs.title ? this.uiAttribs.title : this.name;
      }),
      (j.prototype.addLink = function (t) {
        (this._valueBeforeLink = this.value),
          this.links.push(t),
          CABLES.UI &&
            this._op.checkLinkTimeWarnings &&
            this._op.checkLinkTimeWarnings(),
          this.onLinkChanged && this.onLinkChanged(),
          this.emitEvent("onLinkChanged"),
          this._op.emitEvent("onLinkChanged");
      }),
      (j.prototype.getLinkTo = function (t) {
        for (const e in this.links)
          if (this.links[e].portIn == t || this.links[e].portOut == t)
            return this.links[e];
      }),
      (j.prototype.removeLinkTo = function (t) {
        for (const e in this.links)
          if (this.links[e].portIn == t || this.links[e].portOut == t)
            return (
              this.links[e].remove(),
              CABLES.UI &&
                this._op.checkLinkTimeWarnings &&
                this._op.checkLinkTimeWarnings(),
              this.onLinkChanged && this.onLinkChanged(),
              void this.emitEvent("onLinkChanged")
            );
      }),
      (j.prototype.isLinkedTo = function (t) {
        for (const e in this.links)
          if (this.links[e].portIn == t || this.links[e].portOut == t)
            return !0;
        return !1;
      }),
      (j.prototype._activity = function () {
        this.activityCounter++;
      }),
      (j.prototype.trigger = function () {
        const t = this.links.length;
        if ((this._activity(), 0 === t)) return;
        if (!this._op.enabled) return;
        let e = null;
        try {
          for (let i = 0; i < t; ++i)
            this.links[i].portIn &&
              ((e = this.links[i].portIn),
              e.op.patch.pushTriggerStack(e),
              e._onTriggered(),
              e.op.patch.popTriggerStack()),
              this.links[i] && this.links[i].activity();
        } catch (t) {
          (this._op.enabled = !1),
            this._op.patch.isEditorMode() &&
              (this._op.patch.emitEvent("exception", t, e.op),
              this._op.patch.emitEvent("opcrash", e),
              e.op.onError && e.op.onError(t)),
            this._log.warn("exception!"),
            this._log.error("ontriggered exception caught", t),
            this._log.error(t.stack),
            this._log.warn("exception in: " + e.op.name);
        }
      }),
      (j.prototype.call = function () {
        this._log.warn("call deprecated - use trigger() "), this.trigger();
      }),
      (j.prototype.execute = function () {
        this._log.warn(
          "### execute port: " + this.getName(),
          this.goals.length,
        );
      }),
      (j.prototype.setVariableName = function (t) {
        (this._useVariableName = t),
          this._op.patch.on("variableRename", (t, e) => {
            t == this._useVariableName && (this._useVariableName = e);
          });
      }),
      (j.prototype.getVariableName = function () {
        return this._useVariableName;
      }),
      (j.prototype.setVariable = function (t) {
        this.setAnimated(!1);
        const e = { useVariable: !1 };
        this._variableIn &&
          this._varChangeListenerId &&
          (this._variableIn.off(this._varChangeListenerId),
          (this._variableIn = null)),
          t
            ? ((this._variableIn = this._op.patch.getVar(t)),
              this._variableIn
                ? (this.type == o.OP_PORT_TYPE_OBJECT
                    ? (this._varChangeListenerId = this._variableIn.on(
                        "change",
                        () => {
                          this.set(null), this.set(this._variableIn.getValue());
                        },
                      ))
                    : (this._varChangeListenerId = this._variableIn.on(
                        "change",
                        this.set.bind(this),
                      )),
                  this.set(this._variableIn.getValue()))
                : this._log.warn("PORT VAR NOT FOUND!!!", t),
              (this._useVariableName = t),
              (e.useVariable = !0),
              (e.variableName = this._useVariableName))
            : ((e.variableName = this._useVariableName = null),
              (e.useVariable = !1)),
          this.setUiAttribs(e),
          this._op.patch.emitEvent("portSetVariable", this._op, this, t);
      }),
      (j.prototype._handleNoTriggerOpAnimUpdates = function (t) {
        let e = !1;
        for (let t = 0; t < this._op.portsIn.length; t++)
          if (this._op.portsIn.type == o.OP_PORT_TYPE_FUNCTION) {
            e = !0;
            break;
          }
        e ||
          (t
            ? (this._notriggerAnimUpdate = this._op.patch.on(
                "onRenderFrame",
                () => {
                  this.updateAnim();
                },
              ))
            : this._op.patch.removeEventListener(this._notriggerAnimUpdate));
      }),
      (j.prototype.setAnimated = function (t) {
        this._animated != t &&
          ((this._animated = t),
          (this._op._hasAnimPort = !0),
          this._animated &&
            !this.anim &&
            ((this.anim = new W({ name: "port " + this.name })),
            this.anim.addEventListener("onChange", () => {
              this._op.patch.emitEvent(
                "portAnimUpdated",
                this._op,
                this,
                this.anim,
              );
            })),
          this._onAnimToggle()),
          this._handleNoTriggerOpAnimUpdates(t),
          t || (this.anim = null),
          this.setUiAttribs({ isAnimated: this._animated });
      }),
      (j.prototype.toggleAnim = function () {
        (this._animated = !this._animated),
          this._animated &&
            !this.anim &&
            ((this.anim = new W({ name: "port " + this.name })),
            this.anim.addEventListener("onChange", () => {
              this._op.patch.emitEvent(
                "portAnimUpdated",
                this._op,
                this,
                this.anim,
              );
            })),
          this.setAnimated(this._animated),
          this._onAnimToggle(),
          this.setUiAttribs({ isAnimated: this._animated });
      }),
      (j.prototype.getType = function () {
        return this.type;
      }),
      (j.prototype.isLinked = function () {
        return (
          this.links.length > 0 ||
          this._animated ||
          null != this._useVariableName
        );
      }),
      (j.prototype.isBoundToVar = function () {
        const t = null != this._useVariableName;
        return (this.uiAttribs.boundToVar = t), t;
      }),
      (j.prototype.isAnimated = function () {
        return this._animated;
      }),
      (j.prototype.isHidden = function () {
        return this.uiAttribs.hidePort;
      }),
      (j.prototype._onTriggered = function (t) {
        this._activity(),
          this._op.updateAnims(),
          this._op.enabled && this.onTriggered && this.onTriggered(t);
      }),
      (j.prototype._onSetProfiling = function (t) {
        this._op.patch.profiler.add("port", this),
          this.setValue(t),
          this._op.patch.profiler.add("port", null);
      }),
      (j.prototype._onTriggeredProfiling = function () {
        this._op.enabled &&
          this.onTriggered &&
          (this._op.patch.profiler.add("port", this),
          this.onTriggered(),
          this._op.patch.profiler.add("port", null));
      }),
      (j.prototype.onValueChange = function (t) {
        this.onChange = t;
      }),
      (j.prototype.getUiActiveState = function () {
        return this._uiActiveState;
      }),
      (j.prototype.setUiActiveState = function (t) {
        (this._uiActiveState = t),
          this.onUiActiveStateChange && this.onUiActiveStateChange();
      }),
      (j.prototype.hidePort = function () {
        this._log.warn("op.hideport() is deprecated, do not use it!");
      }),
      (j.portTypeNumberToString = function (t) {
        return t == o.OP_PORT_TYPE_VALUE
          ? "value"
          : t == o.OP_PORT_TYPE_FUNCTION
            ? "function"
            : t == o.OP_PORT_TYPE_OBJECT
              ? "object"
              : t == o.OP_PORT_TYPE_ARRAY
                ? "array"
                : t == o.OP_PORT_TYPE_STRING
                  ? "string"
                  : t == o.OP_PORT_TYPE_DYNAMIC
                    ? "dynamic"
                    : "unknown";
      });
    const X = class {
      constructor(t, e, i, s, n, o, a, h, l, c) {
        if (
          ((this._log = new r("cg_uniform")),
          (this._type = e),
          (this._name = i),
          (this._shader = t),
          (this._value = 1e-5),
          (this._oldValue = null),
          (this._port = null),
          (this._structName = l),
          (this._structUniformName = h),
          (this._propertyName = c),
          this._shader._addUniform(this),
          (this.needsUpdate = !0),
          (this.shaderType = null),
          (this.comment = null),
          "f" == e)
        )
          (this.set = this.setValue = this.setValueF.bind(this)),
            (this.updateValue = this.updateValueF.bind(this));
        else if ("f[]" == e)
          (this.set = this.setValue = this.setValueArrayF.bind(this)),
            (this.updateValue = this.updateValueArrayF.bind(this));
        else if ("2f[]" == e)
          (this.set = this.setValue = this.setValueArray2F.bind(this)),
            (this.updateValue = this.updateValueArray2F.bind(this));
        else if ("3f[]" == e)
          (this.set = this.setValue = this.setValueArray3F.bind(this)),
            (this.updateValue = this.updateValueArray3F.bind(this));
        else if ("4f[]" == e)
          (this.set = this.setValue = this.setValueArray4F.bind(this)),
            (this.updateValue = this.updateValueArray4F.bind(this));
        else if ("i" == e)
          (this.set = this.setValue = this.setValueI.bind(this)),
            (this.updateValue = this.updateValueI.bind(this));
        else if ("2i" == e)
          (this.set = this.setValue = this.setValue2I.bind(this)),
            (this.updateValue = this.updateValue2I.bind(this));
        else if ("3i" == e)
          (this.set = this.setValue = this.setValue3I.bind(this)),
            (this.updateValue = this.updateValue3I.bind(this));
        else if ("4i" == e)
          (this.set = this.setValue = this.setValue4I.bind(this)),
            (this.updateValue = this.updateValue4I.bind(this));
        else if ("b" == e)
          (this.set = this.setValue = this.setValueBool.bind(this)),
            (this.updateValue = this.updateValueBool.bind(this));
        else if ("4f" == e)
          (this.set = this.setValue = this.setValue4F.bind(this)),
            (this.updateValue = this.updateValue4F.bind(this));
        else if ("3f" == e)
          (this.set = this.setValue = this.setValue3F.bind(this)),
            (this.updateValue = this.updateValue3F.bind(this));
        else if ("2f" == e)
          (this.set = this.setValue = this.setValue2F.bind(this)),
            (this.updateValue = this.updateValue2F.bind(this));
        else if ("t" == e)
          (this.set = this.setValue = this.setValueT.bind(this)),
            (this.updateValue = this.updateValueT.bind(this));
        else if ("tc" == e)
          (this.set = this.setValue = this.setValueT.bind(this)),
            (this.updateValue = this.updateValueT.bind(this));
        else if ("t[]" == e)
          (this.set = this.setValue = this.setValueArrayT.bind(this)),
            (this.updateValue = this.updateValueArrayT.bind(this));
        else {
          if ("m4" != e && "m4[]" != e) throw new Error("Unknown uniform type");
          (this.set = this.setValue = this.setValueM4.bind(this)),
            (this.updateValue = this.updateValueM4.bind(this));
        }
        "object" == typeof s && s instanceof j
          ? ((this._port = s),
            (this._value = this._port.get()),
            n && o && a
              ? ((n instanceof j && o instanceof j && a instanceof j) ||
                  this._log.error(
                    "[cgl_uniform] mixed port/value parameter for vec4 ",
                    this._name,
                  ),
                (this._value = [0, 0, 0, 0]),
                (this._port2 = n),
                (this._port3 = o),
                (this._port4 = a),
                this._port.on("change", this.updateFromPort4f.bind(this)),
                this._port2.on("change", this.updateFromPort4f.bind(this)),
                this._port3.on("change", this.updateFromPort4f.bind(this)),
                this._port4.on("change", this.updateFromPort4f.bind(this)),
                this.updateFromPort4f())
              : n && o
                ? ((n instanceof j && o instanceof j) ||
                    this._log.error(
                      "[cgl_uniform] mixed port/value parameter for vec4 ",
                      this._name,
                    ),
                  (this._value = [0, 0, 0]),
                  (this._port2 = n),
                  (this._port3 = o),
                  this._port.on("change", this.updateFromPort3f.bind(this)),
                  this._port2.on("change", this.updateFromPort3f.bind(this)),
                  this._port3.on("change", this.updateFromPort3f.bind(this)),
                  this.updateFromPort3f())
                : n
                  ? (n instanceof j ||
                      this._log.error(
                        "[cgl_uniform] mixed port/value parameter for vec4 ",
                        this._name,
                      ),
                    (this._value = [0, 0]),
                    (this._port2 = n),
                    this._port.on("change", this.updateFromPort2f.bind(this)),
                    this._port2.on("change", this.updateFromPort2f.bind(this)),
                    this.updateFromPort2f())
                  : this._port.on("change", this.updateFromPort.bind(this)))
          : (this._value = s),
          this.setValue(this._value),
          (this.needsUpdate = !0);
      }
      getType() {
        return this._type;
      }
      getName() {
        return this._name;
      }
      getValue() {
        return this._value;
      }
      getShaderType() {
        return this.shaderType;
      }
      isStructMember() {
        return !!this._structName;
      }
      updateFromPort4f() {
        (this._value[0] = this._port.get()),
          (this._value[1] = this._port2.get()),
          (this._value[2] = this._port3.get()),
          (this._value[3] = this._port4.get()),
          this.setValue(this._value);
      }
      updateFromPort3f() {
        (this._value[0] = this._port.get()),
          (this._value[1] = this._port2.get()),
          (this._value[2] = this._port3.get()),
          this.setValue(this._value);
      }
      updateFromPort2f() {
        (this._value[0] = this._port.get()),
          (this._value[1] = this._port2.get()),
          this.setValue(this._value);
      }
      updateFromPort() {
        this.setValue(this._port.get());
      }
    };
    class Q extends X {
      constructor(t, e, i, s, r, n, o, a, h, l) {
        super(t, e, i, s, r, n, o, a, h, l),
          (this._loc = -1),
          (this._cgl = t._cgl);
      }
      get name() {
        return this._name;
      }
      copy(t) {
        const e = new Q(
          t,
          this._type,
          this._name,
          this._value,
          this._port2,
          this._port3,
          this._port4,
          this._structUniformName,
          this._structName,
          this._propertyName,
        );
        return (e.shaderType = this.shaderType), e;
      }
      getGlslTypeString() {
        return Q.glslTypeString(this._type);
      }
      _isValidLoc() {
        return -1 != this._loc;
      }
      resetLoc() {
        (this._loc = -1), (this.needsUpdate = !0);
      }
      bindTextures() {}
      getLoc() {
        return this._loc;
      }
      updateFromPort4f() {
        (this._value[0] = this._port.get()),
          (this._value[1] = this._port2.get()),
          (this._value[2] = this._port3.get()),
          (this._value[3] = this._port4.get()),
          this.setValue(this._value);
      }
      updateFromPort3f() {
        (this._value[0] = this._port.get()),
          (this._value[1] = this._port2.get()),
          (this._value[2] = this._port3.get()),
          this.setValue(this._value);
      }
      updateFromPort2f() {
        (this._value[0] = this._port.get()),
          (this._value[1] = this._port2.get()),
          this.setValue(this._value);
      }
      updateFromPort() {
        this.setValue(this._port.get());
      }
      updateValueF() {
        this._isValidLoc()
          ? (this.needsUpdate = !1)
          : (this._loc = this._shader
              .getCgl()
              .gl.getUniformLocation(this._shader.getProgram(), this._name)),
          this._shader.getCgl().gl.uniform1f(this._loc, this._value),
          this._cgl.profileData.profileUniformCount++;
      }
      setValueF(t) {
        t != this._value && ((this.needsUpdate = !0), (this._value = t));
      }
      updateValueI() {
        this._isValidLoc()
          ? (this.needsUpdate = !1)
          : (this._loc = this._shader
              .getCgl()
              .gl.getUniformLocation(this._shader.getProgram(), this._name)),
          this._shader.getCgl().gl.uniform1i(this._loc, this._value),
          this._cgl.profileData.profileUniformCount++;
      }
      updateValue2I() {
        this._value &&
          (this._isValidLoc() ||
            ((this._loc = this._shader
              .getCgl()
              .gl.getUniformLocation(this._shader.getProgram(), this._name)),
            this._cgl.profileData.profileShaderGetUniform++,
            (this._cgl.profileData.profileShaderGetUniformName = this._name)),
          this._shader
            .getCgl()
            .gl.uniform2i(this._loc, this._value[0], this._value[1]),
          (this.needsUpdate = !1),
          this._cgl.profileData.profileUniformCount++);
      }
      updateValue3I() {
        this._value &&
          (this._isValidLoc() ||
            ((this._loc = this._shader
              .getCgl()
              .gl.getUniformLocation(this._shader.getProgram(), this._name)),
            this._cgl.profileData.profileShaderGetUniform++,
            (this._cgl.profileData.profileShaderGetUniformName = this._name)),
          this._shader
            .getCgl()
            .gl.uniform3i(
              this._loc,
              this._value[0],
              this._value[1],
              this._value[2],
            ),
          (this.needsUpdate = !1),
          this._cgl.profileData.profileUniformCount++);
      }
      updateValue4I() {
        this._isValidLoc() ||
          ((this._loc = this._shader
            .getCgl()
            .gl.getUniformLocation(this._shader.getProgram(), this._name)),
          this._cgl.profileData.profileShaderGetUniform++,
          (this._cgl.profileData.profileShaderGetUniformName = this._name)),
          this._shader
            .getCgl()
            .gl.uniform4i(
              this._loc,
              this._value[0],
              this._value[1],
              this._value[2],
              this._value[3],
            ),
          this._cgl.profileData.profileUniformCount++;
      }
      setValueI(t) {
        t != this._value && ((this.needsUpdate = !0), (this._value = t));
      }
      setValue2I(t) {
        t &&
          (this._oldValue
            ? (t[0] == this._oldValue[0] && t[1] == this._oldValue[1]) ||
              ((this._oldValue[0] = t[0]),
              (this._oldValue[1] = t[1]),
              (this.needsUpdate = !0))
            : ((this._oldValue = [t[0] - 1, 1]), (this.needsUpdate = !0)),
          (this._value = t));
      }
      setValue3I(t) {
        t &&
          (this._oldValue
            ? (t[0] == this._oldValue[0] &&
                t[1] == this._oldValue[1] &&
                t[2] == this._oldValue[2]) ||
              ((this._oldValue[0] = t[0]),
              (this._oldValue[1] = t[1]),
              (this._oldValue[2] = t[2]),
              (this.needsUpdate = !0))
            : ((this._oldValue = [t[0] - 1, 1, 2]), (this.needsUpdate = !0)),
          (this._value = t));
      }
      setValue4I(t) {
        (this.needsUpdate = !0), (this._value = t || vec4.create());
      }
      updateValueBool() {
        this._isValidLoc()
          ? (this.needsUpdate = !1)
          : (this._loc = this._shader
              .getCgl()
              .gl.getUniformLocation(this._shader.getProgram(), this._name)),
          this._shader.getCgl().gl.uniform1i(this._loc, this._value ? 1 : 0),
          this._cgl.profileData.profileUniformCount++;
      }
      setValueBool(t) {
        t != this._value && ((this.needsUpdate = !0), (this._value = t));
      }
      setValueArray4F(t) {
        (this.needsUpdate = !0), (this._value = t);
      }
      updateValueArray4F() {
        this._isValidLoc()
          ? (this.needsUpdate = !1)
          : (this._loc = this._shader
              .getCgl()
              .gl.getUniformLocation(this._shader.getProgram(), this._name)),
          this._value &&
            (this._shader.getCgl().gl.uniform4fv(this._loc, this._value),
            this._cgl.profileData.profileUniformCount++);
      }
      setValueArray3F(t) {
        (this.needsUpdate = !0), (this._value = t);
      }
      updateValueArray3F() {
        this._isValidLoc()
          ? (this.needsUpdate = !1)
          : (this._loc = this._shader
              .getCgl()
              .gl.getUniformLocation(this._shader.getProgram(), this._name)),
          this._value &&
            (this._shader.getCgl().gl.uniform3fv(this._loc, this._value),
            this._cgl.profileData.profileUniformCount++);
      }
      setValueArray2F(t) {
        (this.needsUpdate = !0), (this._value = t);
      }
      updateValueArray2F() {
        this._isValidLoc()
          ? (this.needsUpdate = !1)
          : (this._loc = this._shader
              .getCgl()
              .gl.getUniformLocation(this._shader.getProgram(), this._name)),
          this._value &&
            (this._shader.getCgl().gl.uniform2fv(this._loc, this._value),
            this._cgl.profileData.profileUniformCount++);
      }
      setValueArrayF(t) {
        (this.needsUpdate = !0), (this._value = t);
      }
      updateValueArrayF() {
        this._isValidLoc()
          ? (this.needsUpdate = !1)
          : (this._loc = this._shader
              .getCgl()
              .gl.getUniformLocation(this._shader.getProgram(), this._name)),
          this._value &&
            (this._shader.getCgl().gl.uniform1fv(this._loc, this._value),
            this._cgl.profileData.profileUniformCount++);
      }
      setValueArrayT(t) {
        (this.needsUpdate = !0), (this._value = t);
      }
      updateValue3F() {
        this._value &&
          (this._isValidLoc() ||
            ((this._loc = this._shader
              .getCgl()
              .gl.getUniformLocation(this._shader.getProgram(), this._name)),
            this._cgl.profileData.profileShaderGetUniform++,
            (this._cgl.profileData.profileShaderGetUniformName = this._name)),
          this._shader
            .getCgl()
            .gl.uniform3f(
              this._loc,
              this._value[0],
              this._value[1],
              this._value[2],
            ),
          (this.needsUpdate = !1),
          this._cgl.profileData.profileUniformCount++);
      }
      setValue3F(t) {
        t &&
          (this._oldValue
            ? (t[0] == this._oldValue[0] &&
                t[1] == this._oldValue[1] &&
                t[2] == this._oldValue[2]) ||
              ((this._oldValue[0] = t[0]),
              (this._oldValue[1] = t[1]),
              (this._oldValue[2] = t[2]),
              (this.needsUpdate = !0))
            : ((this._oldValue = [t[0] - 1, 1, 2]), (this.needsUpdate = !0)),
          (this._value = t));
      }
      updateValue2F() {
        this._value &&
          (this._isValidLoc() ||
            ((this._loc = this._shader
              .getCgl()
              .gl.getUniformLocation(this._shader.getProgram(), this._name)),
            this._cgl.profileData.profileShaderGetUniform++,
            (this._cgl.profileData.profileShaderGetUniformName = this._name)),
          this._shader
            .getCgl()
            .gl.uniform2f(this._loc, this._value[0], this._value[1]),
          (this.needsUpdate = !1),
          this._cgl.profileData.profileUniformCount++);
      }
      setValue2F(t) {
        t &&
          (this._oldValue
            ? (t[0] == this._oldValue[0] && t[1] == this._oldValue[1]) ||
              ((this._oldValue[0] = t[0]),
              (this._oldValue[1] = t[1]),
              (this.needsUpdate = !0))
            : ((this._oldValue = [t[0] - 1, 1]), (this.needsUpdate = !0)),
          (this._value = t));
      }
      updateValue4F() {
        this._isValidLoc() ||
          ((this._loc = this._shader
            .getCgl()
            .gl.getUniformLocation(this._shader.getProgram(), this._name)),
          this._cgl.profileData.profileShaderGetUniform++,
          (this._cgl.profileData.profileShaderGetUniformName = this._name)),
          this._value ||
            (this._log.warn("no value for uniform", this._name, this),
            (this._value = [0, 0, 0, 0])),
          (this.needsUpdate = !1),
          this._shader
            .getCgl()
            .gl.uniform4f(
              this._loc,
              this._value[0],
              this._value[1],
              this._value[2],
              this._value[3],
            ),
          this._cgl.profileData.profileUniformCount++;
      }
      setValue4F(t) {
        "number" == typeof this.value && (this.value = vec4.create()),
          t &&
            (this._oldValue
              ? (t[0] == this._oldValue[0] &&
                  t[1] == this._oldValue[1] &&
                  t[2] == this._oldValue[2] &&
                  t[3] == this._oldValue[3]) ||
                ((this._oldValue[0] = t[0]),
                (this._oldValue[1] = t[1]),
                (this._oldValue[2] = t[2]),
                (this.needsUpdate = !0))
              : ((this._oldValue = [t[0] - 1, 1, 2, 3]),
                (this.needsUpdate = !0)),
            (this._value = t));
      }
      updateValueM4() {
        if (
          (this._isValidLoc() ||
            ((this._loc = this._shader
              .getCgl()
              .gl.getUniformLocation(this._shader.getProgram(), this._name)),
            this._cgl.profileData.profileShaderGetUniform++,
            (this._cgl.profileData.profileShaderGetUniformName = this._name)),
          !this._value || this._value.length % 16 != 0)
        )
          return console.log("this.name", this._name, this._value);
        this._shader.getCgl().gl.uniformMatrix4fv(this._loc, !1, this._value),
          this._cgl.profileData.profileUniformCount++;
      }
      setValueM4(t) {
        (this.needsUpdate = !0), (this._value = t || mat4.create());
      }
      updateValueArrayT() {
        this._isValidLoc()
          ? (this.needsUpdate = !1)
          : (this._loc = this._shader
              .getCgl()
              .gl.getUniformLocation(this._shader.getProgram(), this._name)),
          this._value &&
            (this._shader.getCgl().gl.uniform1iv(this._loc, this._value),
            this._cgl.profileData.profileUniformCount++);
      }
      updateValueT() {
        this._isValidLoc() ||
          ((this._loc = this._shader
            .getCgl()
            .gl.getUniformLocation(this._shader.getProgram(), this._name)),
          this._cgl.profileData.profileShaderGetUniform++,
          (this._cgl.profileData.profileShaderGetUniformName = this._name)),
          this._cgl.profileData.profileUniformCount++,
          this._shader.getCgl().gl.uniform1i(this._loc, this._value),
          (this.needsUpdate = !1);
      }
      setValueT(t) {
        (this.needsUpdate = !0), (this._value = t);
      }
    }
    Q.glslTypeString = (t) =>
      "f" == t
        ? "float"
        : "b" == t
          ? "bool"
          : "i" == t
            ? "int"
            : "2i" == t
              ? "ivec2"
              : "2f" == t
                ? "vec2"
                : "3f" == t
                  ? "vec3"
                  : "4f" == t
                    ? "vec4"
                    : "m4" == t
                      ? "mat4"
                      : "t" == t
                        ? "sampler2D"
                        : "tc" == t
                          ? "samplerCube"
                          : "3f[]" == t || "m4[]" == t || "f[]" == t
                            ? null
                            : void console.warn(
                                "[CGL UNIFORM] unknown glsl type string ",
                                t,
                              );
    const q = 180 / Math.PI,
      K = { DEG2RAD: Math.PI / 180, RAD2DEG: q },
      J = {
        SHADERVAR_VERTEX_POSITION: "vPosition",
        SHADERVAR_VERTEX_NUMBER: "attrVertIndex",
        SHADERVAR_VERTEX_NORMAL: "attrVertNormal",
        SHADERVAR_VERTEX_TEXCOORD: "attrTexCoord",
        SHADERVAR_INSTANCE_MMATRIX: "instMat",
        SHADERVAR_VERTEX_COLOR: "attrVertColor",
        SHADERVAR_INSTANCE_INDEX: "instanceIndex",
        SHADERVAR_UNI_PROJMAT: "projMatrix",
        SHADERVAR_UNI_VIEWMAT: "viewMatrix",
        SHADERVAR_UNI_MODELMAT: "modelMatrix",
        SHADERVAR_UNI_NORMALMAT: "normalMatrix",
        SHADERVAR_UNI_INVVIEWMAT: "inverseViewMatrix",
        SHADERVAR_UNI_INVPROJMAT: "invProjMatrix",
        SHADERVAR_UNI_MATERIALID: "materialId",
        SHADERVAR_UNI_OBJECTID: "objectId",
        SHADERVAR_UNI_VIEWPOS: "camPos",
      },
      Z = {
        BLEND_NONE: 0,
        BLEND_NORMAL: 1,
        BLEND_ADD: 2,
        BLEND_SUB: 3,
        BLEND_MUL: 4,
      },
      $ = { lastMesh: null },
      tt = function (t, e, i) {
        (this._cgl = t),
          (this._log = new r("cgl_mesh")),
          (this._bufVertexAttrib = null),
          (this._bufVerticesIndizes = this._cgl.gl.createBuffer()),
          (this._indexType = this._cgl.gl.UNSIGNED_SHORT),
          (this._attributes = []),
          (this._attribLocs = {}),
          (this._geom = null),
          (this._lastShader = null),
          (this._numInstances = 0),
          (this._glPrimitive = i),
          (this._preWireframeGeom = null),
          (this.addVertexNumbers = !1),
          (this._name = "unknown"),
          (this.feedBackAttributes = []),
          this.setGeom(e),
          (this._feedBacks = []),
          (this._feedBacksChanged = !1),
          (this._transformFeedBackLoc = -1),
          (this._lastAttrUpdate = 0),
          (this.memFreed = !1),
          this._cgl.profileData.addHeavyEvent("mesh constructed", this._name),
          (this._queryExt = null),
          Object.defineProperty(this, "numInstances", {
            get() {
              return this._numInstances;
            },
            set(t) {
              this.setNumInstances(t);
            },
          });
      };
    (tt.prototype.freeMem = function () {
      this.memFreed = !0;
      for (let t = 0; t < this._attributes.length; t++)
        this._attributes[t].floatArray = null;
    }),
      (tt.prototype.updateVertices = function (t) {
        this.setAttribute(J.SHADERVAR_VERTEX_POSITION, t.vertices, 3),
          (this._numVerts = t.vertices.length / 3);
      }),
      (tt.prototype.setAttributePointer = function (t, e, i, s) {
        for (let r = 0; r < this._attributes.length; r++)
          this._attributes[r].name == t &&
            (this._attributes[r].pointer || (this._attributes[r].pointer = []),
            this._attributes[r].pointer.push({
              loc: -1,
              name: e,
              stride: i,
              offset: s,
              instanced: t == J.SHADERVAR_INSTANCE_MMATRIX,
            }));
      }),
      (tt.prototype.getAttribute = function (t) {
        for (let e = 0; e < this._attributes.length; e++)
          if (this._attributes[e].name == t) return this._attributes[e];
      }),
      (tt.prototype.setAttributeRange = function (t, e, i, s) {
        t &&
          (i || s) &&
          (t.name || this._log.stack("no attrname?!"),
          this._cgl.gl.bindBuffer(this._cgl.gl.ARRAY_BUFFER, t.buffer),
          (this._cgl.profileData.profileMeshAttributes += s - i || 0),
          (this._cgl.profileData.profileSingleMeshAttribute[this._name] =
            this._cgl.profileData.profileSingleMeshAttribute[this._name] || 0),
          (this._cgl.profileData.profileSingleMeshAttribute[this._name] +=
            s - i || 0),
          t.numItems < e.length / t.itemSize && this._resizeAttr(e, t),
          s >= e.length - 1 &&
            this._log.log(
              this._cgl.canvas.id +
                " " +
                t.name +
                " buffersubdata out of bounds ?",
              e.length,
              s,
              i,
              t,
            ),
          1 == this._cgl.glVersion
            ? this._cgl.gl.bufferSubData(this._cgl.gl.ARRAY_BUFFER, 0, e)
            : this._cgl.gl.bufferSubData(
                this._cgl.gl.ARRAY_BUFFER,
                4 * i,
                e,
                i,
                s - i,
              ));
      }),
      (tt.prototype._resizeAttr = function (t, e) {
        e.buffer && this._cgl.gl.deleteBuffer(e.buffer),
          (e.buffer = this._cgl.gl.createBuffer()),
          this._cgl.gl.bindBuffer(this._cgl.gl.ARRAY_BUFFER, e.buffer),
          this._bufferArray(t, e),
          (e.numItems = t.length / e.itemSize);
      }),
      (tt.prototype._bufferArray = function (t, e) {
        let i = e.floatArray || null;
        t &&
          (this._cgl.debugOneFrame &&
            console.log("_bufferArray", t.length, e.name),
          t instanceof Float32Array
            ? (i = t)
            : e && i && i.length == t.length
              ? i.set(t)
              : ((i = new Float32Array(t)),
                this._cgl.debugOneFrame &&
                  console.log(
                    "_bufferArray create new float32array",
                    t.length,
                    e.name,
                  ),
                t.length > 1e4 &&
                  (this._cgl.profileData.profileNonTypedAttrib++,
                  (this._cgl.profileData.profileNonTypedAttribNames =
                    "(" + this._name + ":" + e.name + ")"))),
          (e.arrayLength = i.length),
          (e.floatArray = null),
          this._cgl.gl.bufferData(
            this._cgl.gl.ARRAY_BUFFER,
            i,
            this._cgl.gl.DYNAMIC_DRAW,
          ));
      }),
      (tt.prototype.addAttribute =
        tt.prototype.updateAttribute =
        tt.prototype.setAttribute =
          function (t, e, i, s) {
            if (!e)
              throw (
                (this._log.error("mesh addAttribute - no array given! " + t),
                new Error())
              );
            let r = null,
              n = !1,
              o = 0;
            const a = e.length / i;
            for (
              this._cgl.profileData.profileMeshAttributes += a || 0,
                "function" == typeof s && (r = s),
                "object" == typeof s &&
                  (s.cb && (r = s.cb), s.instanced && (n = s.instanced)),
                t == J.SHADERVAR_INSTANCE_MMATRIX && (n = !0),
                o = 0;
              o < this._attributes.length;
              o++
            ) {
              const i = this._attributes[o];
              if (i.name == t)
                return (
                  i.numItems === a || this._resizeAttr(e, i),
                  this._cgl.gl.bindBuffer(this._cgl.gl.ARRAY_BUFFER, i.buffer),
                  this._bufferArray(e, i),
                  i
                );
            }
            const h = this._cgl.gl.createBuffer();
            this._cgl.gl.bindBuffer(this._cgl.gl.ARRAY_BUFFER, h);
            let l = this._cgl.gl.FLOAT;
            s && s.type && (l = s.type);
            const c = {
              buffer: h,
              name: t,
              cb: r,
              itemSize: i,
              numItems: a,
              startItem: 0,
              instanced: n,
              type: l,
            };
            return (
              this._bufferArray(e, c),
              t == J.SHADERVAR_VERTEX_POSITION && (this._bufVertexAttrib = c),
              this._attributes.push(c),
              (this._attribLocs = {}),
              c
            );
          }),
      (tt.prototype.getAttributes = function () {
        return this._attributes;
      }),
      (tt.prototype.updateTexCoords = function (t) {
        if (t.texCoords && t.texCoords.length > 0)
          this.setAttribute(J.SHADERVAR_VERTEX_TEXCOORD, t.texCoords, 2);
        else {
          const e = new Float32Array(Math.round((t.vertices.length / 3) * 2));
          this.setAttribute(J.SHADERVAR_VERTEX_TEXCOORD, e, 2);
        }
      }),
      (tt.prototype.updateNormals = function (t) {
        if (t.vertexNormals && t.vertexNormals.length > 0)
          this.setAttribute(J.SHADERVAR_VERTEX_NORMAL, t.vertexNormals, 3);
        else {
          const e = new Float32Array(Math.round(t.vertices.length));
          this.setAttribute(J.SHADERVAR_VERTEX_NORMAL, e, 3);
        }
      }),
      (tt.prototype._setVertexNumbers = function (t) {
        if (
          !this._verticesNumbers ||
          this._verticesNumbers.length != this._numVerts ||
          t
        ) {
          if (t) this._verticesNumbers = t;
          else {
            this._verticesNumbers = new Float32Array(this._numVerts);
            for (let t = 0; t < this._numVerts; t++)
              this._verticesNumbers[t] = t;
          }
          this.setAttribute(
            J.SHADERVAR_VERTEX_NUMBER,
            this._verticesNumbers,
            1,
            (t, e, i) => {
              i.uniformNumVertices ||
                (i.uniformNumVertices = new Q(
                  i,
                  "f",
                  "numVertices",
                  this._numVerts,
                )),
                i.uniformNumVertices.setValue(this._numVerts);
            },
          );
        }
      }),
      (tt.prototype.setVertexIndices = function (t) {
        if (this._bufVerticesIndizes)
          if (t.length > 0) {
            t instanceof Float32Array &&
              this._log.warn("vertIndices float32Array: " + this._name);
            for (let e = 0; e < t.length; e++)
              if (t[e] >= this._numVerts)
                return void this._log.warn(
                  "invalid index in " + this._name,
                  e,
                  t[e],
                );
            this._cgl.gl.bindBuffer(
              this._cgl.gl.ELEMENT_ARRAY_BUFFER,
              this._bufVerticesIndizes,
            ),
              t.length > 65535
                ? ((this.vertIndicesTyped = new Uint32Array(t)),
                  (this._indexType = this._cgl.gl.UNSIGNED_INT))
                : t instanceof Uint32Array
                  ? ((this.vertIndicesTyped = t),
                    (this._indexType = this._cgl.gl.UNSIGNED_INT))
                  : t instanceof Uint16Array
                    ? (this.vertIndicesTyped = t)
                    : ((this.vertIndicesTyped = new Uint16Array(t)),
                      (this._indexType = this._cgl.gl.UNSIGNED_SHORT)),
              this._cgl.gl.bufferData(
                this._cgl.gl.ELEMENT_ARRAY_BUFFER,
                this.vertIndicesTyped,
                this._cgl.gl.DYNAMIC_DRAW,
              ),
              (this._bufVerticesIndizes.itemSize = 1),
              (this._bufVerticesIndizes.numItems = t.length);
          } else this._bufVerticesIndizes.numItems = 0;
        else this._log.warn("no bufVerticesIndizes: " + this._name);
      }),
      (tt.prototype.setGeom = function (t, e) {
        (this._geom = t),
          null != t.glPrimitive && (this._glPrimitive = t.glPrimitive),
          this._geom &&
            this._geom.name &&
            (this._name = "mesh " + this._geom.name),
          ($.lastMesh = null),
          this._cgl.profileData.profileMeshSetGeom++,
          this._disposeAttributes(),
          this.updateVertices(this._geom),
          this.setVertexIndices(this._geom.verticesIndices),
          this.addVertexNumbers && this._setVertexNumbers();
        const i = this._geom.getAttributes(),
          s = {
            texCoords: J.SHADERVAR_VERTEX_TEXCOORD,
            vertexNormals: J.SHADERVAR_VERTEX_NORMAL,
            vertexColors: J.SHADERVAR_VERTEX_COLOR,
            tangents: "attrTangent",
            biTangents: "attrBiTangent",
          };
        for (const t in i)
          i[t].data &&
            i[t].data.length &&
            this.setAttribute(s[t] || t, i[t].data, i[t].itemSize);
        e && (this._geom = null);
      }),
      (tt.prototype._preBind = function (t) {
        for (let e = 0; e < this._attributes.length; e++)
          this._attributes[e].cb &&
            this._attributes[e].cb(this._attributes[e], this._geom, t);
      }),
      (tt.prototype._checkAttrLengths = function () {
        if (!this.memFreed)
          for (let t = 0; t < this._attributes.length; t++)
            if (
              this._attributes[t].arrayLength / this._attributes[t].itemSize <
              this._attributes[0].arrayLength / this._attributes[0].itemSize
            ) {
              let t = "unknown";
              this._geom && (t = this._geom.name);
            }
      }),
      (tt.prototype._bind = function (t) {
        if (!t.isValid()) return;
        let e = [];
        if (
          (this._attribLocs[t.id]
            ? (e = this._attribLocs[t.id])
            : (this._attribLocs[t.id] = e),
          (this._lastShader = t),
          t.lastCompile > this._lastAttrUpdate ||
            e.length != this._attributes.length)
        ) {
          this._lastAttrUpdate = t.lastCompile;
          for (let t = 0; t < this._attributes.length; t++) e[t] = -1;
        }
        for (let i = 0; i < this._attributes.length; i++) {
          const s = this._attributes[i];
          if (
            (-1 == e[i] &&
              s._attrLocationLastShaderTime != t.lastCompile &&
              ((s._attrLocationLastShaderTime = t.lastCompile),
              (e[i] = this._cgl.glGetAttribLocation(t.getProgram(), s.name)),
              this._cgl.profileData.profileAttrLoc++),
            -1 != e[i])
          )
            if (
              (this._cgl.gl.enableVertexAttribArray(e[i]),
              this._cgl.gl.bindBuffer(this._cgl.gl.ARRAY_BUFFER, s.buffer),
              s.instanced)
            )
              if (s.itemSize <= 4)
                (s.itemSize && 0 != s.itemSize) ||
                  this._log.warn(
                    "instanced attrib itemsize error",
                    this._geom.name,
                    s,
                  ),
                  this._cgl.gl.vertexAttribPointer(
                    e[i],
                    s.itemSize,
                    s.type,
                    !1,
                    4 * s.itemSize,
                    0,
                  ),
                  this._cgl.gl.vertexAttribDivisor(e[i], 1);
              else if (16 == s.itemSize) {
                const t = 64;
                this._cgl.gl.vertexAttribPointer(e[i], 4, s.type, !1, t, 0),
                  this._cgl.gl.enableVertexAttribArray(e[i] + 1),
                  this._cgl.gl.vertexAttribPointer(
                    e[i] + 1,
                    4,
                    s.type,
                    !1,
                    t,
                    16,
                  ),
                  this._cgl.gl.enableVertexAttribArray(e[i] + 2),
                  this._cgl.gl.vertexAttribPointer(
                    e[i] + 2,
                    4,
                    s.type,
                    !1,
                    t,
                    32,
                  ),
                  this._cgl.gl.enableVertexAttribArray(e[i] + 3),
                  this._cgl.gl.vertexAttribPointer(
                    e[i] + 3,
                    4,
                    s.type,
                    !1,
                    t,
                    48,
                  ),
                  this._cgl.gl.vertexAttribDivisor(e[i], 1),
                  this._cgl.gl.vertexAttribDivisor(e[i] + 1, 1),
                  this._cgl.gl.vertexAttribDivisor(e[i] + 2, 1),
                  this._cgl.gl.vertexAttribDivisor(e[i] + 3, 1);
              } else this._log.warn("unknown instance attrib size", s.name);
            else {
              if (
                ((s.itemSize && 0 != s.itemSize) ||
                  this._log.warn("attrib itemsize error", this._name, s),
                this._cgl.gl.vertexAttribPointer(
                  e[i],
                  s.itemSize,
                  s.type,
                  !1,
                  4 * s.itemSize,
                  0,
                ),
                s.pointer)
              )
                for (let e = 0; e < s.pointer.length; e++) {
                  const i = s.pointer[e];
                  -1 == i.loc &&
                    (i.loc = this._cgl.glGetAttribLocation(
                      t.getProgram(),
                      i.name,
                    )),
                    this._cgl.profileData.profileAttrLoc++,
                    this._cgl.gl.enableVertexAttribArray(i.loc),
                    this._cgl.gl.vertexAttribPointer(
                      i.loc,
                      s.itemSize,
                      s.type,
                      !1,
                      i.stride,
                      i.offset,
                    );
                }
              this.bindFeedback(s);
            }
        }
        this._bufVerticesIndizes &&
          0 !== this._bufVerticesIndizes.numItems &&
          this._cgl.gl.bindBuffer(
            this._cgl.gl.ELEMENT_ARRAY_BUFFER,
            this._bufVerticesIndizes,
          );
      }),
      (tt.prototype.unBind = function () {
        const t = this._lastShader;
        if (((this._lastShader = null), !t)) return;
        let e = [];
        this._attribLocs[t.id]
          ? (e = this._attribLocs[t.id])
          : (this._attribLocs[t.id] = e),
          ($.lastMesh = null);
        for (let t = 0; t < this._attributes.length; t++)
          this._attributes[t].instanced &&
            (this._attributes[t].itemSize <= 4
              ? (-1 != e[t] && this._cgl.gl.vertexAttribDivisor(e[t], 0),
                e[t] >= 0 && this._cgl.gl.disableVertexAttribArray(e[t]))
              : (this._cgl.gl.vertexAttribDivisor(e[t], 0),
                this._cgl.gl.vertexAttribDivisor(e[t] + 1, 0),
                this._cgl.gl.vertexAttribDivisor(e[t] + 2, 0),
                this._cgl.gl.vertexAttribDivisor(e[t] + 3, 0),
                this._cgl.gl.disableVertexAttribArray(e[t] + 1),
                this._cgl.gl.disableVertexAttribArray(e[t] + 2),
                this._cgl.gl.disableVertexAttribArray(e[t] + 3))),
            -1 != e[t] && this._cgl.gl.disableVertexAttribArray(e[t]);
      }),
      (tt.prototype.meshChanged = function () {
        return this._cgl.lastMesh && this._cgl.lastMesh != this;
      }),
      (tt.prototype.printDebug = function (t) {
        console.log("--attributes");
        for (let t = 0; t < this._attributes.length; t++)
          console.log("attribute " + t + " " + this._attributes[t].name);
      }),
      (tt.prototype.setNumVertices = function (t) {
        this._bufVertexAttrib.numItems = t;
      }),
      (tt.prototype.getNumVertices = function () {
        return this._bufVertexAttrib.numItems;
      }),
      (tt.prototype.render = function (t) {
        if (!t || !t.isValid() || this._cgl.aborted) return;
        if (
          (this._checkAttrLengths(),
          this._geom &&
            (!this._preWireframeGeom ||
              t.wireframe ||
              this._geom.isIndexed() ||
              (this.setGeom(this._preWireframeGeom),
              (this._preWireframeGeom = null)),
            t.wireframe))
        ) {
          let t = !1;
          this._geom.isIndexed() &&
            (this._preWireframeGeom ||
              ((this._preWireframeGeom = this._geom),
              (this._geom = this._geom.copy())),
            this._geom.unIndex(),
            (t = !0)),
            this._geom.getAttribute("attrBarycentric") ||
              (this._preWireframeGeom ||
                ((this._preWireframeGeom = this._geom),
                (this._geom = this._geom.copy())),
              (t = !0),
              this._geom.calcBarycentric()),
            t && this.setGeom(this._geom);
        }
        let e = !1;
        if (
          ($.lastMesh != this && ($.lastMesh && $.lastMesh.unBind(), (e = !0)),
          e && this._preBind(t),
          !t.bind())
        )
          return;
        this._bind(t),
          this.addVertexNumbers && this._setVertexNumbers(),
          ($.lastMesh = this);
        let i = this._cgl.gl.TRIANGLES;
        void 0 !== this._glPrimitive && (i = this._glPrimitive),
          null !== t.glPrimitive && (i = t.glPrimitive);
        let s = 1,
          r = this._cgl.profileData.doProfileGlQuery,
          n = !1;
        if (r) {
          let e = this._name + " - " + t.getName() + " #" + t.id;
          this._numInstances && (e += " instanced " + this._numInstances + "x");
          let i = this._cgl.profileData.glQueryData[e];
          if (
            (i || (i = { id: e, num: 0 }),
            (this._cgl.profileData.glQueryData[e] = i),
            this._queryExt ||
              !1 === this._queryExt ||
              (this._queryExt =
                this._cgl.enableExtension("EXT_disjoint_timer_query_webgl2") ||
                !1),
            this._queryExt)
          ) {
            if (
              i._drawQuery &&
              this._cgl.gl.getQueryParameter(
                i._drawQuery,
                this._cgl.gl.QUERY_RESULT_AVAILABLE,
              )
            ) {
              const t =
                this._cgl.gl.getQueryParameter(
                  i._drawQuery,
                  this._cgl.gl.QUERY_RESULT,
                ) / 1e6;
              (i._times = i._times || 0),
                (i._times += t),
                i._numcount++,
                (i.when = performance.now()),
                (i._drawQuery = null),
                (i.queryStarted = !1);
            }
            i.queryStarted ||
              ((i._drawQuery = this._cgl.gl.createQuery()),
              this._cgl.gl.beginQuery(
                this._queryExt.TIME_ELAPSED_EXT,
                i._drawQuery,
              ),
              (n = i.queryStarted = !0));
          }
        }
        if (
          (this.hasFeedbacks()
            ? this.drawFeedbacks(t, i)
            : this._bufVerticesIndizes &&
                0 !== this._bufVerticesIndizes.numItems
              ? (i == this._cgl.gl.TRIANGLES && (s = 3),
                0 === this._numInstances
                  ? this._cgl.gl.drawElements(
                      i,
                      this._bufVerticesIndizes.numItems,
                      this._indexType,
                      0,
                    )
                  : this._cgl.gl.drawElementsInstanced(
                      i,
                      this._bufVerticesIndizes.numItems,
                      this._indexType,
                      0,
                      this._numInstances,
                    ))
              : (i == this._cgl.gl.TRIANGLES && (s = 3),
                0 === this._numInstances
                  ? this._cgl.gl.drawArrays(
                      i,
                      this._bufVertexAttrib.startItem,
                      this._bufVertexAttrib.numItems -
                        this._bufVertexAttrib.startItem,
                    )
                  : this._cgl.gl.drawArraysInstanced(
                      i,
                      this._bufVertexAttrib.startItem,
                      this._bufVertexAttrib.numItems,
                      this._numInstances,
                    )),
          this._cgl.debugOneFrame &&
            this._cgl.gl.getError() != this._cgl.gl.NO_ERROR)
        ) {
          this._log.error("mesh draw gl error"),
            this._log.error("mesh", this),
            this._log.error("shader", t);
          for (
            let e = 0;
            e <
            this._cgl.gl.getProgramParameter(
              t.getProgram(),
              this._cgl.gl.ACTIVE_ATTRIBUTES,
            );
            e++
          ) {
            const i = this._cgl.gl.getActiveAttrib(t.getProgram(), e).name;
            this._log.error("attrib ", i);
          }
        }
        (this._cgl.profileData.profileMeshNumElements +=
          (this._bufVertexAttrib.numItems / s) * (this._numInstances || 1)),
          this._cgl.profileData.profileMeshDraw++,
          r && n && this._cgl.gl.endQuery(this._queryExt.TIME_ELAPSED_EXT),
          this._cgl.printError("mesh render " + this._name),
          this.unBind();
      }),
      (tt.prototype.setNumInstances = function (t) {
        if (((t = Math.max(0, t)), this._numInstances != t)) {
          this._numInstances = t;
          const e = new Float32Array(t);
          for (let i = 0; i < t; i++) e[i] = i;
          this.setAttribute(J.SHADERVAR_INSTANCE_INDEX, e, 1, {
            instanced: !0,
          });
        }
      }),
      (tt.prototype._disposeAttributes = function () {
        if (this._attributes) {
          for (let t = 0; t < this._attributes.length; t++)
            this._attributes[t].buffer &&
              (this._cgl.gl.deleteBuffer(this._attributes[t].buffer),
              (this._attributes[t].buffer = null));
          this._attributes.length = 0;
        }
      }),
      (tt.prototype.dispose = function () {
        this._bufVertexAttrib &&
          this._bufVertexAttrib.buffer &&
          this._cgl.gl.deleteBuffer(this._bufVertexAttrib.buffer),
          this._bufVerticesIndizes &&
            this._cgl.gl.deleteBuffer(this._bufVerticesIndizes),
          (this._bufVerticesIndizes = null),
          this._disposeAttributes();
      }),
      (function (t) {
        (t.prototype.hasFeedbacks = function () {
          return this._feedBacks.length > 0;
        }),
          (t.prototype.removeFeedbacks = function (t) {
            this._feedbacks &&
              ((this._feedbacks.length = 0), (this._feedBacksChanged = !0));
          }),
          (t.prototype.setAttributeFeedback = function () {}),
          (t.prototype.setFeedback = function (t, e, i) {
            let s = { nameOut: e },
              r = !1;
            this.unBindFeedbacks();
            for (let t = 0; t < this._feedBacks.length; t++)
              this._feedBacks[t].nameOut == e &&
                ((s = this._feedBacks[t]), (r = !0));
            return (
              r || (this._feedBacksChanged = !0),
              (s.initialArr = i),
              (s.attrib = t),
              s.outBuffer && this._cgl.gl.deleteBuffer(s.outBuffer),
              (s.outBuffer = this._cgl.gl.createBuffer()),
              this._cgl.gl.bindBuffer(this._cgl.gl.ARRAY_BUFFER, s.outBuffer),
              this._cgl.gl.bufferData(
                this._cgl.gl.ARRAY_BUFFER,
                s.initialArr,
                this._cgl.gl.STATIC_DRAW,
              ),
              this._cgl.gl.bindBuffer(
                this._cgl.gl.ARRAY_BUFFER,
                s.attrib.buffer,
              ),
              this._cgl.gl.bufferData(
                this._cgl.gl.ARRAY_BUFFER,
                s.initialArr,
                this._cgl.gl.STATIC_DRAW,
              ),
              r || this._feedBacks.push(s),
              s
            );
          }),
          (t.prototype.bindFeedback = function (t) {
            if (!this._feedBacks || 0 === this._feedBacks.length) return;
            -1 == this._transformFeedBackLoc &&
              (this._transformFeedBackLoc =
                this._cgl.gl.createTransformFeedback()),
              this._cgl.gl.bindTransformFeedback(
                this._cgl.gl.TRANSFORM_FEEDBACK,
                this._transformFeedBackLoc,
              );
            let e = !1;
            for (let i = 0; i < this._feedBacks.length; i++) {
              const s = this._feedBacks[i];
              s.attrib == t &&
                ((e = !0),
                this._cgl.gl.bindBufferBase(
                  this._cgl.gl.TRANSFORM_FEEDBACK_BUFFER,
                  i,
                  s.outBuffer,
                ));
            }
          }),
          (t.prototype.drawFeedbacks = function (t, e) {
            let i = 0;
            if (this._feedBacksChanged) {
              const e = [];
              for (
                this._cgl.gl.bindTransformFeedback(
                  this._cgl.gl.TRANSFORM_FEEDBACK,
                  this._transformFeedBackLoc,
                ),
                  i = 0;
                i < this._feedBacks.length;
                i++
              )
                e.push(this._feedBacks[i].nameOut);
              return (
                t.setFeedbackNames(e),
                console.log("feedbacknames", e),
                t.compile(),
                (this._feedBacksChanged = !1),
                this._cgl.gl.bindTransformFeedback(
                  this._cgl.gl.TRANSFORM_FEEDBACK,
                  null,
                ),
                void console.log("changed finished")
              );
            }
            this._cgl.gl.beginTransformFeedback(this.glPrimitive),
              this._cgl.gl.drawArrays(e, 0, this._feedBacks[0].attrib.numItems),
              this._cgl.gl.endTransformFeedback(),
              this.unBindFeedbacks(),
              this.feedBacksSwapBuffers();
          }),
          (t.prototype.unBindFeedbacks = function () {
            for (let t = 0; t < this._feedBacks.length; t++)
              this._cgl.gl.bindBufferBase(
                this._cgl.gl.TRANSFORM_FEEDBACK_BUFFER,
                t,
                null,
              );
            this._cgl.gl.bindTransformFeedback(
              this._cgl.gl.TRANSFORM_FEEDBACK,
              null,
            );
          }),
          (t.prototype.feedBacksSwapBuffers = function () {
            for (let t = 0; t < this._feedBacks.length; t++) {
              const e = this._feedBacks[t].attrib.buffer;
              (this._feedBacks[t].attrib.buffer = this._feedBacks[t].outBuffer),
                (this._feedBacks[t].outBuffer = e);
            }
          });
      })(tt);
    const et = {
        getSimpleRect: function (t, e) {
          const i = new G(e);
          return (
            (i.vertices = [1, 1, 0, -1, 1, 0, 1, -1, 0, -1, -1, 0]),
            (i.texCoords = [1, 1, 0, 1, 1, 0, 0, 0]),
            (i.verticesIndices = [0, 1, 2, 2, 1, 3]),
            (i.vertexNormals = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
            new tt(t, i)
          );
        },
        getSimpleCube: function (t, e) {
          const i = new G(e);
          return (
            (i.vertices = [
              -1, -1, 1, 1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, -1, 1, -1, -1, 1,
              1, -1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, 1, 1, -1, 1, 1, -1, -1,
              -1, 1, -1, -1, 1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1, 1,
              1, 1, -1, -1, -1, -1, -1, -1, 1, -1, 1, 1, -1, 1, -1,
            ]),
            i.setTexCoords([
              0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1,
              1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1,
              1, 0, 0, 0,
            ]),
            (i.verticesIndices = [
              0, 1, 2, 0, 2, 3, 4, 5, 6, 4, 6, 7, 8, 9, 10, 8, 10, 11, 12, 13,
              14, 12, 14, 15, 16, 17, 18, 16, 18, 19, 20, 21, 22, 20, 22, 23,
            ]),
            (i.vertexNormals = new Float32Array([
              0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, -1,
              0, 0, -1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0,
              0, -1, 0, 0, -1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, -1, 0, 0,
              -1, 0, 0, -1, 0, 0, -1, 0, 0,
            ])),
            (i.tangents = new Float32Array([
              0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1,
              0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 1, 0, 0, 1, 0, 0, 1,
              0, 0, 1, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 1, 0,
              0, 1, 0, 0, 1, 0, 0, 1,
            ])),
            (i.biTangents = new Float32Array([
              -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0,
              1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, -1, 0, 0, -1,
              0, 0, -1, 0, 0, -1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, -1,
              0, 0, -1, 0, 0, -1, 0, 0, -1,
            ])),
            new tt(t, i)
          );
        },
      },
      it = function (t, e) {
        (this._cgl = t),
          (this._log = new r("cgl_TextureEffect")),
          t.TextureEffectMesh || this.createMesh(),
          (this._textureSource = null),
          (this._options = e),
          (this.imgCompVer = 0),
          (this.aspectRatio = 1),
          (this._textureTarget = null),
          (this._frameBuf = this._cgl.gl.createFramebuffer()),
          (this._frameBuf2 = this._cgl.gl.createFramebuffer()),
          (this._renderbuffer = this._cgl.gl.createRenderbuffer()),
          (this._renderbuffer2 = this._cgl.gl.createRenderbuffer()),
          (this.switched = !1),
          (this.depth = !1);
      };
    (it.prototype.getWidth = function () {
      return this._textureSource.width;
    }),
      (it.prototype.getHeight = function () {
        return this._textureSource.height;
      }),
      (it.prototype.setSourceTexture = function (t) {
        null === t
          ? ((this._textureSource = new w(this._cgl)),
            this._textureSource.setSize(16, 16))
          : (this._textureSource = t),
          this._textureSource.compareSettings(this._textureTarget) ||
            (this._textureTarget && this._textureTarget.delete(),
            (this._textureTarget = this._textureSource.clone()),
            this._cgl.profileData.profileEffectBuffercreate++,
            this._cgl.gl.bindFramebuffer(
              this._cgl.gl.FRAMEBUFFER,
              this._frameBuf,
            ),
            this._cgl.gl.bindRenderbuffer(
              this._cgl.gl.RENDERBUFFER,
              this._renderbuffer,
            ),
            this.depth &&
              this._cgl.gl.renderbufferStorage(
                this._cgl.gl.RENDERBUFFER,
                this._cgl.gl.DEPTH_COMPONENT16,
                this._textureSource.width,
                this._textureSource.height,
              ),
            this._cgl.gl.framebufferTexture2D(
              this._cgl.gl.FRAMEBUFFER,
              this._cgl.gl.COLOR_ATTACHMENT0,
              this._cgl.gl.TEXTURE_2D,
              this._textureTarget.tex,
              0,
            ),
            this.depth &&
              this._cgl.gl.framebufferRenderbuffer(
                this._cgl.gl.FRAMEBUFFER,
                this._cgl.gl.DEPTH_ATTACHMENT,
                this._cgl.gl.RENDERBUFFER,
                this._renderbuffer,
              ),
            this._cgl.gl.bindTexture(this._cgl.gl.TEXTURE_2D, null),
            this._cgl.gl.bindRenderbuffer(this._cgl.gl.RENDERBUFFER, null),
            this._cgl.gl.bindFramebuffer(this._cgl.gl.FRAMEBUFFER, null),
            this._cgl.gl.bindFramebuffer(
              this._cgl.gl.FRAMEBUFFER,
              this._frameBuf2,
            ),
            this._cgl.gl.bindRenderbuffer(
              this._cgl.gl.RENDERBUFFER,
              this._renderbuffer2,
            ),
            this.depth &&
              this._cgl.gl.renderbufferStorage(
                this._cgl.gl.RENDERBUFFER,
                this._cgl.gl.DEPTH_COMPONENT16,
                this._textureSource.width,
                this._textureSource.height,
              ),
            this._cgl.gl.framebufferTexture2D(
              this._cgl.gl.FRAMEBUFFER,
              this._cgl.gl.COLOR_ATTACHMENT0,
              this._cgl.gl.TEXTURE_2D,
              this._textureSource.tex,
              0,
            ),
            this.depth &&
              this._cgl.gl.framebufferRenderbuffer(
                this._cgl.gl.FRAMEBUFFER,
                this._cgl.gl.DEPTH_ATTACHMENT,
                this._cgl.gl.RENDERBUFFER,
                this._renderbuffer2,
              ),
            this._cgl.gl.bindTexture(this._cgl.gl.TEXTURE_2D, null),
            this._cgl.gl.bindRenderbuffer(this._cgl.gl.RENDERBUFFER, null),
            this._cgl.gl.bindFramebuffer(this._cgl.gl.FRAMEBUFFER, null)),
          (this.aspectRatio =
            this._textureSource.width / this._textureSource.height);
      }),
      (it.prototype.continueEffect = function () {
        this._cgl.pushDepthTest(!1),
          this._cgl.pushModelMatrix(),
          this._cgl.pushPMatrix(),
          this._cgl.pushViewPort(
            0,
            0,
            this.getCurrentTargetTexture().width,
            this.getCurrentTargetTexture().height,
          ),
          mat4.perspective(
            this._cgl.pMatrix,
            45,
            this.getCurrentTargetTexture().width /
              this.getCurrentTargetTexture().height,
            0.1,
            1100,
          ),
          this._cgl.pushPMatrix(),
          mat4.identity(this._cgl.pMatrix),
          this._cgl.pushViewMatrix(),
          mat4.identity(this._cgl.vMatrix),
          this._cgl.pushModelMatrix(),
          mat4.identity(this._cgl.mMatrix);
      }),
      (it.prototype.startEffect = function (t) {
        this._textureTarget
          ? ((this.switched = !1),
            this.continueEffect(),
            t && (this._bgTex = t),
            (this._countEffects = 0))
          : this._log.warn("effect has no target");
      }),
      (it.prototype.endEffect = function () {
        this._cgl.popDepthTest(),
          this._cgl.popModelMatrix(),
          this._cgl.popPMatrix(),
          this._cgl.popModelMatrix(),
          this._cgl.popViewMatrix(),
          this._cgl.popPMatrix(),
          this._cgl.popViewPort();
      }),
      (it.prototype.bind = function () {
        null !== this._textureSource
          ? this.switched
            ? (this._cgl.gl.bindFramebuffer(
                this._cgl.gl.FRAMEBUFFER,
                this._frameBuf2,
              ),
              this._cgl.pushGlFrameBuffer(this._frameBuf2))
            : (this._cgl.gl.bindFramebuffer(
                this._cgl.gl.FRAMEBUFFER,
                this._frameBuf,
              ),
              this._cgl.pushGlFrameBuffer(this._frameBuf))
          : this._log.warn("no base texture set!");
      }),
      (it.prototype.finish = function () {
        null !== this._textureSource
          ? (this._cgl.TextureEffectMesh.render(this._cgl.getShader()),
            this._cgl.gl.bindFramebuffer(
              this._cgl.gl.FRAMEBUFFER,
              this._cgl.popGlFrameBuffer(),
            ),
            this._cgl.profileData.profileTextureEffect++,
            this._textureTarget.filter == w.FILTER_MIPMAP &&
              (this.switched
                ? (this._cgl.gl.bindTexture(
                    this._cgl.gl.TEXTURE_2D,
                    this._textureSource.tex,
                  ),
                  this._textureSource.updateMipMap())
                : (this._cgl.gl.bindTexture(
                    this._cgl.gl.TEXTURE_2D,
                    this._textureTarget.tex,
                  ),
                  this._textureTarget.updateMipMap()),
              this._cgl.gl.bindTexture(this._cgl.gl.TEXTURE_2D, null)),
            (this.switched = !this.switched),
            this._countEffects++)
          : this._log.warn("no base texture set!");
      }),
      (it.prototype.getCurrentTargetTexture = function () {
        return this.switched ? this._textureSource : this._textureTarget;
      }),
      (it.prototype.getCurrentSourceTexture = function () {
        return 0 == this._countEffects && this._bgTex
          ? this._bgTex
          : this.switched
            ? this._textureTarget
            : this._textureSource;
      }),
      (it.prototype.delete = function () {
        this._textureTarget && this._textureTarget.delete(),
          this._textureSource && this._textureSource.delete(),
          this._cgl.gl.deleteRenderbuffer(this._renderbuffer),
          this._cgl.gl.deleteFramebuffer(this._frameBuf);
      }),
      (it.prototype.createMesh = function () {
        this._cgl.TextureEffectMesh = et.getSimpleRect(
          this._cgl,
          "texEffectRect",
        );
      }),
      (it.checkOpNotInTextureEffect = function (t) {
        return !(
          t.patch.cgl &&
          (t.uiAttribs.error && !t.patch.cgl.currentTextureEffect
            ? (t.setUiError("textureeffect", null), 0)
            : t.patch.cgl.currentTextureEffect &&
              (t.patch.cgl.currentTextureEffect && !t.uiAttribs.error
                ? (t.setUiError(
                    "textureeffect",
                    "This op can not be a child of a ImageCompose/texture effect! imagecompose should only have textureeffect childs.",
                    0,
                  ),
                  1)
                : t.patch.cgl.currentTextureEffect))
        );
      }),
      (it.checkOpInEffect = function (t, e) {
        if (((e = e || 0), t.patch.cgl.currentTextureEffect)) {
          if (
            t.uiAttribs.uierrors &&
            t.patch.cgl.currentTextureEffect.imgCompVer >= e
          )
            return t.setUiError("texeffect", null), !0;
          e &&
            t.patch.cgl.currentTextureEffect.imgCompVer < e &&
            t.setUiError(
              "texeffect",
              "This op must be a child of an ImageCompose op with version >=" +
                e +
                ' <span class="button-small" onclick="gui.patchView.downGradeOp(\'' +
                t.id +
                "','" +
                t.name +
                "')\">Downgrade</span> to previous version",
              1,
            );
        }
        return (
          !!t.patch.cgl.currentTextureEffect ||
          (t.patch.cgl.currentTextureEffect ||
          (t.uiAttribs.uierrors && 0 != t.uiAttribs.uierrors.length)
            ? !!t.patch.cgl.currentTextureEffect
            : (t.setUiError(
                "texeffect",
                'This op must be a child of an ImageCompose op! More infos <a href="https://docs.cables.gl/image_composition/image_composition.html" target="_blank">here</a>. ',
                1,
              ),
              !1))
        );
      }),
      (it.getBlendCode = function (t) {
        let e =
          "".endl() +
          "vec3 _blend(vec3 base,vec3 blend)".endl() +
          "{".endl() +
          "   vec3 colNew=blend;".endl() +
          "   #ifdef BM_MULTIPLY".endl() +
          "       colNew=base*blend;".endl() +
          "   #endif".endl() +
          "   #ifdef BM_MULTIPLY_INV".endl() +
          "       colNew=base* vec3(1.0)-blend;".endl() +
          "   #endif".endl() +
          "   #ifdef BM_AVERAGE".endl() +
          "       colNew=((base + blend) / 2.0);".endl() +
          "   #endif".endl() +
          "   #ifdef BM_ADD".endl() +
          "       colNew=min(base + blend, vec3(1.0));".endl() +
          "   #endif".endl() +
          "   #ifdef BM_SUBTRACT_ONE".endl() +
          "       colNew=max(base + blend - vec3(1.0), vec3(0.0));".endl() +
          "   #endif".endl() +
          "   #ifdef BM_SUBTRACT".endl() +
          "       colNew=base - blend;".endl() +
          "   #endif".endl() +
          "   #ifdef BM_DIFFERENCE".endl() +
          "       colNew=abs(base - blend);".endl() +
          "   #endif".endl() +
          "   #ifdef BM_NEGATION".endl() +
          "       colNew=(vec3(1.0) - abs(vec3(1.0) - base - blend));".endl() +
          "   #endif".endl() +
          "   #ifdef BM_EXCLUSION".endl() +
          "       colNew=(base + blend - 2.0 * base * blend);".endl() +
          "   #endif".endl() +
          "   #ifdef BM_LIGHTEN".endl() +
          "       colNew=max(blend, base);".endl() +
          "   #endif".endl() +
          "   #ifdef BM_DARKEN".endl() +
          "       colNew=min(blend, base);".endl() +
          "   #endif".endl() +
          "   #ifdef BM_OVERLAY".endl() +
          "      #define BlendOverlayf(base, blend)  (base < 0.5 ? (2.0 * base * blend) : (1.0 - 2.0 * (1.0 - base) * (1.0 - blend)))".endl() +
          "      colNew=vec3(BlendOverlayf(base.r, blend.r),BlendOverlayf(base.g, blend.g),BlendOverlayf(base.b, blend.b));".endl() +
          "   #endif".endl() +
          "   #ifdef BM_SCREEN".endl() +
          "      #define BlendScreenf(base, blend)       (1.0 - ((1.0 - base) * (1.0 - blend)))".endl() +
          "      colNew=vec3(BlendScreenf(base.r, blend.r),BlendScreenf(base.g, blend.g),BlendScreenf(base.b, blend.b));".endl() +
          "   #endif".endl() +
          "   #ifdef BM_SOFTLIGHT".endl() +
          "      #define BlendSoftLightf(base, blend)    ((blend < 0.5) ? (2.0 * base * blend + base * base * (1.0 - 2.0 * blend)) : (sqrt(base) * (2.0 * blend - 1.0) + 2.0 * base * (1.0 - blend)))".endl() +
          "      colNew=vec3(BlendSoftLightf(base.r, blend.r),BlendSoftLightf(base.g, blend.g),BlendSoftLightf(base.b, blend.b));".endl() +
          "   #endif".endl() +
          "   #ifdef BM_HARDLIGHT".endl() +
          "      #define BlendOverlayf(base, blend)  (base < 0.5 ? (2.0 * base * blend) : (1.0 - 2.0 * (1.0 - base) * (1.0 - blend)))".endl() +
          "      colNew=vec3(BlendOverlayf(base.r, blend.r),BlendOverlayf(base.g, blend.g),BlendOverlayf(base.b, blend.b));".endl() +
          "   #endif".endl() +
          "   #ifdef BM_COLORDODGE".endl() +
          "      #define BlendColorDodgef(base, blend)   ((blend == 1.0) ? blend : min(base / (1.0 - blend), 1.0))".endl() +
          "      colNew=vec3(BlendColorDodgef(base.r, blend.r),BlendColorDodgef(base.g, blend.g),BlendColorDodgef(base.b, blend.b));".endl() +
          "   #endif".endl() +
          "   #ifdef BM_COLORBURN".endl() +
          "      #define BlendColorBurnf(base, blend)    ((blend == 0.0) ? blend : max((1.0 - ((1.0 - base) / blend)), 0.0))".endl() +
          "      colNew=vec3(BlendColorBurnf(base.r, blend.r),BlendColorBurnf(base.g, blend.g),BlendColorBurnf(base.b, blend.b));".endl() +
          "   #endif".endl() +
          "   return colNew;".endl() +
          "}".endl();
        return (
          t ||
            (e +=
              "vec4 cgl_blend(vec4 oldColor,vec4 newColor,float amount)".endl() +
              "{".endl() +
              "vec4 col=vec4( _blend(oldColor.rgb,newColor.rgb) ,1.0);".endl() +
              "col=vec4( mix( col.rgb, oldColor.rgb ,1.0-oldColor.a*amount),1.0);".endl() +
              "return col;".endl() +
              "}".endl()),
          t >= 3 &&
            (e +=
              "vec4 cgl_blendPixel(vec4 base,vec4 col,float amount)".endl() +
              "{".endl() +
              "#ifdef BM_MATH_ADD".endl() +
              "   return vec4(base.rgb+col.rgb*amount,1.0);".endl() +
              "#endif".endl() +
              "#ifdef BM_MATH_SUB".endl() +
              "   return vec4(base.rgb-col.rgb*amount,1.0);".endl() +
              "#endif".endl() +
              "#ifdef BM_MATH_MUL".endl() +
              "   return vec4(base.rgb*col.rgb*amount,1.0);".endl() +
              "#endif".endl() +
              "#ifdef BM_MATH_DIV".endl() +
              "   return vec4(base.rgb/col.rgb*amount,1.0);".endl() +
              "#endif".endl() +
              "#ifndef BM_MATH".endl() +
              "vec3 colNew=_blend(base.rgb,col.rgb);".endl() +
              "float newA=clamp(base.a+(col.a*amount),0.,1.);".endl() +
              "#ifdef BM_ALPHAMASKED".endl() +
              "newA=base.a;".endl() +
              "#endif".endl() +
              "return vec4(".endl() +
              "mix(colNew,base.rgb,1.0-(amount*col.a)),".endl() +
              "newA);".endl() +
              "#endif".endl() +
              "}".endl()),
          e
        );
      }),
      (it.onChangeBlendSelect = function (t, e, i = !1) {
        (e = String(e)),
          t.toggleDefine("BM_NORMAL", "normal" == e),
          t.toggleDefine("BM_MULTIPLY", "multiply" == e),
          t.toggleDefine("BM_MULTIPLY_INV", "multiply invert" == e),
          t.toggleDefine("BM_AVERAGE", "average" == e),
          t.toggleDefine("BM_ADD", "add" == e),
          t.toggleDefine("BM_SUBTRACT_ONE", "subtract one" == e),
          t.toggleDefine("BM_SUBTRACT", "subtract" == e),
          t.toggleDefine("BM_DIFFERENCE", "difference" == e),
          t.toggleDefine("BM_NEGATION", "negation" == e),
          t.toggleDefine("BM_EXCLUSION", "exclusion" == e),
          t.toggleDefine("BM_LIGHTEN", "lighten" == e),
          t.toggleDefine("BM_DARKEN", "darken" == e),
          t.toggleDefine("BM_OVERLAY", "overlay" == e),
          t.toggleDefine("BM_SCREEN", "screen" == e),
          t.toggleDefine("BM_SOFTLIGHT", "softlight" == e),
          t.toggleDefine("BM_HARDLIGHT", "hardlight" == e),
          t.toggleDefine("BM_COLORDODGE", "color dodge" == e),
          t.toggleDefine("BM_COLORBURN", "color burn" == e),
          t.toggleDefine("BM_MATH_ADD", "Math Add" == e),
          t.toggleDefine("BM_MATH_SUB", "Math Subtract" == e),
          t.toggleDefine("BM_MATH_MUL", "Math Multiply" == e),
          t.toggleDefine("BM_MATH_DIV", "Math Divide" == e),
          t.toggleDefine("BM_MATH", 0 == e.indexOf("Math ")),
          t.toggleDefine("BM_ALPHAMASKED", i);
      }),
      (it.AddBlendSelect = function (t, e, i) {
        return t.inValueSelect(
          e || "Blend Mode",
          [
            "normal",
            "lighten",
            "darken",
            "multiply",
            "multiply invert",
            "average",
            "add",
            "subtract",
            "difference",
            "negation",
            "exclusion",
            "overlay",
            "screen",
            "color dodge",
            "color burn",
            "softlight",
            "hardlight",
            "subtract one",
            "Math Add",
            "Math Subtract",
            "Math Multiply",
            "Math Divide",
          ],
          i || "normal",
        );
      }),
      (it.AddBlendAlphaMask = function (t, e, i) {
        return t.inSwitch(e || "Alpha Mask", ["Off", "On"], i || "Off");
      }),
      (it.setupBlending = function (t, e, i, s, r) {
        const n = () => {
          let s = !1;
          r && (s = "On" == r.get()), it.onChangeBlendSelect(e, i.get(), s);
          let n = i.get();
          "normal" == n
            ? (n = null)
            : "multiply" == n
              ? (n = "mul")
              : "multiply invert" == n
                ? (n = "mulinv")
                : "lighten" == n
                  ? (n = "light")
                  : "darken" == n
                    ? (n = "darken")
                    : "average" == n
                      ? (n = "avg")
                      : "subtract one" == n
                        ? (n = "sub one")
                        : "subtract" == n
                          ? (n = "sub")
                          : "difference" == n
                            ? (n = "diff")
                            : "negation" == n
                              ? (n = "neg")
                              : "exclusion" == n
                                ? (n = "exc")
                                : "overlay" == n
                                  ? (n = "ovl")
                                  : "color dodge" == n
                                    ? (n = "dodge")
                                    : "color burn" == n
                                      ? (n = "burn")
                                      : "softlight" == n
                                        ? (n = "soft")
                                        : "hardlight" == n
                                          ? (n = "hard")
                                          : "Math Add" == n
                                            ? (n = "+")
                                            : "Math Subtract" == n
                                              ? (n = "-")
                                              : "Math Multiply" == n
                                                ? (n = "*")
                                                : "Math Divide" == n &&
                                                  (n = "/"),
            t.setUiAttrib({ extendTitle: n });
        };
        t.setPortGroup("Blending", [i, s, r]);
        let o = !1;
        (i.onChange = n),
          r && ((r.onChange = n), (o = "On" == r.get())),
          it.onChangeBlendSelect(e, i.get(), o);
      });
    const st = {
        "CGL.BLENDMODES": function () {
          (this.name = "blendmodes"), (this.srcHeadFrag = it.getBlendCode());
        },
        "CGL.BLENDMODES3": function () {
          (this.name = "blendmodes3"), (this.srcHeadFrag = it.getBlendCode(3));
        },
        "CGL.LUMINANCE": function () {
          (this.name = "luminance"),
            (this.srcHeadFrag =
              "".endl() +
              "float cgl_luminance(vec3 c)".endl() +
              "{".endl() +
              "    return dot(vec3(0.2126,0.7152,0.0722),c);".endl() +
              "}".endl());
        },
        "CGL.RANDOM_OLD": function () {
          (this.name = "randomNumber"),
            (this.srcHeadFrag =
              "".endl() +
              "float cgl_random(vec2 co)".endl() +
              "{".endl() +
              "    return fract(sin(dot(co.xy ,vec2(12.9898,4.1414))) * 432758.5453);".endl() +
              "}".endl() +
              "vec3 cgl_random3(vec2 co)".endl() +
              "{".endl() +
              "    return vec3( cgl_random(co),cgl_random(co+0.5711),cgl_random(co+1.5711));".endl() +
              "}");
        },
        "CGL.RANDOM_LOW": function () {
          (this.name = "randomNumber"),
            (this.srcHeadFrag =
              "".endl() +
              "float cgl_random(vec2 co)".endl() +
              "{".endl() +
              "    return fract(sin(dot(co.xy ,vec2(12.9898,4.1414))) * 358.5453);".endl() +
              "}".endl() +
              "vec3 cgl_random3(vec2 co)".endl() +
              "{".endl() +
              "    return vec3( cgl_random(co),cgl_random(co+0.5711),cgl_random(co+1.5711));".endl() +
              "}");
        },
        "CGL.RANDOM_TEX": function () {
          (this.name = "randomNumbertex"),
            (this.srcHeadFrag =
              "".endl() +
              "UNI sampler2D CGLRNDTEX;".endl() +
              "float cgl_random(vec2 co)".endl() +
              "{".endl() +
              "    return texture(CGLRNDTEX,co*5711.0).r;".endl() +
              "}".endl() +
              "vec3 cgl_random3(vec2 co)".endl() +
              "{".endl() +
              "    return texture(CGLRNDTEX,co*5711.0).rgb;".endl() +
              "}"),
            (this.initUniforms = function (t) {
              return [new Q(t, "t", "CGLRNDTEX", 7)];
            }),
            (this.onBind = function (t, e) {
              w.getRandomTexture(t), t.setTexture(7, w.getRandomTexture(t).tex);
            });
        },
      },
      rt = function () {
        return window.performance.now();
      },
      nt = function () {
        return rt();
      },
      ot = function () {
        CABLES.EventTarget.apply(this),
          (this._timeStart = rt()),
          (this._timeOffset = 0),
          (this._currentTime = 0),
          (this._lastTime = 0),
          (this._paused = !0),
          (this._delay = 0),
          (this.overwriteTime = -1);
      };
    (ot.prototype._getTime = function () {
      return (
        (this._lastTime = (rt() - this._timeStart) / 1e3),
        this._lastTime + this._timeOffset
      );
    }),
      (ot.prototype.setDelay = function (t) {
        (this._delay = t), this.emitEvent("timeChange");
      }),
      (ot.prototype.isPlaying = function () {
        return !this._paused;
      }),
      (ot.prototype.update = function () {
        if (!this._paused)
          return (this._currentTime = this._getTime()), this._currentTime;
      }),
      (ot.prototype.getMillis = function () {
        return 1e3 * this.get();
      }),
      (ot.prototype.get = ot.prototype.getTime =
        function () {
          return this.overwriteTime >= 0
            ? this.overwriteTime - this._delay
            : this._currentTime - this._delay;
        }),
      (ot.prototype.togglePlay = function () {
        this._paused ? this.play() : this.pause();
      }),
      (ot.prototype.setTime = function (t) {
        (isNaN(t) || t < 0) && (t = 0),
          (this._timeStart = rt()),
          (this._timeOffset = t),
          (this._currentTime = t),
          this.emitEvent("timeChange");
      }),
      (ot.prototype.setOffset = function (t) {
        this._currentTime + t < 0
          ? ((this._timeStart = rt()),
            (this._timeOffset = 0),
            (this._currentTime = 0))
          : ((this._timeOffset += t),
            (this._currentTime = this._lastTime + this._timeOffset)),
          this.emitEvent("timeChange");
      }),
      (ot.prototype.play = function () {
        (this._timeStart = rt()),
          (this._paused = !1),
          this.emitEvent("playPause");
      }),
      (ot.prototype.pause = function () {
        (this._timeOffset = this._currentTime),
          (this._paused = !0),
          this.emitEvent("playPause");
      });
    const at = Math.PI / 180,
      ht = (Math.PI, -1 != window.navigator.userAgent.indexOf("Windows")),
      lt = function (t) {
        let e;
        if (t.wheelDelta)
          (e =
            (t.wheelDelta % 120) - 0 == -0
              ? t.wheelDelta / 120
              : t.wheelDelta / 30),
            (e *= -1.5),
            ht && (e *= 2);
        else {
          let i = t.deltaY;
          t.shiftKey && (i = t.deltaX);
          const s = i || t.detail;
          (e = -(s % 3 ? 10 * s : s / 3)), (e *= -3);
        }
        return e > 20 && (e = 20), e < -20 && (e = -20), e;
      },
      ct = lt,
      ut = lt,
      pt = {
        "&": "&amp;",
        "<": "&lt;",
        ">": "&gt;",
        '"': "&quot;",
        "'": "&#39;",
      },
      _t = /[&<>"']/g,
      dt = RegExp(_t.source);
    let gt = 0;
    const ft = function (t, e) {
      if (!t) throw new Error("shader constructed without cgl " + e);
      (this._log = new r("cgl_shader")),
        (this._cgl = t),
        e || this._log.stack("no shader name given"),
        (this._name = e || "unknown"),
        (this.glslVersion = 0),
        t.glVersion > 1 && (this.glslVersion = 300),
        (this._materialId = ++gt),
        (this.id = b()),
        (this._isValid = !0),
        (this._program = null),
        (this._uniforms = []),
        (this._drawBuffers = [!0]),
        (this._defines = []),
        (this._needsRecompile = !0),
        (this._compileReason = "initial"),
        (this.ignoreMissingUniforms = !1),
        (this._projMatrixUniform = null),
        (this._mvMatrixUniform = null),
        (this._mMatrixUniform = null),
        (this._vMatrixUniform = null),
        (this._camPosUniform = null),
        (this._normalMatrixUniform = null),
        (this._inverseViewMatrixUniform = null),
        (this._attrVertexPos = -1),
        (this.precision = t.patch.config.glslPrecision || "highp"),
        (this._pMatrixState = -1),
        (this._vMatrixState = -1),
        (this._countMissingUniforms = 0),
        (this._modGroupCount = 0),
        (this._feedBackNames = []),
        (this._attributes = []),
        (this.glPrimitive = null),
        (this.offScreenPass = !1),
        (this._extensions = []),
        (this.srcVert = this.getDefaultVertexShader()),
        (this.srcFrag = this.getDefaultFragmentShader()),
        (this.lastCompile = 0),
        (this._moduleNames = []),
        (this._modules = []),
        (this._moduleNumId = 0),
        (this._libs = []),
        (this._structNames = []),
        (this._structUniformNames = []),
        (this._textureStackUni = []),
        (this._textureStackTex = []),
        (this._textureStackType = []),
        (this._textureStackTexCgl = []),
        (this._tempNormalMatrix = mat4.create()),
        (this._tempCamPosMatrix = mat4.create()),
        (this._tempInverseViewMatrix = mat4.create()),
        (this._tempInverseProjMatrix = mat4.create()),
        this.setModules([
          "MODULE_VERTEX_POSITION",
          "MODULE_COLOR",
          "MODULE_BEGIN_FRAG",
        ]);
    };
    (ft.prototype.isValid = function () {
      return this._isValid;
    }),
      (ft.prototype.getCgl = function () {
        return this._cgl;
      }),
      (ft.prototype.getName = function () {
        return this._name;
      }),
      (ft.prototype.enableExtension = function (t) {
        this.setWhyCompile("enable extension " + t),
          (this._needsRecompile = !0),
          this._extensions.push(t);
      }),
      (ft.prototype.getAttrVertexPos = function () {
        return this._attrVertexPos;
      }),
      (ft.prototype.hasTextureUniforms = function () {
        for (let t = 0; t < this._uniforms.length; t++)
          if ("t" == this._uniforms[t].getType()) return !0;
        return !1;
      }),
      (ft.prototype.setWhyCompile = function (t) {
        this._compileReason = t;
      }),
      (ft.prototype.copyUniformValues = function (t) {
        for (let e = 0; e < t._uniforms.length; e++)
          this._uniforms[e]
            ? (-1 != t._uniforms[e].getName().indexOf("pathPoints") &&
                console.log(
                  "copyUniformValues",
                  t._uniforms[e].getName(),
                  t._uniforms[e].getValue(),
                ),
              this.getUniform(t._uniforms[e].getName()).set(
                t._uniforms[e].getValue(),
              ))
            : this._log.log("unknown uniform?!");
        this.popTextures();
        for (let e = 0; e < t._textureStackUni.length; e++)
          (this._textureStackUni[e] = t._textureStackUni[e]),
            (this._textureStackTex[e] = t._textureStackTex[e]),
            (this._textureStackType[e] = t._textureStackType[e]),
            (this._textureStackTexCgl[e] = t._textureStackTexCgl[e]);
      }),
      (ft.prototype.copy = function () {
        const t = new ft(this._cgl, this._name + " copy");
        t.setSource(this.srcVert, this.srcFrag),
          (t._modules = JSON.parse(JSON.stringify(this._modules))),
          (t._defines = JSON.parse(JSON.stringify(this._defines))),
          (t._modGroupCount = this._modGroupCount),
          (t._moduleNames = this._moduleNames),
          (t.glPrimitive = this.glPrimitive),
          (t.offScreenPass = this.offScreenPass),
          (t._extensions = this._extensions),
          (t.wireframe = this.wireframe),
          (t._attributes = this._attributes);
        for (let e = 0; e < this._uniforms.length; e++)
          this._uniforms[e].copy(t).resetLoc();
        return this.setWhyCompile("copy"), (t._needsRecompile = !0), t;
      }),
      (ft.prototype.setSource = function (t, e) {
        (this.srcVert = t),
          (this.srcFrag = e),
          this.setWhyCompile("Source changed"),
          (this._needsRecompile = !0),
          (this._isValid = !0);
      }),
      (ft.prototype._addLibs = function (t) {
        for (const e in st)
          if (t.indexOf(e) > -1) {
            const i = new st[e]();
            (t = t.replace("{{" + e + "}}", i.srcHeadFrag)),
              this._libs.push(i),
              i.initUniforms && i.initUniforms(this);
          }
        return t;
      }),
      (ft.prototype.createStructUniforms = function () {
        let t = "",
          e = "";
        (this._structNames = []),
          (this._injectedStringsFrag = {}),
          (this._injectedStringsVert = {}),
          (this._structUniformNamesIndicesFrag = []),
          (this._structUniformNamesIndicesVert = []);
        for (let i = 0; i < this._uniforms.length; i++)
          if (this._uniforms[i].isStructMember()) {
            const s =
              "{{INJECTION_POINT_STRUCT_" +
              this._uniforms[i]._structName +
              "}}";
            if (
              -1 === this._structNames.indexOf(this._uniforms[i]._structName)
            ) {
              const r =
                "struct " +
                this._uniforms[i]._structName +
                " {".endl() +
                s +
                "};".endl().endl();
              ("both" !== this._uniforms[i].getShaderType() &&
                "frag" !== this._uniforms[i].getShaderType()) ||
                (t = t.concat(r)),
                ("both" !== this._uniforms[i].getShaderType() &&
                  "vert" !== this._uniforms[i].getShaderType()) ||
                  (e = e.concat(r)),
                this._structNames.push(this._uniforms[i]._structName),
                (this._injectedStringsFrag[this._uniforms[i]._structName] = []),
                (this._injectedStringsVert[this._uniforms[i]._structName] = []);
            }
            let r = "";
            this._uniforms[i].comment &&
              (r = " // " + this._uniforms[i].comment);
            let n = "";
            if (
              (null == this._uniforms[i].getGlslTypeString() && (n += "//"),
              (n +=
                "  " +
                this._uniforms[i].getGlslTypeString() +
                " " +
                this._uniforms[i]._propertyName +
                ";" +
                r),
              "both" === this._uniforms[i].getShaderType())
            ) {
              if (
                -1 ===
                  this._injectedStringsFrag[
                    this._uniforms[i]._structName
                  ].indexOf(n) &&
                -1 ===
                  this._injectedStringsVert[
                    this._uniforms[i]._structName
                  ].indexOf(n)
              ) {
                const r = t.lastIndexOf(s),
                  o = e.lastIndexOf(s);
                (t = t.slice(0, r) + n + t.slice(r - 1)),
                  (e = e.slice(0, o) + n + e.slice(o - 1)),
                  this._injectedStringsFrag[this._uniforms[i]._structName].push(
                    n,
                  ),
                  this._injectedStringsVert[this._uniforms[i]._structName].push(
                    n,
                  );
              }
              -1 === this._structUniformNamesIndicesFrag.indexOf(i) &&
                this._structUniformNamesIndicesFrag.push(i),
                -1 === this._structUniformNamesIndicesVert.indexOf(i) &&
                  this._structUniformNamesIndicesVert.push(i);
            } else if ("frag" === this._uniforms[i].getShaderType()) {
              if (
                -1 ===
                this._injectedStringsFrag[
                  this._uniforms[i]._structName
                ].indexOf(n)
              ) {
                const e = t.lastIndexOf(s);
                (t = t.slice(0, e) + n + t.slice(e - 1)),
                  this._injectedStringsFrag[this._uniforms[i]._structName].push(
                    n,
                  );
              }
              -1 === this._structUniformNamesIndicesFrag.indexOf(i) &&
                this._structUniformNamesIndicesFrag.push(i);
            } else if ("vert" === this._uniforms[i].getShaderType()) {
              if (
                -1 ===
                this._injectedStringsVert[
                  this._uniforms[i]._structName
                ].indexOf(n)
              ) {
                const t = e.lastIndexOf(s);
                (e = e.slice(0, t) + n + e.slice(t - 1)),
                  this._injectedStringsVert[this._uniforms[i]._structName].push(
                    n,
                  );
              }
              -1 === this._structUniformNamesIndicesVert.indexOf(i) &&
                this._structUniformNamesIndicesVert.push(i);
            }
          }
        (this._uniDeclarationsFrag = []), (this._uniDeclarationsVert = []);
        for (
          let e = 0;
          e < this._structUniformNamesIndicesFrag.length;
          e += 1
        ) {
          const i = this._structUniformNamesIndicesFrag[e],
            s =
              "UNI " +
              this._uniforms[i]._structName +
              " " +
              this._uniforms[i]._structUniformName +
              ";".endl();
          if (-1 === this._uniDeclarationsFrag.indexOf(s)) {
            const e =
              "{{INJECTION_POINT_STRUCT_" +
              this._uniforms[i]._structName +
              "}}";
            (t = t.replace(e, "")), (t += s), this._uniDeclarationsFrag.push(s);
          }
        }
        for (
          let t = 0;
          t < this._structUniformNamesIndicesVert.length;
          t += 1
        ) {
          const i = this._structUniformNamesIndicesVert[t],
            s =
              "UNI " +
              this._uniforms[i]._structName +
              " " +
              this._uniforms[i]._structUniformName +
              ";".endl();
          if (-1 === this._uniDeclarationsVert.indexOf(s)) {
            const t =
              "{{INJECTION_POINT_STRUCT_" +
              this._uniforms[i]._structName +
              "}}";
            (e = e.replace(t, "")), (e += s), this._uniDeclarationsVert.push(s);
          }
        }
        return [e, t];
      }),
      (ft.prototype._getAttrSrc = function (t, e) {
        const i = {};
        return (
          t.name &&
            t.type &&
            ((i.srcHeadVert = ""),
            e || (i.srcHeadVert += "#ifndef ATTRIB_" + t.name.endl()),
            (i.srcHeadVert += "#define ATTRIB_" + t.name.endl()),
            (i.srcHeadVert += "IN " + t.type + " " + t.name + ";".endl()),
            e || (i.srcHeadVert += "#endif".endl()),
            t.nameFrag &&
              ((i.srcHeadVert += ""),
              e || (i.srcHeadVert += "#ifndef ATTRIB_" + t.nameFrag.endl()),
              (i.srcHeadVert += "#define ATTRIB_" + t.nameFrag.endl()),
              (i.srcHeadVert +=
                "OUT " + t.type + " " + t.nameFrag + ";".endl()),
              e || (i.srcHeadVert += "#endif".endl()),
              (i.srcVert = "".endl() + t.nameFrag + "=" + t.name + ";"),
              (i.srcHeadFrag = ""),
              e || (i.srcHeadFrag += "#ifndef ATTRIB_" + t.nameFrag.endl()),
              (i.srcHeadFrag += "#define ATTRIB_" + t.nameFrag.endl()),
              (i.srcHeadFrag += "IN " + t.type + " " + t.nameFrag + ";".endl()),
              e || (i.srcHeadFrag += "#endif".endl()))),
          i
        );
      }),
      (ft.prototype.compile = function () {
        if (this._cgl.aborted) return;
        const t = performance.now();
        this._cgl.profileData.profileShaderCompiles++,
          (this._cgl.profileData.profileShaderCompileName =
            this._name + " [" + this._compileReason + "]");
        let e = "";
        if (this._extensions)
          for (let t = 0; t < this._extensions.length; t++)
            e += "#extension " + this._extensions[t] + " : enable".endl();
        let i = "";
        this._defines.length && (i = "\n// cgl generated".endl());
        for (let t = 0; t < this._defines.length; t++)
          i +=
            "#define " +
            this._defines[t][0] +
            " " +
            this._defines[t][1] +
            "".endl();
        const s = this.createStructUniforms();
        if (
          (this._cgl.profileData.addHeavyEvent(
            "shader compile",
            this._name + " [" + this._compileReason + "]",
          ),
          (this._compileReason = ""),
          this._uniforms)
        ) {
          const t = this._uniforms.map((t) => t._name),
            e = [];
          for (let i = 0; i < this._uniforms.length; i++) {
            const s = this._uniforms[i];
            t.indexOf(s._name, i + 1) > -1 && e.push(i);
          }
          for (let t = this._uniforms.length - 1; t >= 0; t -= 1)
            e.indexOf(t) > -1
              ? this._uniforms.splice(t, 1)
              : this._uniforms[t].resetLoc();
        }
        this._cgl.printError("uniform resets"),
          this.hasTextureUniforms() && (i += "#define HAS_TEXTURES".endl());
        let r = "",
          n = "";
        this.srcFrag ||
          (this._log.error("[cgl shader] has no fragment source!", this),
          (this.srcVert = this.getDefaultVertexShader()),
          (this.srcFrag = this.getDefaultFragmentShader())),
          300 == this.glslVersion
            ? ((r =
                "#version 300 es".endl() +
                "// ".endl() +
                "// vertex shader " +
                this._name.endl() +
                "// ".endl() +
                "precision " +
                this.precision +
                " float;".endl() +
                "precision " +
                this.precision +
                " sampler2D;".endl() +
                "".endl() +
                "#define WEBGL2".endl() +
                "#define texture2D texture".endl() +
                "#define UNI uniform".endl() +
                "#define IN in".endl() +
                "#define OUT out".endl()),
              (n =
                "#version 300 es".endl() +
                "// ".endl() +
                "// fragment shader " +
                this._name.endl() +
                "// ".endl() +
                "precision " +
                this.precision +
                " float;".endl() +
                "precision " +
                this.precision +
                " sampler2D;".endl() +
                "".endl() +
                "#define WEBGL2".endl() +
                "#define texture2D texture".endl() +
                "#define IN in".endl() +
                "#define OUT out".endl() +
                "#define UNI uniform".endl() +
                "{{DRAWBUFFER}}".endl()))
            : ((n =
                "".endl() +
                "// ".endl() +
                "// fragment shader " +
                this._name.endl() +
                "// ".endl() +
                "#define WEBGL1".endl() +
                "#define texture texture2D".endl() +
                "#define outColor gl_FragColor".endl() +
                "#define IN varying".endl() +
                "#define UNI uniform".endl()),
              (r =
                "".endl() +
                "// ".endl() +
                "// vertex shader " +
                this._name.endl() +
                "// ".endl() +
                "#define WEBGL1".endl() +
                "#define texture texture2D".endl() +
                "#define OUT varying".endl() +
                "#define IN attribute".endl() +
                "#define UNI uniform".endl()));
        let o = "\n// cgl generated".endl(),
          a = "\n// cgl generated".endl();
        (n += "\n// active mods: --------------- "),
          (r += "\n// active mods: --------------- ");
        let h = !1,
          l = !1;
        for (let t = 0; t < this._moduleNames.length; t++)
          for (let e = 0; e < this._modules.length; e++)
            this._modules[e].name == this._moduleNames[t] &&
              ((this._modules[e].srcBodyFrag || this._modules[e].srcHeadFrag) &&
                ((h = !0),
                (n +=
                  "\n// " +
                  t +
                  "." +
                  e +
                  ". " +
                  this._modules[e].title +
                  " (" +
                  this._modules[e].name +
                  ")")),
              (this._modules[e].srcBodyVert || this._modules[e].srcHeadVert) &&
                ((r +=
                  "\n// " +
                  t +
                  "." +
                  e +
                  ". " +
                  this._modules[e].title +
                  " (" +
                  this._modules[e].name +
                  ")"),
                (l = !0)));
        l || (n += "\n// no mods used..."),
          h || (n += "\n// no mods used..."),
          (n += "\n"),
          (r += "\n");
        for (let t = 0; t < this._uniforms.length; t++)
          if (
            this._uniforms[t].shaderType &&
            !this._uniforms[t].isStructMember()
          ) {
            let e = "";
            this._uniforms[t].getGlslTypeString() || (e += "// "),
              (e +=
                "UNI " +
                this._uniforms[t].getGlslTypeString() +
                " " +
                this._uniforms[t].getName());
            let i = "";
            this._uniforms[t].comment &&
              (i = " // " + this._uniforms[t].comment),
              ("vert" != this._uniforms[t].shaderType &&
                "both" != this._uniforms[t].shaderType) ||
                (-1 == this.srcVert.indexOf(e) &&
                  -1 ==
                    this.srcVert.indexOf(
                      "uniform " +
                        this._uniforms[t].getGlslTypeString() +
                        " " +
                        this._uniforms[t].getName(),
                    ) &&
                  (o += e + ";" + i.endl())),
              ("frag" != this._uniforms[t].shaderType &&
                "both" != this._uniforms[t].shaderType) ||
                (-1 == this.srcFrag.indexOf(e) &&
                  -1 ==
                    this.srcFrag.indexOf(
                      "uniform " +
                        this._uniforms[t].getGlslTypeString() +
                        " " +
                        this._uniforms[t].getName(),
                    ) &&
                  (a += e + ";" + i.endl()));
          }
        let c = 0,
          u = 0;
        for (let t = 0; t < this._uniforms.length; t++)
          this._uniforms[t].shaderType &&
            !this._uniforms[t].isStructMember() &&
            (("vert" != this._uniforms[t].shaderType &&
              "both" != this._uniforms[t].shaderType) ||
              u++,
            ("frag" != this._uniforms[t].shaderType &&
              "both" != this._uniforms[t].shaderType) ||
              c++);
        c >= this._cgl.maxUniformsFrag &&
          this._log.warn(
            "[cgl_shader] num uniforms frag: " +
              c +
              " / " +
              this._cgl.maxUniformsFrag,
          ),
          u >= this._cgl.maxUniformsVert &&
            this._log.warn(
              "[cgl_shader] num uniforms vert: " +
                u +
                " / " +
                this._cgl.maxUniformsVert,
            ),
          -1 == n.indexOf("precision") &&
            (n = "precision " + this.precision + " float;".endl() + n),
          -1 == r.indexOf("precision") &&
            (r = "precision " + this.precision + " float;".endl() + r),
          /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(
            navigator.userAgent,
          ) && ((n += "#define MOBILE".endl()), (r += "#define MOBILE".endl())),
          (r = e + r + i + s[0] + o + "\n// -- \n" + this.srcVert),
          (n = e + n + i + s[1] + a + "\n// -- \n" + this.srcFrag);
        let p = "",
          _ = "";
        this._modules.sort(function (t, e) {
          return t.group - e.group;
        }),
          this._modules.sort(function (t, e) {
            return t.priority || 0 - e.priority || 0;
          });
        let d = !1;
        for (let t = 0; t < this._moduleNames.length; t++) {
          let e = "",
            i = "";
          if (!d) {
            d = !0;
            for (let t = 0; t < this._attributes.length; t++) {
              const i = this._getAttrSrc(this._attributes[t], !0);
              i.srcHeadVert && (p += i.srcHeadVert),
                i.srcVert && (e += i.srcVert),
                i.srcHeadFrag && (_ += i.srcHeadFrag);
            }
          }
          for (let s = 0; s < this._modules.length; s++) {
            const r = this._modules[s];
            if (r.name == this._moduleNames[t]) {
              if (
                ((p +=
                  "\n//---- MOD: group:" +
                  r.group +
                  ": idx:" +
                  s +
                  " - prfx:" +
                  r.prefix +
                  " - " +
                  r.title +
                  " ------\n"),
                (_ +=
                  "\n//---- MOD: group:" +
                  r.group +
                  ": idx:" +
                  s +
                  " - prfx:" +
                  r.prefix +
                  " - " +
                  r.title +
                  " ------\n"),
                (e +=
                  "\n\n//---- MOD: " +
                  r.title +
                  " / " +
                  r.priority +
                  " ------\n"),
                (i +=
                  "\n\n//---- MOD: " +
                  r.title +
                  " / " +
                  r.priority +
                  " ------\n"),
                r.attributes)
              )
                for (let t = 0; t < r.attributes.length; t++) {
                  const i = this._getAttrSrc(r.attributes[t], !1);
                  i.srcHeadVert && (p += i.srcHeadVert),
                    i.srcVert && (e += i.srcVert),
                    i.srcHeadFrag && (_ += i.srcHeadFrag);
                }
              (p += r.srcHeadVert || ""),
                (_ += r.srcHeadFrag || ""),
                (e += r.srcBodyVert || ""),
                (i += r.srcBodyFrag || ""),
                (p += "\n//---- end mod ------\n"),
                (_ += "\n//---- end mod ------\n"),
                (e += "\n//---- end mod ------\n"),
                (i += "\n//---- end mod ------\n"),
                (e = e.replace(/{{mod}}/g, r.prefix)),
                (i = i.replace(/{{mod}}/g, r.prefix)),
                (p = p.replace(/{{mod}}/g, r.prefix)),
                (_ = _.replace(/{{mod}}/g, r.prefix)),
                (e = e.replace(/MOD_/g, r.prefix)),
                (i = i.replace(/MOD_/g, r.prefix)),
                (p = p.replace(/MOD_/g, r.prefix)),
                (_ = _.replace(/MOD_/g, r.prefix));
            }
          }
          (r = r.replace("{{" + this._moduleNames[t] + "}}", e)),
            (n = n.replace("{{" + this._moduleNames[t] + "}}", i));
        }
        (r = r.replace("{{MODULES_HEAD}}", p)),
          (n = n.replace("{{MODULES_HEAD}}", _)),
          (r = this._addLibs(r)),
          (n = this._addLibs(n));
        let g = "";
        for (let t = 0; t < 16; t++)
          n.indexOf("outColor" + t) > -1 && (this._drawBuffers[t] = !0);
        if (1 == this._drawBuffers.length)
          (g = "out vec4 outColor;".endl()),
            (g += "#define gl_FragColor outColor".endl());
        else {
          (g += "#define MULTI_COLORTARGETS".endl()),
            (g += "vec4 outColor;".endl());
          let t = 0;
          for (let e = 0; e < this._drawBuffers.length; e++)
            0 == t && (g += "#define gl_FragColor outColor" + e + "".endl()),
              (g +=
                "layout(location = " +
                e +
                ") out vec4 outColor" +
                e +
                ";".endl()),
              t++;
        }
        if (((n = n.replace("{{DRAWBUFFER}}", g)), this._program)) {
          (this._program = this._createProgram(r, n)),
            (this._projMatrixUniform = null);
          for (let t = 0; t < this._uniforms.length; t++)
            this._uniforms[t].resetLoc();
        } else this._program = this._createProgram(r, n);
        (this.finalShaderFrag = n),
          (this.finalShaderVert = r),
          ($.lastMesh = null),
          ($.lastShader = null),
          (this._countMissingUniforms = 0),
          (this._needsRecompile = !1),
          (this.lastCompile = nt()),
          (this._cgl.profileData.shaderCompileTime += performance.now() - t);
      }),
      (ft.hasChanged = function () {
        return this._needsRecompile;
      }),
      (ft.prototype.bind = function () {
        if (
          this._isValid &&
          !this._cgl.aborted &&
          (($.lastShader = this),
          (this._program && !this._needsRecompile) || this.compile(),
          this._isValid)
        ) {
          if (
            !this._projMatrixUniform &&
            !this.ignoreMissingUniforms &&
            (this._countMissingUniforms++, this._countMissingUniforms < 10)
          ) {
            (this._projMatrixUniform = this._cgl.gl.getUniformLocation(
              this._program,
              J.SHADERVAR_UNI_PROJMAT,
            )),
              (this._attrVertexPos = this._cgl.glGetAttribLocation(
                this._program,
                J.SHADERVAR_VERTEX_POSITION,
              )),
              (this._mvMatrixUniform = this._cgl.gl.getUniformLocation(
                this._program,
                "mvMatrix",
              )),
              (this._vMatrixUniform = this._cgl.gl.getUniformLocation(
                this._program,
                J.SHADERVAR_UNI_VIEWMAT,
              )),
              (this._mMatrixUniform = this._cgl.gl.getUniformLocation(
                this._program,
                J.SHADERVAR_UNI_MODELMAT,
              )),
              (this._camPosUniform = this._cgl.gl.getUniformLocation(
                this._program,
                J.SHADERVAR_UNI_VIEWPOS,
              )),
              (this._normalMatrixUniform = this._cgl.gl.getUniformLocation(
                this._program,
                J.SHADERVAR_UNI_NORMALMAT,
              )),
              (this._inverseViewMatrixUniform = this._cgl.gl.getUniformLocation(
                this._program,
                J.SHADERVAR_UNI_INVVIEWMAT,
              )),
              (this._inverseProjMatrixUniform = this._cgl.gl.getUniformLocation(
                this._program,
                J.SHADERVAR_UNI_INVPROJMAT,
              )),
              (this._materialIdUniform = this._cgl.gl.getUniformLocation(
                this._program,
                J.SHADERVAR_UNI_MATERIALID,
              )),
              (this._objectIdUniform = this._cgl.gl.getUniformLocation(
                this._program,
                J.SHADERVAR_UNI_OBJECTID,
              ));
            for (let t = 0; t < this._uniforms.length; t++)
              this._uniforms[t].needsUpdate = !0;
          }
          this._cgl.currentProgram != this._program &&
            (this._cgl.profileData.profileShaderBinds++,
            this._cgl.gl.useProgram(this._program),
            (this._cgl.currentProgram = this._program));
          for (let t = 0; t < this._uniforms.length; t++)
            this._uniforms[t].needsUpdate && this._uniforms[t].updateValue();
          if (
            (this._pMatrixState != this._cgl.getProjectionMatrixStateCount() &&
              ((this._pMatrixState = this._cgl.getProjectionMatrixStateCount()),
              this._cgl.gl.uniformMatrix4fv(
                this._projMatrixUniform,
                !1,
                this._cgl.pMatrix,
              ),
              this._cgl.profileData.profileMVPMatrixCount++),
            this._objectIdUniform &&
              this._cgl.gl.uniform1f(
                this._objectIdUniform,
                ++this._cgl.frameStore.objectIdCounter,
              ),
            this._materialIdUniform &&
              this._cgl.gl.uniform1f(this._materialIdUniform, this._materialId),
            this._vMatrixUniform)
          )
            this._vMatrixState != this._cgl.getViewMatrixStateCount() &&
              (this._cgl.gl.uniformMatrix4fv(
                this._vMatrixUniform,
                !1,
                this._cgl.vMatrix,
              ),
              this._cgl.profileData.profileMVPMatrixCount++,
              (this._vMatrixState = this._cgl.getViewMatrixStateCount()),
              this._inverseViewMatrixUniform &&
                (mat4.invert(this._tempInverseViewMatrix, this._cgl.vMatrix),
                this._cgl.gl.uniformMatrix4fv(
                  this._inverseViewMatrixUniform,
                  !1,
                  this._tempInverseViewMatrix,
                ),
                this._cgl.profileData.profileMVPMatrixCount++),
              this._inverseProjMatrixUniform &&
                (mat4.invert(this._tempInverseProjMatrix, this._cgl.pMatrix),
                this._cgl.gl.uniformMatrix4fv(
                  this._inverseProjMatrixUniform,
                  !1,
                  this._tempInverseProjMatrix,
                ),
                this._cgl.profileData.profileMVPMatrixCount++)),
              this._cgl.gl.uniformMatrix4fv(
                this._mMatrixUniform,
                !1,
                this._cgl.mMatrix,
              ),
              this._cgl.profileData.profileMVPMatrixCount++,
              this._camPosUniform &&
                (mat4.invert(this._tempCamPosMatrix, this._cgl.vMatrix),
                this._cgl.gl.uniform3f(
                  this._camPosUniform,
                  this._tempCamPosMatrix[12],
                  this._tempCamPosMatrix[13],
                  this._tempCamPosMatrix[14],
                ),
                this._cgl.profileData.profileMVPMatrixCount++);
          else {
            const t = mat4.create();
            mat4.mul(t, this._cgl.vMatrix, this._cgl.mMatrix),
              this._cgl.gl.uniformMatrix4fv(this._mvMatrixUniform, !1, t),
              this._cgl.profileData.profileMVPMatrixCount++;
          }
          this._normalMatrixUniform &&
            (mat4.invert(this._tempNormalMatrix, this._cgl.mMatrix),
            mat4.transpose(this._tempNormalMatrix, this._tempNormalMatrix),
            this._cgl.gl.uniformMatrix4fv(
              this._normalMatrixUniform,
              !1,
              this._tempNormalMatrix,
            ),
            this._cgl.profileData.profileMVPMatrixCount++);
          for (let t = 0; t < this._libs.length; t++)
            this._libs[t].onBind &&
              this._libs[t].onBind.bind(this._libs[t])(this._cgl, this);
          return this._bindTextures(), this._isValid;
        }
      }),
      (ft.prototype.unBind = function () {}),
      (ft.prototype.toggleDefine = function (t, e) {
        e &&
          "object" == typeof e &&
          e.addEventListener &&
          (e.changeListener && e.removeEventListener(e.changeListener),
          (e.onToggleDefine = (e) => {
            this.toggleDefine(t, e);
          }),
          (e.changeListener = e.on("change", e.onToggleDefine)),
          (e = e.get())),
          e ? this.define(t) : this.removeDefine(t);
      }),
      (ft.prototype.define = function (t, e) {
        null == e && (e = ""),
          "object" == typeof e &&
            (e.removeEventListener("change", e.onDefineChange),
            (e.onDefineChange = (e) => {
              this.define(t, e);
            }),
            e.on("change", e.onDefineChange),
            (e = e.get()));
        for (let i = 0; i < this._defines.length; i++) {
          if (this._defines[i][0] == t && this._defines[i][1] == e) return;
          if (this._defines[i][0] == t)
            return (
              (this._defines[i][1] = e),
              this.setWhyCompile("define " + t + " " + e),
              void (this._needsRecompile = !0)
            );
        }
        this.setWhyCompile("define " + t + " " + e),
          (this._needsRecompile = !0),
          this._defines.push([t, e]);
      }),
      (ft.prototype.getDefines = function () {
        return this._defines;
      }),
      (ft.prototype.getDefine = function (t) {
        for (let e = 0; e < this._defines.length; e++)
          if (this._defines[e][0] == t) return this._defines[e][1];
        return null;
      }),
      (ft.prototype.hasDefine = function (t) {
        for (let e = 0; e < this._defines.length; e++)
          if (this._defines[e][0] == t) return !0;
      }),
      (ft.prototype.removeDefine = function (t) {
        for (let e = 0; e < this._defines.length; e++)
          if (this._defines[e][0] == t)
            return (
              this._defines.splice(e, 1),
              (this._needsRecompile = !0),
              void this.setWhyCompile("define removed:" + t)
            );
      }),
      (ft.prototype.removeModule = function (t) {
        for (let e = 0; e < this._modules.length; e++)
          if (t && t.id && (this._modules[e].id == t.id || !this._modules[e])) {
            let i = !0;
            for (; i; ) {
              i = !1;
              for (let e = 0; e < this._uniforms.length; e++)
                0 != this._uniforms[e].getName().indexOf(t.prefix) ||
                  (this._uniforms.splice(e, 1), (i = !0));
            }
            (this._needsRecompile = !0),
              this.setWhyCompile("remove module " + t.title),
              this._modules.splice(e, 1);
            break;
          }
      }),
      (ft.prototype.getNumModules = function () {
        return this._modules.length;
      }),
      (ft.prototype.getCurrentModules = function () {
        return this._modules;
      }),
      (ft.prototype.addModule = function (t, e) {
        if (!this.hasModule(t.id))
          return (
            t.id || (t.id = CABLES.simpleId()),
            t.numId || (t.numId = this._moduleNumId),
            t.num || (t.num = this._modules.length),
            e && !e.group && (e.group = b()),
            t.group || (t.group = e ? e.group : b()),
            (t.prefix = "mod" + t.group + "_"),
            this._modules.push(t),
            (this._needsRecompile = !0),
            this.setWhyCompile("add module " + t.title),
            this._moduleNumId++,
            t
          );
      }),
      (ft.prototype.hasModule = function (t) {
        for (let e = 0; e < this._modules.length; e++)
          if (this._modules[e].id == t) return !0;
        return !1;
      }),
      (ft.prototype.setModules = function (t) {
        this._moduleNames = t;
      }),
      (ft.prototype.dispose = function () {
        this._cgl.gl.deleteProgram(this._program);
      }),
      (ft.prototype.needsRecompile = function () {
        return this._needsRecompile;
      }),
      (ft.prototype.setDrawBuffers = function (t) {
        console.log("useless drawbuffers...?!");
      }),
      (ft.prototype.getUniforms = function () {
        return this._uniforms;
      }),
      (ft.prototype.getUniform = function (t) {
        for (let e = 0; e < this._uniforms.length; e++)
          if (this._uniforms[e].getName() == t) return this._uniforms[e];
        return null;
      }),
      (ft.prototype.removeAllUniforms = function () {
        this._uniforms = [];
      }),
      (ft.prototype.removeUniform = function (t) {
        for (let e = 0; e < this._uniforms.length; e++)
          this._uniforms[e].getName() == t && this._uniforms.splice(e, 1);
        (this._needsRecompile = !0), this.setWhyCompile("remove uniform " + t);
      }),
      (ft.prototype._addUniform = function (t) {
        this._uniforms.push(t),
          this.setWhyCompile("add uniform " + name),
          (this._needsRecompile = !0);
      }),
      (ft.prototype.addUniformFrag = function (t, e, i, s, r, n) {
        const o = new CGL.Uniform(this, t, e, i, s, r, n);
        return (o.shaderType = "frag"), o;
      }),
      (ft.prototype.addUniformVert = function (t, e, i, s, r, n) {
        const o = new CGL.Uniform(this, t, e, i, s, r, n);
        return (o.shaderType = "vert"), o;
      }),
      (ft.prototype.addUniformBoth = function (t, e, i, s, r, n) {
        const o = new CGL.Uniform(this, t, e, i, s, r, n);
        return (o.shaderType = "both"), o;
      }),
      (ft.prototype.addUniformStructFrag = function (t, e, i) {
        const s = {};
        if (!i) return s;
        for (let r = 0; r < i.length; r += 1) {
          const n = i[r];
          if (!this.hasUniform(e + "." + n.name)) {
            const i = new CGL.Uniform(
              this,
              n.type,
              e + "." + n.name,
              n.v1,
              n.v2,
              n.v3,
              n.v4,
              e,
              t,
              n.name,
            );
            (i.shaderType = "frag"), (s[e + "." + n.name] = i);
          }
        }
        return s;
      }),
      (ft.prototype.addUniformStructVert = function (t, e, i) {
        const s = {};
        if (!i) return s;
        for (let r = 0; r < i.length; r += 1) {
          const n = i[r];
          if (!this.hasUniform(e + "." + n.name)) {
            const i = new CGL.Uniform(
              this,
              n.type,
              e + "." + n.name,
              n.v1,
              n.v2,
              n.v3,
              n.v4,
              e,
              t,
              n.name,
            );
            (i.shaderType = "vert"), (s[e + "." + n.name] = i);
          }
        }
        return s;
      }),
      (ft.prototype.addUniformStructBoth = function (t, e, i) {
        const s = {};
        if (!i) return s;
        for (let r = 0; r < i.length; r += 1) {
          const n = i[r];
          if (
            (("2i" !== n.type && "i" !== n.type && "3i" !== n.type) ||
              this._log.error(
                "Adding an integer struct member to both shaders can potentially error. Please use different structs for each shader. Error occured in struct:",
                t,
                " with member:",
                n.name,
                " of type:",
                n.type,
                ".",
              ),
            !this.hasUniform(e + "." + n.name))
          ) {
            const i = new CGL.Uniform(
              this,
              n.type,
              e + "." + n.name,
              n.v1,
              n.v2,
              n.v3,
              n.v4,
              e,
              t,
              n.name,
            );
            (i.shaderType = "both"), (s[e + "." + n.name] = i);
          }
        }
        return s;
      }),
      (ft.prototype.hasUniform = function (t) {
        for (let e = 0; e < this._uniforms.length; e++)
          if (this._uniforms[e].getName() == t) return !0;
        return !1;
      }),
      (ft.prototype._createProgram = function (t, e) {
        this._cgl.printError("before _createprogram");
        const i = this._cgl.gl.createProgram();
        return (
          (this.vshader = ft.createShader(
            this._cgl,
            t,
            this._cgl.gl.VERTEX_SHADER,
            this,
          )),
          (this.fshader = ft.createShader(
            this._cgl,
            e,
            this._cgl.gl.FRAGMENT_SHADER,
            this,
          )),
          this.vshader && this.fshader
            ? (this._cgl.gl.attachShader(i, this.vshader),
              this._cgl.gl.attachShader(i, this.fshader),
              this._linkProgram(i, t, e),
              this._cgl.printError("shader _createProgram"),
              i)
            : ((this._isValid = !1),
              this._cgl.printError("shader _createProgram"),
              console.log("could not link shaderprogram"),
              null)
        );
      }),
      (ft.prototype.hasErrors = function () {
        return this._hasErrors;
      }),
      (ft.prototype._linkProgram = function (t, e, i) {
        this._cgl.printError("before _linkprogram"),
          this._feedBackNames.length > 0 &&
            this._cgl.gl.transformFeedbackVaryings(
              t,
              this._feedBackNames,
              this._cgl.gl.SEPARATE_ATTRIBS,
            ),
          this._cgl.gl.linkProgram(t),
          this._cgl.printError("gl.linkprogram"),
          (this._isValid = !0),
          (this._hasErrors = !1),
          !1 !== this._cgl.patch.config.glValidateShader &&
            (this._cgl.gl.validateProgram(t),
            this._cgl.gl.getProgramParameter(t, this._cgl.gl.VALIDATE_STATUS) ||
              (console.log("shaderprogram validation failed..."),
              console.log(
                this._name + " programinfo: ",
                this._cgl.gl.getProgramInfoLog(t),
              )),
            this._cgl.gl.getProgramParameter(t, this._cgl.gl.LINK_STATUS) ||
              ((this._hasErrors = !0),
              this._log.warn(
                this._cgl.gl.getShaderInfoLog(this.fshader) ||
                  "empty shader infolog",
              ),
              this._log.warn(
                this._cgl.gl.getShaderInfoLog(this.vshader) ||
                  "empty shader infolog",
              ),
              this._log.error(this._name + " shader linking fail..."),
              console.log(
                this._name + " programinfo: ",
                this._cgl.gl.getProgramInfoLog(t),
              ),
              console.log("--------------------------------------"),
              console.log(this),
              console.log("--------------------------------------"),
              (this._isValid = !1),
              (this._name = "errorshader"),
              this.setSource(
                ft.getDefaultVertexShader(),
                ft.getErrorFragmentShader(),
              ),
              this._cgl.printError("shader link err")));
      }),
      (ft.prototype.getProgram = function () {
        return this._program;
      }),
      (ft.prototype.setFeedbackNames = function (t) {
        this.setWhyCompile("setFeedbackNames"),
          (this._needsRecompile = !0),
          (this._feedBackNames = t);
      }),
      (ft.prototype.getDefaultVertexShader = ft.getDefaultVertexShader =
        function () {
          return "{{MODULES_HEAD}}\nIN vec3 vPosition;\nIN vec2 attrTexCoord;\nIN vec3 attrVertNormal;\nIN vec3 attrTangent,attrBiTangent;\n\nIN float attrVertIndex;\n\nOUT vec2 texCoord;\nOUT vec3 norm;\nUNI mat4 projMatrix;\nUNI mat4 viewMatrix;\nUNI mat4 modelMatrix;\n\nvoid main()\n{\n    texCoord=attrTexCoord;\n    norm=attrVertNormal;\n    vec4 pos=vec4(vPosition,  1.0);\n    vec3 tangent=attrTangent;\n    vec3 bitangent=attrBiTangent;\n    mat4 mMatrix=modelMatrix;\n    gl_PointSize=10.0;\n\n    {{MODULE_VERTEX_POSITION}}\n    gl_Position = projMatrix * (viewMatrix*mMatrix) * pos;\n}\n";
        }),
      (ft.prototype.getDefaultFragmentShader = ft.getDefaultFragmentShader =
        function (t, e, i) {
          return (
            null == t && ((t = 0.5), (e = 0.5), (i = 0.5)),
            "".endl() +
              "IN vec2 texCoord;".endl() +
              "{{MODULES_HEAD}}".endl() +
              "void main()".endl() +
              "{".endl() +
              "    vec4 col=vec4(" +
              t +
              "," +
              e +
              "," +
              i +
              ",1.0);".endl() +
              "    {{MODULE_COLOR}}".endl() +
              "    outColor = col;".endl() +
              "}"
          );
        }),
      (ft.prototype.addAttribute = function (t) {
        for (let e = 0; e < this._attributes.length; e++)
          if (
            this._attributes[e].name == t.name &&
            this._attributes[e].nameFrag == t.nameFrag
          )
            return;
        this._attributes.push(t),
          (this._needsRecompile = !0),
          this.setWhyCompile("addAttribute");
      }),
      (ft.prototype.bindTextures = ft.prototype._bindTextures =
        function () {
          this._textureStackTex.length > this._cgl.maxTextureUnits &&
            this._log.warn(
              "[shader._bindTextures] too many textures bound",
              this._textureStackTex.length + "/" + this._cgl.maxTextureUnits,
            );
          for (let t = 0; t < this._textureStackTex.length; t++)
            if (this._textureStackTex[t] || this._textureStackTexCgl[t]) {
              let e = this._textureStackTex[t];
              this._textureStackTexCgl[t] &&
                (e =
                  this._textureStackTexCgl[t].tex ||
                  CGL.Texture.getEmptyTexture(this._cgl).tex);
              let i = !0;
              this._textureStackUni[t]
                ? (this._textureStackUni[t].setValue(t),
                  (i = this._cgl.setTexture(t, e, this._textureStackType[t])))
                : (this._log.warn("no uniform for pushtexture", this._name),
                  (i = this._cgl.setTexture(t, e, this._textureStackType[t]))),
                i ||
                  console.warn(
                    "tex bind failed",
                    this.getName(),
                    this._textureStackUni[t],
                  );
            } else this._log.warn("no texture for pushtexture", this._name);
        }),
      (ft.prototype.setUniformTexture = function (t, e) {
        e = e || CGL.Texture.getTempTexture(this._cgl);
        for (let i = 0; i < this._textureStackUni.length; i++)
          if (this._textureStackUni[i] == t) {
            const t = this._textureStackTex[i] || this._textureStackTexCgl[i];
            return (
              e.hasOwnProperty("tex")
                ? ((this._textureStackTexCgl[i] = e),
                  (this._textureStackTex[i] = null))
                : ((this._textureStackTexCgl[i] = null),
                  (this._textureStackTex[i] = e)),
              t
            );
          }
        return null;
      }),
      (ft.prototype.pushTexture = function (t, e, i) {
        if (t) {
          if (e) {
            if (!(e.hasOwnProperty("tex") || e instanceof WebGLTexture))
              return (
                this._log.warn(new Error("invalid texture").stack),
                void this._log.warn("[cgl_shader] invalid texture...", e)
              );
            this._textureStackUni.push(t),
              e.hasOwnProperty("tex")
                ? (this._textureStackTexCgl.push(e),
                  this._textureStackTex.push(null))
                : (this._textureStackTexCgl.push(null),
                  this._textureStackTex.push(e)),
              this._textureStackType.push(i);
          }
        } else console.log("no uniform given to texturestack", t);
      }),
      (ft.prototype.popTexture = function () {
        this._textureStackUni.pop(),
          this._textureStackTex.pop(),
          this._textureStackTexCgl.pop(),
          this._textureStackType.pop();
      }),
      (ft.prototype.popTextures = function () {
        this._textureStackTex.length =
          this._textureStackTexCgl.length =
          this._textureStackType.length =
          this._textureStackUni.length =
            0;
      }),
      (ft.prototype.getMaterialId = function () {
        return this._materialId;
      }),
      (ft.prototype.getInfo = function () {
        const t = {};
        return (
          (t.name = this._name),
          (t.defines = this.getDefines()),
          (t.hasErrors = this.hasErrors()),
          t
        );
      }),
      (ft.getErrorFragmentShader = function () {
        return (
          "".endl() +
          "void main()".endl() +
          "{".endl() +
          "   float g=mod((gl_FragCoord.y+gl_FragCoord.x),50.0)/50.0;".endl() +
          "   g= step(0.1,g);".endl() +
          "   outColor = vec4( g+0.5, 0.0, 0.0, 1.0);".endl() +
          "}"
        );
      }),
      (ft.createShader = function (t, e, i, s) {
        if (t.aborted) return;
        const r = t.gl.createShader(i);
        if (
          (t.gl.shaderSource(r, e),
          t.gl.compileShader(r),
          !t.gl.getShaderParameter(r, t.gl.COMPILE_STATUS))
        ) {
          let o = t.gl.getShaderInfoLog(r);
          if (!o) return void console.warn("empty shader info log", this._name);
          console.log("compile status: ");
          const a = (function (t) {
            const e = [],
              i = t.split("\n");
            for (const t in i) {
              const s = i[t].split(":");
              parseInt(s[2], 10) && e.push(parseInt(s[2], 10));
            }
            return e;
          })(o);
          let h =
            '<pre style="margin-bottom:0px;"><code class="shaderErrorCode language-glsl" style="padding-bottom:0px;max-height: initial;max-width: initial;">';
          const l = e.match(/^.*((\r\n|\n|\r)|$)/gm);
          if (!t.aborted && o) {
            i == t.gl.VERTEX_SHADER && console.log("VERTEX_SHADER"),
              i == t.gl.FRAGMENT_SHADER && console.log("FRAGMENT_SHADER");
            for (const t in l) {
              const e = parseInt(t, 10) + 1,
                i = e + ": " + l[t];
              console.log(i);
              let s = !1;
              for (const t in a) a[t] == e && (s = !0);
              s &&
                ((h += "</code></pre>"),
                (h +=
                  '<pre style="margin:0"><code class="language-glsl" style="background-color:#660000;padding-top:0px;padding-bottom:0px">')),
                (h +=
                  (n = i) && dt.test(n)
                    ? n.replace(_t, function (t) {
                        return pt[t];
                      })
                    : n || ""),
                s &&
                  ((h += "</code></pre>"),
                  (h +=
                    '<pre style="margin:0"><code class="language-glsl" style=";padding-top:0px;padding-bottom:0px">'));
            }
          }
          console.warn(o),
            (o = o.replace(/\n/g, "<br/>")),
            t.patch.isEditorMode() &&
              console.log("Shader error ", s._name, o, this),
            (h = o + "<br/>" + h + "<br/><br/>"),
            (h += "</code></pre>"),
            t.patch.emitEvent("criticalError", {
              title: "Shader error " + s._name,
              text: h,
              exception: { message: o },
            }),
            s.setSource(
              ft.getDefaultVertexShader(),
              ft.getErrorFragmentShader(),
            );
        }
        var n;
        return r;
      });
    class mt {
      constructor(t) {
        (this._cgl = t),
          (this._lastTime = 0),
          (this.pause = !1),
          (this.profileUniformCount = 0),
          (this.profileShaderBinds = 0),
          (this.profileUniformCount = 0),
          (this.profileShaderCompiles = 0),
          (this.profileVideosPlaying = 0),
          (this.profileMVPMatrixCount = 0),
          (this.profileEffectBuffercreate = 0),
          (this.profileShaderGetUniform = 0),
          (this.profileFrameBuffercreate = 0),
          (this.profileMeshSetGeom = 0),
          (this.profileTextureNew = 0),
          (this.profileGenMipMap = 0),
          (this.profileOnAnimFrameOps = 0),
          (this.profileFencedPixelRead = 0),
          (this.profileMainloopMs = 0),
          (this.profileMeshDraw = 0),
          (this.profileTextureEffect = 0),
          (this.profileTexPreviews = 0),
          (this.shaderCompileTime = 0),
          (this.profileMeshNumElements = 0),
          (this.profileMeshAttributes = 0),
          (this.profileSingleMeshAttribute = []),
          (this.heavyEvents = []),
          (this.doProfileGlQuery = !1),
          (this.glQueryData = {});
      }
      clear() {
        (this.profileSingleMeshAttribute = {}),
          (this.profileMeshAttributes = 0),
          (this.profileUniformCount = 0),
          (this.profileShaderGetUniform = 0),
          (this.profileShaderCompiles = 0),
          (this.profileShaderBinds = 0),
          (this.profileTextureResize = 0),
          (this.profileFrameBuffercreate = 0),
          (this.profileEffectBuffercreate = 0),
          (this.profileTextureDelete = 0),
          (this.profileMeshSetGeom = 0),
          (this.profileVideosPlaying = 0),
          (this.profileMVPMatrixCount = 0),
          (this.profileNonTypedAttrib = 0),
          (this.profileNonTypedAttribNames = ""),
          (this.profileTextureNew = 0),
          (this.profileGenMipMap = 0),
          (this.profileFramebuffer = 0),
          (this.profileMeshDraw = 0),
          (this.profileTextureEffect = 0),
          (this.profileTexPreviews = 0),
          (this.profileMeshNumElements = 0),
          (this.profileFencedPixelRead = 0);
      }
      clearGlQuery() {
        for (let t in this.glQueryData)
          (!this.glQueryData[t].lastClear ||
            performance.now() - this.glQueryData[t].lastClear > 1e3) &&
            ((this.glQueryData[t].time =
              this.glQueryData[t]._times / this.glQueryData[t]._numcount),
            (this.glQueryData[t].num = this.glQueryData[t]._numcount),
            (this.glQueryData[t]._times = 0),
            (this.glQueryData[t]._numcount = 0),
            (this.glQueryData[t].lastClear = performance.now()));
      }
      addHeavyEvent(t, e, i) {
        const s = { event: t, name: e, info: i, date: performance.now() };
        this.heavyEvents.push(s), this._cgl.emitEvent("heavyEvent", s);
      }
    }
    class Et {
      constructor(t) {
        t
          ? (this._canvasEle = t.canvasEle)
          : console.error("CgCanvas no options"),
          t.cg || console.error("CgCanvas options has no cg"),
          t.canvasEle || console.error("CgCanvas options has no canvasEle"),
          (this._cg = t.cg),
          (this.pixelDensity = 1),
          (this.canvasWidth = this.canvasEle.clientWidth),
          (this.canvasHeight = this.canvasEle.clientHeight),
          (this._oldWidthRp = -1),
          (this._oldHeightRp = -1),
          this.setSize(this.canvasWidth, this.canvasHeight);
      }
      get canvasEle() {
        return this._canvasEle;
      }
      setSize(t, e, i) {
        (this._oldWidthRp == t * this.pixelDensity &&
          this._oldHeightRp == e * this.pixelDensity) ||
          ((this._oldWidthRp = this.canvasEle.width = t * this.pixelDensity),
          (this._oldHeightRp = this.canvasEle.height = e * this.pixelDensity),
          i ||
            ((this.canvasEle.style.width = t + "px"),
            (this.canvasEle.style.height = e + "px")),
          this.updateSize(),
          this._cg.emitEvent("resize"));
      }
      updateSize() {
        (this.canvasEle.width = this.canvasWidth =
          this.canvasEle.clientWidth * this.pixelDensity),
          (this.canvasEle.height = this.canvasHeight =
            this.canvasEle.clientHeight * this.pixelDensity);
      }
      dispose() {
        this._canvasEle.remove(), (this._canvasEle = null);
      }
    }
    const Tt = {
        GAPI_WEBGL: 0,
        GAPI_WEBGPU: 1,
        DEPTH_COMPARE_NEVER: 0,
        DEPTH_COMPARE_LESS: 1,
        DEPTH_COMPARE_EQUAL: 2,
        DEPTH_COMPARE_LESSEQUAL: 3,
        DEPTH_COMPARE_GREATER: 4,
        DEPTH_COMPARE_NOTEQUAL: 5,
        DEPTH_COMPARE_GREATEREQUAL: 6,
        DEPTH_COMPARE_ALWAYS: 7,
        CULL_NONE: 0,
        CULL_BACK: 1,
        CULL_FRONT: 2,
        CULL_BOTH: 3,
        Geometry: G,
        BoundingBox: V,
        FpsCounter: class extends H {
          constructor() {
            super(),
              (this._timeStartFrame = 0),
              (this._timeStartSecond = 0),
              (this._fpsCounter = 0),
              (this._msCounter = 0),
              (this._frameCount = 0),
              (this.stats = { ms: 0, fps: 0 });
          }
          get frameCount() {
            return this._frameCount;
          }
          startFrame() {
            this._timeStartFrame = CABLES.now();
          }
          endFrame() {
            this._frameCount++, this._fpsCounter++;
            const t = CABLES.now() - this._timeStartFrame;
            (this._msCounter += t),
              CABLES.now() - this._timeStartSecond > 1e3 && this.endSecond();
          }
          endSecond() {
            (this.stats.fps = this._fpsCounter),
              (this.stats.ms =
                Math.round((this._msCounter / this._fpsCounter) * 100) / 100),
              this.emitEvent("performance", this.stats),
              (this._fpsCounter = 0),
              (this._msCounter = 0),
              (this._timeStartSecond = CABLES.now());
          }
        },
        CgCanvas: Et,
      },
      At = function () {
        (this._arr = [mat4.create()]),
          (this._index = 0),
          (this.stateCounter = 0);
      };
    (At.prototype.push = function (t) {
      if (
        (this._index++, this.stateCounter++, this._index == this._arr.length)
      ) {
        const t = mat4.create();
        this._arr.push(t);
      }
      return (
        mat4.copy(this._arr[this._index], t || this._arr[this._index - 1]),
        this._arr[this._index]
      );
    }),
      (At.prototype.pop = function () {
        return (
          this.stateCounter++,
          this._index--,
          this._index < 0 && (this._index = 0),
          this._arr[this._index]
        );
      }),
      (At.prototype.length = function () {
        return this._index;
      }),
      __webpack_require__(122);
    class bt extends H {
      constructor(t) {
        super(),
          (this.fpsCounter = new CABLES.CG.FpsCounter()),
          (this._identView = vec3.create()),
          (this._ident = vec3.create()),
          vec3.set(this._identView, 0, 0, -2),
          vec3.set(this._ident, 0, 0, 0),
          (this.patch = t),
          (this.DEPTH_COMPARE_FUNC_NEVER = 0),
          (this.DEPTH_COMPARE_FUNC_LESS = 1),
          (this.DEPTH_COMPARE_FUNC_EQUAL = 2),
          (this.DEPTH_COMPARE_FUNC_LESSEQUAL = 3),
          (this.DEPTH_COMPARE_FUNC_GREATER = 4),
          (this.DEPTH_COMPARE_FUNC_NOTEQUAL = 5),
          (this.DEPTH_COMPARE_FUNC_GREATEREQUAL = 6),
          (this.DEPTH_COMPARE_FUNC_ALWAYS = 7),
          (this.pMatrix = mat4.create()),
          (this.mMatrix = mat4.create()),
          (this.vMatrix = mat4.create()),
          (this._textureslots = []),
          (this._pMatrixStack = new At()),
          (this._mMatrixStack = new At()),
          (this._vMatrixStack = new At()),
          (this.canvasScale = 1),
          mat4.identity(this.mMatrix),
          mat4.identity(this.vMatrix),
          window
            .matchMedia("screen and (min-resolution: 2dppx)")
            .addEventListener("change", (t) => {
              this.emitEvent("resize");
            });
      }
      get canvasWidth() {
        return this.cgCanvas.canvasWidth;
      }
      get canvasHeight() {
        return this.cgCanvas.canvasHeight;
      }
      set pixelDensity(t) {
        this.cgCanvas.pixelDensity != t &&
          ((this.cgCanvas.pixelDensity = t),
          this.cgCanvas.updateSize(),
          this.emitEvent("resize"));
      }
      get pixelDensity() {
        return this.cgCanvas.pixelDensity;
      }
      getGApiName() {
        return ["WebGL", "WebGPU"][this.gApi];
      }
      get canvas() {
        return this.cgCanvas.canvasEle;
      }
      setCanvas(t) {
        (this.cgCanvas && t == this.cgCanvas.canvasEle) ||
          ("string" == typeof t && (t = document.getElementById(t)),
          (this.cgCanvas = new Et({ canvasEle: t, cg: this })),
          this._setCanvas && this._setCanvas(t),
          this.updateSize());
      }
      updateSize() {
        this.cgCanvas.updateSize();
      }
      setSize(t, e, i) {
        this.cgCanvas.setSize(t, e, i);
      }
      _resizeToWindowSize() {
        this.setSize(window.innerWidth, window.innerHeight), this.updateSize();
      }
      _resizeToParentSize() {
        const t = this.canvas.parentElement;
        t
          ? (this.setSize(t.clientWidth, t.clientHeight), this.updateSize())
          : this._log.error("cables: can not resize to container element");
      }
      setAutoResize(t) {
        window.removeEventListener(
          "resize",
          this._resizeToWindowSize.bind(this),
        ),
          window.removeEventListener(
            "resize",
            this._resizeToParentSize.bind(this),
          ),
          "window" == t &&
            (window.addEventListener(
              "resize",
              this._resizeToWindowSize.bind(this),
            ),
            window.addEventListener(
              "orientationchange",
              this._resizeToWindowSize.bind(this),
            ),
            this._resizeToWindowSize()),
          "parent" == t &&
            (window.addEventListener(
              "resize",
              this._resizeToParentSize.bind(this),
            ),
            this._resizeToParentSize());
      }
      pushPMatrix() {
        this.pMatrix = this._pMatrixStack.push(this.pMatrix);
      }
      popPMatrix() {
        return (this.pMatrix = this._pMatrixStack.pop()), this.pMatrix;
      }
      getProjectionMatrixStateCount() {
        return this._pMatrixStack.stateCounter;
      }
      pushModelMatrix() {
        this.mMatrix = this._mMatrixStack.push(this.mMatrix);
      }
      popModelMatrix() {
        return (this.mMatrix = this._mMatrixStack.pop()), this.mMatrix;
      }
      modelMatrix() {
        return this.mMatrix;
      }
      pushViewMatrix() {
        this.vMatrix = this._vMatrixStack.push(this.vMatrix);
      }
      popViewMatrix() {
        this.vMatrix = this._vMatrixStack.pop();
      }
      getViewMatrixStateCount() {
        return this._vMatrixStack.stateCounter;
      }
      _startMatrixStacks(t, e) {
        (t = t || this._ident),
          (e = e || this._identView),
          mat4.perspective(
            this.pMatrix,
            45,
            this.canvasWidth / this.canvasHeight,
            0.1,
            1e3,
          ),
          mat4.identity(this.mMatrix),
          mat4.identity(this.vMatrix),
          mat4.translate(this.mMatrix, this.mMatrix, t),
          mat4.translate(this.vMatrix, this.vMatrix, e),
          this.pushPMatrix(),
          this.pushModelMatrix(),
          this.pushViewMatrix();
      }
      _endMatrixStacks() {
        this.popViewMatrix(), this.popModelMatrix(), this.popPMatrix();
      }
      dispose() {
        (this.aborted = !0),
          this.cgCanvas && this.cgCanvas.dispose(),
          this._dispose && this._dispose();
      }
    }
    class xt extends bt {
      constructor(t) {
        super(t),
          (this.gApi = Tt.GAPI_WEBGL),
          (this.aborted = !1),
          (this.pushMvMatrix = this.pushModelMatrix),
          (this.popMvMatrix = this.popmMatrix = this.popModelMatrix),
          (this.profileData = new mt(this)),
          (this._log = new r("cgl_context")),
          (this._viewPort = [0, 0, 0, 0]),
          (this.glVersion = 0),
          (this.glUseHalfFloatTex = !1),
          (this.clearCanvasTransparent = !0),
          (this.clearCanvasDepth = !0),
          (this.debugOneFrame = !1),
          (this.checkGlErrors = !1),
          (this.maxTextureUnits = 0),
          (this.maxVaryingVectors = 0),
          (this.currentProgram = null),
          (this._hadStackError = !1),
          (this.glSlowRenderer = !1),
          (this._isSafariCrap = !1),
          (this.temporaryTexture = null),
          (this.frameStore = {}),
          (this._onetimeCallbacks = []),
          (this.gl = null),
          (this._cursor = "auto"),
          (this._currentCursor = ""),
          (this._viewPortStack = []),
          (this._glFrameBufferStack = []),
          (this._frameBufferStack = []),
          (this._shaderStack = []),
          (this._stackDepthTest = []),
          (this._simpleShader = new ft(this, "simpleshader")),
          this._simpleShader.setModules([
            "MODULE_VERTEX_POSITION",
            "MODULE_COLOR",
            "MODULE_BEGIN_FRAG",
          ]),
          this._simpleShader.setSource(
            ft.getDefaultVertexShader(),
            ft.getDefaultFragmentShader(),
          ),
          (this._currentShader = this._simpleShader),
          (this._oldCanvasWidth = -1),
          (this._oldCanvasHeight = -1),
          (this._enabledExtensions = {});
      }
      get viewPort() {
        if (this._viewPortStack.length > 3) {
          const t = this._viewPortStack.length;
          return [
            this._viewPortStack[t - 4],
            this._viewPortStack[t - 3],
            this._viewPortStack[t - 2],
            this._viewPortStack[t - 1],
          ];
        }
        return this._viewPort;
      }
      get mvMatrix() {
        return this.mMatrix;
      }
      set mvMatrix(t) {
        this.mMatrix = t;
      }
      exitError(t, e) {
        console.log(t, e), this.patch.exitError(t, e), (this.aborted = !0);
      }
      _setCanvas(t) {
        if (
          (t || this._log.stack("_setCanvas undef"),
          this.patch.config.canvas || (this.patch.config.canvas = {}),
          this.patch.config.canvas.hasOwnProperty("preserveDrawingBuffer") ||
            (this.patch.config.canvas.preserveDrawingBuffer = !1),
          this.patch.config.canvas.hasOwnProperty("premultipliedAlpha") ||
            (this.patch.config.canvas.premultipliedAlpha = !1),
          this.patch.config.canvas.hasOwnProperty("alpha") ||
            (this.patch.config.canvas.alpha = !1),
          (this.patch.config.canvas.stencil = !0),
          this.patch.config.hasOwnProperty("clearCanvasColor") &&
            (this.clearCanvasTransparent = this.patch.config.clearCanvasColor),
          this.patch.config.hasOwnProperty("clearCanvasDepth") &&
            (this.clearCanvasDepth = this.patch.config.clearCanvasDepth),
          /^((?!chrome|android).)*safari/i.test(navigator.userAgent) &&
            navigator.userAgent.match(/iPhone/i) &&
            ((this._isSafariCrap = !0), (this.glUseHalfFloatTex = !0)),
          this.patch.config.canvas.forceWebGl1 ||
            (this.gl = t.getContext("webgl2", this.patch.config.canvas)),
          this.gl && "WebGL 1.0" != this.gl.getParameter(this.gl.VERSION))
        )
          this.glVersion = 2;
        else {
          (this.gl =
            t.getContext("webgl", this.patch.config.canvas) ||
            t.getContext("experimental-webgl", this.patch.config.canvas)),
            (this.glVersion = 1),
            /iPad|iPhone|iPod/.test(navigator.userAgent) &&
              !window.MSStream &&
              (this.patch.config.canvas.hasOwnProperty("powerPreference") ||
                (this.patch.config.canvas.powerPreference =
                  "high-performance")),
            this.enableExtension("OES_standard_derivatives");
          const e = this.enableExtension("ANGLE_instanced_arrays") || this.gl;
          e.vertexAttribDivisorANGLE &&
            ((this.gl.vertexAttribDivisor = e.vertexAttribDivisorANGLE.bind(e)),
            (this.gl.drawElementsInstanced =
              e.drawElementsInstancedANGLE.bind(e)));
        }
        if (!this.gl || this.gl.isContextLost())
          return (
            (this.aborted = !0),
            void this.exitError(
              "NO_WEBGL",
              "sorry, could not initialize WebGL. Please check if your Browser supports WebGL or try to restart your browser.",
            )
          );
        const e = this.enableExtension("WEBGL_debug_renderer_info");
        if (
          (e &&
            ((this.glRenderer = this.gl.getParameter(
              e.UNMASKED_RENDERER_WEBGL,
            )),
            "Google SwiftShader" === this.glRenderer &&
              (this.glSlowRenderer = !0)),
          this.canvas.addEventListener("webglcontextlost", (t) => {
            if (this.aborted)
              return console.log(
                "[cgl_state] aborted context lost... can be ignored...",
              );
            this._log.error("canvas lost...", t),
              this.emitEvent("webglcontextlost"),
              (this.aborted = !0);
          }),
          (this.maxVaryingVectors = this.gl.getParameter(
            this.gl.MAX_VARYING_VECTORS,
          )),
          (this.maxTextureUnits = this.gl.getParameter(
            this.gl.MAX_TEXTURE_IMAGE_UNITS,
          )),
          (this.maxTexSize = this.gl.getParameter(this.gl.MAX_TEXTURE_SIZE)),
          (this.maxUniformsFrag = this.gl.getParameter(
            this.gl.MAX_FRAGMENT_UNIFORM_VECTORS,
          )),
          (this.maxUniformsVert = this.gl.getParameter(
            this.gl.MAX_VERTEX_UNIFORM_VECTORS,
          )),
          (this.maxSamples = 0),
          this.gl.MAX_SAMPLES &&
            (this.maxSamples = this.gl.getParameter(this.gl.MAX_SAMPLES)),
          1 == this.glVersion)
        ) {
          this.enableExtension("OES_standard_derivatives");
          const t = this.enableExtension("ANGLE_instanced_arrays") || this.gl;
          t.vertexAttribDivisorANGLE &&
            ((this.gl.vertexAttribDivisor = t.vertexAttribDivisorANGLE.bind(t)),
            (this.gl.drawElementsInstanced =
              t.drawElementsInstancedANGLE.bind(t)));
        }
        (this.DEPTH_FUNCS = [
          this.gl.NEVER,
          this.gl.ALWAYS,
          this.gl.LESS,
          this.gl.LEQUAL,
          this.gl.GREATER,
          this.gl.GEQUAL,
          this.gl.EQUAL,
          this.gl.NOTEQUAL,
        ]),
          (this.CULL_MODES = [
            null,
            this.gl.BACK,
            this.gl.FRONT,
            this.gl.FRONT_AND_BACK,
          ]);
      }
      getInfo() {
        return {
          glVersion: this.glVersion,
          glRenderer: this.glRenderer,
          glUseHalfFloatTex: this.glUseHalfFloatTex,
          maxVaryingVectors: this.maxVaryingVectors,
          maxTextureUnits: this.maxTextureUnits,
          maxTexSize: this.maxTexSize,
          maxUniformsFrag: this.maxUniformsFrag,
          maxUniformsVert: this.maxUniformsVert,
          maxSamples: this.maxSamples,
        };
      }
      popViewPort() {
        this._viewPortStack.pop(),
          this._viewPortStack.pop(),
          this._viewPortStack.pop(),
          this._viewPortStack.pop(),
          0 == this._viewPortStack.length
            ? this.setViewPort(0, 0, this.canvasWidth, this.canvasHeight)
            : this.setViewPort(
                this._viewPortStack[this._viewPort.length - 4],
                this._viewPortStack[this._viewPort.length - 3],
                this._viewPortStack[this._viewPort.length - 2],
                this._viewPortStack[this._viewPort.length - 1],
              );
      }
      pushViewPort(t, e, i, s) {
        this._viewPortStack.push(t, e, i, s), this.setViewPort(t, e, i, s);
      }
      getViewPort() {
        return this._viewPort;
      }
      resetViewPort() {
        this.gl.viewport(
          this._viewPort[0],
          this._viewPort[1],
          this._viewPort[2],
          this._viewPort[3],
        );
      }
      setViewPort(t, e, i, s) {
        (this._viewPort[0] = Math.round(t)),
          (this._viewPort[1] = Math.round(e)),
          (this._viewPort[2] = Math.round(i)),
          (this._viewPort[3] = Math.round(s)),
          this.gl.viewport(
            this._viewPort[0],
            this._viewPort[1],
            this._viewPort[2],
            this._viewPort[3],
          );
      }
      screenShot(t, e, i, s) {
        e &&
          (this.gl.clearColor(1, 1, 1, 1),
          this.gl.colorMask(!1, !1, !1, !0),
          this.gl.clear(this.gl.COLOR_BUFFER_BIT),
          this.gl.colorMask(!0, !0, !0, !0)),
          this.canvas &&
            this.canvas.toBlob &&
            this.canvas.toBlob(
              (e) => {
                t ? t(e) : this._log.log("no screenshot callback...");
              },
              i,
              s,
            );
      }
      endFrame() {
        this.patch.isEditorMode() && CABLES.GL_MARKER.drawMarkerLayer(this),
          this.setPreviousShader(),
          this._vMatrixStack.length() > 0 &&
            this.logStackError(
              "view matrix stack length !=0 at end of rendering...",
            ),
          this._mMatrixStack.length() > 0 &&
            this.logStackError(
              "mvmatrix stack length !=0 at end of rendering...",
            ),
          this._pMatrixStack.length() > 0 &&
            this.logStackError(
              "pmatrix stack length !=0 at end of rendering...",
            ),
          this._glFrameBufferStack.length > 0 &&
            this.logStackError(
              "glFrameBuffer stack length !=0 at end of rendering...",
            ),
          this._stackDepthTest.length > 0 &&
            this.logStackError(
              "depthtest stack length !=0 at end of rendering...",
            ),
          this._stackDepthWrite.length > 0 &&
            this.logStackError(
              "depthwrite stack length !=0 at end of rendering...",
            ),
          this._stackDepthFunc.length > 0 &&
            this.logStackError(
              "depthfunc stack length !=0 at end of rendering...",
            ),
          this._stackBlend.length > 0 &&
            this.logStackError("blend stack length !=0 at end of rendering..."),
          this._stackBlendMode.length > 0 &&
            this.logStackError(
              "blendMode stack length !=0 at end of rendering...",
            ),
          this._shaderStack.length > 0 &&
            this.logStackError(
              "this._shaderStack length !=0 at end of rendering...",
            ),
          this._stackCullFace.length > 0 &&
            this.logStackError(
              "this._stackCullFace length !=0 at end of rendering...",
            ),
          this._stackCullFaceFacing.length > 0 &&
            this.logStackError(
              "this._stackCullFaceFacing length !=0 at end of rendering...",
            ),
          this._viewPortStack.length > 0 &&
            this.logStackError(
              "viewport stack length !=0 at end of rendering...",
            ),
          (this._frameStarted = !1),
          (this._oldCanvasWidth == this.canvasWidth &&
            this._oldCanvasHeight == this.canvasHeight) ||
            ((this._oldCanvasWidth = this.canvasWidth),
            (this._oldCanvasHeight = this.canvasHeight),
            this.emitEvent("resize")),
          this._cursor != this._currentCursor &&
            (this._currentCursor = this.canvas.style.cursor = this._cursor),
          this.emitEvent("endframe"),
          this.fpsCounter.endFrame();
      }
      logStackError(t) {
        this._hadStackError ||
          ((this._hadStackError = !0),
          this._log.warn("[" + this.canvas.id + "]: ", t));
      }
      getShader() {
        if (
          this._currentShader &&
          (!this.frameStore ||
            ((!0 === this.frameStore.renderOffscreen) ==
              this._currentShader.offScreenPass) ==
              1)
        )
          return this._currentShader;
        for (let t = this._shaderStack.length - 1; t >= 0; t--)
          if (
            this._shaderStack[t] &&
            this.frameStore.renderOffscreen ==
              this._shaderStack[t].offScreenPass
          )
            return this._shaderStack[t];
      }
      getDefaultShader() {
        return this._simpleShader;
      }
      pushShader(t) {
        if (this.frameStore.forceShaderMods)
          for (let e = 0; e < this.frameStore.forceShaderMods.length; e++)
            t = this.frameStore.forceShaderMods[e].bind(t, !1);
        this._shaderStack.push(t), (this._currentShader = t);
      }
      setPreviousShader() {
        if (this.frameStore.forceShaderMods)
          for (let t = 0; t < this.frameStore.forceShaderMods.length; t++)
            this.frameStore.forceShaderMods[t].unbind(!1);
        if (0 === this._shaderStack.length)
          throw new Error("Invalid shader stack pop!");
        this._shaderStack.pop(),
          (this._currentShader =
            this._shaderStack[this._shaderStack.length - 1]);
      }
      pushGlFrameBuffer(t) {
        this._glFrameBufferStack.push(t);
      }
      popGlFrameBuffer() {
        return 0 == this._glFrameBufferStack.length
          ? null
          : (this._glFrameBufferStack.pop(),
            this._glFrameBufferStack[this._glFrameBufferStack.length - 1]);
      }
      getCurrentGlFrameBuffer() {
        return 0 === this._glFrameBufferStack.length
          ? null
          : this._glFrameBufferStack[this._glFrameBufferStack.length - 1];
      }
      pushFrameBuffer(t) {
        this._frameBufferStack.push(t);
      }
      popFrameBuffer() {
        return 0 == this._frameBufferStack.length
          ? null
          : (this._frameBufferStack.pop(),
            this._frameBufferStack[this._frameBufferStack.length - 1]);
      }
      getCurrentFrameBuffer() {
        return 0 === this._frameBufferStack.length
          ? null
          : this._frameBufferStack[this._frameBufferStack.length - 1];
      }
      renderStart(t, e, i) {
        this.fpsCounter.startFrame(),
          this.pushDepthTest(!0),
          this.pushDepthWrite(!0),
          this.pushDepthFunc(t.gl.LEQUAL),
          this.pushCullFaceFacing(t.gl.BACK),
          this.pushCullFace(!1),
          t.setViewPort(0, 0, t.canvasWidth, t.canvasHeight),
          this._startMatrixStacks(e, i),
          t.pushBlendMode(Z.BLEND_NORMAL, !1);
        for (let t = 0; t < this._textureslots.length; t++)
          this._textureslots[t] = null;
        if (
          (this.pushShader(this._simpleShader),
          (this._frameStarted = !0),
          this._onetimeCallbacks.length > 0)
        ) {
          for (let t = 0; t < this._onetimeCallbacks.length; t++)
            this._onetimeCallbacks[t]();
          this._onetimeCallbacks.length = 0;
        }
        this.emitEvent("beginFrame");
      }
      renderEnd(t) {
        this._endMatrixStacks(),
          this.popDepthTest(),
          this.popDepthWrite(),
          this.popDepthFunc(),
          this.popCullFaceFacing(),
          this.popCullFace(),
          this.popBlend(),
          this.popBlendMode(),
          t.endFrame(),
          this.emitEvent("endFrame");
      }
      getTexture(t) {
        return this._textureslots[t];
      }
      hasFrameStarted() {
        return this._frameStarted;
      }
      checkFrameStarted(t) {
        this._frameStarted ||
          (this._log.warn("frame not started " + t),
          this.patch.printTriggerStack());
      }
      setTexture(t, e, i) {
        return (
          this.checkFrameStarted("cgl setTexture"),
          null === e && (e = CGL.Texture.getEmptyTexture(this).tex),
          this._textureslots[t] != e &&
            (this.gl.activeTexture(this.gl.TEXTURE0 + t),
            this.gl.bindTexture(i || this.gl.TEXTURE_2D, e),
            (this._textureslots[t] = e)),
          !0
        );
      }
      fullScreen() {
        this.canvas.requestFullscreen
          ? this.canvas.requestFullscreen()
          : this.canvas.mozRequestFullScreen
            ? this.canvas.mozRequestFullScreen()
            : this.canvas.webkitRequestFullscreen
              ? this.canvas.webkitRequestFullscreen()
              : this.canvas.msRequestFullscreen &&
                this.canvas.msRequestFullscreen();
      }
      printError(t) {
        if (!this.checkGlErrors) return;
        let e = !1,
          i = this.gl.getError();
        if (i != this.gl.NO_ERROR) {
          let s = "";
          i == this.gl.OUT_OF_MEMORY && (s = "OUT_OF_MEMORY"),
            i == this.gl.INVALID_ENUM && (s = "INVALID_ENUM"),
            i == this.gl.INVALID_OPERATION && (s = "INVALID_OPERATION"),
            i == this.gl.INVALID_FRAMEBUFFER_OPERATION &&
              (s = "INVALID_FRAMEBUFFER_OPERATION"),
            i == this.gl.INVALID_VALUE && (s = "INVALID_VALUE"),
            i == this.gl.CONTEXT_LOST_WEBGL &&
              ((this.aborted = !0), (s = "CONTEXT_LOST_WEBGL")),
            i == this.gl.NO_ERROR && (s = "NO_ERROR"),
            (e = !0),
            this._log.warn("gl error [" + this.canvas.id + "]: ", t, i, s),
            -1 == this.canvas.id.indexOf("glGuiCanvas") &&
              (this._loggedGlError ||
                (this.patch.printTriggerStack(),
                this._log.stack("glerror"),
                (this._loggedGlError = !0)));
        }
        return (i = this.gl.getError()), e;
      }
      saveScreenshot(t, e, i, s, r) {
        this.patch.renderOneFrame();
        let n = this.canvas.clientWidth * this.pixelDensity,
          o = this.canvas.clientHeight * this.pixelDensity;
        function a(t, e, i) {
          return Array(e - String(t).length + 1).join(i || "0") + t;
        }
        i && ((this.canvas.width = i), (n = i)),
          s && ((this.canvas.height = s), (o = s));
        const h = new Date(),
          l = ""
            .concat(
              String(h.getFullYear()) +
                String(h.getMonth() + 1) +
                String(h.getDate()),
              "_",
            )
            .concat(a(h.getHours(), 2))
            .concat(a(h.getMinutes(), 2))
            .concat(a(h.getSeconds(), 2));
        t ? (t += ".png") : (t = "cables_" + l + ".png"),
          this.patch.cgl.screenShot(
            function (i) {
              if (((this.canvas.width = n), (this.canvas.height = o), i)) {
                const s = document.createElement("a");
                (s.download = t),
                  (s.href = URL.createObjectURL(i)),
                  setTimeout(function () {
                    s.click(), e && e(i);
                  }, 100);
              } else this._log.log("screenshot: no blob");
            }.bind(this),
            r,
          );
      }
      _dispose() {
        this._simpleShader.dispose(), (this.gl = null);
      }
    }
    (xt.prototype.popShader = xt.prototype.setPreviousShader),
      (xt.prototype.setShader = xt.prototype.pushShader),
      (xt.prototype.addNextFrameOnceCallback = function (t) {
        t && this._onetimeCallbacks.push(t);
      }),
      (xt.prototype._stackDepthTest = []),
      (xt.prototype.pushDepthTest = function (t) {
        this._stackDepthTest.push(t),
          t
            ? this.gl.enable(this.gl.DEPTH_TEST)
            : this.gl.disable(this.gl.DEPTH_TEST);
      }),
      (xt.prototype.stateDepthTest = function () {
        return this._stackDepthTest[this._stackDepthTest.length - 1];
      }),
      (xt.prototype.popDepthTest = function () {
        this._stackDepthTest.pop(),
          this._stackDepthTest[this._stackDepthTest.length - 1]
            ? this.gl.enable(this.gl.DEPTH_TEST)
            : this.gl.disable(this.gl.DEPTH_TEST);
      }),
      (xt.prototype._stackDepthWrite = []),
      (xt.prototype.pushDepthWrite = function (t) {
        (t = t || !1), this._stackDepthWrite.push(t), this.gl.depthMask(t);
      }),
      (xt.prototype.stateDepthWrite = function () {
        return this._stackDepthWrite[this._stackDepthWrite.length - 1];
      }),
      (xt.prototype.popDepthWrite = function () {
        this._stackDepthWrite.pop(),
          this.gl.depthMask(
            this._stackDepthWrite[this._stackDepthWrite.length - 1] || !1,
          );
      }),
      (xt.prototype._stackCullFace = []),
      (xt.prototype.pushCullFace = function (t) {
        this._stackCullFace.push(t),
          t
            ? this.gl.enable(this.gl.CULL_FACE)
            : this.gl.disable(this.gl.CULL_FACE);
      }),
      (xt.prototype.stateCullFace = function () {
        return this._stackCullFace[this._stackCullFace.length - 1];
      }),
      (xt.prototype.popCullFace = function () {
        this._stackCullFace.pop(),
          this._stackCullFace[this._stackCullFace.length - 1]
            ? this.gl.enable(this.gl.CULL_FACE)
            : this.gl.disable(this.gl.CULL_FACE);
      }),
      (xt.prototype._stackCullFaceFacing = []),
      (xt.prototype.pushCullFaceFacing = function (t) {
        this._stackCullFaceFacing.push(t),
          this.gl.cullFace(
            this._stackCullFaceFacing[this._stackCullFaceFacing.length - 1],
          );
      }),
      (xt.prototype.stateCullFaceFacing = function () {
        return this._stackCullFaceFacing[this._stackCullFaceFacing.length - 1];
      }),
      (xt.prototype.popCullFaceFacing = function () {
        this._stackCullFaceFacing.pop(),
          this._stackCullFaceFacing.length > 0 &&
            this.gl.cullFace(
              this._stackCullFaceFacing[this._stackCullFaceFacing.length - 1],
            );
      }),
      (xt.prototype._stackDepthFunc = []),
      (xt.prototype.pushDepthFunc = function (t) {
        this._stackDepthFunc.push(t), this.gl.depthFunc(t);
      }),
      (xt.prototype.stateDepthFunc = function () {
        return (
          this._stackDepthFunc.length > 0 &&
          this._stackDepthFunc[this._stackDepthFunc.length - 1]
        );
      }),
      (xt.prototype.popDepthFunc = function () {
        this._stackDepthFunc.pop(),
          this._stackDepthFunc.length > 0 &&
            this.gl.depthFunc(
              this._stackDepthFunc[this._stackDepthFunc.length - 1],
            );
      }),
      (xt.prototype._stackBlend = []),
      (xt.prototype.pushBlend = function (t) {
        this._stackBlend.push(t),
          t ? this.gl.enable(this.gl.BLEND) : this.gl.disable(this.gl.BLEND);
      }),
      (xt.prototype.popBlend = function () {
        this._stackBlend.pop(),
          this._stackBlend[this._stackBlend.length - 1]
            ? this.gl.enable(this.gl.BLEND)
            : this.gl.disable(this.gl.BLEND);
      }),
      (xt.prototype.stateBlend = function () {
        return this._stackBlend[this._stackBlend.length - 1];
      }),
      (xt.prototype._stackBlendMode = []),
      (xt.prototype._stackBlendModePremul = []),
      (xt.prototype.pushBlendMode = function (t, e) {
        this._stackBlendMode.push(t), this._stackBlendModePremul.push(e);
        const i = this._stackBlendMode.length - 1;
        this.pushBlend(this._stackBlendMode[i] !== Z.BLEND_NONE),
          this._setBlendMode(
            this._stackBlendMode[i],
            this._stackBlendModePremul[i],
          );
      }),
      (xt.prototype.popBlendMode = function () {
        this._stackBlendMode.pop(), this._stackBlendModePremul.pop();
        const t = this._stackBlendMode.length - 1;
        this.popBlend(this._stackBlendMode[t] !== Z.BLEND_NONE),
          t >= 0 &&
            this._setBlendMode(
              this._stackBlendMode[t],
              this._stackBlendModePremul[t],
            );
      }),
      (xt.prototype._stackStencil = []),
      (xt.prototype.pushStencil = function (t) {
        this._stackStencil.push(t),
          t
            ? this.gl.enable(this.gl.STENCIL_TEST)
            : this.gl.disable(this.gl.STENCIL_TEST);
      }),
      (xt.prototype.popStencil = function () {
        this._stackStencil.pop(),
          this._stackStencil[this._stackStencil.length - 1]
            ? this.gl.enable(this.gl.STENCIL_TEST)
            : this.gl.disable(this.gl.STENCIL_TEST);
      }),
      (xt.prototype.glGetAttribLocation = function (t, e) {
        return this.gl.getAttribLocation(t, e);
      }),
      (xt.prototype.shouldDrawHelpers = function (t) {
        if (this.frameStore.shadowPass) return !1;
        if (!t.patch.isEditorMode()) return !1;
        const e = this.getCurrentFrameBuffer();
        return (
          (!e ||
            !e.getWidth ||
            this.canvasWidth / this.canvasHeight ==
              e.getWidth() / e.getHeight()) &&
          (CABLES.UI.renderHelper ||
            (CABLES.UI.renderHelperCurrent && t.isCurrentUiOp()))
        );
      }),
      (xt.prototype._setBlendMode = function (t, e) {
        const i = this.gl;
        t == Z.BLEND_NONE ||
          (t == Z.BLEND_ADD
            ? e
              ? (i.blendEquationSeparate(i.FUNC_ADD, i.FUNC_ADD),
                i.blendFuncSeparate(i.ONE, i.ONE, i.ONE, i.ONE))
              : (i.blendEquation(i.FUNC_ADD), i.blendFunc(i.SRC_ALPHA, i.ONE))
            : t == Z.BLEND_SUB
              ? e
                ? (i.blendEquationSeparate(i.FUNC_ADD, i.FUNC_ADD),
                  i.blendFuncSeparate(
                    i.ZERO,
                    i.ZERO,
                    i.ONE_MINUS_SRC_COLOR,
                    i.ONE_MINUS_SRC_ALPHA,
                  ))
                : (i.blendEquation(i.FUNC_ADD),
                  i.blendFunc(i.ZERO, i.ONE_MINUS_SRC_COLOR))
              : t == Z.BLEND_MUL
                ? e
                  ? (i.blendEquationSeparate(i.FUNC_ADD, i.FUNC_ADD),
                    i.blendFuncSeparate(
                      i.ZERO,
                      i.SRC_COLOR,
                      i.ZERO,
                      i.SRC_ALPHA,
                    ))
                  : (i.blendEquation(i.FUNC_ADD),
                    i.blendFunc(i.ZERO, i.SRC_COLOR))
                : t == Z.BLEND_NORMAL
                  ? e
                    ? (i.blendEquationSeparate(i.FUNC_ADD, i.FUNC_ADD),
                      i.blendFuncSeparate(
                        i.ONE,
                        i.ONE_MINUS_SRC_ALPHA,
                        i.ONE,
                        i.ONE_MINUS_SRC_ALPHA,
                      ))
                    : (i.blendEquationSeparate(i.FUNC_ADD, i.FUNC_ADD),
                      i.blendFuncSeparate(
                        i.SRC_ALPHA,
                        i.ONE_MINUS_SRC_ALPHA,
                        i.ONE,
                        i.ONE_MINUS_SRC_ALPHA,
                      ))
                  : this._log.log("setblendmode: unknown blendmode"));
      }),
      (xt.prototype.createMesh = function (t, e) {
        return new CGL.Mesh(this, t, e);
      }),
      (xt.prototype.setCursor = function (t) {
        this._cursor = t;
      }),
      (xt.prototype.enableExtension = function (t) {
        if (this._enabledExtensions.hasOwnProperty(t))
          return this._enabledExtensions[t];
        const e = this.gl.getExtension(t);
        return (
          (this._enabledExtensions[t] = e),
          e
            ? this._log.log("enabled extension", t)
            : this._log.warn("[cgl_state] extension not available " + t),
          e
        );
      });
    const vt = {
      Framebuffer: function (t, e, i, s) {
        const n = t;
        (this._log = new r("Framebuffer")), (this.valid = !0);
        let o = n.gl.DEPTH_TEXTURE;
        o || (o = n.enableExtension("WEBGL_depth_texture")),
          o || (o = n.enableExtension("WEBKIT_WEBGL_depth_texture")),
          o || (o = n.enableExtension("MOZ_WEBGL_depth_texture")),
          o || n.exitError("NO_DEPTH_TEXTURE", "no depth texture support");
        let a = e || 512,
          h = i || 512;
        (s = s || { isFloatingPointTexture: !1 }).hasOwnProperty("clear") ||
          (s.clear = !0),
          s.hasOwnProperty("filter") || (s.filter = w.FILTER_LINEAR);
        const l = new w(n, {
          isFloatingPointTexture: s.isFloatingPointTexture,
          filter: s.filter,
          wrap: s.wrap || w.CLAMP_TO_EDGE,
        });
        let c = null;
        o && (c = new w(n, { isDepthTexture: !0 })), (this._options = s);
        const u = n.gl.createFramebuffer(),
          p = n.gl.createRenderbuffer();
        (this.getWidth = function () {
          return a;
        }),
          (this.getHeight = function () {
            return h;
          }),
          (this.getGlFrameBuffer = function () {
            return u;
          }),
          (this.getDepthRenderBuffer = function () {
            return p;
          }),
          (this.getTextureColor = function () {
            return l;
          }),
          (this.getTextureDepth = function () {
            return c;
          }),
          (this.setFilter = function (t) {
            (l.filter = t), l.setSize(a, h);
          }),
          (this.setSize = function (t, e) {
            if (
              (t < 2 && (t = 2),
              e < 2 && (e = 2),
              (a = Math.ceil(t)),
              (h = Math.ceil(e)),
              n.profileData.profileFrameBuffercreate++,
              n.gl.bindFramebuffer(n.gl.FRAMEBUFFER, u),
              n.gl.bindRenderbuffer(n.gl.RENDERBUFFER, p),
              l.setSize(a, h),
              c && c.setSize(a, h),
              o &&
                n.gl.renderbufferStorage(
                  n.gl.RENDERBUFFER,
                  n.gl.DEPTH_COMPONENT16,
                  a,
                  h,
                ),
              n.gl.framebufferTexture2D(
                n.gl.FRAMEBUFFER,
                n.gl.COLOR_ATTACHMENT0,
                n.gl.TEXTURE_2D,
                l.tex,
                0,
              ),
              o &&
                (n.gl.framebufferRenderbuffer(
                  n.gl.FRAMEBUFFER,
                  n.gl.DEPTH_ATTACHMENT,
                  n.gl.RENDERBUFFER,
                  p,
                ),
                n.gl.framebufferTexture2D(
                  n.gl.FRAMEBUFFER,
                  n.gl.DEPTH_ATTACHMENT,
                  n.gl.TEXTURE_2D,
                  c.tex,
                  0,
                )),
              !n.gl.isFramebuffer(u))
            )
              throw new Error("Invalid framebuffer");
            const i = n.gl.checkFramebufferStatus(n.gl.FRAMEBUFFER);
            switch (i) {
              case n.gl.FRAMEBUFFER_COMPLETE:
                break;
              case n.gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:
                throw (
                  (this._log.warn(
                    "FRAMEBUFFER_INCOMPLETE_ATTACHMENT...",
                    a,
                    h,
                    l.tex,
                    p,
                  ),
                  (this.valid = !1),
                  new Error(
                    "Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_ATTACHMENT",
                  ))
                );
              case n.gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:
                throw (
                  (this._log.warn("FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT"),
                  (this.valid = !1),
                  new Error(
                    "Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT",
                  ))
                );
              case n.gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:
                throw (
                  (this._log.warn("FRAMEBUFFER_INCOMPLETE_DIMENSIONS"),
                  (this.valid = !1),
                  new Error(
                    "Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_DIMENSIONS",
                  ))
                );
              case n.gl.FRAMEBUFFER_UNSUPPORTED:
                throw (
                  (this._log.warn("FRAMEBUFFER_UNSUPPORTED"),
                  (this.valid = !1),
                  new Error("Incomplete framebuffer: FRAMEBUFFER_UNSUPPORTED"))
                );
              case 36059:
                this._log.warn(
                  "Incomplete: FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER from ext. Or Safari/iOS undefined behaviour.",
                ),
                  (this.valid = !1);
                break;
              default:
                throw (
                  (this._log.warn("incomplete framebuffer", i),
                  (this.valid = !1),
                  new Error("Incomplete framebuffer: " + i))
                );
            }
            n.gl.bindTexture(n.gl.TEXTURE_2D, null),
              n.gl.bindRenderbuffer(n.gl.RENDERBUFFER, null),
              n.gl.bindFramebuffer(n.gl.FRAMEBUFFER, null);
          }),
          (this.renderStart = function () {
            n.pushModelMatrix(),
              n.gl.bindFramebuffer(n.gl.FRAMEBUFFER, u),
              n.pushGlFrameBuffer(u),
              n.pushFrameBuffer(this),
              n.pushPMatrix(),
              n.gl.viewport(0, 0, a, h),
              this._options.clear &&
                (n.gl.clearColor(0, 0, 0, 0),
                n.gl.clear(n.gl.COLOR_BUFFER_BIT | n.gl.DEPTH_BUFFER_BIT));
          }),
          (this.renderEnd = function () {
            n.popPMatrix(),
              n.gl.bindFramebuffer(n.gl.FRAMEBUFFER, n.popGlFrameBuffer()),
              n.popFrameBuffer(),
              n.popModelMatrix(),
              n.resetViewPort();
          }),
          (this.delete = function () {
            l.delete(),
              (this.valid = !1),
              c && c.delete(),
              n.gl.deleteRenderbuffer(p),
              n.gl.deleteFramebuffer(u);
          }),
          (this.dispose = this.delete),
          this.setSize(a, h);
      },
      Framebuffer2: M,
      Geometry: G,
      BoundingBox: V,
      Marker: function (t) {
        const e = new G("marker");
        e.setPointVertices([
          1e-5, 0, 0, 1, 0, 0, 0, 1e-5, 0, 0, 1, 0, 0, 0, 1e-5, 0, 0, 1,
        ]);
        const i = new tt(t, e, t.gl.LINES);
        i.setGeom(e);
        const s = new ft(t, "markermaterial"),
          r =
            "".endl() +
            "precision highp float;".endl() +
            "IN vec3 axisColor;".endl() +
            "void main()".endl() +
            "{".endl() +
            "    vec4 col=vec4(axisColor,1.0);".endl() +
            "    outColor = col;".endl() +
            "}",
          n =
            "".endl() +
            "IN vec3 vPosition;".endl() +
            "UNI mat4 projMatrix;".endl() +
            "UNI mat4 mvMatrix;".endl() +
            "OUT vec3 axisColor;".endl() +
            "void main()".endl() +
            "{".endl() +
            "   vec4 pos=vec4(vPosition, 1.0);".endl() +
            "   if(pos.x!=0.0)axisColor=vec3(1.0,0.3,0.0);".endl() +
            "   if(pos.y!=0.0)axisColor=vec3(0.0,1.0,0.2);".endl() +
            "   if(pos.z!=0.0)axisColor=vec3(0.0,0.5,1.0);".endl() +
            "   gl_Position = projMatrix * mvMatrix * pos;".endl() +
            "}";
        s.setSource(n, r),
          (this._vScale = vec3.create()),
          (this.draw = function (t, e, r) {
            const n = e || 2;
            t.pushModelMatrix(),
              t.pushShader(s),
              vec3.set(this._vScale, n, n, n),
              mat4.scale(t.mvMatrix, t.mvMatrix, this._vScale),
              t.pushDepthTest(1 == r),
              i.render(t.getShader()),
              t.popDepthTest(),
              t.popShader(),
              t.popModelMatrix();
          });
      },
      WirePoint: function (t) {
        const e = t.gl.createBuffer(),
          i = vec3.create();
        (this.render = function (t, s) {
          t.pushModelMatrix(),
            vec3.set(i, s, s, s),
            mat4.scale(t.mvMatrix, t.mvMatrix, i);
          const r = t.getShader();
          r &&
            (r.bind(),
            t.gl.bindBuffer(t.gl.ARRAY_BUFFER, e),
            t.gl.vertexAttribPointer(
              r.getAttrVertexPos(),
              e.itemSize,
              t.gl.FLOAT,
              !1,
              0,
              0,
            ),
            t.gl.enableVertexAttribArray(r.getAttrVertexPos()),
            t.gl.bindBuffer(t.gl.ARRAY_BUFFER, e),
            t.gl.drawArrays(t.gl.LINE_STRIP, 0, e.numItems)),
            t.popModelMatrix();
        }),
          (function () {
            const i = [],
              s = 24;
            let r = 0,
              n = 0;
            const o = 0.5;
            for (r = 0; r <= Math.round(s); r++)
              (n = (360 / Math.round(s)) * r * at),
                i.push(Math.cos(n) * o),
                i.push(0),
                i.push(Math.sin(n) * o);
            for (r = 0; r <= Math.round(s); r++)
              (n = (360 / Math.round(s)) * r * at),
                i.push(Math.cos(n) * o),
                i.push(Math.sin(n) * o),
                i.push(0);
            for (r = 0; r <= Math.round(s); r++)
              (n = (360 / Math.round(s)) * r * at),
                i.push(0),
                i.push(Math.cos(n) * o),
                i.push(Math.sin(n) * o);
            t.gl.bindBuffer(t.gl.ARRAY_BUFFER, e),
              t.gl.bufferData(
                t.gl.ARRAY_BUFFER,
                new Float32Array(i),
                t.gl.STATIC_DRAW,
              ),
              (e.itemSize = 3),
              (e.numItems = i.length / e.itemSize);
          })();
      },
      WireCube: function (t) {
        const e = t.gl.createBuffer(),
          i = vec3.create();
        (this.render = function (t, s, r, n) {
          t.pushModelMatrix(),
            vec3.set(i, s || 1, r || 1, n || 1),
            mat4.scale(t.mvMatrix, t.mvMatrix, i);
          const o = t.getShader();
          o &&
            (o.bind(),
            t.gl.bindBuffer(t.gl.ARRAY_BUFFER, e),
            t.gl.vertexAttribPointer(
              o.getAttrVertexPos(),
              e.itemSize,
              t.gl.FLOAT,
              !1,
              0,
              0,
            ),
            t.gl.enableVertexAttribArray(o.getAttrVertexPos()),
            t.gl.bindBuffer(t.gl.ARRAY_BUFFER, e),
            t.gl.drawArrays(t.gl.LINE_STRIP, 0, e.numItems)),
            t.popModelMatrix();
        }),
          (function () {
            const i = [];
            i.push(-1, -1, 1),
              i.push(1, -1, 1),
              i.push(1, 1, 1),
              i.push(-1, 1, 1),
              i.push(-1, -1, 1),
              i.push(-1, -1, -1),
              i.push(1, -1, -1),
              i.push(1, 1, -1),
              i.push(-1, 1, -1),
              i.push(-1, -1, -1),
              i.push(-1, -1, -1),
              i.push(-1, 1, -1),
              i.push(-1, 1, 1),
              i.push(-1, -1, 1),
              i.push(-1, -1, -1),
              i.push(1, -1, -1),
              i.push(1, 1, -1),
              i.push(1, 1, 1),
              i.push(1, -1, 1),
              i.push(1, -1, -1),
              t.gl.bindBuffer(t.gl.ARRAY_BUFFER, e),
              t.gl.bufferData(
                t.gl.ARRAY_BUFFER,
                new Float32Array(i),
                t.gl.STATIC_DRAW,
              ),
              (e.itemSize = 3),
              (e.numItems = i.length / e.itemSize);
          })();
      },
      MatrixStack: At,
      Mesh: tt,
      MESH: $,
      ShaderLibMods: st,
      Shader: ft,
      Uniform: Q,
      MESHES: et,
      Context: xt,
      Texture: w,
      TextureEffect: it,
      isWindows: ht,
      getWheelSpeed: ct,
      getWheelDelta: ut,
      onLoadingAssetsFinished: null,
      ProfileData: mt,
      UniColorShader: class {
        constructor(t) {
          this.shader = new CGL.Shader(t, "markermaterial");
          const e =
              "".endl() +
              "void main()".endl() +
              "{".endl() +
              "    outColor = vec4(color.rgb,1.0);".endl() +
              "}",
            i =
              "".endl() +
              "IN vec3 vPosition;".endl() +
              "UNI mat4 projMatrix;".endl() +
              "UNI mat4 mvMatrix;".endl() +
              "void main()".endl() +
              "{".endl() +
              "   gl_Position = projMatrix * mvMatrix * vec4(vPosition,1.0);".endl() +
              "}";
          this.shader.setSource(i, e),
            (this.coloruni = this.shader.addUniformFrag(
              "4f",
              "color",
              [1, 0.777, 1, 1],
            ));
        }
        setColor(t, e, i, s) {
          this.coloruni.set(t, e, i, s);
        }
      },
      ...Z,
      ...J,
      ...K,
      ...Z,
    };
    window.CGL = vt;
    const yt = function (t) {
      H.apply(this),
        (this.id = CABLES.simpleId()),
        (this.portIn = null),
        (this.portOut = null),
        (this.scene = t),
        (this.activityCounter = 0),
        (this.ignoreInSerialize = !1);
    };
    (yt.prototype.setValue = function (t) {
      void 0 === t ? this._setValue() : this.portIn.set(t);
    }),
      (yt.prototype.activity = function () {
        this.activityCounter++;
      }),
      (yt.prototype._setValue = function () {
        if (!this.portOut) return void this.remove();
        const t = this.portOut.get();
        t == t &&
          (this.portIn.type != o.OP_PORT_TYPE_FUNCTION && this.activity(),
          this.portIn.get() !== t
            ? this.portIn.set(t)
            : (this.portIn.changeAlways && this.portIn.set(t),
              this.portOut.forceRefChange && this.portIn.forceChange()));
      }),
      (yt.prototype.getOtherPort = function (t) {
        return t == this.portIn ? this.portOut : this.portIn;
      }),
      (yt.prototype.remove = function () {
        this.portIn && this.portIn.removeLink(this),
          this.portOut && this.portOut.removeLink(this),
          this.scene &&
            this.scene.emitEvent("onUnLink", this.portIn, this.portOut, this),
          !this.portIn ||
            (this.portIn.type != o.OP_PORT_TYPE_OBJECT &&
              this.portIn.type != o.OP_PORT_TYPE_ARRAY) ||
            (this.portIn.set(null),
            this.portIn.links.length > 0 &&
              this.portIn.set(
                this.portIn.links[0].getOtherPort(this.portIn).get(),
              )),
          this.portIn && this.portIn.op._checkLinksNeededToWork(),
          this.portOut && this.portOut.op._checkLinksNeededToWork(),
          (this.portIn = null),
          (this.portOut = null),
          (this.scene = null);
      }),
      (yt.prototype.link = function (t, e) {
        if (!yt.canLink(t, e))
          return console.warn("[core_link] cannot link ports!", t, e), !1;
        t.direction == a.PORT_DIR_IN
          ? ((this.portIn = t), (this.portOut = e))
          : ((this.portIn = e), (this.portOut = t)),
          t.addLink(this),
          e.addLink(this),
          this.setValue(),
          t.onLink && t.onLink(this),
          e.onLink && e.onLink(this),
          t.op._checkLinksNeededToWork(),
          e.op._checkLinksNeededToWork();
      }),
      (yt.prototype.getSerialized = function () {
        const t = {};
        return (
          (t.portIn = this.portIn.getName()),
          (t.portOut = this.portOut.getName()),
          (t.objIn = this.portIn.op.id),
          (t.objOut = this.portOut.op.id),
          t
        );
      }),
      (yt.canLinkText = function (t, e) {
        if (t.direction == e.direction) {
          let t = "(out)";
          return (
            e.direction == a.PORT_DIR_IN && (t = "(in)"),
            "can not link: same direction " + t
          );
        }
        return t.op == e.op
          ? "can not link: same op"
          : t.type != o.OP_PORT_TYPE_DYNAMIC &&
              e.type != o.OP_PORT_TYPE_DYNAMIC &&
              t.type != e.type
            ? "can not link: different type"
            : CABLES.UI &&
                t.type == o.OP_PORT_TYPE_OBJECT &&
                e.type == o.OP_PORT_TYPE_OBJECT &&
                t.uiAttribs.objType &&
                e.uiAttribs.objType &&
                t.uiAttribs.objType != e.uiAttribs.objType
              ? "incompatible objects"
              : t
                ? e
                  ? (t.direction == a.PORT_DIR_IN && t.isAnimated()) ||
                    (e.direction == a.PORT_DIR_IN && e.isAnimated())
                    ? "can not link: is animated"
                    : t.isLinkedTo(e)
                      ? "ports already linked"
                      : (t.canLink && !t.canLink(e)) ||
                          (e.canLink && !e.canLink(t))
                        ? "Incompatible"
                        : "can link"
                  : "can not link: port 2 invalid"
                : "can not link: port 1 invalid";
      }),
      (yt.canLink = function (t, e) {
        if (!t) return !1;
        if (!e) return !1;
        if (t.direction == a.PORT_DIR_IN && t.isAnimated()) return !1;
        if (e.direction == a.PORT_DIR_IN && e.isAnimated()) return !1;
        if (t.isHidden() || e.isHidden()) return !1;
        if (t.isLinkedTo(e)) return !1;
        if (t.direction == e.direction) return !1;
        if (
          CABLES.UI &&
          t.type == o.OP_PORT_TYPE_OBJECT &&
          e.type == o.OP_PORT_TYPE_OBJECT &&
          t.uiAttribs.objType &&
          e.uiAttribs.objType
        ) {
          if (
            0 == t.uiAttribs.objType.indexOf("sg_") &&
            0 == e.uiAttribs.objType.indexOf("sg_")
          )
            return !0;
          if (t.uiAttribs.objType != e.uiAttribs.objType) return !1;
        }
        return !(
          (t.type != e.type &&
            t.type != o.OP_PORT_TYPE_DYNAMIC &&
            e.type != o.OP_PORT_TYPE_DYNAMIC) ||
          (t.type != o.OP_PORT_TYPE_DYNAMIC &&
            e.type != o.OP_PORT_TYPE_DYNAMIC &&
            (t.op == e.op ||
              (t.canLink && !t.canLink(e)) ||
              (e.canLink && !e.canLink(t))))
        );
      });
    class It extends j {
      constructor(t, e, i, s, r) {
        super(t, e, i, s),
          (this.get = () => {
            let t = super.get();
            return (
              CABLES.UI &&
                ("" === t ||
                null == t ||
                (s.values && -1 === s.values.indexOf(String(t)))
                  ? this.op.setUiError(
                      "invalidswitch",
                      "Invalid Value [" + this.name + ']: "' + t + '"',
                    )
                  : this.op.setUiError("invalidswitch", null)),
              null == t && (t = ""),
              t
            );
          }),
          (this.indexPort = r),
          (this.indexPort.set = (t) => {
            const e = s.values;
            if (!e) return;
            let i = Math.floor(t);
            (i = Math.min(i, e.length - 1)),
              (i = Math.max(i, 0)),
              this.indexPort.setValue(i),
              this.set(e[i]),
              this.op.patch.isEditorMode() &&
                window.gui &&
                gui.patchView.isCurrentOp(this.op) &&
                gui.opParams.show(this.op);
          });
      }
      setUiAttribs(t) {
        const e = t.hidePort;
        (t.hidePort = !0),
          super.setUiAttribs(t),
          void 0 !== e && this.indexPort.setUiAttribs({ hidePort: e });
      }
    }
    class Rt extends It {
      setUiAttribs(t) {
        if (this.indexPort.isLinked())
          for (const e in t) "greyout" != e || t[e] || (t[e] = "true");
        super.setUiAttribs(t);
      }
    }
    const St = function () {
      H.apply(this),
        (this._log = new r("core_op")),
        (this.data = {}),
        (this.storage = {}),
        (this._objName = ""),
        (this.portsOut = []),
        (this.portsIn = []),
        (this.portsInData = []),
        (this.opId = ""),
        (this.uiAttribs = {}),
        (this.enabled = !0),
        (this.patch = arguments[0]),
        (this.name = arguments[1]),
        (this._linkTimeRules = { needsLinkedToWork: [], needsParentOp: null }),
        (this.shouldWork = {}),
        (this.hasUiErrors = !1),
        (this._uiErrors = {}),
        (this._hasAnimPort = !1),
        arguments[1] &&
          ((this._shortOpName = CABLES.getShortOpName(arguments[1])),
          this.getTitle()),
        (this.id = arguments[2] || f()),
        (this.onAddPort = null),
        (this.onCreate = null),
        (this.onResize = null),
        (this.onLoaded = null),
        (this.onDelete = null),
        (this.onUiAttrChange = null),
        (this.onError = null),
        (this._instances = null),
        (this.preRender = null),
        (this.init = null),
        Object.defineProperty(this, "objName", {
          get() {
            return this._objName;
          },
        }),
        Object.defineProperty(this, "shortName", {
          get() {
            return this._shortOpName;
          },
        });
    };
    {
      (St.prototype.clearUiAttrib = function (t) {
        this.uiAttrib({ name: null });
      }),
        (St.prototype.getTitle = function () {
          return this.uiAttribs
            ? ((void 0 !== this.uiAttribs.title &&
                "" !== this.uiAttribs.title) ||
                -1 != this.objName.indexOf("Ops.Ui.") ||
                (this.uiAttribs.title = this._shortOpName),
              void 0 === this.uiAttribs.title &&
                (this.uiAttribs.title = this._shortOpName),
              this.uiAttribs.title)
            : "nouiattribs" + this.name;
        }),
        (St.prototype.setTitle = function (t) {
          const e = this.name != t;
          (this.name = t),
            this.uiAttribs.title != t && this.uiAttr({ title: t }),
            e && this.emitEvent("onTitleChange", t);
        }),
        (St.prototype.setStorage = function (t) {
          if (!t) return;
          this.storage = this.storage || {};
          let e = !1;
          for (const i in t)
            this.storage[i] != t[i] && (e = !0), (this.storage[i] = t[i]);
          e && this.emitEvent("onStorageChange", t);
        }),
        (St.prototype.isSubPatchOp = function () {
          if (this.storage) return this.storage.subPatchVer || 0;
        });
      const t = function (t) {
        if (!t) return;
        (t.error || t.warning || t.hint) &&
          this._log.warn(
            "old ui error/warning attribute in " +
              this.name +
              ", use op.setUiError !",
            t,
          ),
          "object" != typeof t &&
            this._log.error("op.uiAttrib attribs are not of type object"),
          this.uiAttribs || (this.uiAttribs = {});
        let e = !1;
        !CABLES.UI ||
          !t.hasOwnProperty("translate") ||
          (this.uiAttribs.translate &&
            this.uiAttribs.translate.x == t.translate.x &&
            this.uiAttribs.translate.y == t.translate.y) ||
          (e = !0);
        let i = !1;
        for (const e in t)
          this.uiAttribs[e] != t[e] && (i = !0), (this.uiAttribs[e] = t[e]);
        this.uiAttribs.hasOwnProperty("selected") &&
          0 == this.uiAttribs.selected &&
          delete this.uiAttribs.selected,
          t.title && t.title != this.name && this.setTitle(t.title),
          i &&
            (this.emitEvent("onUiAttribsChange", t),
            this.patch.emitEvent("onUiAttribsChange", this, t)),
          e && this.emitEvent("move");
      };
      (St.prototype.setUiAttribs =
        St.prototype.setUiAttrib =
        St.prototype.uiAttr =
          t),
        (St.prototype.getName = function () {
          return this.uiAttribs.name ? this.uiAttribs.name : this.name;
        }),
        (St.prototype.addOutPort = function (t) {
          return (
            (t.direction = a.PORT_DIR_OUT),
            (t._op = this),
            this.portsOut.push(t),
            this.emitEvent("onPortAdd", t),
            t
          );
        }),
        (St.prototype.hasDynamicPort = function () {
          let t = 0;
          for (t = 0; t < this.portsIn.length; t++) {
            if (this.portsIn[t].type == o.OP_PORT_TYPE_DYNAMIC) return !0;
            if ("dyn" == this.portsIn[t].getName()) return !0;
          }
          for (t = 0; t < this.portsOut.length; t++) {
            if (this.portsOut[t].type == o.OP_PORT_TYPE_DYNAMIC) return !0;
            if ("dyn" == this.portsOut[t].getName()) return !0;
          }
          return !1;
        }),
        (St.prototype.addInPort = function (t) {
          if (!(t instanceof j)) throw new Error("parameter is not a port!");
          return (
            (t.direction = a.PORT_DIR_IN),
            (t._op = this),
            this.portsIn.push(t),
            this.emitEvent("onPortAdd", t),
            t
          );
        }),
        (St.prototype.inFunction = St.prototype.inTrigger =
          function (t, e) {
            const i = this.addInPort(new j(this, t, o.OP_PORT_TYPE_FUNCTION));
            return void 0 !== e && i.set(e), i;
          }),
        (St.prototype.inFunctionButton = St.prototype.inTriggerButton =
          function (t, e) {
            const i = this.addInPort(
              new j(this, t, o.OP_PORT_TYPE_FUNCTION, { display: "button" }),
            );
            return void 0 !== e && i.set(e), i;
          }),
        (St.prototype.inFunctionButton = St.prototype.inUiTriggerButtons =
          function (t, e) {
            const i = this.addInPort(
              new j(this, t, o.OP_PORT_TYPE_FUNCTION, { display: "buttons" }),
            );
            return void 0 !== e && i.set(e), i;
          }),
        (St.prototype.inValueFloat =
          St.prototype.inValue =
          St.prototype.inFloat =
            function (t, e) {
              const i = this.addInPort(new j(this, t, o.OP_PORT_TYPE_VALUE));
              return void 0 !== e && (i.set(e), (i.defaultValue = e)), i;
            }),
        (St.prototype.inValueBool = St.prototype.inBool =
          function (t, e) {
            const i = this.addInPort(
              new j(this, t, o.OP_PORT_TYPE_VALUE, { display: "bool" }),
            );
            return void 0 !== e && (i.set(e), (i.defaultValue = i.get())), i;
          }),
        (St.prototype.inValueString = function (t, e) {
          const i = this.addInPort(
            new j(this, t, o.OP_PORT_TYPE_VALUE, { type: "string" }),
          );
          return (
            (i.value = ""), void 0 !== e && (i.set(e), (i.defaultValue = e)), i
          );
        }),
        (St.prototype.inString = function (t, e) {
          const i = this.addInPort(
            new j(this, t, o.OP_PORT_TYPE_STRING, { type: "string" }),
          );
          return (
            (e = e || ""), (i.value = e), i.set(e), (i.defaultValue = e), i
          );
        }),
        (St.prototype.inValueText = function (t, e) {
          const i = this.addInPort(
            new j(this, t, o.OP_PORT_TYPE_VALUE, {
              type: "string",
              display: "text",
            }),
          );
          return (
            (i.value = ""), void 0 !== e && (i.set(e), (i.defaultValue = e)), i
          );
        }),
        (St.prototype.inTextarea = function (t, e) {
          const i = this.addInPort(
            new j(this, t, o.OP_PORT_TYPE_STRING, {
              type: "string",
              display: "text",
            }),
          );
          return (
            (i.value = ""), void 0 !== e && (i.set(e), (i.defaultValue = e)), i
          );
        }),
        (St.prototype.inStringEditor = function (t, e, i, s = !0) {
          const r = this.addInPort(
            new j(this, t, o.OP_PORT_TYPE_STRING, {
              type: "string",
              display: "editor",
              editShortcut: !0,
              editorSyntax: i,
              hideFormatButton: s,
            }),
          );
          return (
            (r.value = ""), void 0 !== e && (r.set(e), (r.defaultValue = e)), r
          );
        }),
        (St.prototype.inValueEditor = function (t, e, i, s = !0) {
          const r = this.addInPort(
            new j(this, t, o.OP_PORT_TYPE_VALUE, {
              type: "string",
              display: "editor",
              editorSyntax: i,
              hideFormatButton: s,
            }),
          );
          return (
            (r.value = ""), void 0 !== e && (r.set(e), (r.defaultValue = e)), r
          );
        }),
        (St.prototype.inValueSelect = St.prototype.inDropDown =
          function (t, e, i, s) {
            let r = null;
            if (s) {
              const i = new j(this, t, o.OP_PORT_TYPE_VALUE, {
                display: "dropdown",
                hidePort: !0,
                type: "string",
                values: e,
              });
              r = this.addInPort(i);
            } else {
              const s = new j(this, t + " index", o.OP_PORT_TYPE_VALUE, {
                  increment: "integer",
                  hideParam: !0,
                }),
                n = this.addInPort(s);
              if (e) for (let t = 0; t < e.length; t++) e[t] = String(e[t]);
              const a = new Rt(
                this,
                t,
                o.OP_PORT_TYPE_VALUE,
                {
                  display: "dropdown",
                  hidePort: !0,
                  type: "string",
                  values: e,
                },
                n,
              );
              if (
                ((a.indexPort = s),
                (s.onLinkChanged = function () {
                  a.setUiAttribs({ greyout: s.isLinked() });
                }),
                (r = this.addInPort(a)),
                void 0 !== i)
              ) {
                r.set(i);
                const t = e.findIndex((t) => t == i);
                n.setValue(t), (r.defaultValue = i), (n.defaultValue = t);
              }
            }
            return r;
          }),
        (St.prototype.inSwitch = function (t, e, i, s) {
          let r = null;
          if (s) {
            const i = new j(this, t, o.OP_PORT_TYPE_STRING, {
              display: "switch",
              hidePort: !0,
              type: "string",
              values: e,
            });
            r = this.addInPort(i);
          } else {
            i || (i = e[0]);
            const s = new j(this, t + " index", o.OP_PORT_TYPE_VALUE, {
                increment: "integer",
                hideParam: !0,
              }),
              n = this.addInPort(s);
            if (e) for (let t = 0; t < e.length; t++) e[t] = String(e[t]);
            const a = new It(
              this,
              t,
              o.OP_PORT_TYPE_STRING,
              { display: "switch", hidePort: !0, type: "string", values: e },
              n,
            );
            if (
              ((s.onLinkChanged = function () {
                a.setUiAttribs({ greyout: s.isLinked() });
              }),
              (r = this.addInPort(a)),
              void 0 !== i)
            ) {
              r.set(i);
              const t = e.findIndex((t) => t == i);
              n.setValue(t), (r.defaultValue = i), (n.defaultValue = t);
            }
          }
          return r;
        }),
        (St.prototype.inValueInt = St.prototype.inInt =
          function (t, e) {
            const i = this.addInPort(
              new j(this, t, o.OP_PORT_TYPE_VALUE, { increment: "integer" }),
            );
            return void 0 !== e && (i.set(e), (i.defaultValue = e)), i;
          }),
        (St.prototype.inFile = function (t, e, i) {
          const s = this.addInPort(
            new j(this, t, o.OP_PORT_TYPE_VALUE, {
              display: "file",
              type: "string",
              filter: e,
            }),
          );
          return void 0 !== i && (s.set(i), (s.defaultValue = i)), s;
        }),
        (St.prototype.inUrl = function (t, e, i) {
          const s = this.addInPort(
            new j(this, t, o.OP_PORT_TYPE_STRING, {
              display: "file",
              type: "string",
              filter: e,
            }),
          );
          return void 0 !== i && (s.set(i), (s.defaultValue = i)), s;
        }),
        (St.prototype.inTexture = function (t, e) {
          const i = this.addInPort(
            new j(this, t, o.OP_PORT_TYPE_OBJECT, {
              display: "texture",
              objType: "texture",
              preview: !0,
            }),
          );
          return (i.ignoreValueSerialize = !0), void 0 !== e && i.set(e), i;
        }),
        (St.prototype.inObject = function (t, e, i) {
          const s = this.addInPort(
            new j(this, t, o.OP_PORT_TYPE_OBJECT, { objType: i }),
          );
          return (s.ignoreValueSerialize = !0), void 0 !== e && s.set(e), s;
        }),
        (St.prototype.inGradient = function (t, e) {
          const i = this.addInPort(
            new j(this, t, o.OP_PORT_TYPE_VALUE, {
              display: "gradient",
              hidePort: !0,
            }),
          );
          return void 0 !== e && i.set(e), i;
        }),
        (St.prototype.inArray = function (t, e, i) {
          !i && CABLES.UTILS.isNumeric(e) && (i = e);
          const s = this.addInPort(
            new j(this, t, o.OP_PORT_TYPE_ARRAY, { stride: i }),
          );
          return (
            void 0 === e || (!Array.isArray(e) && null != e) || s.set(e), s
          );
        }),
        (St.prototype.inValueSlider = St.prototype.inFloatSlider =
          function (t, e, i, s) {
            const r = { display: "range" };
            null != i && null != s && ((r.min = i), (r.max = s));
            const n = this.addInPort(new j(this, t, o.OP_PORT_TYPE_VALUE, r));
            return void 0 !== e && (n.set(e), (n.defaultValue = e)), n;
          }),
        (St.prototype.outFunction = St.prototype.outTrigger =
          function (t, e) {
            const i = this.addOutPort(new j(this, t, o.OP_PORT_TYPE_FUNCTION));
            return void 0 !== e && i.set(e), i;
          }),
        (St.prototype.outValue = St.prototype.outNumber =
          function (t, e) {
            const i = this.addOutPort(new j(this, t, o.OP_PORT_TYPE_VALUE));
            return void 0 !== e && i.set(e), i;
          }),
        (St.prototype.outValueBool = St.prototype.outBool =
          function (t, e) {
            const i = this.addOutPort(
              new j(this, t, o.OP_PORT_TYPE_VALUE, { display: "bool" }),
            );
            return void 0 !== e ? i.set(e) : i.set(0), i;
          }),
        (St.prototype.outBoolNum = function (t, e) {
          const i = this.addOutPort(
            new j(this, t, o.OP_PORT_TYPE_VALUE, { display: "boolnum" }),
          );
          return (
            (i.set = function (t) {
              this.setValue(t ? 1 : 0);
            }.bind(i)),
            void 0 !== e ? i.set(e) : i.set(0),
            i
          );
        }),
        (St.prototype.outValueString = function (t, e) {
          const i = this.addOutPort(
            new j(this, t, o.OP_PORT_TYPE_VALUE, { type: "string" }),
          );
          return void 0 !== e && i.set(e), i;
        }),
        (St.prototype.outString = function (t, e) {
          const i = this.addOutPort(
            new j(this, t, o.OP_PORT_TYPE_STRING, { type: "string" }),
          );
          return void 0 !== e ? i.set(e) : i.set(""), i;
        }),
        (St.prototype.outObject = function (t, e, i) {
          const s = this.addOutPort(
            new j(this, t, o.OP_PORT_TYPE_OBJECT, { objType: i || null }),
          );
          return s.set(e || null), (s.ignoreValueSerialize = !0), s;
        }),
        (St.prototype.outArray = function (t, e, i) {
          !i && CABLES.UTILS.isNumeric(e) && (i = e);
          const s = this.addOutPort(
            new j(this, t, o.OP_PORT_TYPE_ARRAY, { stride: i }),
          );
          return (
            void 0 === e || (!Array.isArray(e) && null != e) || s.set(e),
            (s.ignoreValueSerialize = !0),
            s
          );
        }),
        (St.prototype.outTexture = function (t, e) {
          const i = this.addOutPort(
            new j(this, t, o.OP_PORT_TYPE_OBJECT, {
              preview: !0,
              objType: "texture",
            }),
          );
          return (
            void 0 !== e &&
              i.set(e || CGL.Texture.getEmptyTexture(this.patch.cgl)),
            (i.ignoreValueSerialize = !0),
            i
          );
        }),
        (St.prototype.inDynamic = function (t, e, i, s) {
          const r = new j(this, t, o.OP_PORT_TYPE_DYNAMIC, i);
          return (
            (r.shouldLink = function (t, i) {
              if (e && l.isArray(e)) {
                for (let s = 0; s < e.length; s++) {
                  if (t == this && i.type === e[s]) return !0;
                  if (i == this && t.type === e[s]) return !0;
                }
                return !1;
              }
              return !0;
            }),
            this.addInPort(r),
            void 0 !== s && (r.set(s), (r.defaultValue = s)),
            r
          );
        }),
        (St.prototype.removeLinks = function () {
          for (let t = 0; t < this.portsIn.length; t++)
            this.portsIn[t].removeLinks();
          for (let t = 0; t < this.portsOut.length; t++)
            this.portsOut[t].removeLinks();
        }),
        (St.prototype.getSerialized = function () {
          const t = {};
          this.opId && (t.opId = this.opId),
            this.patch.storeObjNames && (t.objName = this.objName),
            this.enabled || (t.disabled = !0),
            (t.id = this.id),
            (t.uiAttribs = JSON.parse(JSON.stringify(this.uiAttribs)) || {}),
            this.storage &&
              Object.keys(this.storage).length > 0 &&
              (t.storage = JSON.parse(JSON.stringify(this.storage))),
            this.uiAttribs.hasOwnProperty("working") &&
              1 == this.uiAttribs.working &&
              delete this.uiAttribs.working,
            t.uiAttribs.hasOwnProperty("uierrors") &&
              delete t.uiAttribs.uierrors,
            (t.portsIn = []),
            (t.portsOut = []);
          for (let e = 0; e < this.portsIn.length; e++) {
            const i = this.portsIn[e].getSerialized();
            i && t.portsIn.push(i);
          }
          for (const e in this.portsOut) {
            const i = this.portsOut[e].getSerialized();
            i && t.portsOut.push(i);
          }
          return (
            0 == t.portsIn.length && delete t.portsIn,
            0 == t.portsOut.length && delete t.portsOut,
            E(t),
            t
          );
        }),
        (St.prototype.getFirstOutPortByType = function (t) {
          for (const e in this.portsOut)
            if (this.portsOut[e].type == t) return this.portsOut[e];
        }),
        (St.prototype.getFirstInPortByType = function (t) {
          for (const e in this.portsIn)
            if (this.portsIn[e].type == t) return this.portsIn[e];
        }),
        (St.prototype.getPort = St.prototype.getPortByName =
          function (t, e) {
            if (e) {
              for (let e = 0; e < this.portsIn.length; e++)
                if (
                  this.portsIn[e].getName().toLowerCase() == t ||
                  this.portsIn[e].id.toLowerCase() == t
                )
                  return this.portsIn[e];
              for (let e = 0; e < this.portsOut.length; e++)
                if (
                  this.portsOut[e].getName().toLowerCase() == t ||
                  this.portsOut[e].id.toLowerCase() == t
                )
                  return this.portsOut[e];
            } else {
              for (let e = 0; e < this.portsIn.length; e++)
                if (this.portsIn[e].getName() == t || this.portsIn[e].id == t)
                  return this.portsIn[e];
              for (let e = 0; e < this.portsOut.length; e++)
                if (this.portsOut[e].getName() == t || this.portsOut[e].id == t)
                  return this.portsOut[e];
            }
          }),
        (St.prototype.getPortById = function (t) {
          for (let e = 0; e < this.portsIn.length; e++)
            if (this.portsIn[e].id == t) return this.portsIn[e];
          for (let e = 0; e < this.portsOut.length; e++)
            if (this.portsOut[e].id == t) return this.portsOut[e];
        }),
        (St.prototype.updateAnims = function () {
          if (this._hasAnimPort)
            for (let t = 0; t < this.portsIn.length; t++)
              this.portsIn[t].updateAnim();
        }),
        (St.prototype.log = function () {
          const t = "op " + this.objName;
          if (CABLES.UI && !CABLES.UI.logFilter.shouldPrint(t, ...arguments))
            return;
          if (!CABLES.UI && this.patch.silent) return;
          const e = ["[op " + CABLES.getShortOpName(this.objName) + "]"];
          e.push.apply(e, arguments),
            Function.prototype.apply.apply(console.log, [console, e]);
        }),
        (St.prototype.error = St.prototype.logError =
          function () {
            if (!this) return void console.log("no this...!!!");
            const t = ["[op " + CABLES.getShortOpName(this.objName) + "]"];
            t.push.apply(t, arguments),
              Function.prototype.apply.apply(console.error, [console, t]),
              window.gui &&
                window.gui.emitEvent(
                  "opLogEvent",
                  this.objName,
                  "error",
                  arguments,
                );
          }),
        (St.prototype.warn = St.prototype.logWarn =
          function () {
            const t = ["[op " + CABLES.getShortOpName(this.objName) + "]"];
            t.push.apply(t, arguments),
              Function.prototype.apply.apply(console.warn, [console, t]);
          }),
        (St.prototype.verbose = St.prototype.logVerbose =
          function () {
            const t = "op " + CABLES.getShortOpName(this.objName);
            if (CABLES.UI && !CABLES.UI.logFilter.shouldPrint(t, ...arguments))
              return;
            if (!CABLES.UI && this.patch.silent) return;
            const e = ["[" + t + "]"];
            e.push.apply(e, arguments),
              Function.prototype.apply.apply(console.info, [console, e]);
          }),
        (St.prototype.profile = function (t) {
          for (let t = 0; t < this.portsIn.length; t++)
            (this.portsIn[t]._onTriggered =
              this.portsIn[t]._onTriggeredProfiling),
              (this.portsIn[t].set = this.portsIn[t]._onSetProfiling);
        }),
        (St.prototype.findParent = function (t) {
          for (let e = 0; e < this.portsIn.length; e++)
            if (this.portsIn[e].isLinked()) {
              if (this.portsIn[e].links[0].portOut.parent.objName == t)
                return this.portsIn[e].links[0].portOut.parent;
              let i = null;
              if (
                ((i = this.portsIn[e].links[0].portOut.parent.findParent(t)), i)
              )
                return i;
            }
          return null;
        }),
        (St.prototype.cleanUp = function () {
          if (this._instances) {
            for (let t = 0; t < this._instances.length; t++)
              this._instances[t].onDelete && this._instances[t].onDelete();
            this._instances.length = 0;
          }
          for (let t = 0; t < this.portsIn.length; t++)
            this.portsIn[t].setAnimated(!1);
          this.onAnimFrame && this.patch.removeOnAnimFrame(this);
        }),
        (St.prototype.instanced = function (t) {
          if (
            (console.log("instanced", this.patch.instancing.numCycles()),
            0 === this.patch.instancing.numCycles())
          )
            return !1;
          let e = 0,
            i = 0;
          if (
            !this._instances ||
            this._instances.length != this.patch.instancing.numCycles()
          ) {
            for (
              this._instances || (this._instances = []),
                this._.log(
                  "creating instances of ",
                  this.objName,
                  this.patch.instancing.numCycles(),
                  this._instances.length,
                ),
                this._instances.length = this.patch.instancing.numCycles(),
                e = 0;
              e < this._instances.length;
              e++
            ) {
              (this._instances[e] = this.patch.createOp(this.objName, !0)),
                (this._instances[e].instanced = function () {
                  return !1;
                }),
                this._instances[e].uiAttr(this.uiAttribs);
              for (let t = 0; t < this.portsOut.length; t++)
                this.portsOut[t].type == o.OP_PORT_TYPE_FUNCTION &&
                  (this._instances[e].getPortByName(
                    this.portsOut[t].name,
                  ).trigger = this.portsOut[t].trigger.bind(this.portsOut[t]));
            }
            for (i = 0; i < this.portsIn.length; i++)
              (this.portsIn[i].onChange = null),
                (this.portsIn[i].onValueChanged = null);
          }
          for (i = 0; i < this.portsIn.length; i++)
            (this.portsIn[i].type != o.OP_PORT_TYPE_VALUE &&
              this.portsIn[i].type != o.OP_PORT_TYPE_ARRAY) ||
              this._instances[this.patch.instancing.index()].portsIn[i].set(
                this.portsIn[i].get(),
              ),
              this.portsIn[i].type;
          for (i = 0; i < this.portsOut.length; i++)
            this.portsOut[i].type == o.OP_PORT_TYPE_VALUE &&
              this.portsOut[i].set(
                this._instances[this.patch.instancing.index()].portsOut[
                  i
                ].get(),
              );
          return !0;
        }),
        (St.prototype.initInstancable = function () {}),
        (St.prototype.setValues = function (t) {
          for (const e in t) {
            const i = this.getPortByName(e);
            i
              ? i.set(t[e])
              : this._log.warn("op.setValues: port not found:", e);
          }
        }),
        (St.prototype.hasUiError = function (t) {
          return this._uiErrors.hasOwnProperty(t) && this._uiErrors[t];
        }),
        (St.prototype.setUiError = function (t, e, i) {
          if (!e && !this.hasUiErrors) return;
          if (!e && !this._uiErrors.hasOwnProperty(t)) return;
          if (this._uiErrors.hasOwnProperty(t) && this._uiErrors[t].txt == e)
            return;
          t.indexOf(" ") > -1 &&
            this._log.warn("setuierror id cant have spaces! ", t),
            (t = t.replaceAll(" ", "_")),
            !e && this._uiErrors.hasOwnProperty(t)
              ? delete this._uiErrors[t]
              : !e ||
                (this._uiErrors.hasOwnProperty(t) &&
                  this._uiErrors[t].txt == e) ||
                (null == i && (i = 2),
                (this._uiErrors[t] = { txt: e, level: i, id: t }));
          const s = [];
          for (const t in this._uiErrors) s.push(this._uiErrors[t]);
          this.uiAttr({ uierrors: s }),
            (this.hasUiErrors = Object.keys(this._uiErrors).length),
            this.emitEvent("uiErrorChange");
        }),
        (St.prototype.setError = function (t, e) {
          this._log.warn("old error message op.error() - use op.setUiError()");
        }),
        (St.prototype.setEnabled = function (t) {
          (this.enabled = t),
            this.emitEvent("onEnabledChange", t),
            this.enabled
              ? this.setUiError("_disabled", null)
              : this.setUiError("_disabled", "Op is disabled", 0);
        }),
        (St.prototype.setPortGroup = function (t, e) {
          for (let i = 0; i < e.length; i++)
            e[i] &&
              (e[i].setUiAttribs
                ? e[i].setUiAttribs({ group: t })
                : this._log.error("setPortGroup: invalid port!"));
        }),
        (St.prototype.setUiAxisPorts = function (t, e, i) {
          t && t.setUiAttribs({ axis: "X" }),
            e && e.setUiAttribs({ axis: "Y" }),
            i && i.setUiAttribs({ axis: "Z" });
        }),
        (St.prototype.removePort = function (t) {
          for (let e = 0; e < this.portsIn.length; e++)
            if (this.portsIn[e] == t)
              return (
                this.portsIn.splice(e, 1),
                this.emitEvent("onUiAttribsChange", {}),
                void this.emitEvent("onPortRemoved", {})
              );
        }),
        (St.prototype._checkLinksNeededToWork = function () {}),
        (St.prototype.toWorkNeedsParent = function (t) {
          this.patch.isEditorMode() && (this._linkTimeRules.needsParentOp = t);
        }),
        (St.prototype.toWorkShouldNotBeChild = function (t, e) {
          this.patch.isEditorMode() &&
            ((this._linkTimeRules.forbiddenParent = t),
            null != e && (this._linkTimeRules.forbiddenParentType = e));
        }),
        (St.prototype.toWorkPortsNeedToBeLinked = function () {
          if (this.patch.isEditorMode())
            for (let t = 0; t < arguments.length; t++)
              -1 ==
                this._linkTimeRules.needsLinkedToWork.indexOf(arguments[t]) &&
                this._linkTimeRules.needsLinkedToWork.push(arguments[t]);
        }),
        (St.prototype.toWorkPortsNeedToBeLinkedReset = function () {
          this.patch.isEditorMode() &&
            ((this._linkTimeRules.needsLinkedToWork.length = 0),
            this.checkLinkTimeWarnings && this.checkLinkTimeWarnings());
        }),
        (St.prototype.initVarPorts = function () {
          for (let t = 0; t < this.portsIn.length; t++)
            this.portsIn[t].getVariableName() &&
              this.portsIn[t].setVariable(this.portsIn[t].getVariableName());
        }),
        (St.prototype.refreshParams = function () {
          this.patch &&
            this.patch.isEditorMode() &&
            this.isCurrentUiOp() &&
            gui.opParams.show(this);
        }),
        (St.prototype.isCurrentUiOp = function () {
          if (this.patch.isEditorMode()) return gui.patchView.isCurrentOp(this);
        }),
        (St.prototype.renderVizLayer = null);
    }
    const Pt = function (t) {
      CABLES.EventTarget.apply(this),
        (this._log = new r("LoadingStatus")),
        (this._loadingAssets = {}),
        (this._cbFinished = []),
        (this._assetTasks = []),
        (this._percent = 0),
        (this._count = 0),
        (this._countFinished = 0),
        (this._order = 0),
        (this._startTime = 0),
        (this._patch = t),
        (this._wasFinishedPrinted = !1),
        (this._loadingAssetTaskCb = !1);
    };
    (Pt.prototype.setOnFinishedLoading = function (t) {
      this._cbFinished.push(t);
    }),
      (Pt.prototype.getNumAssets = function () {
        return this._countFinished;
      }),
      (Pt.prototype.getProgress = function () {
        return this._percent;
      }),
      (Pt.prototype.checkStatus = function () {
        (this._countFinished = 0), (this._count = 0);
        for (const t in this._loadingAssets)
          this._count++,
            this._loadingAssets[t].finished || this._countFinished++;
        if (
          ((this._percent = (this._count - this._countFinished) / this._count),
          0 === this._countFinished)
        ) {
          for (let t = 0; t < this._cbFinished.length; t++)
            if (this._cbFinished[t]) {
              const e = this._cbFinished[t];
              setTimeout(() => {
                e(this._patch), this.emitEvent("finishedAll");
              }, 100);
            }
          this._wasFinishedPrinted ||
            ((this._wasFinishedPrinted = !0), this.print()),
            this.emitEvent("finishedAll");
        }
      }),
      (Pt.prototype.getList = function () {
        let t = [];
        for (const e in this._loadingAssets) t.push(this._loadingAssets[e]);
        return t;
      }),
      (Pt.prototype.getListJobs = function () {
        let t = [];
        for (const e in this._loadingAssets)
          this._loadingAssets[e].finished ||
            t.push(this._loadingAssets[e].name);
        return t;
      }),
      (Pt.prototype.print = function () {
        if (this._patch.config.silent) return;
        const t = [];
        for (const e in this._loadingAssets)
          t.push([
            this._loadingAssets[e].order,
            this._loadingAssets[e].type,
            this._loadingAssets[e].name,
            (this._loadingAssets[e].timeEnd -
              this._loadingAssets[e].timeStart) /
              1e3 +
              "s",
          ]);
        this._log.groupCollapsed(
          "finished loading " +
            this._order +
            " assets in " +
            (Date.now() - this._startTime) / 1e3 +
            "s",
        ),
          this._log.table(t),
          this._log.groupEnd();
      }),
      (Pt.prototype.finished = function (t) {
        const e = this._loadingAssets[t];
        e &&
          (e.finished && this._log.warn("loading job was already finished", e),
          e.op && e.op.setUiAttribs({ loading: !1 }),
          (e.finished = !0),
          (e.timeEnd = Date.now())),
          this.checkStatus(),
          this.emitEvent("finishedTask");
      }),
      (Pt.prototype._startAssetTasks = function () {
        for (let t = 0; t < this._assetTasks.length; t++) this._assetTasks[t]();
        this._assetTasks.length = 0;
      }),
      (Pt.prototype.addAssetLoadingTask = function (t) {
        this._patch.isEditorMode() && !CABLES.UI.loaded
          ? (this._assetTasks.push(t),
            this._loadingAssetTaskCb ||
              window.gui.addEventListener(
                "uiloaded",
                this._startAssetTasks.bind(this),
              ),
            (this._loadingAssetTaskCb = !0))
          : t(),
          this.emitEvent("addAssetTask");
      }),
      (Pt.prototype.existByName = function (t) {
        for (let e in this._loadingAssets)
          if (
            this._loadingAssets[e].name == t &&
            !this._loadingAssets[e].finished
          )
            return !0;
      }),
      (Pt.prototype.start = function (t, e, i) {
        0 == this._startTime && (this._startTime = Date.now());
        const s = m();
        return (
          i && i.setUiAttribs({ loading: !0 }),
          (this._loadingAssets[s] = {
            id: s,
            op: i,
            type: t,
            name: e,
            finished: !1,
            timeStart: Date.now(),
            order: this._order,
          }),
          this._order++,
          this.emitEvent("startTask"),
          s
        );
      });
    const Ft = function () {
      (this._loops = []), (this._indizes = []), (this._index = 0);
    };
    (Ft.prototype.pushLoop = function (t) {
      this._loops.push(Math.abs(Math.floor(t))),
        this._indizes.push(this._index);
    }),
      (Ft.prototype.popLoop = function () {
        this._loops.pop(),
          (this._index = this._indizes.pop()),
          0 === this._loops.length && (this._index = 0);
      }),
      (Ft.prototype.numLoops = function () {
        return this._loops.length;
      }),
      (Ft.prototype.numCycles = function () {
        if (0 === this._loops.length) return 0;
        let t = this._loops[0];
        for (let e = 1; e < this._loops.length; e++) t *= this._loops[e];
        return t;
      }),
      (Ft.prototype.inLoop = function () {
        return this._loops.length > 0;
      }),
      (Ft.prototype.increment = function () {
        this._index++;
      }),
      (Ft.prototype.index = function () {
        return this._index;
      });
    class Ot {
      constructor(t) {
        (this.startFrame = t.getFrameNum()),
          (this.items = {}),
          (this.currentId = null),
          (this.currentStart = 0),
          (this._patch = t);
      }
      getItems() {
        return this.items;
      }
      clear() {
        this.paused || (this.items = {});
      }
      togglePause() {
        (this.paused = !this.paused),
          this.paused ||
            ((this.items = {}), (this.currentStart = performance.now()));
      }
      add(t, e) {
        this.paused ||
          (null !== this.currentId &&
            ((e && e.id == this.currentId) ||
              (this.items[this.currentId] &&
                ((this.items[this.currentId].timeUsed +=
                  performance.now() - this.currentStart),
                (!this.items[this.currentId].peakTime ||
                  nt() - this.items[this.currentId].peakTime > 5e3) &&
                  ((this.items[this.currentId].peak = 0),
                  (this.items[this.currentId].peakTime = nt())),
                (this.items[this.currentId].peak = Math.max(
                  this.items[this.currentId].peak,
                  performance.now() - this.currentStart,
                ))))),
          null !== e
            ? (this.items[e.id] ||
                (this.items[e.id] = { numTriggers: 0, timeUsed: 0 }),
              this.items[e.id].lastFrame != this._patch.getFrameNum() &&
                (this.items[e.id].numTriggers = 0),
              (this.items[e.id].lastFrame = this._patch.getFrameNum()),
              this.items[e.id].numTriggers++,
              (this.items[e.id].opid = e.op.id),
              (this.items[e.id].title = e.op.name + "." + e.name),
              (this.items[e.id].subPatch = e.op.uiAttribs.subPatch),
              (this.currentId = e.id),
              (this.currentStart = performance.now()))
            : (this.currentId = null));
      }
      print() {
        console.log("--------");
        for (const t in this.items)
          console.log(
            this.items[t].title +
              ": " +
              this.items[t].numTriggers +
              " / " +
              this.items[t].timeUsed,
          );
      }
    }
    const Nt = class extends H {
        constructor(t, e, i) {
          super(), (this._name = t), (this.type = i), this.setValue(e);
        }
        addListener(t) {
          this.on("change", t, "var");
        }
        getValue() {
          return this._v;
        }
        getName() {
          return this._name;
        }
        setValue(t) {
          (this._v = t), this.emitEvent("change", t, this);
        }
      },
      Ct = function (t) {
        H.apply(this),
          (this._log = new r("core_patch")),
          (this.ops = []),
          (this.settings = {}),
          (this.config = t || {
            glCanvasResizeToWindow: !1,
            prefixAssetPath: "",
            prefixJsPath: "",
            silent: !0,
            onError: null,
            onFinishedLoading: null,
            onFirstFrameRendered: null,
            onPatchLoaded: null,
            fpsLimit: 0,
          }),
          (this.timer = new ot()),
          (this.freeTimer = new ot()),
          (this.animFrameOps = []),
          (this.animFrameCallbacks = []),
          (this.gui = !1),
          (CABLES.logSilent = this.silent = !0),
          (this.profiler = null),
          (this.aborted = !1),
          (this._crashedOps = []),
          (this._renderOneFrame = !1),
          (this._animReq = null),
          (this._opIdCache = {}),
          (this._triggerStack = []),
          (this.storeObjNames = !1),
          (this.loading = new Pt(this)),
          (this._volumeListeners = []),
          (this._paused = !1),
          (this._frameNum = 0),
          (this.instancing = new Ft()),
          (this.onOneFrameRendered = null),
          (this.namedTriggers = {}),
          (this._origData = null),
          (this._frameNext = 0),
          (this._frameInterval = 0),
          (this._lastFrameTime = 0),
          (this._frameWasdelayed = !0),
          (this.frameStore = {}),
          (this.deSerialized = !1),
          (this._lastReqAnimTimeStamp = 0),
          (this.cgCanvas = null),
          (function () {
            return !this;
          })() || console.log("not in strict mode: core patch"),
          (this._isLocal = 0 === document.location.href.indexOf("file:")),
          this.config.hasOwnProperty("silent") &&
            (this.silent = CABLES.logSilent = this.config.silent),
          this.config.hasOwnProperty("doRequestAnimation") ||
            (this.config.doRequestAnimation = !0),
          this.config.prefixAssetPath || (this.config.prefixAssetPath = ""),
          this.config.prefixJsPath || (this.config.prefixJsPath = ""),
          this.config.masterVolume || (this.config.masterVolume = 1),
          (this._variables = {}),
          (this._variableListeners = []),
          (this.vars = {}),
          t && t.vars && (this.vars = t.vars),
          (this.cgl = new xt(this)),
          (this.cgp = null),
          (this._subpatchOpCache = {}),
          this.cgl.setCanvas(
            this.config.glCanvasId || this.config.glCanvas || "glcanvas",
          ),
          !0 === this.config.glCanvasResizeToWindow &&
            this.cgl.setAutoResize("window"),
          !0 === this.config.glCanvasResizeToParent &&
            this.cgl.setAutoResize("parent"),
          this.loading.setOnFinishedLoading(this.config.onFinishedLoading),
          this.cgl.aborted && (this.aborted = !0),
          this.cgl.silent && (this.silent = !0),
          this.freeTimer.play(),
          this.exec(),
          this.aborted ||
            (this.config.patch
              ? this.deSerialize(this.config.patch)
              : this.config.patchFile &&
                O(this.config.patchFile, (t, e) => {
                  const i = JSON.parse(e);
                  if (t)
                    return (
                      this._log.error("err", t),
                      this._log.error("data", i),
                      void this._log.error("data", i.msg)
                    );
                  this.deSerialize(i);
                }),
            this.timer.play()),
          console.log("made with https://cables.gl");
      };
    (Ct.prototype.isPlaying = function () {
      return !this._paused;
    }),
      (Ct.prototype.isRenderingOneFrame = function () {
        return this._renderOneFrame;
      }),
      (Ct.prototype.renderOneFrame = function () {
        (this._paused = !0),
          (this._renderOneFrame = !0),
          this.exec(),
          (this._renderOneFrame = !1);
      }),
      (Ct.prototype.getFPS = function () {
        return console.log("deprecated getfps"), 0;
      }),
      (Ct.prototype.isEditorMode = function () {
        return !0 === this.config.editorMode;
      }),
      (Ct.prototype.pause = function () {
        cancelAnimationFrame(this._animReq),
          this.emitEvent("pause"),
          (this._animReq = null),
          (this._paused = !0),
          this.freeTimer.pause();
      }),
      (Ct.prototype.resume = function () {
        this._paused &&
          (cancelAnimationFrame(this._animReq),
          (this._paused = !1),
          this.freeTimer.play(),
          this.emitEvent("resume"),
          this.exec());
      }),
      (Ct.prototype.setVolume = function (t) {
        this.config.masterVolume = t;
        for (let e = 0; e < this._volumeListeners.length; e++)
          this._volumeListeners[e].onMasterVolumeChanged(t);
      }),
      (Ct.prototype.getAssetPath = function (t = null) {
        if (this.isEditorMode())
          return "/assets/" + (t || gui.project()._id) + "/";
        if (
          document.location.href.indexOf("cables.gl") > 0 ||
          document.location.href.indexOf("cables.local") > 0
        ) {
          const e = document.location.pathname.split("/");
          return "/assets/" + (t || e[e.length - 1]) + "/";
        }
        return this.config.hasOwnProperty("assetPath")
          ? this.config.assetPath
          : "assets/";
      }),
      (Ct.prototype.getJsPath = function () {
        return this.config.hasOwnProperty("jsPath")
          ? this.config.jsPath
          : "js/";
      }),
      (Ct.prototype.getFilePath = function (t) {
        return t
          ? 0 === (t = String(t)).indexOf("https:") ||
            0 === t.indexOf("http:") ||
            0 === t.indexOf("data:") ||
            0 === t.indexOf("file:")
            ? t
            : ((t = t.replace("//", "/")),
              this.config.prefixAssetPath +
                t +
                (this.config.suffixAssetPath || ""))
          : t;
      }),
      (Ct.prototype.clear = function () {
        for (
          this.emitEvent("patchClearStart"),
            this.cgl.TextureEffectMesh = null,
            this.animFrameOps.length = 0,
            this.timer = new ot();
          this.ops.length > 0;

        )
          this.deleteOp(this.ops[0].id);
        this.emitEvent("patchClearEnd");
      }),
      (Ct.getOpClass = function (t) {
        const e = t.split(".");
        let i = null;
        try {
          return (
            2 == e.length
              ? (i = window[e[0]][e[1]])
              : 3 == e.length
                ? (i = window[e[0]][e[1]][e[2]])
                : 4 == e.length
                  ? (i = window[e[0]][e[1]][e[2]][e[3]])
                  : 5 == e.length
                    ? (i = window[e[0]][e[1]][e[2]][e[3]][e[4]])
                    : 6 == e.length
                      ? (i = window[e[0]][e[1]][e[2]][e[3]][e[4]][e[5]])
                      : 7 == e.length
                        ? (i = window[e[0]][e[1]][e[2]][e[3]][e[4]][e[5]][e[6]])
                        : 8 == e.length
                          ? (i =
                              window[e[0]][e[1]][e[2]][e[3]][e[4]][e[5]][e[6]][
                                e[7]
                              ])
                          : 9 == e.length
                            ? (i =
                                window[e[0]][e[1]][e[2]][e[3]][e[4]][e[5]][
                                  e[6]
                                ][e[7]][e[8]])
                            : 10 == e.length &&
                              (i =
                                window[e[0]][e[1]][e[2]][e[3]][e[4]][e[5]][
                                  e[6]
                                ][e[7]][e[8]][e[9]]),
            i
          );
        } catch (t) {
          return null;
        }
      }),
      (Ct.prototype.createOp = function (t, e, i = null) {
        let s = null,
          r = "";
        try {
          if (-1 === t.indexOf("Ops.")) {
            const n = t;
            if (CABLES.OPS[n])
              (r = CABLES.OPS[n].objName),
                (s = new CABLES.OPS[n].f(this, r, e, n)),
                (s.opId = n);
            else {
              if (!i) throw new Error("could not find op by id: " + n);
              (t = i), console.log("could not find op by id: " + n);
            }
          }
          if (!s) {
            r = t;
            const i = t.split(".");
            if (!Ct.getOpClass(r))
              throw (
                (this.emitEvent("criticalError", {
                  title: "unknown op",
                  text: "unknown op: " + r,
                }),
                this._log.error("unknown op: " + r),
                new Error("unknown op: " + r))
              );
            if (
              (2 == i.length
                ? (s = new window[i[0]][i[1]](this, r, e))
                : 3 == i.length
                  ? (s = new window[i[0]][i[1]][i[2]](this, r, e))
                  : 4 == i.length
                    ? (s = new window[i[0]][i[1]][i[2]][i[3]](this, r, e))
                    : 5 == i.length
                      ? (s = new window[i[0]][i[1]][i[2]][i[3]][i[4]](
                          this,
                          r,
                          e,
                        ))
                      : 6 == i.length
                        ? (s = new window[i[0]][i[1]][i[2]][i[3]][i[4]][i[5]](
                            this,
                            r,
                            e,
                          ))
                        : 7 == i.length
                          ? (s = new window[i[0]][i[1]][i[2]][i[3]][i[4]][i[5]][
                              i[6]
                            ](this, r, e))
                          : 8 == i.length
                            ? (s = new window[i[0]][i[1]][i[2]][i[3]][i[4]][
                                i[5]
                              ][i[6]][i[7]](this, r, e))
                            : 9 == i.length
                              ? (s = new window[i[0]][i[1]][i[2]][i[3]][i[4]][
                                  i[5]
                                ][i[6]][i[7]][i[8]](this, r, e))
                              : 10 == i.length
                                ? (s = new window[i[0]][i[1]][i[2]][i[3]][i[4]][
                                    i[5]
                                  ][i[6]][i[7]][i[8]][i[9]](this, r, e))
                                : console.log("parts.length", i.length),
              s)
            ) {
              s.opId = null;
              for (const t in CABLES.OPS)
                CABLES.OPS[t].objName == r && (s.opId = t);
            }
          }
        } catch (t) {
          if (
            (this._crashedOps.push(r),
            this.emitEvent("exceptionOp", t, r, s),
            !this.isEditorMode())
          )
            throw (
              (this._log.error(t),
              this._log.error("[instancing error] " + r, t),
              CABLES.api && CABLES.api.sendErrorReport(t),
              this.exitError("INSTANCE_ERR", "Instancing Error 1" + r, t),
              new Error("instancing error 1" + r))
            );
        }
        return (
          s
            ? ((s._objName = r), (s.patch = this))
            : this._log.log("no op was created!?", t, e),
          s
        );
      }),
      (Ct.prototype.addOp = function (t, e, i, s, r) {
        const n = this.createOp(t, i, r);
        if (n) {
          if (
            ((e = e || {}).hasOwnProperty("errors") && delete e.errors,
            e.hasOwnProperty("error") && delete e.error,
            (e.subPatch = e.subPatch || 0),
            n.uiAttr(e),
            n.onCreate && n.onCreate(),
            n.hasOwnProperty("onAnimFrame") && this.addOnAnimFrame(n),
            n.hasOwnProperty("onMasterVolumeChanged") &&
              this._volumeListeners.push(n),
            this._opIdCache[n.id])
          )
            return void console.log(
              "opid with id " + n.id + " already exists in patch!",
            );
          this.ops.push(n),
            (this._opIdCache[n.id] = n),
            this.emitEvent("onOpAdd", n, s),
            this._subPatchCacheAdd && this._subPatchCacheAdd(e.subPatch, n),
            n.init && n.init(),
            n.emitEvent("init", s);
        } else this._log.error("addop: no op.....");
        return n;
      }),
      (Ct.prototype.addOnAnimFrame = function (t) {
        for (let e = 0; e < this.animFrameOps.length; e++)
          if (this.animFrameOps[e] == t) return;
        this.animFrameOps.push(t);
      }),
      (Ct.prototype.removeOnAnimFrame = function (t) {
        for (let e = 0; e < this.animFrameOps.length; e++)
          if (this.animFrameOps[e] == t)
            return void this.animFrameOps.splice(e, 1);
      }),
      (Ct.prototype.addOnAnimFrameCallback = function (t) {
        this.animFrameCallbacks.push(t);
      }),
      (Ct.prototype.removeOnAnimCallback = function (t) {
        for (let e = 0; e < this.animFrameCallbacks.length; e++)
          if (this.animFrameCallbacks[e] == t)
            return void this.animFrameCallbacks.splice(e, 1);
      }),
      (Ct.prototype.deleteOp = function (t, e, i) {
        let s = !1;
        for (const r in this.ops)
          if (this.ops[r].id == t) {
            const n = this.ops[r];
            let o = null,
              a = null;
            if (n) {
              (s = !0),
                e &&
                  n.portsIn.length > 0 &&
                  n.portsIn[0].isLinked() &&
                  n.portsOut.length > 0 &&
                  n.portsOut[0].isLinked() &&
                  n.portsIn[0].getType() == n.portsOut[0].getType() &&
                  n.portsIn[0].links[0] &&
                  ((o = n.portsIn[0].links[0].getOtherPort(n.portsIn[0])),
                  (a = n.portsOut[0].links[0].getOtherPort(n.portsOut[0])));
              const h = this.ops[r];
              h.removeLinks(),
                this.onDelete &&
                  (console.log("deprecated this.onDelete", this.onDelete),
                  this.onDelete(h)),
                this.ops.splice(r, 1),
                h.emitEvent("delete", this.ops[r]),
                this.emitEvent("onOpDelete", h, i),
                this.clearSubPatchCache &&
                  this.clearSubPatchCache(h.uiAttribs.subPatch),
                h.onDelete && h.onDelete(i),
                h.cleanUp(),
                null !== o &&
                  null !== a &&
                  this.link(o.op, o.getName(), a.op, a.getName()),
                delete this._opIdCache[t];
              break;
            }
          }
        s || console.log("core patch deleteop: not found...", t);
      }),
      (Ct.prototype.getFrameNum = function () {
        return this._frameNum;
      }),
      (Ct.prototype.emitOnAnimFrameEvent = function (t, e) {
        t = t || this.timer.getTime();
        for (let i = 0; i < this.animFrameCallbacks.length; ++i)
          this.animFrameCallbacks[i] &&
            this.animFrameCallbacks[i](t, this._frameNum, e);
        for (let i = 0; i < this.animFrameOps.length; ++i)
          this.animFrameOps[i].onAnimFrame &&
            this.animFrameOps[i].onAnimFrame(t, this._frameNum, e);
      }),
      (Ct.prototype.renderFrame = function (t) {
        this.timer.update(), this.freeTimer.update();
        const e = this.timer.getTime(),
          i = performance.now();
        this.cgl.frameStartTime = this.timer.getTime();
        const s = t - this._lastReqAnimTimeStamp || t;
        this.emitOnAnimFrameEvent(null, s),
          (this.cgl.profileData.profileFrameDelta = s),
          (this._lastReqAnimTimeStamp = t),
          (this.cgl.profileData.profileOnAnimFrameOps = performance.now() - i),
          this.emitEvent("onRenderFrame", e),
          this._frameNum++,
          1 == this._frameNum &&
            this.config.onFirstFrameRendered &&
            this.config.onFirstFrameRendered();
      }),
      (Ct.prototype.exec = function (t) {
        if (!this._renderOneFrame && (this._paused || this.aborted)) return;
        this.emitEvent("reqAnimFrame"),
          cancelAnimationFrame(this._animReq),
          (this.config.fpsLimit = this.config.fpsLimit || 0),
          this.config.fpsLimit &&
            (this._frameInterval = 1e3 / this.config.fpsLimit);
        const e = CABLES.now(),
          i = e - this._frameNext;
        if (
          this.isEditorMode() &&
          !this._renderOneFrame &&
          e - this._lastFrameTime >= 500 &&
          0 !== this._lastFrameTime &&
          !this._frameWasdelayed
        )
          return (
            (this._lastFrameTime = 0),
            setTimeout(this.exec.bind(this), 500),
            this.emitEvent("renderDelayStart"),
            void (this._frameWasdelayed = !0)
          );
        (this._renderOneFrame ||
          0 === this.config.fpsLimit ||
          i > this._frameInterval ||
          this._frameWasdelayed) &&
          (this.renderFrame(t),
          this._frameInterval &&
            (this._frameNext = e - (i % this._frameInterval))),
          this._frameWasdelayed &&
            (this.emitEvent("renderDelayEnd"), (this._frameWasdelayed = !1)),
          this._renderOneFrame &&
            (this.onOneFrameRendered && this.onOneFrameRendered(),
            this.emitEvent("renderedOneFrame"),
            (this._renderOneFrame = !1)),
          this.config.doRequestAnimation &&
            (this._animReq =
              this.cgl.canvas.ownerDocument.defaultView.requestAnimationFrame(
                this.exec.bind(this),
              ));
      }),
      (Ct.prototype.link = function (t, e, i, s, r, n) {
        if (!t) return void console.log("link: op1 is null ");
        if (!i) return void console.log("link: op2 is null");
        const o = t.getPort(e, r),
          a = i.getPort(s, r);
        if (o)
          if (a) {
            if (!o.shouldLink(o, a) || !a.shouldLink(o, a)) return !1;
            if (yt.canLink(o, a)) {
              const t = new yt(this);
              return t.link(o, a), this.emitEvent("onLink", o, a, t, n), t;
            }
          } else
            console.log(
              "port not found! " + s + " of " + i.name + "(" + i.objName + ")",
            );
        else console.log("port not found! " + e + "(" + t.objName + ")");
      }),
      (Ct.prototype.serialize = function (t) {
        const e = {};
        (t = t || {}), (e.ops = []), (e.settings = this.settings);
        for (const t in this.ops) {
          const i = this.ops[t];
          e.ops.push(i.getSerialized());
        }
        return E(e), t.asObject ? e : JSON.stringify(e);
      }),
      (Ct.prototype.getOpById = function (t) {
        return this._opIdCache[t];
      }),
      (Ct.prototype.getOpsByName = function (t) {
        const e = [];
        for (const i in this.ops) this.ops[i].name == t && e.push(this.ops[i]);
        return e;
      }),
      (Ct.prototype.getOpsByObjName = function (t) {
        const e = [];
        for (const i in this.ops)
          this.ops[i].objName == t && e.push(this.ops[i]);
        return e;
      }),
      (Ct.prototype.loadLib = function (t) {
        F(
          "/ui/libs/" + t + ".js",
          (t, e) => {
            const i = document.createElement("script");
            (i.type = "text/javascript"),
              (i.text = e),
              document.getElementsByTagName("head")[0].appendChild(i);
          },
          "GET",
        );
      }),
      (Ct.prototype.reloadOp = function (t, e) {
        let i = 0;
        const s = [],
          r = [];
        for (const e in this.ops)
          this.ops[e].objName == t && r.push(this.ops[e]);
        for (let e = 0; e < r.length; e++) {
          i++;
          const n = r[e];
          n.deleted = !0;
          const o = this.addOp(t, n.uiAttribs);
          if (!o) continue;
          let a;
          n && n.storage && o.setStorage(JSON.parse(JSON.stringify(n.storage))),
            s.push(o);
          for (let t in n.portsIn)
            if (0 === n.portsIn[t].links.length) {
              const e = o.getPort(n.portsIn[t].name);
              e
                ? (e.set(n.portsIn[t].get()),
                  n.portsIn[t].getVariableName() &&
                    e.setVariable(n.portsIn[t].getVariableName()))
                : this._log.error(
                    "[reloadOp] could not set port " +
                      n.portsIn[t].name +
                      ", propably renamed port ?",
                  );
            } else
              for (; n.portsIn[t].links.length; ) {
                const e = n.portsIn[t].links[0].portIn.name,
                  i = n.portsIn[t].links[0].portOut.name,
                  s = n.portsIn[t].links[0].portOut.op;
                n.portsIn[t].links[0].remove(),
                  (a = this.link(o, e, s, i)),
                  a
                    ? a.setValue()
                    : console.log(
                        "[reloadOp] relink after op reload not successfull for port " +
                          i,
                      );
              }
          for (let t in n.portsOut)
            for (; n.portsOut[t].links.length; ) {
              const e = n.portsOut[t].links[0].portOut.name,
                i = n.portsOut[t].links[0].portIn.name,
                s = n.portsOut[t].links[0].portIn.op;
              n.portsOut[t].links[0].remove(),
                (a = this.link(o, e, s, i)),
                a
                  ? a.setValue()
                  : console.log(
                      "relink after op reload not successfull for port " + i,
                    );
            }
          this.deleteOp(n.id, !1, !0);
        }
        e(i, s);
      }),
      (Ct.prototype.getSubPatchOp = function (t, e) {
        for (const i in this.ops)
          if (
            this.ops[i].uiAttribs &&
            this.ops[i].uiAttribs.subPatch == t &&
            this.ops[i].objName == e
          )
            return this.ops[i];
        return !1;
      }),
      (Ct.prototype.getSubPatchOuterOp = function (t) {
        const e = this.ops;
        for (let i = 0; i < e.length; i++) {
          const s = e[i];
          if (s.isSubPatchOp() && s.patchId.get() == t) return s;
        }
      }),
      (Ct.prototype.getSubPatchOps = function (t, e = !1) {
        let i = [];
        for (const e in this.ops)
          this.ops[e].uiAttribs &&
            this.ops[e].uiAttribs.subPatch == t &&
            i.push(this.ops[e]);
        if (e)
          for (const t in i)
            if (i[t].storage && i[t].storage.subPatchVer) {
              const e = i[t].portsIn.find((t) => "patchId" === t.name);
              e && (i = i.concat(this.getSubPatchOps(e.value, !0)));
            }
        return i;
      }),
      (Ct.prototype._addLink = function (t, e, i, s) {
        this.link(this.getOpById(t), i, this.getOpById(e), s, !1, !0);
      }),
      (Ct.prototype.deSerialize = function (t, e) {
        if (((e = e || { genIds: !1, createRef: !1 }), this.aborted)) return;
        const i = [],
          s = this.loading.start("core", "deserialize");
        (this.namespace = t.namespace || ""),
          (this.name = t.name || ""),
          "string" == typeof t && (t = JSON.parse(t)),
          (this.settings = t.settings),
          this.emitEvent("patchLoadStart"),
          window.logStartup && logStartup("add " + t.ops.length + " ops... ");
        for (let s = 0; s < t.ops.length; s++) {
          const r = CABLES.now(),
            n = t.ops[s];
          let a = null;
          try {
            a = n.opId
              ? this.addOp(n.opId, n.uiAttribs, n.id, !0, n.objName)
              : this.addOp(n.objName, n.uiAttribs, n.id, !0);
          } catch (t) {
            throw (
              (console.log("[instancing error] op data:", n, t),
              new Error(
                "could not create op by id: <b>" +
                  (n.objName || n.opId) +
                  "</b> (" +
                  n.id +
                  ")",
              ))
            );
          }
          if (a) {
            e.genIds && (a.id = f()),
              (a.portsInData = n.portsIn),
              (a._origData = JSON.parse(JSON.stringify(n))),
              (a.storage = n.storage),
              n.hasOwnProperty("disabled") && a.setEnabled(!n.disabled);
            for (const t in n.portsIn) {
              const e = n.portsIn[t];
              if (e && e.hasOwnProperty("name")) {
                const t = a.getPort(e.name);
                !t ||
                  ("bool" != t.uiAttribs.display &&
                    "bool" != t.uiAttribs.type) ||
                  isNaN(e.value) ||
                  (e.value = !0 === e.value),
                  t &&
                    void 0 !== e.value &&
                    t.type != o.OP_PORT_TYPE_TEXTURE &&
                    t.set(e.value),
                  t && t.deSerializeSettings(e);
              }
            }
            for (const e in n.portsOut) {
              const i = n.portsOut[e];
              if (i && i.hasOwnProperty("name")) {
                const r = a.getPort(i.name);
                r &&
                  r.type != o.OP_PORT_TYPE_TEXTURE &&
                  i.hasOwnProperty("value") &&
                  r.set(t.ops[s].portsOut[e].value),
                  r && i.expose && r.setUiAttribs({ expose: !0 });
              }
            }
            i.push(a);
          }
          const h = Math.round(100 * (CABLES.now() - r)) / 100;
          !this.silent &&
            h > 5 &&
            console.log("long op init ", t.ops[s].objName, h);
        }
        window.logStartup && logStartup("add ops done");
        for (const t in this.ops)
          this.ops[t].onLoadedValueSet &&
            (this.ops[t].onLoadedValueSet(this.ops[t]._origData),
            (this.ops[t].onLoadedValueSet = null),
            (this.ops[t]._origData = null)),
            this.ops[t].emitEvent("loadedValueSet");
        if ((window.logStartup && logStartup("creating links"), t.ops))
          for (let e = 0; e < t.ops.length; e++) {
            if (t.ops[e].portsIn)
              for (let i = 0; i < t.ops[e].portsIn.length; i++)
                if (t.ops[e].portsIn[i] && t.ops[e].portsIn[i].links)
                  for (let s = 0; s < t.ops[e].portsIn[i].links.length; s++)
                    this._addLink(
                      t.ops[e].portsIn[i].links[s].objIn,
                      t.ops[e].portsIn[i].links[s].objOut,
                      t.ops[e].portsIn[i].links[s].portIn,
                      t.ops[e].portsIn[i].links[s].portOut,
                    );
            if (t.ops[e].portsOut)
              for (let i = 0; i < t.ops[e].portsOut.length; i++)
                if (t.ops[e].portsOut[i] && t.ops[e].portsOut[i].links)
                  for (let s = 0; s < t.ops[e].portsOut[i].links.length; s++)
                    if (t.ops[e].portsOut[i].links[s])
                      if (t.ops[e].portsOut[i].links[s].subOpRef) {
                        const r = this.getOpById(
                          t.ops[e].portsOut[i].links[s].objOut,
                        );
                        let n = null,
                          o = 0;
                        for (let n = 0; n < this.ops.length; n++)
                          if (
                            this.ops[n].storage &&
                            this.ops[n].storage.ref ==
                              t.ops[e].portsOut[i].links[s].subOpRef &&
                            r.uiAttribs.subPatch ==
                              this.ops[n].uiAttribs.subPatch
                          ) {
                            o = this.ops[n].patchId.get();
                            break;
                          }
                        for (let r = 0; r < this.ops.length; r++)
                          if (
                            this.ops[r].storage &&
                            this.ops[r].storage.ref ==
                              t.ops[e].portsOut[i].links[s].refOp &&
                            this.ops[r].uiAttribs.subPatch == o
                          ) {
                            n = this.ops[r];
                            break;
                          }
                        n
                          ? this._addLink(
                              n.id,
                              t.ops[e].portsOut[i].links[s].objOut,
                              t.ops[e].portsOut[i].links[s].portIn,
                              t.ops[e].portsOut[i].links[s].portOut,
                            )
                          : this._log.warn("could not find op for lost link");
                      } else
                        this._addLink(
                          t.ops[e].portsOut[i].links[s].objIn,
                          t.ops[e].portsOut[i].links[s].objOut,
                          t.ops[e].portsOut[i].links[s].portIn,
                          t.ops[e].portsOut[i].links[s].portOut,
                        );
          }
        window.logStartup && logStartup("calling ops onloaded");
        for (const t in this.ops)
          this.ops[t].onLoaded &&
            (this.ops[t].onLoaded(), (this.ops[t].onLoaded = null));
        window.logStartup && logStartup("initializing ops...");
        for (const t in this.ops)
          this.ops[t].init && (this.ops[t].init(), (this.ops[t].init = null));
        if (
          (window.logStartup && logStartup("initializing vars..."),
          this.config.variables)
        )
          for (const t in this.config.variables)
            this.setVarValue(t, this.config.variables[t]);
        window.logStartup && logStartup("initializing var ports");
        for (const t in this.ops)
          this.ops[t].initVarPorts(), delete this.ops[t].uiAttribs.pasted;
        setTimeout(() => {
          this.loading.finished(s);
        }, 100),
          window.logStartup && logStartup("calling onPatchLoaded/patchLoadEnd"),
          this.config.onPatchLoaded && this.config.onPatchLoaded(this),
          (this.deSerialized = !0),
          this.emitEvent("patchLoadEnd", i, t, e.genIds);
      }),
      (Ct.prototype.profile = function (t) {
        this.profiler = new Ot(this);
        for (const e in this.ops) this.ops[e].profile(t);
      }),
      (Ct.prototype.setVariable = function (t, e) {
        void 0 !== this._variables[t]
          ? this._variables[t].setValue(e)
          : console.log("variable " + t + " not found!");
      }),
      (Ct.prototype._sortVars = function () {
        if (!this.isEditorMode()) return;
        const t = {};
        Object.keys(this._variables)
          .sort((t, e) => t.localeCompare(e, "en", { sensitivity: "base" }))
          .forEach((e) => {
            t[e] = this._variables[e];
          }),
          (this._variables = t);
      }),
      (Ct.prototype.hasVar = function (t) {
        return void 0 !== this._variables[t];
      }),
      (Ct.prototype.setVarValue = function (t, e, i) {
        return (
          this.hasVar(t)
            ? this._variables[t].setValue(e)
            : ((this._variables[t] = new Nt(t, e, i)),
              this._sortVars(),
              this.emitEvent("variablesChanged")),
          this._variables[t]
        );
      }),
      (Ct.prototype.getVarValue = function (t, e) {
        if (this._variables.hasOwnProperty(t))
          return this._variables[t].getValue();
      }),
      (Ct.prototype.getVar = function (t) {
        if (this._variables.hasOwnProperty(t)) return this._variables[t];
      }),
      (Ct.prototype.deleteVar = function (t) {
        for (let e = 0; e < this.ops.length; e++)
          for (let i = 0; i < this.ops[e].portsIn.length; i++)
            this.ops[e].portsIn[i].getVariableName() == t &&
              this.ops[e].portsIn[i].setVariable(null);
        delete this._variables[t],
          this.emitEvent("variableDeleted", t),
          this.emitEvent("variablesChanged");
      }),
      (Ct.prototype.getVars = function (t) {
        if (void 0 === t) return this._variables;
        const e = [];
        t == CABLES.OP_PORT_TYPE_STRING && (t = "string"),
          t == CABLES.OP_PORT_TYPE_VALUE && (t = "number"),
          t == CABLES.OP_PORT_TYPE_ARRAY && (t = "array"),
          t == CABLES.OP_PORT_TYPE_OBJECT && (t = "object");
        for (const i in this._variables)
          (this._variables[i].type && this._variables[i].type != t) ||
            e.push(this._variables[i]);
        return e;
      }),
      (Ct.prototype.exitError = function (t, e, i) {
        if (((this.aborted = !0), this && this.config && this.config.onError))
          this.config.onError(t, e);
        else if (!this.isEditorMode()) {
          const s = document.createElement("div"),
            r = this.cgl.canvas.getBoundingClientRect();
          s.setAttribute(
            "style",
            "position:absolute;border:5px solid red;padding:15px;background-color:black;color:white;font-family:monospace;",
          ),
            (s.style.top = r.top + "px"),
            (s.style.left = r.left + "px");
          let n = "cables - An error occured:<br/>";
          (n += "[" + t + "] - " + e),
            i && (n += "<br/>Exception: " + i.message),
            (s.innerHTML = n);
          const o = this.cgl.canvas.parentElement;
          for (; o.hasChildNodes(); ) o.removeChild(o.lastChild);
          document.body.appendChild(s);
        }
      }),
      (Ct.prototype.preRenderOps = function () {
        this._log.log("prerendering...");
        for (let t = 0; t < this.ops.length; t++)
          this.ops[t].preRender &&
            (this.ops[t].preRender(),
            this._log.log("prerender " + this.ops[t].objName));
      }),
      (Ct.prototype.dispose = function () {
        this.pause(), this.clear(), this.cgl.dispose();
      }),
      (Ct.prototype.pushTriggerStack = function (t) {
        this._triggerStack.push(t);
      }),
      (Ct.prototype.popTriggerStack = function () {
        this._triggerStack.pop();
      }),
      (Ct.prototype.printTriggerStack = function () {
        if (0 == this._triggerStack.length) return;
        console.groupCollapsed(
          "trigger port stack " +
            this._triggerStack[this._triggerStack.length - 1].op.name +
            "." +
            this._triggerStack[this._triggerStack.length - 1].name,
        );
        const t = [];
        for (let e = 0; e < this._triggerStack.length; e++)
          t.push(
            e +
              ". " +
              this._triggerStack[e].op.name +
              " " +
              this._triggerStack[e].name,
          );
        console.table(t), console.groupEnd();
      }),
      (Ct.prototype.getDocument = function () {
        return this.cgl.canvas.ownerDocument;
      }),
      (Ct.replaceOpIds = function (t, e) {
        const i = {};
        for (const e in t.ops) i[t.ops[e].id] = t.ops[e];
        for (const s in t.ops)
          for (const r in t.ops[s].portsOut) {
            const n = t.ops[s].portsOut[r].links;
            if (n) {
              let t = n.length;
              for (; t--; )
                if (n[t] && (!i[n[t].objIn] || !i[n[t].objOut]))
                  if (e.doNotUnlinkLostLinks) {
                    if (e.fixLostLinks) {
                      const e = gui.corePatch().getOpById(n[t].objIn);
                      if (e) {
                        const i = gui.patchView.getSubPatchOuterOp(
                          e.uiAttribs.subPatch,
                        );
                        i &&
                          ((e.storage = e.storage || {}),
                          (e.storage.ref = e.storage.ref || CABLES.shortId()),
                          (n[t].refOp = e.storage.ref),
                          (n[t].subOpRef = i.storage.ref));
                      } else console.log("op not found!");
                    }
                  } else n.splice(t, 1);
            }
          }
        for (const i in t.ops) {
          const s = t.ops[i],
            r = s.id;
          let n = CABLES.shortId();
          e.prefixHash
            ? (n = T(e.prefixHash + r))
            : e.prefixId
              ? (n = e.prefixId + r)
              : e.refAsId &&
                (s.storage && s.storage.ref
                  ? ((n = s.storage.ref), delete s.storage.ref)
                  : ((s.storage = s.storage || {}),
                    (s.storage.ref = n = CABLES.shortId())));
          const o = (s.id = n);
          e.oldIdAsRef && ((s.storage = s.storage || {}), (s.storage.ref = r));
          for (const e in t.ops) {
            if (t.ops[e].portsIn)
              for (const i in t.ops[e].portsIn)
                if (t.ops[e].portsIn[i].links) {
                  let s = t.ops[e].portsIn[i].links.length;
                  for (; s--; )
                    null === t.ops[e].portsIn[i].links[s] &&
                      t.ops[e].portsIn[i].links.splice(s, 1);
                  for (s in t.ops[e].portsIn[i].links)
                    t.ops[e].portsIn[i].links[s].objIn === r &&
                      (t.ops[e].portsIn[i].links[s].objIn = o),
                      t.ops[e].portsIn[i].links[s].objOut === r &&
                        (t.ops[e].portsIn[i].links[s].objOut = o);
                }
            if (t.ops[e].portsOut)
              for (const i in t.ops[e].portsOut)
                if (t.ops[e].portsOut[i].links) {
                  let s = t.ops[e].portsOut[i].links.length;
                  for (; s--; )
                    null === t.ops[e].portsOut[i].links[s] &&
                      t.ops[e].portsOut[i].links.splice(s, 1);
                  for (s in t.ops[e].portsOut[i].links)
                    t.ops[e].portsOut[i].links[s].objIn === r &&
                      (t.ops[e].portsOut[i].links[s].objIn = o),
                      t.ops[e].portsOut[i].links[s].objOut === r &&
                        (t.ops[e].portsOut[i].links[s].objOut = o);
                }
          }
        }
        const s = [],
          r = [];
        for (let i = 0; i < t.ops.length; i++)
          if (t.ops[i].storage && t.ops[i].storage.subPatchVer)
            for (const n in t.ops[i].portsIn)
              if ("patchId" === t.ops[i].portsIn[n].name) {
                let o = f();
                e.prefixHash &&
                  (o = T(e.prefixHash + t.ops[i].portsIn[n].value));
                const a = t.ops[i].portsIn[n].value,
                  h = (t.ops[i].portsIn[n].value = o);
                s.push(h);
                for (let e = 0; e < t.ops.length; e++)
                  t.ops[e].uiAttribs &&
                    t.ops[e].uiAttribs.subPatch === a &&
                    ((t.ops[e].uiAttribs.subPatch = h), r.push(t.ops[e].id));
              }
        for (const i in t.ops) {
          let s = !1;
          for (let e = 0; e < r.length; e++)
            if (t.ops[i].id === r[e]) {
              s = !0;
              break;
            }
          !s &&
            t.ops[i].uiAttribs &&
            null != e.parentSubPatchId &&
            (t.ops[i].uiAttribs.subPatch = e.parentSubPatchId);
        }
        return t;
      });
    const wt = Ct,
      Mt = {
        addPatch: function (t, e) {
          let i = t,
            s = m();
          if (
            "string" == typeof t &&
            ((s = t), (i = document.getElementById(s)), !i)
          )
            return void console.error(
              s + " Polyshape Container Element not found!",
            );
          const r = document.createElement("canvas");
          return (
            (r.id = "glcanvas_" + s),
            (r.width = i.clientWidth),
            (r.height = i.clientHeight),
            window.addEventListener(
              "resize",
              function () {
                this.setAttribute("width", i.clientWidth),
                  (this.height = i.clientHeight);
              }.bind(r),
            ),
            i.appendChild(r),
            ((e = e || {}).glCanvasId = r.id),
            e.onError ||
              (e.onError = function (t) {
                console.error(t);
              }),
            (CABLES.patch = new wt(e)),
            r
          );
        },
      },
      Ut = {
        toneJsInitialized: !1,
        createAudioContext: function (t) {
          if (
            ((window.AudioContext =
              window.AudioContext || window.webkitAudioContext),
            window.AudioContext)
          )
            return (
              window.audioContext || (window.audioContext = new AudioContext()),
              window.Tone &&
                !Ut.toneJsInitialized &&
                (Tone.setContext(window.audioContext),
                (Ut.toneJsInitialized = !0)),
              window.audioContext
            );
          t.patch.config.onError(
            "NO_WEBAUDIO",
            "Web Audio is not supported in this browser.",
          );
        },
        getAudioContext: function () {
          return window.audioContext;
        },
        createAudioInPort: function (t, e, i, s) {
          if (!t || !e || !i) {
            const e =
              "ERROR: createAudioInPort needs three parameters, op, portName and audioNode";
            throw (t.log(e), new Error(e));
          }
          s || (s = 0),
            (t.webAudio = t.webAudio || {}),
            (t.webAudio.audioInPorts = t.webAudio.audioInPorts || []);
          const r = t.inObject(e);
          return (
            (r.webAudio = {}),
            (r.webAudio.previousAudioInNode = null),
            (r.webAudio.audioNode = i),
            (t.webAudio.audioInPorts[e] = r),
            (r.onChange = function () {
              const e = r.get();
              if (e)
                try {
                  e.connect
                    ? (e.connect(r.webAudio.audioNode, 0, s),
                      t.setUiError("audioCtx", null))
                    : t.setUiError(
                        "audioCtx",
                        "The passed input is not an audio context. Please make sure you connect an audio context to the input.",
                        2,
                      );
                } catch (i) {
                  throw (
                    (t.log("Error: Failed to connect web audio node!", i),
                    t.log("port.webAudio.audioNode", r.webAudio.audioNode),
                    t.log("audioInNode: ", e),
                    t.log("inputChannelIndex:", s),
                    t.log("audioInNode.connect: ", e.connect),
                    i)
                  );
                }
              else if (r.webAudio.previousAudioInNode)
                try {
                  r.webAudio.previousAudioInNode.disconnect &&
                    r.webAudio.previousAudioInNode.disconnect(
                      r.webAudio.audioNode,
                      0,
                      s,
                    ),
                    t.setUiError("audioCtx", null);
                } catch (e) {
                  try {
                    r.webAudio.previousAudioInNode.disconnect(
                      r.webAudio.audioNode,
                    );
                  } catch (i) {
                    throw (
                      (t.log(
                        "Disconnecting audio node with in/out port index, as well as without in/out-port-index did not work ",
                        e,
                      ),
                      e.printStackTrace && e.printStackTrace(),
                      e)
                    );
                  }
                }
              r.webAudio.previousAudioInNode = e;
            }),
            r
          );
        },
        replaceNodeInPort: function (t, e, i) {
          const s = t.webAudio.previousAudioInNode;
          if (s && s.disconnect) {
            try {
              s.disconnect(e);
            } catch (t) {
              throw (
                (t.printStackTrace && t.printStackTrace(),
                new Error(
                  "replaceNodeInPort: Could not disconnect old audio node. " +
                    t.name +
                    " " +
                    t.message,
                ))
              );
            }
            t.webAudio.audioNode = i;
            try {
              s.connect(i);
            } catch (t) {
              throw (
                (t.printStackTrace && t.printStackTrace(),
                new Error(
                  "replaceNodeInPort: Could not connect to new node. " +
                    t.name +
                    " " +
                    t.message,
                ))
              );
            }
          }
        },
        createAudioOutPort: function (t, e, i) {
          if (!t || !e || !i) {
            const e =
              "ERROR: createAudioOutPort needs three parameters, op, portName and audioNode";
            throw (t.log(e), new Error(e));
          }
          const s = t.outObject(e);
          return s.set(i), s;
        },
        createAudioParamInPort: function (t, e, i, s, r) {
          if (!t || !e || !i)
            return (
              t.log(
                "ERROR: createAudioParamInPort needs three parameters, op, portName and audioNode",
              ),
              t && t.name && t.log("opname: ", t.name),
              t.log("portName", e),
              void t.log("audioNode: ", i)
            );
          (t.webAudio = t.webAudio || {}),
            (t.webAudio.audioInPorts = t.webAudio.audioInPorts || []);
          const n = t.inDynamic(
            e,
            [o.OP_PORT_TYPE_VALUE, o.OP_PORT_TYPE_OBJECT],
            s,
            r,
          );
          return (
            (n.webAudio = {}),
            (n.webAudio.previousAudioInNode = null),
            (n.webAudio.audioNode = i),
            (t.webAudio.audioInPorts[e] = n),
            (n.onChange = function () {
              const e = n.get(),
                i = n.webAudio.audioNode,
                s = Ut.getAudioContext();
              if (null != e)
                if ("object" == typeof e && e.connect) {
                  try {
                    e.connect(i);
                  } catch (e) {
                    throw (
                      (t.log("Could not connect audio node: ", e),
                      e.printStackTrace && e.printStackTrace(),
                      e)
                    );
                  }
                  n.webAudio.previousAudioInNode = e;
                } else {
                  if (i._param && i._param.minValue && i._param.maxValue)
                    if (e >= i._param.minValue && e <= i._param.maxValue)
                      try {
                        i.setValueAtTime
                          ? i.setValueAtTime(e, s.currentTime)
                          : (i.value = e);
                      } catch (e) {
                        throw (
                          (t.log(
                            "Possible AudioParam problem with tone.js op: ",
                            e,
                          ),
                          e.printStackTrace && e.printStackTrace(),
                          e)
                        );
                      }
                    else
                      t.log(
                        "Warning: The value for an audio parameter is out of range!",
                      );
                  else if (i.minValue && i.maxValue)
                    if (e >= i.minValue && e <= i.maxValue)
                      try {
                        i.setValueAtTime
                          ? i.setValueAtTime(e, s.currentTime)
                          : (i.value = e);
                      } catch (e) {
                        throw (
                          (t.log(
                            "AudioParam has minValue / maxValue defined, and value is in range, but setting the value failed! ",
                            e,
                          ),
                          e.printStackTrace && e.printStackTrace(),
                          e)
                        );
                      }
                    else
                      t.log(
                        "Warning: The value for an audio parameter is out of range!",
                      );
                  else
                    try {
                      i.setValueAtTime
                        ? i.setValueAtTime(e, s.currentTime)
                        : (i.value = e);
                    } catch (e) {
                      throw (
                        (t.log(
                          "Possible AudioParam problem (without minValue / maxValue): ",
                          e,
                        ),
                        e.printStackTrace && e.printStackTrace(),
                        e)
                      );
                    }
                  if (
                    n.webAudio.previousAudioInNode &&
                    n.webAudio.previousAudioInNode.disconnect
                  ) {
                    try {
                      n.webAudio.previousAudioInNode.disconnect(i);
                    } catch (e) {
                      throw (
                        (t.log("Could not disconnect previous audio node: ", e),
                        e)
                      );
                    }
                    n.webAudio.previousAudioInNode = void 0;
                  }
                }
              else n.webAudio.previousAudioInNode;
            }),
            n
          );
        },
        loadAudioFile: function (t, e, i, s, r) {
          const n = Ut.createAudioContext();
          let o = null;
          (r || void 0 === r) &&
            ((o = t.loading.start("audio", e)),
            t.isEditorMode() &&
              gui
                .jobs()
                .start({
                  id: "loadaudio" + o,
                  title: " loading audio (" + e + ")",
                }));
          const a = new XMLHttpRequest();
          e &&
            (a.open("GET", e, !0),
            (a.responseType = "arraybuffer"),
            (a.onload = function () {
              t.loading.finished(o),
                t.isEditorMode() && gui.jobs().finish("loadaudio" + o),
                n.decodeAudioData(a.response, i, s);
            }),
            a.send());
        },
        isValidToneTime: function (t) {
          try {
            new Tone.Time(t);
          } catch (t) {
            return !1;
          }
          return !0;
        },
        isValidToneNote: function (t) {
          try {
            Tone.Frequency(t);
          } catch (t) {
            return !1;
          }
          return !0;
        },
      },
      Bt = function (t, e, i) {
        (this._patch = t),
          (this.connector = i),
          (this._log = new r("PatchConnectionReceiver"));
      };
    (Bt.prototype._addOp = function (t) {
      let e = null;
      t.vars.uiAttribs && (e = t.vars.uiAttribs);
      const i = this._patch.addOp(t.vars.objName, e, t.vars.opId, !0);
      i &&
        ((i.id = t.vars.opId),
        t.vars.portsIn &&
          t.vars.portsIn.forEach((t) => {
            const e = i.getPortByName(t.name);
            e && e.set(t.value);
          }));
    }),
      (Bt.prototype._receive = function (t) {
        let e = {};
        if (
          ((e = t.hasOwnProperty("event") ? t : JSON.parse(t.data)),
          e.event == h.PACO_OP_CREATE)
        ) {
          if (this._patch.getOpById(e.vars.opId)) return;
          this._log.verbose("op create:", e.vars.objName),
            window.gui
              ? gui.serverOps.loadOpLibs(e.vars.objName, () => {
                  this._addOp(e);
                })
              : this._addOp(e);
        } else if (e.event == h.PACO_DESERIALIZE)
          e.vars.json &&
            (window.gui
              ? gui.serverOps.loadProjectDependencies(e.vars.json, () => {
                  this._patch.deSerialize(e.vars.json, {
                    genIds: e.vars.genIds,
                  });
                })
              : this._patch.deSerialize(e.vars.json, {
                  genIds: e.vars.genIds,
                }));
        else if (e.event == h.PACO_LOAD)
          this._log.verbose("PACO load patch....."),
            this._patch.clear(),
            window.gui
              ? gui.serverOps.loadProjectDependencies(
                  JSON.parse(e.vars.patch),
                  () => {
                    this._patch.deSerialize(e.vars.patch);
                  },
                )
              : this._patch.deSerialize(e.vars.patch);
        else if (e.event == h.PACO_CLEAR)
          this._patch.clear(), this._log.log("clear");
        else if (e.event == h.PACO_OP_DELETE)
          this._log.verbose("op delete", e.vars.objName),
            this._patch.getOpById(e.vars.op),
            this._patch.deleteOp(e.vars.op, !0);
        else if (e.event == h.PACO_OP_ENABLE) {
          const t = this._patch.getOpById(e.vars.op);
          t && (t.enabled = !0);
        } else if (e.event == h.PACO_OP_DISABLE) {
          const t = this._patch.getOpById(e.vars.op);
          t && (t.enabled = !1);
        } else if (e.event == h.PACO_UIATTRIBS) {
          const t = this._patch.getOpById(e.vars.op);
          t?.setUiAttrib(e.vars.uiAttribs);
        } else if (e.event == h.PACO_UNLINK) {
          const t = this._patch.getOpById(e.vars.op1),
            i = this._patch.getOpById(e.vars.op2),
            s = t?.getPort(e.vars.port1),
            r = i?.getPort(e.vars.port2);
          s && r
            ? s.removeLinkTo(r)
            : this._log.warn("paco unlink could not find port...");
        } else if (e.event == h.PACO_LINK) {
          const t = this._patch.getOpById(e.vars.op1),
            i = this._patch.getOpById(e.vars.op2);
          t && i && this._patch.link(t, e.vars.port1, i, e.vars.port2);
        } else if (e.event == h.PACO_VALUECHANGE) {
          if ("+ create new one" === e.vars.v) return;
          const t = this._patch.getOpById(e.vars.op);
          if (t) {
            const i = t.getPort(e.vars.port);
            i && i.set(e.vars.v);
          }
        } else if (e.event == h.PACO_VARIABLES) {
          const t = this._patch.getOpById(e.vars.opId);
          t && t.varName && t.varName.set(e.vars.varName);
        } else if (e.event == h.PACO_TRIGGERS) {
          const t = this._patch.getOpById(e.vars.opId);
          t && t.varName && t.varName.set(e.vars.varName);
        } else if (e.event == h.PACO_PORT_SETVARIABLE) {
          const t = this._patch.getOpById(e.vars.opId);
          if (t) {
            const i = t.getPortByName(e.vars.portName);
            i && i.setVariable(e.vars.variableName);
          }
        } else if (e.event == h.PACO_PORT_SETANIMATED) {
          const t = this._patch.getOpById(e.vars.opId);
          t &&
            t.portsIn[e.vars.portIndex] &&
            e.vars.hasOwnProperty("targetState") &&
            this._patch.emitEvent(
              "pacoPortValueSetAnimated",
              t,
              e.vars.portIndex,
              e.vars.targetState,
              e.vars.defaultValue,
            );
        } else if (e.event == h.PACO_PORT_ANIM_UPDATED) {
          const t = this._patch.getOpById(e.vars.opId);
          if (t) {
            const i = t.getPortByName(e.vars.portName);
            if (i) {
              const t = i.getSerialized();
              (t.anim = e.vars.anim),
                (i.anim = null),
                i.deSerializeSettings(t),
                this._patch.emitEvent("pacoPortAnimUpdated", i);
            }
          }
        } else this._log.warn("unknown patchConnectionEvent!", t);
      });
    const Lt = function (t) {
      (this.connectors = []),
        (this.paused = !1),
        t.addEventListener("onOpDelete", (t) => {
          this.send(CABLES.PACO_OP_DELETE, { op: t.id, objName: t.objName });
        }),
        t.addEventListener("patchClearStart", () => {
          this.paused = !0;
        }),
        t.addEventListener("patchClearEnd", () => {
          this.paused = !1;
        }),
        t.addEventListener("patchLoadStart", () => {
          this.paused = !0;
        }),
        t.addEventListener("patchLoadEnd", (t, e, i) => {
          (this.paused = !1),
            this.send(CABLES.PACO_DESERIALIZE, { json: e, genIds: i });
        }),
        t.addEventListener("onOpAdd", (t) => {
          const e = [];
          t.portsIn.forEach((t) => {
            const i = { id: t.id, name: t.name, value: t.get() };
            e.push(i);
          });
          let i = {};
          t.uiAttribs && (i = { ...t.uiAttribs }),
            this.send(CABLES.PACO_OP_CREATE, {
              opId: t.id,
              objName: t.objName,
              uiAttribs: i,
              portsIn: e,
            });
        }),
        t.addEventListener("onUnLink", (t, e) => {
          this.send(CABLES.PACO_UNLINK, {
            op1: t.op.id,
            op2: e.op.id,
            port1: t.getName(),
            port2: e.getName(),
          });
        }),
        t.addEventListener("onUiAttribsChange", (t, e) => {
          e &&
            (delete e.extendTitle,
            delete e.history,
            delete e.translate,
            Object.keys(e).length > 0 &&
              this.send(CABLES.PACO_UIATTRIBS, { op: t.id, uiAttribs: e }));
        }),
        t.addEventListener("opVariableNameChanged", (t, e) => {
          const i = { opId: t.id, varName: e };
          this.send(CABLES.PACO_VARIABLES, i);
        }),
        t.addEventListener("opTriggerNameChanged", (t, e) => {
          const i = { opId: t.id, varName: e };
          this.send(CABLES.PACO_TRIGGERS, i);
        }),
        t.addEventListener("onLink", (t, e) => {
          this.send(CABLES.PACO_LINK, {
            op1: t.op.id,
            op2: e.op.id,
            port1: t.name,
            port2: e.name,
          });
        }),
        t.addEventListener("portSetVariable", (t, e, i) => {
          const s = { opId: t.id, portName: e.name, variableName: i };
          this.send(CABLES.PACO_PORT_SETVARIABLE, s);
        }),
        t.addEventListener("portAnimUpdated", (t, e, i) => {
          if (t && e) {
            const s = { opId: t.id, portName: e.name, anim: i.getSerialized() };
            this.send(CABLES.PACO_PORT_ANIM_UPDATED, s);
          }
        });
    };
    Lt.prototype.send = function (t, e) {
      if (
        !this.paused &&
        (t !== CABLES.PACO_VALUECHANGE || "+ create new one" !== e.v)
      )
        for (let i = 0; i < this.connectors.length; i++)
          this.connectors[i].send(t, e);
    };
    const kt = function () {
      window.BroadcastChannel &&
        (this.bc = new BroadcastChannel("test_channel"));
    };
    (kt.prototype.receive = function (t) {
      this.bc &&
        (this._log.log("init"), (this.bc.onmessage = t._receive.bind(t)));
    }),
      (kt.prototype.send = function (t, e) {
        if (!this.bc) return;
        const i = {};
        (i.event = t), (i.vars = e), this.bc.postMessage(JSON.stringify(i));
      });
    class Dt {
      constructor(t) {
        (this.name = t),
          (this.dur = 0),
          (this._startTime = 0),
          (this.childs = []);
      }
      start() {
        this._startTime = performance.now();
      }
      end() {
        this.dur = performance.now() - this._startTime;
      }
      push(t) {
        const e = new Dt(t);
        return this.childs.push(e), e.start(), e;
      }
      print(t) {
        t = t || 0;
        let e = "";
        for (let i = 0; i < t; i++) e += "  ";
        for (let e = 0; e < this.childs.length; e++)
          this.childs[e].print(t + 1);
      }
    }
    class Vt extends X {
      constructor(t, e, i, s, r, n, o, a, h, l) {
        super(t, e, i, s, r, n, o, a, h, l),
          (this._loc = -1),
          (this._cgl = t._cgl);
      }
      updateValueF() {}
      setValueF(t) {
        (this.needsUpdate = !0), (this._value = t);
      }
      updateValue2F() {}
      setValue2F(t) {
        (this.needsUpdate = !0), (this._value = t);
      }
      updateValue3F() {}
      setValue3F(t) {
        (this.needsUpdate = !0), (this._value = t);
      }
      updateValue4F() {}
      setValue4F(t) {
        (this.needsUpdate = !0), (this._value = t);
      }
      getSizeBytes() {
        return "f" == this._type || "i" == this._type
          ? 4
          : "2i" == this._type || "2f" == this._type
            ? 8
            : "3f" == this._type
              ? 12
              : "4f" == this._type
                ? 16
                : "m4" == this._type
                  ? 64
                  : void this._log.warn("unknown type getSizeBytes");
      }
    }
    class Gt {
      constructor(t, e) {
        if (!t) throw new Error("shader constructed without cgp " + e);
        (this._log = new r("cgp_shader")),
          (this._cgp = t),
          (this._name = e),
          (this._uniforms = []),
          e || this._log.stack("no shader name given"),
          (this._name = e || "unknown"),
          (this.id = b()),
          (this._isValid = !0),
          (this._compileReason = ""),
          (this.shaderModule = null),
          (this._needsRecompile = !0),
          (this._src = "");
      }
      get isValid() {
        return this._isValid;
      }
      get uniforms() {
        return this._uniforms;
      }
      getName() {
        return this._name;
      }
      setWhyCompile(t) {
        this._compileReason = t;
      }
      setSource(t) {
        (this._src = t),
          this.setWhyCompile("Source changed"),
          (this._needsRecompile = !0);
      }
      compile() {
        (this._isValid = !0),
          console.log("compiling shader...", this._compileReason),
          this._cgp.pushErrorScope(),
          (this.shaderModule = this._cgp.device.createShaderModule({
            code: this._src,
          })),
          this._cgp.popErrorScope(
            "cgp_shader " + this._name,
            this.error.bind(this),
          ),
          (this._needsRecompile = !1);
      }
      error(t) {
        this._isValid = !1;
      }
      bind() {
        for (let t = 0; t < this._uniforms.length; t++);
        this._needsRecompile && this.compile();
      }
      addUniformFrag(t, e, i, s, r, n) {
        const o = new Vt(this, t, e, i, s, r, n);
        return (o.shaderType = "frag"), o;
      }
      addUniformVert(t, e, i, s, r, n) {
        const o = new Vt(this, t, e, i, s, r, n);
        return (o.shaderType = "vert"), o;
      }
      addUniform(t, e, i, s, r, n) {
        const o = new Vt(this, t, e, i, s, r, n);
        return (o.shaderType = "both"), o;
      }
      _addUniform(t) {
        this._uniforms.push(t),
          this.setWhyCompile("add uniform " + name),
          (this._needsRecompile = !0);
      }
    }
    class Ht {
      constructor(t, e) {
        (this._shaderType = e),
          (this._shader = t),
          (this._cgp = t._cgp),
          (this._gpuBuffer = null),
          (this._values = null),
          (this._sizeBytes = 0),
          this.update();
      }
      update() {
        this._sizeBytes = 0;
        for (let t = 0; t < this._shader.uniforms.length; t++) {
          const e = this._shader.uniforms[t];
          this._shaderType == e.shaderType &&
            (this._sizeBytes += e.getSizeBytes());
        }
        (this._gpuBuffer = this._cgp.device.createBuffer({
          size: this._sizeBytes,
          usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,
        })),
          (this._values = new Float32Array(this._sizeBytes / 4)),
          this.updateUniformValues();
      }
      updateUniformValues() {
        let t = 0;
        for (let e = 0; e < this._shader.uniforms.length; e++) {
          const i = this._shader.uniforms[e];
          if (i.shaderType == this._shaderType)
            if (i.getSizeBytes() / 4 > 1)
              for (let e = 0; e < i.getValue().length; e++)
                (this._values[t] = i.getValue()[e]), t++;
            else (this._values[t] = i.getValue()), t++;
        }
        this._cgp.device.queue.writeBuffer(
          this._gpuBuffer,
          0,
          this._values.buffer,
          this._values.byteOffset,
          this._values.byteLength,
        );
      }
    }
    class zt {
      constructor(t, e) {
        if (!t) throw new Error("Pipeline constructed without cgp " + e);
        (this._cgp = t),
          (this._isValid = !0),
          (this._pipeCfg = null),
          (this._renderPipeline = null),
          (this._fsUniformBuffer = null),
          (this._vsUniformBuffer = null),
          (this._old = {}),
          (this.DEPTH_COMPARE_FUNCS_STRINGS = [
            "never",
            "less",
            "equal",
            "lessequal",
            "greater",
            "notequal",
            "greaterequal",
            "always",
          ]);
      }
      get isValid() {
        return this._isValid;
      }
      setPipeline(t, e) {
        if (!e || !t) return void console.log("pipeline unknown shader/mesh");
        let i =
          !this._renderPipeline ||
          !this._pipeCfg ||
          this._old.mesh != e ||
          this._old.shader != t ||
          e.needsPipelineUpdate ||
          t.needsPipelineUpdate;
        this._pipeCfg &&
          (this._pipeCfg.depthStencil.depthWriteEnabled !=
            this._cgp.stateDepthWrite() &&
            ((i = !0),
            (this._pipeCfg.depthStencil.depthWriteEnabled =
              this._cgp.stateDepthWrite())),
          !1 === this._cgp.stateDepthTest()
            ? "never" != this._pipeCfg.depthStencil.depthCompare &&
              ((this._pipeCfg.depthStencil.depthCompare = "never"), (i = !0))
            : this._pipeCfg.depthStencil.depthCompare !=
                this._cgp.stateDepthFunc() &&
              ((i = !0),
              (this._pipeCfg.depthStencil.depthCompare =
                this._cgp.stateDepthFunc())),
          !1 === this._cgp.stateCullFace()
            ? "none" != this._pipeCfg.primitive.cullMode &&
              ((i = !0), (this._pipeCfg.primitive.cullMode = "none"))
            : ((i = !0),
              (this._pipeCfg.primitive.cullMode =
                this._cgp.stateCullFaceFacing()))),
          i &&
            ((this._pipeCfg && this._old.shader == t) ||
              (this._pipeCfg = this.getPiplelineObject(t, e)),
            (this._old.shader = t),
            (this._old.mesh = e),
            (this._renderPipeline = this._cgp.device.createRenderPipeline(
              this._pipeCfg,
            )),
            this._bindUniforms(t)),
          this._renderPipeline &&
            this._isValid &&
            (mat4.copy(this._matModel, this._cgp.mMatrix),
            mat4.copy(this._matView, this._cgp.vMatrix),
            mat4.copy(this._matProj, this._cgp.pMatrix),
            this._cgp.device.queue.writeBuffer(
              this._vsUniformBuffer,
              0,
              this._vsUniformValues.buffer,
              this._vsUniformValues.byteOffset,
              this._vsUniformValues.byteLength,
            ),
            this._uniBufFrag.updateUniformValues(),
            this._cgp.passEncoder.setPipeline(this._renderPipeline),
            this._cgp.passEncoder.setBindGroup(0, this._bindGroup));
      }
      getPiplelineObject(t, e) {
        return {
          layout: "auto",
          vertex: {
            module: t.shaderModule,
            entryPoint: "myVSMain",
            buffers: [
              {
                arrayStride: 12,
                attributes: [
                  { shaderLocation: 0, offset: 0, format: "float32x3" },
                ],
              },
              {
                arrayStride: 12,
                attributes: [
                  { shaderLocation: 1, offset: 0, format: "float32x3" },
                ],
              },
              {
                arrayStride: 8,
                attributes: [
                  { shaderLocation: 2, offset: 0, format: "float32x2" },
                ],
              },
            ],
          },
          fragment: {
            module: t.shaderModule,
            entryPoint: "myFSMain",
            targets: [{ format: this._cgp.presentationFormat }],
          },
          primitive: { topology: "triangle-list", cullMode: "back" },
          depthStencil: {
            depthWriteEnabled: !0,
            depthCompare: "less",
            format: "depth24plus",
          },
        };
      }
      _bindUniforms(t) {
        this._cgp.pushErrorScope(),
          (this._uniBufFrag = new Ht(t, "frag")),
          (this._vsUniformBuffer = this._cgp.device.createBuffer({
            size: 192,
            usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,
          })),
          (this._vsUniformValues = new Float32Array(48)),
          (this._matModel = this._vsUniformValues.subarray(0, 16)),
          (this._matView = this._vsUniformValues.subarray(16, 32)),
          (this._matProj = this._vsUniformValues.subarray(32, 48)),
          (this._bindGroup = this._cgp.device.createBindGroup({
            layout: this._renderPipeline.getBindGroupLayout(0),
            entries: [
              { binding: 0, resource: { buffer: this._vsUniformBuffer } },
              { binding: 1, resource: { buffer: this._uniBufFrag._gpuBuffer } },
            ],
          })),
          this._cgp.device.queue.writeBuffer(
            this._vsUniformBuffer,
            0,
            this._vsUniformValues.buffer,
            this._vsUniformValues.byteOffset,
            this._vsUniformValues.byteLength,
          ),
          this._uniBufFrag.updateUniformValues(),
          this._cgp.popErrorScope("cgp_pipeline end", (t) => {
            this._isValid = !1;
          });
      }
    }
    class Wt {
      constructor(t, e) {
        if (!t) throw new Error("no cgp");
        (this._log = new r("cgp_texture")),
          (this._cgp = t),
          (this.id = CABLES.uuid()),
          (e = e || {}),
          (this.name = e.name || "unknown");
      }
      initTexture(t, e) {
        (this.width = t.width),
          (this.height = t.height),
          (this.textureType = "rgba8unorm");
        const i = {
            size: { width: t.width, height: t.height },
            format: this.textureType,
            usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST,
          },
          s = this._cgp.device.createTexture(i);
        return (
          this._cgp.device.queue.copyExternalImageToTexture(
            { source: t },
            { texture: s },
            i.size,
          ),
          s
        );
      }
      getInfo() {
        const t = this,
          e = {};
        return (
          (e.name = t.name),
          (e.size = t.width + " x " + t.height),
          (e.textureType = t.textureType),
          e
        );
      }
    }
    Wt.load = function (t, e, i, s) {
      fetch(e).then((s) => {
        s.blob().then((s) => {
          createImageBitmap(s).then((s) => {
            const r = new Wt(t, { name: e });
            r.initTexture(s),
              i ? i(r) : console.log("Texture.load no onFinished callback");
          });
        });
      });
    };
    const Yt = {
      Context: class extends bt {
        constructor(t) {
          super(),
            (this.patch = t),
            (this.gApi = Tt.GAPI_WEBGPU),
            (this._viewport = [0, 0, 256, 256]),
            (this._shaderStack = []),
            (this._simpleShader = null),
            (this._stackCullFaceFacing = []),
            (this._stackDepthTest = []),
            (this._stackCullFace = []),
            (this._stackDepthFunc = []),
            (this._stackDepthWrite = []),
            (this.DEPTH_FUNCS = [
              "never",
              "always",
              "less",
              "less-equal",
              "greater",
              "greater-equal",
              "equal",
              "not-equal",
            ]),
            (this.CULL_MODES = ["none", "back", "front", "none"]);
        }
        getViewPort() {
          return [0, 0, this.canvasWidth, this.canvasHeight];
        }
        renderStart(t, e, i) {
          this._simpleShader ||
            ((this._simpleShader = new Gt(this, "simple default shader")),
            this._simpleShader.setSource(
              "struct VSUniforms\n{\n    modelMatrix: mat4x4<f32>,\n    viewMatrix: mat4x4<f32>,\n    projMatrix: mat4x4<f32>,\n};\n\nstruct FSUniforms\n{\n    color:vec4<f32>\n};\n\n@group(0) @binding(0) var<uniform> vsUniforms: VSUniforms;\n@group(0) @binding(1) var<uniform> fsUniforms: FSUniforms;\n\nstruct MyVSInput\n{\n    @location(0) position: vec3<f32>,\n    @location(1) normal: vec3<f32>,\n    @location(2) texcoord: vec2<f32>,\n};\n\nstruct MyVSOutput\n{\n    @builtin(position) position: vec4<f32>,\n    @location(0) normal: vec3<f32>,\n    @location(1) texcoord: vec2<f32>,\n};\n\n@vertex\nfn myVSMain(v: MyVSInput) -> MyVSOutput\n{\n    var vsOut: MyVSOutput;\n    var pos =vec4<f32>(v.position, 1.0);\n\n    var mvMatrix=vsUniforms.viewMatrix * vsUniforms.modelMatrix;\n    vsOut.position = vsUniforms.projMatrix * mvMatrix * pos;\n\n    vsOut.normal = v.normal;\n    vsOut.texcoord = v.texcoord;\n    return vsOut;\n}\n\n@fragment\nfn myFSMain(v: MyVSOutput) -> @location(0) vec4<f32>\n{\n    return fsUniforms.color+vec4<f32>(.5,.5,.5,1.0);\n}\n\n",
            ),
            this._simpleShader.addUniformFrag("4f", "color", 1, 1, 0, 1)),
            this.fpsCounter.startFrame(),
            this._startMatrixStacks(e, i),
            this.setViewPort(0, 0, this.canvasWidth, this.canvasHeight),
            this.pushShader(this._simpleShader),
            this.pushDepthTest(!0),
            this.pushDepthWrite(!0),
            this.pushDepthFunc("less-equal"),
            this.emitEvent("beginFrame");
        }
        renderEnd() {
          this._endMatrixStacks(),
            this.popShader(),
            this.popDepthFunc(),
            this.popDepthWrite(),
            this.popDepthTest(),
            this.emitEvent("endFrame"),
            this.fpsCounter.endFrame();
        }
        setViewPort(t, e, i, s) {
          this._viewport = [t, e, i, s];
        }
        getViewPort() {
          return this._viewPort;
        }
        createMesh(t, e) {
          return new CGP.Mesh(this, t, e);
        }
        getShader() {
          return {};
        }
        pushShader(t) {
          this._shaderStack.push(t);
        }
        popShader() {
          if (0 === this._shaderStack.length)
            throw new Error("Invalid shader stack pop!");
          this._shaderStack.pop();
        }
        getShader() {
          return this._shaderStack[this._shaderStack.length - 1];
        }
        pushErrorScope() {
          this.device.pushErrorScope("validation");
        }
        popErrorScope(t, e) {
          this.device.popErrorScope().then((i) => {
            i &&
              (this.patch.emitEvent("criticalError", {
                title: 'WebGPU error "' + t + '"',
                codeText: i.message,
              }),
              console.warn("[cgp]", t, i.message, i, e),
              e && e(i));
          });
        }
        pushDepthTest(t) {
          this._stackDepthTest.push(t);
        }
        stateDepthTest() {
          return this._stackDepthTest[this._stackDepthTest.length - 1];
        }
        popDepthTest() {
          this._stackDepthTest.pop();
        }
        pushDepthWrite(t) {
          (t = t || !1), this._stackDepthWrite.push(t);
        }
        stateDepthWrite() {
          return this._stackDepthWrite[this._stackDepthWrite.length - 1];
        }
        popDepthWrite() {
          this._stackDepthWrite.pop();
        }
        pushDepthFunc(t) {
          this._stackDepthFunc.push(t);
        }
        stateDepthFunc() {
          return (
            this._stackDepthFunc.length > 0 &&
            this._stackDepthFunc[this._stackDepthFunc.length - 1]
          );
        }
        popDepthFunc() {
          this._stackDepthFunc.pop();
        }
        pushCullFace(t) {
          this._stackCullFace.push(t);
        }
        stateCullFace() {
          return this._stackCullFace[this._stackCullFace.length - 1];
        }
        popCullFace() {
          this._stackCullFace.pop();
        }
        pushCullFaceFacing(t) {
          this._stackCullFaceFacing.push(t);
        }
        stateCullFaceFacing() {
          return this._stackCullFaceFacing[
            this._stackCullFaceFacing.length - 1
          ];
        }
        popCullFaceFacing() {
          this._stackCullFaceFacing.pop();
        }
      },
      Shader: Gt,
      Mesh: class {
        constructor(t, e) {
          (this._log = new r("cgl_mesh")),
            (this._cgp = t),
            (this._geom = null),
            (this.numIndex = 0),
            (this._pipe = new zt(this._cgp)),
            (this._numNonIndexed = 0),
            (this._positionBuffer = null),
            (this._bufVerticesIndizes = null),
            (this._attributes = []),
            (this._needsPipelineUpdate = !1),
            e && this.setGeom(e);
        }
        _createBuffer(t, e, i) {
          const s = t.createBuffer({
            size: e.byteLength,
            usage: i,
            mappedAtCreation: !0,
          });
          return new e.constructor(s.getMappedRange()).set(e), s.unmap(), s;
        }
        setGeom(t, e) {
          (this._needsPipelineUpdate = !0),
            (this._geom = t),
            this._disposeAttributes(),
            (this._positionBuffer = this._createBuffer(
              this._cgp.device,
              new Float32Array(t.vertices),
              GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_DST,
            ));
          let i = t.verticesIndices;
          t.isIndexed() ||
            (i = Array.from(Array(t.vertices.length / 3).keys())),
            (this._numIndices = i.length),
            (this._indicesBuffer = this._createBuffer(
              this._cgp.device,
              new Uint32Array(i),
              GPUBufferUsage.INDEX | GPUBufferUsage.COPY_DST,
            )),
            t.texCoords &&
              t.texCoords.length &&
              this.setAttribute("texCoords", t.texCoords, 2),
            t.vertexNormals &&
              t.vertexNormals.length &&
              this.setAttribute("normals", t.vertexNormals, 3);
        }
        _disposeAttributes() {
          this._needsPipelineUpdate = !0;
          for (let t = 0; t < this._attributes.length; t++)
            this._attributes[t].buffer.destroy();
          this._attributes.length = 0;
        }
        dispose() {
          this._disposeAttributes();
        }
        setAttribute(t, e, i, s) {
          if (!e)
            throw (
              (this._log.error("mesh addAttribute - no array given! " + t),
              new Error())
            );
          for (let e = 0; e < this._attributes.length; e++) {
            const i = this._attributes[e];
            if (i.name == t) return i;
          }
          const r = {
            buffer: this._createBuffer(
              this._cgp.device,
              new Float32Array(e),
              GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_DST,
            ),
            name: t,
          };
          return this._attributes.push(r), r;
        }
        render() {
          if (!this._positionBuffer) return;
          const t = this._cgp.getShader();
          if (
            (t && t.bind(),
            this._cgp.getShader() &&
              this._cgp.getShader().isValid &&
              (this._pipe.setPipeline(this._cgp.getShader(), this),
              this._pipe.isValid))
          ) {
            this._cgp.passEncoder.setVertexBuffer(0, this._positionBuffer);
            for (let t = 0; t < this._attributes.length; t++)
              this._cgp.passEncoder.setVertexBuffer(
                t + 1,
                this._attributes[t].buffer,
              );
            this._cgp.passEncoder.setIndexBuffer(this._indicesBuffer, "uint32"),
              this._numNonIndexed
                ? this._cgp.passEncoder.draw(this._numIndices)
                : this._cgp.passEncoder.drawIndexed(this._numIndices);
          }
        }
      },
      Pipeline: zt,
      Texture: Wt,
    };
    (window.CGP = Yt),
      (window.CABLES = window.CABLES || {}),
      (CABLES.CG = Tt),
      (CABLES.CGP = Yt),
      (CABLES.EventTarget = H),
      (CABLES.EMBED = Mt),
      (CABLES.Link = yt),
      (CABLES.Port = j),
      (CABLES.Op = St),
      (CABLES.Profiler = Ot),
      (CABLES.Patch = wt),
      (CABLES.Instancing = Ft),
      (CABLES.Timer = ot),
      (CABLES.WEBAUDIO = Ut),
      (CABLES.Variable = function () {
        let t = null;
        const e = [];
        (this.onChanged = function (t) {
          e.push(t);
        }),
          (this.getValue = function () {
            return t;
          }),
          (this.setValue = function (e) {
            (t = e), this.emitChanged();
          }),
          (this.emitChanged = function () {
            for (let t = 0; t < e.length; t++) e[t]();
          });
      }),
      (CABLES.LoadingStatus = Pt),
      (CABLES.now = nt),
      (CABLES.internalNow = rt),
      (CABLES.BranchStack = class {
        constructor() {}
        start() {
          (this.root = new Dt("Root")),
            this.root.start(),
            (this.current = this.root);
        }
        push(t) {
          this.current || this.start();
          const e = this.current;
          return (
            (this.current = this.current.push(t)),
            (this.current.prev = e),
            this.current.start(),
            this.current
          );
        }
        pop() {
          this.current &&
            (this.current.end(), (this.current = this.current.prev));
        }
        finish() {
          this.current.end(), this.root.print(), (this.current = null);
        }
      }),
      (CABLES.Branch = Dt);
    const jt = (CABLES = Object.assign(CABLES, e, t, i, s, a, h, n, o));
    (function () {
      return !this;
    })() || console.warn("not in strict mode: index core");
  })(),
    (CABLES = __webpack_exports__.default);
})();
//# originalSourceMappingURL=cables.min.js.map

var CABLES = CABLES || {};
CABLES.build = {
  timestamp: 1701939081153,
  created: "2023-12-07T08:51:21.153Z",
  git: {
    branch: "master",
    commit: "4bcad0e1f8525d4d59faa49644f419195eaf3c3c",
    date: "2023-12-07T08:51:03.000Z",
    message: "live changes",
  },
};
/*!
@fileoverview gl-matrix - High performance matrix and vector operations
@author Brandon Jones
@author Colin MacKenzie IV
@version 3.1.0

Copyright (c) 2015-2019, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

*/
!(function (t, n) {
  "object" == typeof exports && "undefined" != typeof module
    ? n(exports)
    : "function" == typeof define && define.amd
      ? define(["exports"], n)
      : n(((t = t || self).glMatrix = {}));
})(this, function (t) {
  "use strict";
  var n = 1e-6,
    a = "undefined" != typeof Float32Array ? Float32Array : Array,
    r = Math.random;
  var u = Math.PI / 180;
  Math.hypot ||
    (Math.hypot = function () {
      for (var t = 0, n = arguments.length; n--; )
        t += arguments[n] * arguments[n];
      return Math.sqrt(t);
    });
  var e = Object.freeze({
    EPSILON: n,
    get ARRAY_TYPE() {
      return a;
    },
    RANDOM: r,
    setMatrixArrayType: function (t) {
      a = t;
    },
    toRadian: function (t) {
      return t * u;
    },
    equals: function (t, a) {
      return Math.abs(t - a) <= n * Math.max(1, Math.abs(t), Math.abs(a));
    },
  });
  function o(t, n, a) {
    var r = n[0],
      u = n[1],
      e = n[2],
      o = n[3],
      i = a[0],
      c = a[1],
      h = a[2],
      s = a[3];
    return (
      (t[0] = r * i + e * c),
      (t[1] = u * i + o * c),
      (t[2] = r * h + e * s),
      (t[3] = u * h + o * s),
      t
    );
  }
  function i(t, n, a) {
    return (
      (t[0] = n[0] - a[0]),
      (t[1] = n[1] - a[1]),
      (t[2] = n[2] - a[2]),
      (t[3] = n[3] - a[3]),
      t
    );
  }
  var c = o,
    h = i,
    s = Object.freeze({
      create: function () {
        var t = new a(4);
        return (
          a != Float32Array && ((t[1] = 0), (t[2] = 0)),
          (t[0] = 1),
          (t[3] = 1),
          t
        );
      },
      clone: function (t) {
        var n = new a(4);
        return (n[0] = t[0]), (n[1] = t[1]), (n[2] = t[2]), (n[3] = t[3]), n;
      },
      copy: function (t, n) {
        return (t[0] = n[0]), (t[1] = n[1]), (t[2] = n[2]), (t[3] = n[3]), t;
      },
      identity: function (t) {
        return (t[0] = 1), (t[1] = 0), (t[2] = 0), (t[3] = 1), t;
      },
      fromValues: function (t, n, r, u) {
        var e = new a(4);
        return (e[0] = t), (e[1] = n), (e[2] = r), (e[3] = u), e;
      },
      set: function (t, n, a, r, u) {
        return (t[0] = n), (t[1] = a), (t[2] = r), (t[3] = u), t;
      },
      transpose: function (t, n) {
        if (t === n) {
          var a = n[1];
          (t[1] = n[2]), (t[2] = a);
        } else (t[0] = n[0]), (t[1] = n[2]), (t[2] = n[1]), (t[3] = n[3]);
        return t;
      },
      invert: function (t, n) {
        var a = n[0],
          r = n[1],
          u = n[2],
          e = n[3],
          o = a * e - u * r;
        return o
          ? ((o = 1 / o),
            (t[0] = e * o),
            (t[1] = -r * o),
            (t[2] = -u * o),
            (t[3] = a * o),
            t)
          : null;
      },
      adjoint: function (t, n) {
        var a = n[0];
        return (t[0] = n[3]), (t[1] = -n[1]), (t[2] = -n[2]), (t[3] = a), t;
      },
      determinant: function (t) {
        return t[0] * t[3] - t[2] * t[1];
      },
      multiply: o,
      rotate: function (t, n, a) {
        var r = n[0],
          u = n[1],
          e = n[2],
          o = n[3],
          i = Math.sin(a),
          c = Math.cos(a);
        return (
          (t[0] = r * c + e * i),
          (t[1] = u * c + o * i),
          (t[2] = r * -i + e * c),
          (t[3] = u * -i + o * c),
          t
        );
      },
      scale: function (t, n, a) {
        var r = n[0],
          u = n[1],
          e = n[2],
          o = n[3],
          i = a[0],
          c = a[1];
        return (
          (t[0] = r * i), (t[1] = u * i), (t[2] = e * c), (t[3] = o * c), t
        );
      },
      fromRotation: function (t, n) {
        var a = Math.sin(n),
          r = Math.cos(n);
        return (t[0] = r), (t[1] = a), (t[2] = -a), (t[3] = r), t;
      },
      fromScaling: function (t, n) {
        return (t[0] = n[0]), (t[1] = 0), (t[2] = 0), (t[3] = n[1]), t;
      },
      str: function (t) {
        return "mat2(" + t[0] + ", " + t[1] + ", " + t[2] + ", " + t[3] + ")";
      },
      frob: function (t) {
        return Math.hypot(t[0], t[1], t[2], t[3]);
      },
      LDU: function (t, n, a, r) {
        return (
          (t[2] = r[2] / r[0]),
          (a[0] = r[0]),
          (a[1] = r[1]),
          (a[3] = r[3] - t[2] * a[1]),
          [t, n, a]
        );
      },
      add: function (t, n, a) {
        return (
          (t[0] = n[0] + a[0]),
          (t[1] = n[1] + a[1]),
          (t[2] = n[2] + a[2]),
          (t[3] = n[3] + a[3]),
          t
        );
      },
      subtract: i,
      exactEquals: function (t, n) {
        return t[0] === n[0] && t[1] === n[1] && t[2] === n[2] && t[3] === n[3];
      },
      equals: function (t, a) {
        var r = t[0],
          u = t[1],
          e = t[2],
          o = t[3],
          i = a[0],
          c = a[1],
          h = a[2],
          s = a[3];
        return (
          Math.abs(r - i) <= n * Math.max(1, Math.abs(r), Math.abs(i)) &&
          Math.abs(u - c) <= n * Math.max(1, Math.abs(u), Math.abs(c)) &&
          Math.abs(e - h) <= n * Math.max(1, Math.abs(e), Math.abs(h)) &&
          Math.abs(o - s) <= n * Math.max(1, Math.abs(o), Math.abs(s))
        );
      },
      multiplyScalar: function (t, n, a) {
        return (
          (t[0] = n[0] * a),
          (t[1] = n[1] * a),
          (t[2] = n[2] * a),
          (t[3] = n[3] * a),
          t
        );
      },
      multiplyScalarAndAdd: function (t, n, a, r) {
        return (
          (t[0] = n[0] + a[0] * r),
          (t[1] = n[1] + a[1] * r),
          (t[2] = n[2] + a[2] * r),
          (t[3] = n[3] + a[3] * r),
          t
        );
      },
      mul: c,
      sub: h,
    });
  function M(t, n, a) {
    var r = n[0],
      u = n[1],
      e = n[2],
      o = n[3],
      i = n[4],
      c = n[5],
      h = a[0],
      s = a[1],
      M = a[2],
      f = a[3],
      l = a[4],
      v = a[5];
    return (
      (t[0] = r * h + e * s),
      (t[1] = u * h + o * s),
      (t[2] = r * M + e * f),
      (t[3] = u * M + o * f),
      (t[4] = r * l + e * v + i),
      (t[5] = u * l + o * v + c),
      t
    );
  }
  function f(t, n, a) {
    return (
      (t[0] = n[0] - a[0]),
      (t[1] = n[1] - a[1]),
      (t[2] = n[2] - a[2]),
      (t[3] = n[3] - a[3]),
      (t[4] = n[4] - a[4]),
      (t[5] = n[5] - a[5]),
      t
    );
  }
  var l = M,
    v = f,
    b = Object.freeze({
      create: function () {
        var t = new a(6);
        return (
          a != Float32Array && ((t[1] = 0), (t[2] = 0), (t[4] = 0), (t[5] = 0)),
          (t[0] = 1),
          (t[3] = 1),
          t
        );
      },
      clone: function (t) {
        var n = new a(6);
        return (
          (n[0] = t[0]),
          (n[1] = t[1]),
          (n[2] = t[2]),
          (n[3] = t[3]),
          (n[4] = t[4]),
          (n[5] = t[5]),
          n
        );
      },
      copy: function (t, n) {
        return (
          (t[0] = n[0]),
          (t[1] = n[1]),
          (t[2] = n[2]),
          (t[3] = n[3]),
          (t[4] = n[4]),
          (t[5] = n[5]),
          t
        );
      },
      identity: function (t) {
        return (
          (t[0] = 1),
          (t[1] = 0),
          (t[2] = 0),
          (t[3] = 1),
          (t[4] = 0),
          (t[5] = 0),
          t
        );
      },
      fromValues: function (t, n, r, u, e, o) {
        var i = new a(6);
        return (
          (i[0] = t),
          (i[1] = n),
          (i[2] = r),
          (i[3] = u),
          (i[4] = e),
          (i[5] = o),
          i
        );
      },
      set: function (t, n, a, r, u, e, o) {
        return (
          (t[0] = n),
          (t[1] = a),
          (t[2] = r),
          (t[3] = u),
          (t[4] = e),
          (t[5] = o),
          t
        );
      },
      invert: function (t, n) {
        var a = n[0],
          r = n[1],
          u = n[2],
          e = n[3],
          o = n[4],
          i = n[5],
          c = a * e - r * u;
        return c
          ? ((c = 1 / c),
            (t[0] = e * c),
            (t[1] = -r * c),
            (t[2] = -u * c),
            (t[3] = a * c),
            (t[4] = (u * i - e * o) * c),
            (t[5] = (r * o - a * i) * c),
            t)
          : null;
      },
      determinant: function (t) {
        return t[0] * t[3] - t[1] * t[2];
      },
      multiply: M,
      rotate: function (t, n, a) {
        var r = n[0],
          u = n[1],
          e = n[2],
          o = n[3],
          i = n[4],
          c = n[5],
          h = Math.sin(a),
          s = Math.cos(a);
        return (
          (t[0] = r * s + e * h),
          (t[1] = u * s + o * h),
          (t[2] = r * -h + e * s),
          (t[3] = u * -h + o * s),
          (t[4] = i),
          (t[5] = c),
          t
        );
      },
      scale: function (t, n, a) {
        var r = n[0],
          u = n[1],
          e = n[2],
          o = n[3],
          i = n[4],
          c = n[5],
          h = a[0],
          s = a[1];
        return (
          (t[0] = r * h),
          (t[1] = u * h),
          (t[2] = e * s),
          (t[3] = o * s),
          (t[4] = i),
          (t[5] = c),
          t
        );
      },
      translate: function (t, n, a) {
        var r = n[0],
          u = n[1],
          e = n[2],
          o = n[3],
          i = n[4],
          c = n[5],
          h = a[0],
          s = a[1];
        return (
          (t[0] = r),
          (t[1] = u),
          (t[2] = e),
          (t[3] = o),
          (t[4] = r * h + e * s + i),
          (t[5] = u * h + o * s + c),
          t
        );
      },
      fromRotation: function (t, n) {
        var a = Math.sin(n),
          r = Math.cos(n);
        return (
          (t[0] = r),
          (t[1] = a),
          (t[2] = -a),
          (t[3] = r),
          (t[4] = 0),
          (t[5] = 0),
          t
        );
      },
      fromScaling: function (t, n) {
        return (
          (t[0] = n[0]),
          (t[1] = 0),
          (t[2] = 0),
          (t[3] = n[1]),
          (t[4] = 0),
          (t[5] = 0),
          t
        );
      },
      fromTranslation: function (t, n) {
        return (
          (t[0] = 1),
          (t[1] = 0),
          (t[2] = 0),
          (t[3] = 1),
          (t[4] = n[0]),
          (t[5] = n[1]),
          t
        );
      },
      str: function (t) {
        return (
          "mat2d(" +
          t[0] +
          ", " +
          t[1] +
          ", " +
          t[2] +
          ", " +
          t[3] +
          ", " +
          t[4] +
          ", " +
          t[5] +
          ")"
        );
      },
      frob: function (t) {
        return Math.hypot(t[0], t[1], t[2], t[3], t[4], t[5], 1);
      },
      add: function (t, n, a) {
        return (
          (t[0] = n[0] + a[0]),
          (t[1] = n[1] + a[1]),
          (t[2] = n[2] + a[2]),
          (t[3] = n[3] + a[3]),
          (t[4] = n[4] + a[4]),
          (t[5] = n[5] + a[5]),
          t
        );
      },
      subtract: f,
      multiplyScalar: function (t, n, a) {
        return (
          (t[0] = n[0] * a),
          (t[1] = n[1] * a),
          (t[2] = n[2] * a),
          (t[3] = n[3] * a),
          (t[4] = n[4] * a),
          (t[5] = n[5] * a),
          t
        );
      },
      multiplyScalarAndAdd: function (t, n, a, r) {
        return (
          (t[0] = n[0] + a[0] * r),
          (t[1] = n[1] + a[1] * r),
          (t[2] = n[2] + a[2] * r),
          (t[3] = n[3] + a[3] * r),
          (t[4] = n[4] + a[4] * r),
          (t[5] = n[5] + a[5] * r),
          t
        );
      },
      exactEquals: function (t, n) {
        return (
          t[0] === n[0] &&
          t[1] === n[1] &&
          t[2] === n[2] &&
          t[3] === n[3] &&
          t[4] === n[4] &&
          t[5] === n[5]
        );
      },
      equals: function (t, a) {
        var r = t[0],
          u = t[1],
          e = t[2],
          o = t[3],
          i = t[4],
          c = t[5],
          h = a[0],
          s = a[1],
          M = a[2],
          f = a[3],
          l = a[4],
          v = a[5];
        return (
          Math.abs(r - h) <= n * Math.max(1, Math.abs(r), Math.abs(h)) &&
          Math.abs(u - s) <= n * Math.max(1, Math.abs(u), Math.abs(s)) &&
          Math.abs(e - M) <= n * Math.max(1, Math.abs(e), Math.abs(M)) &&
          Math.abs(o - f) <= n * Math.max(1, Math.abs(o), Math.abs(f)) &&
          Math.abs(i - l) <= n * Math.max(1, Math.abs(i), Math.abs(l)) &&
          Math.abs(c - v) <= n * Math.max(1, Math.abs(c), Math.abs(v))
        );
      },
      mul: l,
      sub: v,
    });
  function m() {
    var t = new a(9);
    return (
      a != Float32Array &&
        ((t[1] = 0),
        (t[2] = 0),
        (t[3] = 0),
        (t[5] = 0),
        (t[6] = 0),
        (t[7] = 0)),
      (t[0] = 1),
      (t[4] = 1),
      (t[8] = 1),
      t
    );
  }
  function d(t, n, a) {
    var r = n[0],
      u = n[1],
      e = n[2],
      o = n[3],
      i = n[4],
      c = n[5],
      h = n[6],
      s = n[7],
      M = n[8],
      f = a[0],
      l = a[1],
      v = a[2],
      b = a[3],
      m = a[4],
      d = a[5],
      x = a[6],
      p = a[7],
      y = a[8];
    return (
      (t[0] = f * r + l * o + v * h),
      (t[1] = f * u + l * i + v * s),
      (t[2] = f * e + l * c + v * M),
      (t[3] = b * r + m * o + d * h),
      (t[4] = b * u + m * i + d * s),
      (t[5] = b * e + m * c + d * M),
      (t[6] = x * r + p * o + y * h),
      (t[7] = x * u + p * i + y * s),
      (t[8] = x * e + p * c + y * M),
      t
    );
  }
  function x(t, n, a) {
    return (
      (t[0] = n[0] - a[0]),
      (t[1] = n[1] - a[1]),
      (t[2] = n[2] - a[2]),
      (t[3] = n[3] - a[3]),
      (t[4] = n[4] - a[4]),
      (t[5] = n[5] - a[5]),
      (t[6] = n[6] - a[6]),
      (t[7] = n[7] - a[7]),
      (t[8] = n[8] - a[8]),
      t
    );
  }
  var p = d,
    y = x,
    q = Object.freeze({
      create: m,
      fromMat4: function (t, n) {
        return (
          (t[0] = n[0]),
          (t[1] = n[1]),
          (t[2] = n[2]),
          (t[3] = n[4]),
          (t[4] = n[5]),
          (t[5] = n[6]),
          (t[6] = n[8]),
          (t[7] = n[9]),
          (t[8] = n[10]),
          t
        );
      },
      clone: function (t) {
        var n = new a(9);
        return (
          (n[0] = t[0]),
          (n[1] = t[1]),
          (n[2] = t[2]),
          (n[3] = t[3]),
          (n[4] = t[4]),
          (n[5] = t[5]),
          (n[6] = t[6]),
          (n[7] = t[7]),
          (n[8] = t[8]),
          n
        );
      },
      copy: function (t, n) {
        return (
          (t[0] = n[0]),
          (t[1] = n[1]),
          (t[2] = n[2]),
          (t[3] = n[3]),
          (t[4] = n[4]),
          (t[5] = n[5]),
          (t[6] = n[6]),
          (t[7] = n[7]),
          (t[8] = n[8]),
          t
        );
      },
      fromValues: function (t, n, r, u, e, o, i, c, h) {
        var s = new a(9);
        return (
          (s[0] = t),
          (s[1] = n),
          (s[2] = r),
          (s[3] = u),
          (s[4] = e),
          (s[5] = o),
          (s[6] = i),
          (s[7] = c),
          (s[8] = h),
          s
        );
      },
      set: function (t, n, a, r, u, e, o, i, c, h) {
        return (
          (t[0] = n),
          (t[1] = a),
          (t[2] = r),
          (t[3] = u),
          (t[4] = e),
          (t[5] = o),
          (t[6] = i),
          (t[7] = c),
          (t[8] = h),
          t
        );
      },
      identity: function (t) {
        return (
          (t[0] = 1),
          (t[1] = 0),
          (t[2] = 0),
          (t[3] = 0),
          (t[4] = 1),
          (t[5] = 0),
          (t[6] = 0),
          (t[7] = 0),
          (t[8] = 1),
          t
        );
      },
      transpose: function (t, n) {
        if (t === n) {
          var a = n[1],
            r = n[2],
            u = n[5];
          (t[1] = n[3]),
            (t[2] = n[6]),
            (t[3] = a),
            (t[5] = n[7]),
            (t[6] = r),
            (t[7] = u);
        } else
          (t[0] = n[0]),
            (t[1] = n[3]),
            (t[2] = n[6]),
            (t[3] = n[1]),
            (t[4] = n[4]),
            (t[5] = n[7]),
            (t[6] = n[2]),
            (t[7] = n[5]),
            (t[8] = n[8]);
        return t;
      },
      invert: function (t, n) {
        var a = n[0],
          r = n[1],
          u = n[2],
          e = n[3],
          o = n[4],
          i = n[5],
          c = n[6],
          h = n[7],
          s = n[8],
          M = s * o - i * h,
          f = -s * e + i * c,
          l = h * e - o * c,
          v = a * M + r * f + u * l;
        return v
          ? ((v = 1 / v),
            (t[0] = M * v),
            (t[1] = (-s * r + u * h) * v),
            (t[2] = (i * r - u * o) * v),
            (t[3] = f * v),
            (t[4] = (s * a - u * c) * v),
            (t[5] = (-i * a + u * e) * v),
            (t[6] = l * v),
            (t[7] = (-h * a + r * c) * v),
            (t[8] = (o * a - r * e) * v),
            t)
          : null;
      },
      adjoint: function (t, n) {
        var a = n[0],
          r = n[1],
          u = n[2],
          e = n[3],
          o = n[4],
          i = n[5],
          c = n[6],
          h = n[7],
          s = n[8];
        return (
          (t[0] = o * s - i * h),
          (t[1] = u * h - r * s),
          (t[2] = r * i - u * o),
          (t[3] = i * c - e * s),
          (t[4] = a * s - u * c),
          (t[5] = u * e - a * i),
          (t[6] = e * h - o * c),
          (t[7] = r * c - a * h),
          (t[8] = a * o - r * e),
          t
        );
      },
      determinant: function (t) {
        var n = t[0],
          a = t[1],
          r = t[2],
          u = t[3],
          e = t[4],
          o = t[5],
          i = t[6],
          c = t[7],
          h = t[8];
        return n * (h * e - o * c) + a * (-h * u + o * i) + r * (c * u - e * i);
      },
      multiply: d,
      translate: function (t, n, a) {
        var r = n[0],
          u = n[1],
          e = n[2],
          o = n[3],
          i = n[4],
          c = n[5],
          h = n[6],
          s = n[7],
          M = n[8],
          f = a[0],
          l = a[1];
        return (
          (t[0] = r),
          (t[1] = u),
          (t[2] = e),
          (t[3] = o),
          (t[4] = i),
          (t[5] = c),
          (t[6] = f * r + l * o + h),
          (t[7] = f * u + l * i + s),
          (t[8] = f * e + l * c + M),
          t
        );
      },
      rotate: function (t, n, a) {
        var r = n[0],
          u = n[1],
          e = n[2],
          o = n[3],
          i = n[4],
          c = n[5],
          h = n[6],
          s = n[7],
          M = n[8],
          f = Math.sin(a),
          l = Math.cos(a);
        return (
          (t[0] = l * r + f * o),
          (t[1] = l * u + f * i),
          (t[2] = l * e + f * c),
          (t[3] = l * o - f * r),
          (t[4] = l * i - f * u),
          (t[5] = l * c - f * e),
          (t[6] = h),
          (t[7] = s),
          (t[8] = M),
          t
        );
      },
      scale: function (t, n, a) {
        var r = a[0],
          u = a[1];
        return (
          (t[0] = r * n[0]),
          (t[1] = r * n[1]),
          (t[2] = r * n[2]),
          (t[3] = u * n[3]),
          (t[4] = u * n[4]),
          (t[5] = u * n[5]),
          (t[6] = n[6]),
          (t[7] = n[7]),
          (t[8] = n[8]),
          t
        );
      },
      fromTranslation: function (t, n) {
        return (
          (t[0] = 1),
          (t[1] = 0),
          (t[2] = 0),
          (t[3] = 0),
          (t[4] = 1),
          (t[5] = 0),
          (t[6] = n[0]),
          (t[7] = n[1]),
          (t[8] = 1),
          t
        );
      },
      fromRotation: function (t, n) {
        var a = Math.sin(n),
          r = Math.cos(n);
        return (
          (t[0] = r),
          (t[1] = a),
          (t[2] = 0),
          (t[3] = -a),
          (t[4] = r),
          (t[5] = 0),
          (t[6] = 0),
          (t[7] = 0),
          (t[8] = 1),
          t
        );
      },
      fromScaling: function (t, n) {
        return (
          (t[0] = n[0]),
          (t[1] = 0),
          (t[2] = 0),
          (t[3] = 0),
          (t[4] = n[1]),
          (t[5] = 0),
          (t[6] = 0),
          (t[7] = 0),
          (t[8] = 1),
          t
        );
      },
      fromMat2d: function (t, n) {
        return (
          (t[0] = n[0]),
          (t[1] = n[1]),
          (t[2] = 0),
          (t[3] = n[2]),
          (t[4] = n[3]),
          (t[5] = 0),
          (t[6] = n[4]),
          (t[7] = n[5]),
          (t[8] = 1),
          t
        );
      },
      fromQuat: function (t, n) {
        var a = n[0],
          r = n[1],
          u = n[2],
          e = n[3],
          o = a + a,
          i = r + r,
          c = u + u,
          h = a * o,
          s = r * o,
          M = r * i,
          f = u * o,
          l = u * i,
          v = u * c,
          b = e * o,
          m = e * i,
          d = e * c;
        return (
          (t[0] = 1 - M - v),
          (t[3] = s - d),
          (t[6] = f + m),
          (t[1] = s + d),
          (t[4] = 1 - h - v),
          (t[7] = l - b),
          (t[2] = f - m),
          (t[5] = l + b),
          (t[8] = 1 - h - M),
          t
        );
      },
      normalFromMat4: function (t, n) {
        var a = n[0],
          r = n[1],
          u = n[2],
          e = n[3],
          o = n[4],
          i = n[5],
          c = n[6],
          h = n[7],
          s = n[8],
          M = n[9],
          f = n[10],
          l = n[11],
          v = n[12],
          b = n[13],
          m = n[14],
          d = n[15],
          x = a * i - r * o,
          p = a * c - u * o,
          y = a * h - e * o,
          q = r * c - u * i,
          g = r * h - e * i,
          A = u * h - e * c,
          w = s * b - M * v,
          R = s * m - f * v,
          z = s * d - l * v,
          P = M * m - f * b,
          j = M * d - l * b,
          I = f * d - l * m,
          S = x * I - p * j + y * P + q * z - g * R + A * w;
        return S
          ? ((S = 1 / S),
            (t[0] = (i * I - c * j + h * P) * S),
            (t[1] = (c * z - o * I - h * R) * S),
            (t[2] = (o * j - i * z + h * w) * S),
            (t[3] = (u * j - r * I - e * P) * S),
            (t[4] = (a * I - u * z + e * R) * S),
            (t[5] = (r * z - a * j - e * w) * S),
            (t[6] = (b * A - m * g + d * q) * S),
            (t[7] = (m * y - v * A - d * p) * S),
            (t[8] = (v * g - b * y + d * x) * S),
            t)
          : null;
      },
      projection: function (t, n, a) {
        return (
          (t[0] = 2 / n),
          (t[1] = 0),
          (t[2] = 0),
          (t[3] = 0),
          (t[4] = -2 / a),
          (t[5] = 0),
          (t[6] = -1),
          (t[7] = 1),
          (t[8] = 1),
          t
        );
      },
      str: function (t) {
        return (
          "mat3(" +
          t[0] +
          ", " +
          t[1] +
          ", " +
          t[2] +
          ", " +
          t[3] +
          ", " +
          t[4] +
          ", " +
          t[5] +
          ", " +
          t[6] +
          ", " +
          t[7] +
          ", " +
          t[8] +
          ")"
        );
      },
      frob: function (t) {
        return Math.hypot(t[0], t[1], t[2], t[3], t[4], t[5], t[6], t[7], t[8]);
      },
      add: function (t, n, a) {
        return (
          (t[0] = n[0] + a[0]),
          (t[1] = n[1] + a[1]),
          (t[2] = n[2] + a[2]),
          (t[3] = n[3] + a[3]),
          (t[4] = n[4] + a[4]),
          (t[5] = n[5] + a[5]),
          (t[6] = n[6] + a[6]),
          (t[7] = n[7] + a[7]),
          (t[8] = n[8] + a[8]),
          t
        );
      },
      subtract: x,
      multiplyScalar: function (t, n, a) {
        return (
          (t[0] = n[0] * a),
          (t[1] = n[1] * a),
          (t[2] = n[2] * a),
          (t[3] = n[3] * a),
          (t[4] = n[4] * a),
          (t[5] = n[5] * a),
          (t[6] = n[6] * a),
          (t[7] = n[7] * a),
          (t[8] = n[8] * a),
          t
        );
      },
      multiplyScalarAndAdd: function (t, n, a, r) {
        return (
          (t[0] = n[0] + a[0] * r),
          (t[1] = n[1] + a[1] * r),
          (t[2] = n[2] + a[2] * r),
          (t[3] = n[3] + a[3] * r),
          (t[4] = n[4] + a[4] * r),
          (t[5] = n[5] + a[5] * r),
          (t[6] = n[6] + a[6] * r),
          (t[7] = n[7] + a[7] * r),
          (t[8] = n[8] + a[8] * r),
          t
        );
      },
      exactEquals: function (t, n) {
        return (
          t[0] === n[0] &&
          t[1] === n[1] &&
          t[2] === n[2] &&
          t[3] === n[3] &&
          t[4] === n[4] &&
          t[5] === n[5] &&
          t[6] === n[6] &&
          t[7] === n[7] &&
          t[8] === n[8]
        );
      },
      equals: function (t, a) {
        var r = t[0],
          u = t[1],
          e = t[2],
          o = t[3],
          i = t[4],
          c = t[5],
          h = t[6],
          s = t[7],
          M = t[8],
          f = a[0],
          l = a[1],
          v = a[2],
          b = a[3],
          m = a[4],
          d = a[5],
          x = a[6],
          p = a[7],
          y = a[8];
        return (
          Math.abs(r - f) <= n * Math.max(1, Math.abs(r), Math.abs(f)) &&
          Math.abs(u - l) <= n * Math.max(1, Math.abs(u), Math.abs(l)) &&
          Math.abs(e - v) <= n * Math.max(1, Math.abs(e), Math.abs(v)) &&
          Math.abs(o - b) <= n * Math.max(1, Math.abs(o), Math.abs(b)) &&
          Math.abs(i - m) <= n * Math.max(1, Math.abs(i), Math.abs(m)) &&
          Math.abs(c - d) <= n * Math.max(1, Math.abs(c), Math.abs(d)) &&
          Math.abs(h - x) <= n * Math.max(1, Math.abs(h), Math.abs(x)) &&
          Math.abs(s - p) <= n * Math.max(1, Math.abs(s), Math.abs(p)) &&
          Math.abs(M - y) <= n * Math.max(1, Math.abs(M), Math.abs(y))
        );
      },
      mul: p,
      sub: y,
    });
  function g(t) {
    return (
      (t[0] = 1),
      (t[1] = 0),
      (t[2] = 0),
      (t[3] = 0),
      (t[4] = 0),
      (t[5] = 1),
      (t[6] = 0),
      (t[7] = 0),
      (t[8] = 0),
      (t[9] = 0),
      (t[10] = 1),
      (t[11] = 0),
      (t[12] = 0),
      (t[13] = 0),
      (t[14] = 0),
      (t[15] = 1),
      t
    );
  }
  function A(t, n, a) {
    var r = n[0],
      u = n[1],
      e = n[2],
      o = n[3],
      i = n[4],
      c = n[5],
      h = n[6],
      s = n[7],
      M = n[8],
      f = n[9],
      l = n[10],
      v = n[11],
      b = n[12],
      m = n[13],
      d = n[14],
      x = n[15],
      p = a[0],
      y = a[1],
      q = a[2],
      g = a[3];
    return (
      (t[0] = p * r + y * i + q * M + g * b),
      (t[1] = p * u + y * c + q * f + g * m),
      (t[2] = p * e + y * h + q * l + g * d),
      (t[3] = p * o + y * s + q * v + g * x),
      (p = a[4]),
      (y = a[5]),
      (q = a[6]),
      (g = a[7]),
      (t[4] = p * r + y * i + q * M + g * b),
      (t[5] = p * u + y * c + q * f + g * m),
      (t[6] = p * e + y * h + q * l + g * d),
      (t[7] = p * o + y * s + q * v + g * x),
      (p = a[8]),
      (y = a[9]),
      (q = a[10]),
      (g = a[11]),
      (t[8] = p * r + y * i + q * M + g * b),
      (t[9] = p * u + y * c + q * f + g * m),
      (t[10] = p * e + y * h + q * l + g * d),
      (t[11] = p * o + y * s + q * v + g * x),
      (p = a[12]),
      (y = a[13]),
      (q = a[14]),
      (g = a[15]),
      (t[12] = p * r + y * i + q * M + g * b),
      (t[13] = p * u + y * c + q * f + g * m),
      (t[14] = p * e + y * h + q * l + g * d),
      (t[15] = p * o + y * s + q * v + g * x),
      t
    );
  }
  function w(t, n, a) {
    var r = n[0],
      u = n[1],
      e = n[2],
      o = n[3],
      i = r + r,
      c = u + u,
      h = e + e,
      s = r * i,
      M = r * c,
      f = r * h,
      l = u * c,
      v = u * h,
      b = e * h,
      m = o * i,
      d = o * c,
      x = o * h;
    return (
      (t[0] = 1 - (l + b)),
      (t[1] = M + x),
      (t[2] = f - d),
      (t[3] = 0),
      (t[4] = M - x),
      (t[5] = 1 - (s + b)),
      (t[6] = v + m),
      (t[7] = 0),
      (t[8] = f + d),
      (t[9] = v - m),
      (t[10] = 1 - (s + l)),
      (t[11] = 0),
      (t[12] = a[0]),
      (t[13] = a[1]),
      (t[14] = a[2]),
      (t[15] = 1),
      t
    );
  }
  function R(t, n) {
    return (t[0] = n[12]), (t[1] = n[13]), (t[2] = n[14]), t;
  }
  function z(t, n) {
    var a = n[0],
      r = n[1],
      u = n[2],
      e = n[4],
      o = n[5],
      i = n[6],
      c = n[8],
      h = n[9],
      s = n[10];
    return (
      (t[0] = Math.hypot(a, r, u)),
      (t[1] = Math.hypot(e, o, i)),
      (t[2] = Math.hypot(c, h, s)),
      t
    );
  }
  function P(t, n) {
    var r = new a(3);
    z(r, n);
    var u = 1 / r[0],
      e = 1 / r[1],
      o = 1 / r[2],
      i = n[0] * u,
      c = n[1] * e,
      h = n[2] * o,
      s = n[4] * u,
      M = n[5] * e,
      f = n[6] * o,
      l = n[8] * u,
      v = n[9] * e,
      b = n[10] * o,
      m = i + M + b,
      d = 0;
    return (
      m > 0
        ? ((d = 2 * Math.sqrt(m + 1)),
          (t[3] = 0.25 * d),
          (t[0] = (f - v) / d),
          (t[1] = (l - h) / d),
          (t[2] = (c - s) / d))
        : i > M && i > b
          ? ((d = 2 * Math.sqrt(1 + i - M - b)),
            (t[3] = (f - v) / d),
            (t[0] = 0.25 * d),
            (t[1] = (c + s) / d),
            (t[2] = (l + h) / d))
          : M > b
            ? ((d = 2 * Math.sqrt(1 + M - i - b)),
              (t[3] = (l - h) / d),
              (t[0] = (c + s) / d),
              (t[1] = 0.25 * d),
              (t[2] = (f + v) / d))
            : ((d = 2 * Math.sqrt(1 + b - i - M)),
              (t[3] = (c - s) / d),
              (t[0] = (l + h) / d),
              (t[1] = (f + v) / d),
              (t[2] = 0.25 * d)),
      t
    );
  }
  function j(t, n, a) {
    return (
      (t[0] = n[0] - a[0]),
      (t[1] = n[1] - a[1]),
      (t[2] = n[2] - a[2]),
      (t[3] = n[3] - a[3]),
      (t[4] = n[4] - a[4]),
      (t[5] = n[5] - a[5]),
      (t[6] = n[6] - a[6]),
      (t[7] = n[7] - a[7]),
      (t[8] = n[8] - a[8]),
      (t[9] = n[9] - a[9]),
      (t[10] = n[10] - a[10]),
      (t[11] = n[11] - a[11]),
      (t[12] = n[12] - a[12]),
      (t[13] = n[13] - a[13]),
      (t[14] = n[14] - a[14]),
      (t[15] = n[15] - a[15]),
      t
    );
  }
  var I = A,
    S = j,
    E = Object.freeze({
      create: function () {
        var t = new a(16);
        return (
          a != Float32Array &&
            ((t[1] = 0),
            (t[2] = 0),
            (t[3] = 0),
            (t[4] = 0),
            (t[6] = 0),
            (t[7] = 0),
            (t[8] = 0),
            (t[9] = 0),
            (t[11] = 0),
            (t[12] = 0),
            (t[13] = 0),
            (t[14] = 0)),
          (t[0] = 1),
          (t[5] = 1),
          (t[10] = 1),
          (t[15] = 1),
          t
        );
      },
      clone: function (t) {
        var n = new a(16);
        return (
          (n[0] = t[0]),
          (n[1] = t[1]),
          (n[2] = t[2]),
          (n[3] = t[3]),
          (n[4] = t[4]),
          (n[5] = t[5]),
          (n[6] = t[6]),
          (n[7] = t[7]),
          (n[8] = t[8]),
          (n[9] = t[9]),
          (n[10] = t[10]),
          (n[11] = t[11]),
          (n[12] = t[12]),
          (n[13] = t[13]),
          (n[14] = t[14]),
          (n[15] = t[15]),
          n
        );
      },
      copy: function (t, n) {
        return (
          (t[0] = n[0]),
          (t[1] = n[1]),
          (t[2] = n[2]),
          (t[3] = n[3]),
          (t[4] = n[4]),
          (t[5] = n[5]),
          (t[6] = n[6]),
          (t[7] = n[7]),
          (t[8] = n[8]),
          (t[9] = n[9]),
          (t[10] = n[10]),
          (t[11] = n[11]),
          (t[12] = n[12]),
          (t[13] = n[13]),
          (t[14] = n[14]),
          (t[15] = n[15]),
          t
        );
      },
      fromValues: function (t, n, r, u, e, o, i, c, h, s, M, f, l, v, b, m) {
        var d = new a(16);
        return (
          (d[0] = t),
          (d[1] = n),
          (d[2] = r),
          (d[3] = u),
          (d[4] = e),
          (d[5] = o),
          (d[6] = i),
          (d[7] = c),
          (d[8] = h),
          (d[9] = s),
          (d[10] = M),
          (d[11] = f),
          (d[12] = l),
          (d[13] = v),
          (d[14] = b),
          (d[15] = m),
          d
        );
      },
      set: function (t, n, a, r, u, e, o, i, c, h, s, M, f, l, v, b, m) {
        return (
          (t[0] = n),
          (t[1] = a),
          (t[2] = r),
          (t[3] = u),
          (t[4] = e),
          (t[5] = o),
          (t[6] = i),
          (t[7] = c),
          (t[8] = h),
          (t[9] = s),
          (t[10] = M),
          (t[11] = f),
          (t[12] = l),
          (t[13] = v),
          (t[14] = b),
          (t[15] = m),
          t
        );
      },
      identity: g,
      transpose: function (t, n) {
        if (t === n) {
          var a = n[1],
            r = n[2],
            u = n[3],
            e = n[6],
            o = n[7],
            i = n[11];
          (t[1] = n[4]),
            (t[2] = n[8]),
            (t[3] = n[12]),
            (t[4] = a),
            (t[6] = n[9]),
            (t[7] = n[13]),
            (t[8] = r),
            (t[9] = e),
            (t[11] = n[14]),
            (t[12] = u),
            (t[13] = o),
            (t[14] = i);
        } else
          (t[0] = n[0]),
            (t[1] = n[4]),
            (t[2] = n[8]),
            (t[3] = n[12]),
            (t[4] = n[1]),
            (t[5] = n[5]),
            (t[6] = n[9]),
            (t[7] = n[13]),
            (t[8] = n[2]),
            (t[9] = n[6]),
            (t[10] = n[10]),
            (t[11] = n[14]),
            (t[12] = n[3]),
            (t[13] = n[7]),
            (t[14] = n[11]),
            (t[15] = n[15]);
        return t;
      },
      invert: function (t, n) {
        var a = n[0],
          r = n[1],
          u = n[2],
          e = n[3],
          o = n[4],
          i = n[5],
          c = n[6],
          h = n[7],
          s = n[8],
          M = n[9],
          f = n[10],
          l = n[11],
          v = n[12],
          b = n[13],
          m = n[14],
          d = n[15],
          x = a * i - r * o,
          p = a * c - u * o,
          y = a * h - e * o,
          q = r * c - u * i,
          g = r * h - e * i,
          A = u * h - e * c,
          w = s * b - M * v,
          R = s * m - f * v,
          z = s * d - l * v,
          P = M * m - f * b,
          j = M * d - l * b,
          I = f * d - l * m,
          S = x * I - p * j + y * P + q * z - g * R + A * w;
        return S
          ? ((S = 1 / S),
            (t[0] = (i * I - c * j + h * P) * S),
            (t[1] = (u * j - r * I - e * P) * S),
            (t[2] = (b * A - m * g + d * q) * S),
            (t[3] = (f * g - M * A - l * q) * S),
            (t[4] = (c * z - o * I - h * R) * S),
            (t[5] = (a * I - u * z + e * R) * S),
            (t[6] = (m * y - v * A - d * p) * S),
            (t[7] = (s * A - f * y + l * p) * S),
            (t[8] = (o * j - i * z + h * w) * S),
            (t[9] = (r * z - a * j - e * w) * S),
            (t[10] = (v * g - b * y + d * x) * S),
            (t[11] = (M * y - s * g - l * x) * S),
            (t[12] = (i * R - o * P - c * w) * S),
            (t[13] = (a * P - r * R + u * w) * S),
            (t[14] = (b * p - v * q - m * x) * S),
            (t[15] = (s * q - M * p + f * x) * S),
            t)
          : null;
      },
      adjoint: function (t, n) {
        var a = n[0],
          r = n[1],
          u = n[2],
          e = n[3],
          o = n[4],
          i = n[5],
          c = n[6],
          h = n[7],
          s = n[8],
          M = n[9],
          f = n[10],
          l = n[11],
          v = n[12],
          b = n[13],
          m = n[14],
          d = n[15];
        return (
          (t[0] =
            i * (f * d - l * m) - M * (c * d - h * m) + b * (c * l - h * f)),
          (t[1] = -(
            r * (f * d - l * m) -
            M * (u * d - e * m) +
            b * (u * l - e * f)
          )),
          (t[2] =
            r * (c * d - h * m) - i * (u * d - e * m) + b * (u * h - e * c)),
          (t[3] = -(
            r * (c * l - h * f) -
            i * (u * l - e * f) +
            M * (u * h - e * c)
          )),
          (t[4] = -(
            o * (f * d - l * m) -
            s * (c * d - h * m) +
            v * (c * l - h * f)
          )),
          (t[5] =
            a * (f * d - l * m) - s * (u * d - e * m) + v * (u * l - e * f)),
          (t[6] = -(
            a * (c * d - h * m) -
            o * (u * d - e * m) +
            v * (u * h - e * c)
          )),
          (t[7] =
            a * (c * l - h * f) - o * (u * l - e * f) + s * (u * h - e * c)),
          (t[8] =
            o * (M * d - l * b) - s * (i * d - h * b) + v * (i * l - h * M)),
          (t[9] = -(
            a * (M * d - l * b) -
            s * (r * d - e * b) +
            v * (r * l - e * M)
          )),
          (t[10] =
            a * (i * d - h * b) - o * (r * d - e * b) + v * (r * h - e * i)),
          (t[11] = -(
            a * (i * l - h * M) -
            o * (r * l - e * M) +
            s * (r * h - e * i)
          )),
          (t[12] = -(
            o * (M * m - f * b) -
            s * (i * m - c * b) +
            v * (i * f - c * M)
          )),
          (t[13] =
            a * (M * m - f * b) - s * (r * m - u * b) + v * (r * f - u * M)),
          (t[14] = -(
            a * (i * m - c * b) -
            o * (r * m - u * b) +
            v * (r * c - u * i)
          )),
          (t[15] =
            a * (i * f - c * M) - o * (r * f - u * M) + s * (r * c - u * i)),
          t
        );
      },
      determinant: function (t) {
        var n = t[0],
          a = t[1],
          r = t[2],
          u = t[3],
          e = t[4],
          o = t[5],
          i = t[6],
          c = t[7],
          h = t[8],
          s = t[9],
          M = t[10],
          f = t[11],
          l = t[12],
          v = t[13],
          b = t[14],
          m = t[15];
        return (
          (n * o - a * e) * (M * m - f * b) -
          (n * i - r * e) * (s * m - f * v) +
          (n * c - u * e) * (s * b - M * v) +
          (a * i - r * o) * (h * m - f * l) -
          (a * c - u * o) * (h * b - M * l) +
          (r * c - u * i) * (h * v - s * l)
        );
      },
      multiply: A,
      translate: function (t, n, a) {
        var r,
          u,
          e,
          o,
          i,
          c,
          h,
          s,
          M,
          f,
          l,
          v,
          b = a[0],
          m = a[1],
          d = a[2];
        return (
          n === t
            ? ((t[12] = n[0] * b + n[4] * m + n[8] * d + n[12]),
              (t[13] = n[1] * b + n[5] * m + n[9] * d + n[13]),
              (t[14] = n[2] * b + n[6] * m + n[10] * d + n[14]),
              (t[15] = n[3] * b + n[7] * m + n[11] * d + n[15]))
            : ((r = n[0]),
              (u = n[1]),
              (e = n[2]),
              (o = n[3]),
              (i = n[4]),
              (c = n[5]),
              (h = n[6]),
              (s = n[7]),
              (M = n[8]),
              (f = n[9]),
              (l = n[10]),
              (v = n[11]),
              (t[0] = r),
              (t[1] = u),
              (t[2] = e),
              (t[3] = o),
              (t[4] = i),
              (t[5] = c),
              (t[6] = h),
              (t[7] = s),
              (t[8] = M),
              (t[9] = f),
              (t[10] = l),
              (t[11] = v),
              (t[12] = r * b + i * m + M * d + n[12]),
              (t[13] = u * b + c * m + f * d + n[13]),
              (t[14] = e * b + h * m + l * d + n[14]),
              (t[15] = o * b + s * m + v * d + n[15])),
          t
        );
      },
      scale: function (t, n, a) {
        var r = a[0],
          u = a[1],
          e = a[2];
        return (
          (t[0] = n[0] * r),
          (t[1] = n[1] * r),
          (t[2] = n[2] * r),
          (t[3] = n[3] * r),
          (t[4] = n[4] * u),
          (t[5] = n[5] * u),
          (t[6] = n[6] * u),
          (t[7] = n[7] * u),
          (t[8] = n[8] * e),
          (t[9] = n[9] * e),
          (t[10] = n[10] * e),
          (t[11] = n[11] * e),
          (t[12] = n[12]),
          (t[13] = n[13]),
          (t[14] = n[14]),
          (t[15] = n[15]),
          t
        );
      },
      rotate: function (t, a, r, u) {
        var e,
          o,
          i,
          c,
          h,
          s,
          M,
          f,
          l,
          v,
          b,
          m,
          d,
          x,
          p,
          y,
          q,
          g,
          A,
          w,
          R,
          z,
          P,
          j,
          I = u[0],
          S = u[1],
          E = u[2],
          O = Math.hypot(I, S, E);
        return O < n
          ? null
          : ((I *= O = 1 / O),
            (S *= O),
            (E *= O),
            (e = Math.sin(r)),
            (i = 1 - (o = Math.cos(r))),
            (c = a[0]),
            (h = a[1]),
            (s = a[2]),
            (M = a[3]),
            (f = a[4]),
            (l = a[5]),
            (v = a[6]),
            (b = a[7]),
            (m = a[8]),
            (d = a[9]),
            (x = a[10]),
            (p = a[11]),
            (y = I * I * i + o),
            (q = S * I * i + E * e),
            (g = E * I * i - S * e),
            (A = I * S * i - E * e),
            (w = S * S * i + o),
            (R = E * S * i + I * e),
            (z = I * E * i + S * e),
            (P = S * E * i - I * e),
            (j = E * E * i + o),
            (t[0] = c * y + f * q + m * g),
            (t[1] = h * y + l * q + d * g),
            (t[2] = s * y + v * q + x * g),
            (t[3] = M * y + b * q + p * g),
            (t[4] = c * A + f * w + m * R),
            (t[5] = h * A + l * w + d * R),
            (t[6] = s * A + v * w + x * R),
            (t[7] = M * A + b * w + p * R),
            (t[8] = c * z + f * P + m * j),
            (t[9] = h * z + l * P + d * j),
            (t[10] = s * z + v * P + x * j),
            (t[11] = M * z + b * P + p * j),
            a !== t &&
              ((t[12] = a[12]),
              (t[13] = a[13]),
              (t[14] = a[14]),
              (t[15] = a[15])),
            t);
      },
      rotateX: function (t, n, a) {
        var r = Math.sin(a),
          u = Math.cos(a),
          e = n[4],
          o = n[5],
          i = n[6],
          c = n[7],
          h = n[8],
          s = n[9],
          M = n[10],
          f = n[11];
        return (
          n !== t &&
            ((t[0] = n[0]),
            (t[1] = n[1]),
            (t[2] = n[2]),
            (t[3] = n[3]),
            (t[12] = n[12]),
            (t[13] = n[13]),
            (t[14] = n[14]),
            (t[15] = n[15])),
          (t[4] = e * u + h * r),
          (t[5] = o * u + s * r),
          (t[6] = i * u + M * r),
          (t[7] = c * u + f * r),
          (t[8] = h * u - e * r),
          (t[9] = s * u - o * r),
          (t[10] = M * u - i * r),
          (t[11] = f * u - c * r),
          t
        );
      },
      rotateY: function (t, n, a) {
        var r = Math.sin(a),
          u = Math.cos(a),
          e = n[0],
          o = n[1],
          i = n[2],
          c = n[3],
          h = n[8],
          s = n[9],
          M = n[10],
          f = n[11];
        return (
          n !== t &&
            ((t[4] = n[4]),
            (t[5] = n[5]),
            (t[6] = n[6]),
            (t[7] = n[7]),
            (t[12] = n[12]),
            (t[13] = n[13]),
            (t[14] = n[14]),
            (t[15] = n[15])),
          (t[0] = e * u - h * r),
          (t[1] = o * u - s * r),
          (t[2] = i * u - M * r),
          (t[3] = c * u - f * r),
          (t[8] = e * r + h * u),
          (t[9] = o * r + s * u),
          (t[10] = i * r + M * u),
          (t[11] = c * r + f * u),
          t
        );
      },
      rotateZ: function (t, n, a) {
        var r = Math.sin(a),
          u = Math.cos(a),
          e = n[0],
          o = n[1],
          i = n[2],
          c = n[3],
          h = n[4],
          s = n[5],
          M = n[6],
          f = n[7];
        return (
          n !== t &&
            ((t[8] = n[8]),
            (t[9] = n[9]),
            (t[10] = n[10]),
            (t[11] = n[11]),
            (t[12] = n[12]),
            (t[13] = n[13]),
            (t[14] = n[14]),
            (t[15] = n[15])),
          (t[0] = e * u + h * r),
          (t[1] = o * u + s * r),
          (t[2] = i * u + M * r),
          (t[3] = c * u + f * r),
          (t[4] = h * u - e * r),
          (t[5] = s * u - o * r),
          (t[6] = M * u - i * r),
          (t[7] = f * u - c * r),
          t
        );
      },
      fromTranslation: function (t, n) {
        return (
          (t[0] = 1),
          (t[1] = 0),
          (t[2] = 0),
          (t[3] = 0),
          (t[4] = 0),
          (t[5] = 1),
          (t[6] = 0),
          (t[7] = 0),
          (t[8] = 0),
          (t[9] = 0),
          (t[10] = 1),
          (t[11] = 0),
          (t[12] = n[0]),
          (t[13] = n[1]),
          (t[14] = n[2]),
          (t[15] = 1),
          t
        );
      },
      fromScaling: function (t, n) {
        return (
          (t[0] = n[0]),
          (t[1] = 0),
          (t[2] = 0),
          (t[3] = 0),
          (t[4] = 0),
          (t[5] = n[1]),
          (t[6] = 0),
          (t[7] = 0),
          (t[8] = 0),
          (t[9] = 0),
          (t[10] = n[2]),
          (t[11] = 0),
          (t[12] = 0),
          (t[13] = 0),
          (t[14] = 0),
          (t[15] = 1),
          t
        );
      },
      fromRotation: function (t, a, r) {
        var u,
          e,
          o,
          i = r[0],
          c = r[1],
          h = r[2],
          s = Math.hypot(i, c, h);
        return s < n
          ? null
          : ((i *= s = 1 / s),
            (c *= s),
            (h *= s),
            (u = Math.sin(a)),
            (o = 1 - (e = Math.cos(a))),
            (t[0] = i * i * o + e),
            (t[1] = c * i * o + h * u),
            (t[2] = h * i * o - c * u),
            (t[3] = 0),
            (t[4] = i * c * o - h * u),
            (t[5] = c * c * o + e),
            (t[6] = h * c * o + i * u),
            (t[7] = 0),
            (t[8] = i * h * o + c * u),
            (t[9] = c * h * o - i * u),
            (t[10] = h * h * o + e),
            (t[11] = 0),
            (t[12] = 0),
            (t[13] = 0),
            (t[14] = 0),
            (t[15] = 1),
            t);
      },
      fromXRotation: function (t, n) {
        var a = Math.sin(n),
          r = Math.cos(n);
        return (
          (t[0] = 1),
          (t[1] = 0),
          (t[2] = 0),
          (t[3] = 0),
          (t[4] = 0),
          (t[5] = r),
          (t[6] = a),
          (t[7] = 0),
          (t[8] = 0),
          (t[9] = -a),
          (t[10] = r),
          (t[11] = 0),
          (t[12] = 0),
          (t[13] = 0),
          (t[14] = 0),
          (t[15] = 1),
          t
        );
      },
      fromYRotation: function (t, n) {
        var a = Math.sin(n),
          r = Math.cos(n);
        return (
          (t[0] = r),
          (t[1] = 0),
          (t[2] = -a),
          (t[3] = 0),
          (t[4] = 0),
          (t[5] = 1),
          (t[6] = 0),
          (t[7] = 0),
          (t[8] = a),
          (t[9] = 0),
          (t[10] = r),
          (t[11] = 0),
          (t[12] = 0),
          (t[13] = 0),
          (t[14] = 0),
          (t[15] = 1),
          t
        );
      },
      fromZRotation: function (t, n) {
        var a = Math.sin(n),
          r = Math.cos(n);
        return (
          (t[0] = r),
          (t[1] = a),
          (t[2] = 0),
          (t[3] = 0),
          (t[4] = -a),
          (t[5] = r),
          (t[6] = 0),
          (t[7] = 0),
          (t[8] = 0),
          (t[9] = 0),
          (t[10] = 1),
          (t[11] = 0),
          (t[12] = 0),
          (t[13] = 0),
          (t[14] = 0),
          (t[15] = 1),
          t
        );
      },
      fromRotationTranslation: w,
      fromQuat2: function (t, n) {
        var r = new a(3),
          u = -n[0],
          e = -n[1],
          o = -n[2],
          i = n[3],
          c = n[4],
          h = n[5],
          s = n[6],
          M = n[7],
          f = u * u + e * e + o * o + i * i;
        return (
          f > 0
            ? ((r[0] = (2 * (c * i + M * u + h * o - s * e)) / f),
              (r[1] = (2 * (h * i + M * e + s * u - c * o)) / f),
              (r[2] = (2 * (s * i + M * o + c * e - h * u)) / f))
            : ((r[0] = 2 * (c * i + M * u + h * o - s * e)),
              (r[1] = 2 * (h * i + M * e + s * u - c * o)),
              (r[2] = 2 * (s * i + M * o + c * e - h * u))),
          w(t, n, r),
          t
        );
      },
      getTranslation: R,
      getScaling: z,
      getRotation: P,
      fromRotationTranslationScale: function (t, n, a, r) {
        var u = n[0],
          e = n[1],
          o = n[2],
          i = n[3],
          c = u + u,
          h = e + e,
          s = o + o,
          M = u * c,
          f = u * h,
          l = u * s,
          v = e * h,
          b = e * s,
          m = o * s,
          d = i * c,
          x = i * h,
          p = i * s,
          y = r[0],
          q = r[1],
          g = r[2];
        return (
          (t[0] = (1 - (v + m)) * y),
          (t[1] = (f + p) * y),
          (t[2] = (l - x) * y),
          (t[3] = 0),
          (t[4] = (f - p) * q),
          (t[5] = (1 - (M + m)) * q),
          (t[6] = (b + d) * q),
          (t[7] = 0),
          (t[8] = (l + x) * g),
          (t[9] = (b - d) * g),
          (t[10] = (1 - (M + v)) * g),
          (t[11] = 0),
          (t[12] = a[0]),
          (t[13] = a[1]),
          (t[14] = a[2]),
          (t[15] = 1),
          t
        );
      },
      fromRotationTranslationScaleOrigin: function (t, n, a, r, u) {
        var e = n[0],
          o = n[1],
          i = n[2],
          c = n[3],
          h = e + e,
          s = o + o,
          M = i + i,
          f = e * h,
          l = e * s,
          v = e * M,
          b = o * s,
          m = o * M,
          d = i * M,
          x = c * h,
          p = c * s,
          y = c * M,
          q = r[0],
          g = r[1],
          A = r[2],
          w = u[0],
          R = u[1],
          z = u[2],
          P = (1 - (b + d)) * q,
          j = (l + y) * q,
          I = (v - p) * q,
          S = (l - y) * g,
          E = (1 - (f + d)) * g,
          O = (m + x) * g,
          T = (v + p) * A,
          D = (m - x) * A,
          F = (1 - (f + b)) * A;
        return (
          (t[0] = P),
          (t[1] = j),
          (t[2] = I),
          (t[3] = 0),
          (t[4] = S),
          (t[5] = E),
          (t[6] = O),
          (t[7] = 0),
          (t[8] = T),
          (t[9] = D),
          (t[10] = F),
          (t[11] = 0),
          (t[12] = a[0] + w - (P * w + S * R + T * z)),
          (t[13] = a[1] + R - (j * w + E * R + D * z)),
          (t[14] = a[2] + z - (I * w + O * R + F * z)),
          (t[15] = 1),
          t
        );
      },
      fromQuat: function (t, n) {
        var a = n[0],
          r = n[1],
          u = n[2],
          e = n[3],
          o = a + a,
          i = r + r,
          c = u + u,
          h = a * o,
          s = r * o,
          M = r * i,
          f = u * o,
          l = u * i,
          v = u * c,
          b = e * o,
          m = e * i,
          d = e * c;
        return (
          (t[0] = 1 - M - v),
          (t[1] = s + d),
          (t[2] = f - m),
          (t[3] = 0),
          (t[4] = s - d),
          (t[5] = 1 - h - v),
          (t[6] = l + b),
          (t[7] = 0),
          (t[8] = f + m),
          (t[9] = l - b),
          (t[10] = 1 - h - M),
          (t[11] = 0),
          (t[12] = 0),
          (t[13] = 0),
          (t[14] = 0),
          (t[15] = 1),
          t
        );
      },
      frustum: function (t, n, a, r, u, e, o) {
        var i = 1 / (a - n),
          c = 1 / (u - r),
          h = 1 / (e - o);
        return (
          (t[0] = 2 * e * i),
          (t[1] = 0),
          (t[2] = 0),
          (t[3] = 0),
          (t[4] = 0),
          (t[5] = 2 * e * c),
          (t[6] = 0),
          (t[7] = 0),
          (t[8] = (a + n) * i),
          (t[9] = (u + r) * c),
          (t[10] = (o + e) * h),
          (t[11] = -1),
          (t[12] = 0),
          (t[13] = 0),
          (t[14] = o * e * 2 * h),
          (t[15] = 0),
          t
        );
      },
      perspective: function (t, n, a, r, u) {
        var e,
          o = 1 / Math.tan(n / 2);
        return (
          (t[0] = o / a),
          (t[1] = 0),
          (t[2] = 0),
          (t[3] = 0),
          (t[4] = 0),
          (t[5] = o),
          (t[6] = 0),
          (t[7] = 0),
          (t[8] = 0),
          (t[9] = 0),
          (t[11] = -1),
          (t[12] = 0),
          (t[13] = 0),
          (t[15] = 0),
          null != u && u !== 1 / 0
            ? ((e = 1 / (r - u)),
              (t[10] = (u + r) * e),
              (t[14] = 2 * u * r * e))
            : ((t[10] = -1), (t[14] = -2 * r)),
          t
        );
      },
      perspectiveFromFieldOfView: function (t, n, a, r) {
        var u = Math.tan((n.upDegrees * Math.PI) / 180),
          e = Math.tan((n.downDegrees * Math.PI) / 180),
          o = Math.tan((n.leftDegrees * Math.PI) / 180),
          i = Math.tan((n.rightDegrees * Math.PI) / 180),
          c = 2 / (o + i),
          h = 2 / (u + e);
        return (
          (t[0] = c),
          (t[1] = 0),
          (t[2] = 0),
          (t[3] = 0),
          (t[4] = 0),
          (t[5] = h),
          (t[6] = 0),
          (t[7] = 0),
          (t[8] = -(o - i) * c * 0.5),
          (t[9] = (u - e) * h * 0.5),
          (t[10] = r / (a - r)),
          (t[11] = -1),
          (t[12] = 0),
          (t[13] = 0),
          (t[14] = (r * a) / (a - r)),
          (t[15] = 0),
          t
        );
      },
      ortho: function (t, n, a, r, u, e, o) {
        var i = 1 / (n - a),
          c = 1 / (r - u),
          h = 1 / (e - o);
        return (
          (t[0] = -2 * i),
          (t[1] = 0),
          (t[2] = 0),
          (t[3] = 0),
          (t[4] = 0),
          (t[5] = -2 * c),
          (t[6] = 0),
          (t[7] = 0),
          (t[8] = 0),
          (t[9] = 0),
          (t[10] = 2 * h),
          (t[11] = 0),
          (t[12] = (n + a) * i),
          (t[13] = (u + r) * c),
          (t[14] = (o + e) * h),
          (t[15] = 1),
          t
        );
      },
      lookAt: function (t, a, r, u) {
        var e,
          o,
          i,
          c,
          h,
          s,
          M,
          f,
          l,
          v,
          b = a[0],
          m = a[1],
          d = a[2],
          x = u[0],
          p = u[1],
          y = u[2],
          q = r[0],
          A = r[1],
          w = r[2];
        return Math.abs(b - q) < n && Math.abs(m - A) < n && Math.abs(d - w) < n
          ? g(t)
          : ((M = b - q),
            (f = m - A),
            (l = d - w),
            (e = p * (l *= v = 1 / Math.hypot(M, f, l)) - y * (f *= v)),
            (o = y * (M *= v) - x * l),
            (i = x * f - p * M),
            (v = Math.hypot(e, o, i))
              ? ((e *= v = 1 / v), (o *= v), (i *= v))
              : ((e = 0), (o = 0), (i = 0)),
            (c = f * i - l * o),
            (h = l * e - M * i),
            (s = M * o - f * e),
            (v = Math.hypot(c, h, s))
              ? ((c *= v = 1 / v), (h *= v), (s *= v))
              : ((c = 0), (h = 0), (s = 0)),
            (t[0] = e),
            (t[1] = c),
            (t[2] = M),
            (t[3] = 0),
            (t[4] = o),
            (t[5] = h),
            (t[6] = f),
            (t[7] = 0),
            (t[8] = i),
            (t[9] = s),
            (t[10] = l),
            (t[11] = 0),
            (t[12] = -(e * b + o * m + i * d)),
            (t[13] = -(c * b + h * m + s * d)),
            (t[14] = -(M * b + f * m + l * d)),
            (t[15] = 1),
            t);
      },
      targetTo: function (t, n, a, r) {
        var u = n[0],
          e = n[1],
          o = n[2],
          i = r[0],
          c = r[1],
          h = r[2],
          s = u - a[0],
          M = e - a[1],
          f = o - a[2],
          l = s * s + M * M + f * f;
        l > 0 && ((s *= l = 1 / Math.sqrt(l)), (M *= l), (f *= l));
        var v = c * f - h * M,
          b = h * s - i * f,
          m = i * M - c * s;
        return (
          (l = v * v + b * b + m * m) > 0 &&
            ((v *= l = 1 / Math.sqrt(l)), (b *= l), (m *= l)),
          (t[0] = v),
          (t[1] = b),
          (t[2] = m),
          (t[3] = 0),
          (t[4] = M * m - f * b),
          (t[5] = f * v - s * m),
          (t[6] = s * b - M * v),
          (t[7] = 0),
          (t[8] = s),
          (t[9] = M),
          (t[10] = f),
          (t[11] = 0),
          (t[12] = u),
          (t[13] = e),
          (t[14] = o),
          (t[15] = 1),
          t
        );
      },
      str: function (t) {
        return (
          "mat4(" +
          t[0] +
          ", " +
          t[1] +
          ", " +
          t[2] +
          ", " +
          t[3] +
          ", " +
          t[4] +
          ", " +
          t[5] +
          ", " +
          t[6] +
          ", " +
          t[7] +
          ", " +
          t[8] +
          ", " +
          t[9] +
          ", " +
          t[10] +
          ", " +
          t[11] +
          ", " +
          t[12] +
          ", " +
          t[13] +
          ", " +
          t[14] +
          ", " +
          t[15] +
          ")"
        );
      },
      frob: function (t) {
        return Math.hypot(
          t[0],
          t[1],
          t[3],
          t[4],
          t[5],
          t[6],
          t[7],
          t[8],
          t[9],
          t[10],
          t[11],
          t[12],
          t[13],
          t[14],
          t[15],
        );
      },
      add: function (t, n, a) {
        return (
          (t[0] = n[0] + a[0]),
          (t[1] = n[1] + a[1]),
          (t[2] = n[2] + a[2]),
          (t[3] = n[3] + a[3]),
          (t[4] = n[4] + a[4]),
          (t[5] = n[5] + a[5]),
          (t[6] = n[6] + a[6]),
          (t[7] = n[7] + a[7]),
          (t[8] = n[8] + a[8]),
          (t[9] = n[9] + a[9]),
          (t[10] = n[10] + a[10]),
          (t[11] = n[11] + a[11]),
          (t[12] = n[12] + a[12]),
          (t[13] = n[13] + a[13]),
          (t[14] = n[14] + a[14]),
          (t[15] = n[15] + a[15]),
          t
        );
      },
      subtract: j,
      multiplyScalar: function (t, n, a) {
        return (
          (t[0] = n[0] * a),
          (t[1] = n[1] * a),
          (t[2] = n[2] * a),
          (t[3] = n[3] * a),
          (t[4] = n[4] * a),
          (t[5] = n[5] * a),
          (t[6] = n[6] * a),
          (t[7] = n[7] * a),
          (t[8] = n[8] * a),
          (t[9] = n[9] * a),
          (t[10] = n[10] * a),
          (t[11] = n[11] * a),
          (t[12] = n[12] * a),
          (t[13] = n[13] * a),
          (t[14] = n[14] * a),
          (t[15] = n[15] * a),
          t
        );
      },
      multiplyScalarAndAdd: function (t, n, a, r) {
        return (
          (t[0] = n[0] + a[0] * r),
          (t[1] = n[1] + a[1] * r),
          (t[2] = n[2] + a[2] * r),
          (t[3] = n[3] + a[3] * r),
          (t[4] = n[4] + a[4] * r),
          (t[5] = n[5] + a[5] * r),
          (t[6] = n[6] + a[6] * r),
          (t[7] = n[7] + a[7] * r),
          (t[8] = n[8] + a[8] * r),
          (t[9] = n[9] + a[9] * r),
          (t[10] = n[10] + a[10] * r),
          (t[11] = n[11] + a[11] * r),
          (t[12] = n[12] + a[12] * r),
          (t[13] = n[13] + a[13] * r),
          (t[14] = n[14] + a[14] * r),
          (t[15] = n[15] + a[15] * r),
          t
        );
      },
      exactEquals: function (t, n) {
        return (
          t[0] === n[0] &&
          t[1] === n[1] &&
          t[2] === n[2] &&
          t[3] === n[3] &&
          t[4] === n[4] &&
          t[5] === n[5] &&
          t[6] === n[6] &&
          t[7] === n[7] &&
          t[8] === n[8] &&
          t[9] === n[9] &&
          t[10] === n[10] &&
          t[11] === n[11] &&
          t[12] === n[12] &&
          t[13] === n[13] &&
          t[14] === n[14] &&
          t[15] === n[15]
        );
      },
      equals: function (t, a) {
        var r = t[0],
          u = t[1],
          e = t[2],
          o = t[3],
          i = t[4],
          c = t[5],
          h = t[6],
          s = t[7],
          M = t[8],
          f = t[9],
          l = t[10],
          v = t[11],
          b = t[12],
          m = t[13],
          d = t[14],
          x = t[15],
          p = a[0],
          y = a[1],
          q = a[2],
          g = a[3],
          A = a[4],
          w = a[5],
          R = a[6],
          z = a[7],
          P = a[8],
          j = a[9],
          I = a[10],
          S = a[11],
          E = a[12],
          O = a[13],
          T = a[14],
          D = a[15];
        return (
          Math.abs(r - p) <= n * Math.max(1, Math.abs(r), Math.abs(p)) &&
          Math.abs(u - y) <= n * Math.max(1, Math.abs(u), Math.abs(y)) &&
          Math.abs(e - q) <= n * Math.max(1, Math.abs(e), Math.abs(q)) &&
          Math.abs(o - g) <= n * Math.max(1, Math.abs(o), Math.abs(g)) &&
          Math.abs(i - A) <= n * Math.max(1, Math.abs(i), Math.abs(A)) &&
          Math.abs(c - w) <= n * Math.max(1, Math.abs(c), Math.abs(w)) &&
          Math.abs(h - R) <= n * Math.max(1, Math.abs(h), Math.abs(R)) &&
          Math.abs(s - z) <= n * Math.max(1, Math.abs(s), Math.abs(z)) &&
          Math.abs(M - P) <= n * Math.max(1, Math.abs(M), Math.abs(P)) &&
          Math.abs(f - j) <= n * Math.max(1, Math.abs(f), Math.abs(j)) &&
          Math.abs(l - I) <= n * Math.max(1, Math.abs(l), Math.abs(I)) &&
          Math.abs(v - S) <= n * Math.max(1, Math.abs(v), Math.abs(S)) &&
          Math.abs(b - E) <= n * Math.max(1, Math.abs(b), Math.abs(E)) &&
          Math.abs(m - O) <= n * Math.max(1, Math.abs(m), Math.abs(O)) &&
          Math.abs(d - T) <= n * Math.max(1, Math.abs(d), Math.abs(T)) &&
          Math.abs(x - D) <= n * Math.max(1, Math.abs(x), Math.abs(D))
        );
      },
      mul: I,
      sub: S,
    });
  function O() {
    var t = new a(3);
    return a != Float32Array && ((t[0] = 0), (t[1] = 0), (t[2] = 0)), t;
  }
  function T(t) {
    var n = t[0],
      a = t[1],
      r = t[2];
    return Math.hypot(n, a, r);
  }
  function D(t, n, r) {
    var u = new a(3);
    return (u[0] = t), (u[1] = n), (u[2] = r), u;
  }
  function F(t, n, a) {
    return (t[0] = n[0] - a[0]), (t[1] = n[1] - a[1]), (t[2] = n[2] - a[2]), t;
  }
  function L(t, n, a) {
    return (t[0] = n[0] * a[0]), (t[1] = n[1] * a[1]), (t[2] = n[2] * a[2]), t;
  }
  function V(t, n, a) {
    return (t[0] = n[0] / a[0]), (t[1] = n[1] / a[1]), (t[2] = n[2] / a[2]), t;
  }
  function Q(t, n) {
    var a = n[0] - t[0],
      r = n[1] - t[1],
      u = n[2] - t[2];
    return Math.hypot(a, r, u);
  }
  function Y(t, n) {
    var a = n[0] - t[0],
      r = n[1] - t[1],
      u = n[2] - t[2];
    return a * a + r * r + u * u;
  }
  function X(t) {
    var n = t[0],
      a = t[1],
      r = t[2];
    return n * n + a * a + r * r;
  }
  function Z(t, n) {
    var a = n[0],
      r = n[1],
      u = n[2],
      e = a * a + r * r + u * u;
    return (
      e > 0 && (e = 1 / Math.sqrt(e)),
      (t[0] = n[0] * e),
      (t[1] = n[1] * e),
      (t[2] = n[2] * e),
      t
    );
  }
  function _(t, n) {
    return t[0] * n[0] + t[1] * n[1] + t[2] * n[2];
  }
  function B(t, n, a) {
    var r = n[0],
      u = n[1],
      e = n[2],
      o = a[0],
      i = a[1],
      c = a[2];
    return (
      (t[0] = u * c - e * i), (t[1] = e * o - r * c), (t[2] = r * i - u * o), t
    );
  }
  var N,
    k = F,
    U = L,
    W = V,
    C = Q,
    G = Y,
    H = T,
    J = X,
    K =
      ((N = O()),
      function (t, n, a, r, u, e) {
        var o, i;
        for (
          n || (n = 3),
            a || (a = 0),
            i = r ? Math.min(r * n + a, t.length) : t.length,
            o = a;
          o < i;
          o += n
        )
          (N[0] = t[o]),
            (N[1] = t[o + 1]),
            (N[2] = t[o + 2]),
            u(N, N, e),
            (t[o] = N[0]),
            (t[o + 1] = N[1]),
            (t[o + 2] = N[2]);
        return t;
      }),
    $ = Object.freeze({
      create: O,
      clone: function (t) {
        var n = new a(3);
        return (n[0] = t[0]), (n[1] = t[1]), (n[2] = t[2]), n;
      },
      length: T,
      fromValues: D,
      copy: function (t, n) {
        return (t[0] = n[0]), (t[1] = n[1]), (t[2] = n[2]), t;
      },
      set: function (t, n, a, r) {
        return (t[0] = n), (t[1] = a), (t[2] = r), t;
      },
      add: function (t, n, a) {
        return (
          (t[0] = n[0] + a[0]), (t[1] = n[1] + a[1]), (t[2] = n[2] + a[2]), t
        );
      },
      subtract: F,
      multiply: L,
      divide: V,
      ceil: function (t, n) {
        return (
          (t[0] = Math.ceil(n[0])),
          (t[1] = Math.ceil(n[1])),
          (t[2] = Math.ceil(n[2])),
          t
        );
      },
      floor: function (t, n) {
        return (
          (t[0] = Math.floor(n[0])),
          (t[1] = Math.floor(n[1])),
          (t[2] = Math.floor(n[2])),
          t
        );
      },
      min: function (t, n, a) {
        return (
          (t[0] = Math.min(n[0], a[0])),
          (t[1] = Math.min(n[1], a[1])),
          (t[2] = Math.min(n[2], a[2])),
          t
        );
      },
      max: function (t, n, a) {
        return (
          (t[0] = Math.max(n[0], a[0])),
          (t[1] = Math.max(n[1], a[1])),
          (t[2] = Math.max(n[2], a[2])),
          t
        );
      },
      round: function (t, n) {
        return (
          (t[0] = Math.round(n[0])),
          (t[1] = Math.round(n[1])),
          (t[2] = Math.round(n[2])),
          t
        );
      },
      scale: function (t, n, a) {
        return (t[0] = n[0] * a), (t[1] = n[1] * a), (t[2] = n[2] * a), t;
      },
      scaleAndAdd: function (t, n, a, r) {
        return (
          (t[0] = n[0] + a[0] * r),
          (t[1] = n[1] + a[1] * r),
          (t[2] = n[2] + a[2] * r),
          t
        );
      },
      distance: Q,
      squaredDistance: Y,
      squaredLength: X,
      negate: function (t, n) {
        return (t[0] = -n[0]), (t[1] = -n[1]), (t[2] = -n[2]), t;
      },
      inverse: function (t, n) {
        return (t[0] = 1 / n[0]), (t[1] = 1 / n[1]), (t[2] = 1 / n[2]), t;
      },
      normalize: Z,
      dot: _,
      cross: B,
      lerp: function (t, n, a, r) {
        var u = n[0],
          e = n[1],
          o = n[2];
        return (
          (t[0] = u + r * (a[0] - u)),
          (t[1] = e + r * (a[1] - e)),
          (t[2] = o + r * (a[2] - o)),
          t
        );
      },
      hermite: function (t, n, a, r, u, e) {
        var o = e * e,
          i = o * (2 * e - 3) + 1,
          c = o * (e - 2) + e,
          h = o * (e - 1),
          s = o * (3 - 2 * e);
        return (
          (t[0] = n[0] * i + a[0] * c + r[0] * h + u[0] * s),
          (t[1] = n[1] * i + a[1] * c + r[1] * h + u[1] * s),
          (t[2] = n[2] * i + a[2] * c + r[2] * h + u[2] * s),
          t
        );
      },
      bezier: function (t, n, a, r, u, e) {
        var o = 1 - e,
          i = o * o,
          c = e * e,
          h = i * o,
          s = 3 * e * i,
          M = 3 * c * o,
          f = c * e;
        return (
          (t[0] = n[0] * h + a[0] * s + r[0] * M + u[0] * f),
          (t[1] = n[1] * h + a[1] * s + r[1] * M + u[1] * f),
          (t[2] = n[2] * h + a[2] * s + r[2] * M + u[2] * f),
          t
        );
      },
      random: function (t, n) {
        n = n || 1;
        var a = 2 * r() * Math.PI,
          u = 2 * r() - 1,
          e = Math.sqrt(1 - u * u) * n;
        return (
          (t[0] = Math.cos(a) * e), (t[1] = Math.sin(a) * e), (t[2] = u * n), t
        );
      },
      transformMat4: function (t, n, a) {
        var r = n[0],
          u = n[1],
          e = n[2],
          o = a[3] * r + a[7] * u + a[11] * e + a[15];
        return (
          (o = o || 1),
          (t[0] = (a[0] * r + a[4] * u + a[8] * e + a[12]) / o),
          (t[1] = (a[1] * r + a[5] * u + a[9] * e + a[13]) / o),
          (t[2] = (a[2] * r + a[6] * u + a[10] * e + a[14]) / o),
          t
        );
      },
      transformMat3: function (t, n, a) {
        var r = n[0],
          u = n[1],
          e = n[2];
        return (
          (t[0] = r * a[0] + u * a[3] + e * a[6]),
          (t[1] = r * a[1] + u * a[4] + e * a[7]),
          (t[2] = r * a[2] + u * a[5] + e * a[8]),
          t
        );
      },
      transformQuat: function (t, n, a) {
        var r = a[0],
          u = a[1],
          e = a[2],
          o = a[3],
          i = n[0],
          c = n[1],
          h = n[2],
          s = u * h - e * c,
          M = e * i - r * h,
          f = r * c - u * i,
          l = u * f - e * M,
          v = e * s - r * f,
          b = r * M - u * s,
          m = 2 * o;
        return (
          (s *= m),
          (M *= m),
          (f *= m),
          (l *= 2),
          (v *= 2),
          (b *= 2),
          (t[0] = i + s + l),
          (t[1] = c + M + v),
          (t[2] = h + f + b),
          t
        );
      },
      rotateX: function (t, n, a, r) {
        var u = [],
          e = [];
        return (
          (u[0] = n[0] - a[0]),
          (u[1] = n[1] - a[1]),
          (u[2] = n[2] - a[2]),
          (e[0] = u[0]),
          (e[1] = u[1] * Math.cos(r) - u[2] * Math.sin(r)),
          (e[2] = u[1] * Math.sin(r) + u[2] * Math.cos(r)),
          (t[0] = e[0] + a[0]),
          (t[1] = e[1] + a[1]),
          (t[2] = e[2] + a[2]),
          t
        );
      },
      rotateY: function (t, n, a, r) {
        var u = [],
          e = [];
        return (
          (u[0] = n[0] - a[0]),
          (u[1] = n[1] - a[1]),
          (u[2] = n[2] - a[2]),
          (e[0] = u[2] * Math.sin(r) + u[0] * Math.cos(r)),
          (e[1] = u[1]),
          (e[2] = u[2] * Math.cos(r) - u[0] * Math.sin(r)),
          (t[0] = e[0] + a[0]),
          (t[1] = e[1] + a[1]),
          (t[2] = e[2] + a[2]),
          t
        );
      },
      rotateZ: function (t, n, a, r) {
        var u = [],
          e = [];
        return (
          (u[0] = n[0] - a[0]),
          (u[1] = n[1] - a[1]),
          (u[2] = n[2] - a[2]),
          (e[0] = u[0] * Math.cos(r) - u[1] * Math.sin(r)),
          (e[1] = u[0] * Math.sin(r) + u[1] * Math.cos(r)),
          (e[2] = u[2]),
          (t[0] = e[0] + a[0]),
          (t[1] = e[1] + a[1]),
          (t[2] = e[2] + a[2]),
          t
        );
      },
      angle: function (t, n) {
        var a = D(t[0], t[1], t[2]),
          r = D(n[0], n[1], n[2]);
        Z(a, a), Z(r, r);
        var u = _(a, r);
        return u > 1 ? 0 : u < -1 ? Math.PI : Math.acos(u);
      },
      zero: function (t) {
        return (t[0] = 0), (t[1] = 0), (t[2] = 0), t;
      },
      str: function (t) {
        return "vec3(" + t[0] + ", " + t[1] + ", " + t[2] + ")";
      },
      exactEquals: function (t, n) {
        return t[0] === n[0] && t[1] === n[1] && t[2] === n[2];
      },
      equals: function (t, a) {
        var r = t[0],
          u = t[1],
          e = t[2],
          o = a[0],
          i = a[1],
          c = a[2];
        return (
          Math.abs(r - o) <= n * Math.max(1, Math.abs(r), Math.abs(o)) &&
          Math.abs(u - i) <= n * Math.max(1, Math.abs(u), Math.abs(i)) &&
          Math.abs(e - c) <= n * Math.max(1, Math.abs(e), Math.abs(c))
        );
      },
      sub: k,
      mul: U,
      div: W,
      dist: C,
      sqrDist: G,
      len: H,
      sqrLen: J,
      forEach: K,
    });
  function tt() {
    var t = new a(4);
    return (
      a != Float32Array && ((t[0] = 0), (t[1] = 0), (t[2] = 0), (t[3] = 0)), t
    );
  }
  function nt(t) {
    var n = new a(4);
    return (n[0] = t[0]), (n[1] = t[1]), (n[2] = t[2]), (n[3] = t[3]), n;
  }
  function at(t, n, r, u) {
    var e = new a(4);
    return (e[0] = t), (e[1] = n), (e[2] = r), (e[3] = u), e;
  }
  function rt(t, n) {
    return (t[0] = n[0]), (t[1] = n[1]), (t[2] = n[2]), (t[3] = n[3]), t;
  }
  function ut(t, n, a, r, u) {
    return (t[0] = n), (t[1] = a), (t[2] = r), (t[3] = u), t;
  }
  function et(t, n, a) {
    return (
      (t[0] = n[0] + a[0]),
      (t[1] = n[1] + a[1]),
      (t[2] = n[2] + a[2]),
      (t[3] = n[3] + a[3]),
      t
    );
  }
  function ot(t, n, a) {
    return (
      (t[0] = n[0] - a[0]),
      (t[1] = n[1] - a[1]),
      (t[2] = n[2] - a[2]),
      (t[3] = n[3] - a[3]),
      t
    );
  }
  function it(t, n, a) {
    return (
      (t[0] = n[0] * a[0]),
      (t[1] = n[1] * a[1]),
      (t[2] = n[2] * a[2]),
      (t[3] = n[3] * a[3]),
      t
    );
  }
  function ct(t, n, a) {
    return (
      (t[0] = n[0] / a[0]),
      (t[1] = n[1] / a[1]),
      (t[2] = n[2] / a[2]),
      (t[3] = n[3] / a[3]),
      t
    );
  }
  function ht(t, n, a) {
    return (
      (t[0] = n[0] * a),
      (t[1] = n[1] * a),
      (t[2] = n[2] * a),
      (t[3] = n[3] * a),
      t
    );
  }
  function st(t, n) {
    var a = n[0] - t[0],
      r = n[1] - t[1],
      u = n[2] - t[2],
      e = n[3] - t[3];
    return Math.hypot(a, r, u, e);
  }
  function Mt(t, n) {
    var a = n[0] - t[0],
      r = n[1] - t[1],
      u = n[2] - t[2],
      e = n[3] - t[3];
    return a * a + r * r + u * u + e * e;
  }
  function ft(t) {
    var n = t[0],
      a = t[1],
      r = t[2],
      u = t[3];
    return Math.hypot(n, a, r, u);
  }
  function lt(t) {
    var n = t[0],
      a = t[1],
      r = t[2],
      u = t[3];
    return n * n + a * a + r * r + u * u;
  }
  function vt(t, n) {
    var a = n[0],
      r = n[1],
      u = n[2],
      e = n[3],
      o = a * a + r * r + u * u + e * e;
    return (
      o > 0 && (o = 1 / Math.sqrt(o)),
      (t[0] = a * o),
      (t[1] = r * o),
      (t[2] = u * o),
      (t[3] = e * o),
      t
    );
  }
  function bt(t, n) {
    return t[0] * n[0] + t[1] * n[1] + t[2] * n[2] + t[3] * n[3];
  }
  function mt(t, n, a, r) {
    var u = n[0],
      e = n[1],
      o = n[2],
      i = n[3];
    return (
      (t[0] = u + r * (a[0] - u)),
      (t[1] = e + r * (a[1] - e)),
      (t[2] = o + r * (a[2] - o)),
      (t[3] = i + r * (a[3] - i)),
      t
    );
  }
  function dt(t, n) {
    return t[0] === n[0] && t[1] === n[1] && t[2] === n[2] && t[3] === n[3];
  }
  function xt(t, a) {
    var r = t[0],
      u = t[1],
      e = t[2],
      o = t[3],
      i = a[0],
      c = a[1],
      h = a[2],
      s = a[3];
    return (
      Math.abs(r - i) <= n * Math.max(1, Math.abs(r), Math.abs(i)) &&
      Math.abs(u - c) <= n * Math.max(1, Math.abs(u), Math.abs(c)) &&
      Math.abs(e - h) <= n * Math.max(1, Math.abs(e), Math.abs(h)) &&
      Math.abs(o - s) <= n * Math.max(1, Math.abs(o), Math.abs(s))
    );
  }
  var pt = ot,
    yt = it,
    qt = ct,
    gt = st,
    At = Mt,
    wt = ft,
    Rt = lt,
    zt = (function () {
      var t = tt();
      return function (n, a, r, u, e, o) {
        var i, c;
        for (
          a || (a = 4),
            r || (r = 0),
            c = u ? Math.min(u * a + r, n.length) : n.length,
            i = r;
          i < c;
          i += a
        )
          (t[0] = n[i]),
            (t[1] = n[i + 1]),
            (t[2] = n[i + 2]),
            (t[3] = n[i + 3]),
            e(t, t, o),
            (n[i] = t[0]),
            (n[i + 1] = t[1]),
            (n[i + 2] = t[2]),
            (n[i + 3] = t[3]);
        return n;
      };
    })(),
    Pt = Object.freeze({
      create: tt,
      clone: nt,
      fromValues: at,
      copy: rt,
      set: ut,
      add: et,
      subtract: ot,
      multiply: it,
      divide: ct,
      ceil: function (t, n) {
        return (
          (t[0] = Math.ceil(n[0])),
          (t[1] = Math.ceil(n[1])),
          (t[2] = Math.ceil(n[2])),
          (t[3] = Math.ceil(n[3])),
          t
        );
      },
      floor: function (t, n) {
        return (
          (t[0] = Math.floor(n[0])),
          (t[1] = Math.floor(n[1])),
          (t[2] = Math.floor(n[2])),
          (t[3] = Math.floor(n[3])),
          t
        );
      },
      min: function (t, n, a) {
        return (
          (t[0] = Math.min(n[0], a[0])),
          (t[1] = Math.min(n[1], a[1])),
          (t[2] = Math.min(n[2], a[2])),
          (t[3] = Math.min(n[3], a[3])),
          t
        );
      },
      max: function (t, n, a) {
        return (
          (t[0] = Math.max(n[0], a[0])),
          (t[1] = Math.max(n[1], a[1])),
          (t[2] = Math.max(n[2], a[2])),
          (t[3] = Math.max(n[3], a[3])),
          t
        );
      },
      round: function (t, n) {
        return (
          (t[0] = Math.round(n[0])),
          (t[1] = Math.round(n[1])),
          (t[2] = Math.round(n[2])),
          (t[3] = Math.round(n[3])),
          t
        );
      },
      scale: ht,
      scaleAndAdd: function (t, n, a, r) {
        return (
          (t[0] = n[0] + a[0] * r),
          (t[1] = n[1] + a[1] * r),
          (t[2] = n[2] + a[2] * r),
          (t[3] = n[3] + a[3] * r),
          t
        );
      },
      distance: st,
      squaredDistance: Mt,
      length: ft,
      squaredLength: lt,
      negate: function (t, n) {
        return (
          (t[0] = -n[0]), (t[1] = -n[1]), (t[2] = -n[2]), (t[3] = -n[3]), t
        );
      },
      inverse: function (t, n) {
        return (
          (t[0] = 1 / n[0]),
          (t[1] = 1 / n[1]),
          (t[2] = 1 / n[2]),
          (t[3] = 1 / n[3]),
          t
        );
      },
      normalize: vt,
      dot: bt,
      cross: function (t, n, a, r) {
        var u = a[0] * r[1] - a[1] * r[0],
          e = a[0] * r[2] - a[2] * r[0],
          o = a[0] * r[3] - a[3] * r[0],
          i = a[1] * r[2] - a[2] * r[1],
          c = a[1] * r[3] - a[3] * r[1],
          h = a[2] * r[3] - a[3] * r[2],
          s = n[0],
          M = n[1],
          f = n[2],
          l = n[3];
        return (
          (t[0] = M * h - f * c + l * i),
          (t[1] = -s * h + f * o - l * e),
          (t[2] = s * c - M * o + l * u),
          (t[3] = -s * i + M * e - f * u),
          t
        );
      },
      lerp: mt,
      random: function (t, n) {
        var a, u, e, o, i, c;
        n = n || 1;
        do {
          i = (a = 2 * r() - 1) * a + (u = 2 * r() - 1) * u;
        } while (i >= 1);
        do {
          c = (e = 2 * r() - 1) * e + (o = 2 * r() - 1) * o;
        } while (c >= 1);
        var h = Math.sqrt((1 - i) / c);
        return (
          (t[0] = n * a),
          (t[1] = n * u),
          (t[2] = n * e * h),
          (t[3] = n * o * h),
          t
        );
      },
      transformMat4: function (t, n, a) {
        var r = n[0],
          u = n[1],
          e = n[2],
          o = n[3];
        return (
          (t[0] = a[0] * r + a[4] * u + a[8] * e + a[12] * o),
          (t[1] = a[1] * r + a[5] * u + a[9] * e + a[13] * o),
          (t[2] = a[2] * r + a[6] * u + a[10] * e + a[14] * o),
          (t[3] = a[3] * r + a[7] * u + a[11] * e + a[15] * o),
          t
        );
      },
      transformQuat: function (t, n, a) {
        var r = n[0],
          u = n[1],
          e = n[2],
          o = a[0],
          i = a[1],
          c = a[2],
          h = a[3],
          s = h * r + i * e - c * u,
          M = h * u + c * r - o * e,
          f = h * e + o * u - i * r,
          l = -o * r - i * u - c * e;
        return (
          (t[0] = s * h + l * -o + M * -c - f * -i),
          (t[1] = M * h + l * -i + f * -o - s * -c),
          (t[2] = f * h + l * -c + s * -i - M * -o),
          (t[3] = n[3]),
          t
        );
      },
      zero: function (t) {
        return (t[0] = 0), (t[1] = 0), (t[2] = 0), (t[3] = 0), t;
      },
      str: function (t) {
        return "vec4(" + t[0] + ", " + t[1] + ", " + t[2] + ", " + t[3] + ")";
      },
      exactEquals: dt,
      equals: xt,
      sub: pt,
      mul: yt,
      div: qt,
      dist: gt,
      sqrDist: At,
      len: wt,
      sqrLen: Rt,
      forEach: zt,
    });
  function jt() {
    var t = new a(4);
    return (
      a != Float32Array && ((t[0] = 0), (t[1] = 0), (t[2] = 0)), (t[3] = 1), t
    );
  }
  function It(t, n, a) {
    a *= 0.5;
    var r = Math.sin(a);
    return (
      (t[0] = r * n[0]),
      (t[1] = r * n[1]),
      (t[2] = r * n[2]),
      (t[3] = Math.cos(a)),
      t
    );
  }
  function St(t, n, a) {
    var r = n[0],
      u = n[1],
      e = n[2],
      o = n[3],
      i = a[0],
      c = a[1],
      h = a[2],
      s = a[3];
    return (
      (t[0] = r * s + o * i + u * h - e * c),
      (t[1] = u * s + o * c + e * i - r * h),
      (t[2] = e * s + o * h + r * c - u * i),
      (t[3] = o * s - r * i - u * c - e * h),
      t
    );
  }
  function Et(t, n, a) {
    a *= 0.5;
    var r = n[0],
      u = n[1],
      e = n[2],
      o = n[3],
      i = Math.sin(a),
      c = Math.cos(a);
    return (
      (t[0] = r * c + o * i),
      (t[1] = u * c + e * i),
      (t[2] = e * c - u * i),
      (t[3] = o * c - r * i),
      t
    );
  }
  function Ot(t, n, a) {
    a *= 0.5;
    var r = n[0],
      u = n[1],
      e = n[2],
      o = n[3],
      i = Math.sin(a),
      c = Math.cos(a);
    return (
      (t[0] = r * c - e * i),
      (t[1] = u * c + o * i),
      (t[2] = e * c + r * i),
      (t[3] = o * c - u * i),
      t
    );
  }
  function Tt(t, n, a) {
    a *= 0.5;
    var r = n[0],
      u = n[1],
      e = n[2],
      o = n[3],
      i = Math.sin(a),
      c = Math.cos(a);
    return (
      (t[0] = r * c + u * i),
      (t[1] = u * c - r * i),
      (t[2] = e * c + o * i),
      (t[3] = o * c - e * i),
      t
    );
  }
  function Dt(t, n) {
    var a = n[0],
      r = n[1],
      u = n[2],
      e = n[3],
      o = Math.sqrt(a * a + r * r + u * u),
      i = Math.exp(e),
      c = o > 0 ? (i * Math.sin(o)) / o : 0;
    return (
      (t[0] = a * c),
      (t[1] = r * c),
      (t[2] = u * c),
      (t[3] = i * Math.cos(o)),
      t
    );
  }
  function Ft(t, n) {
    var a = n[0],
      r = n[1],
      u = n[2],
      e = n[3],
      o = Math.sqrt(a * a + r * r + u * u),
      i = o > 0 ? Math.atan2(o, e) / o : 0;
    return (
      (t[0] = a * i),
      (t[1] = r * i),
      (t[2] = u * i),
      (t[3] = 0.5 * Math.log(a * a + r * r + u * u + e * e)),
      t
    );
  }
  function Lt(t, a, r, u) {
    var e,
      o,
      i,
      c,
      h,
      s = a[0],
      M = a[1],
      f = a[2],
      l = a[3],
      v = r[0],
      b = r[1],
      m = r[2],
      d = r[3];
    return (
      (o = s * v + M * b + f * m + l * d) < 0 &&
        ((o = -o), (v = -v), (b = -b), (m = -m), (d = -d)),
      1 - o > n
        ? ((e = Math.acos(o)),
          (i = Math.sin(e)),
          (c = Math.sin((1 - u) * e) / i),
          (h = Math.sin(u * e) / i))
        : ((c = 1 - u), (h = u)),
      (t[0] = c * s + h * v),
      (t[1] = c * M + h * b),
      (t[2] = c * f + h * m),
      (t[3] = c * l + h * d),
      t
    );
  }
  function Vt(t, n) {
    var a,
      r = n[0] + n[4] + n[8];
    if (r > 0)
      (a = Math.sqrt(r + 1)),
        (t[3] = 0.5 * a),
        (a = 0.5 / a),
        (t[0] = (n[5] - n[7]) * a),
        (t[1] = (n[6] - n[2]) * a),
        (t[2] = (n[1] - n[3]) * a);
    else {
      var u = 0;
      n[4] > n[0] && (u = 1), n[8] > n[3 * u + u] && (u = 2);
      var e = (u + 1) % 3,
        o = (u + 2) % 3;
      (a = Math.sqrt(n[3 * u + u] - n[3 * e + e] - n[3 * o + o] + 1)),
        (t[u] = 0.5 * a),
        (a = 0.5 / a),
        (t[3] = (n[3 * e + o] - n[3 * o + e]) * a),
        (t[e] = (n[3 * e + u] + n[3 * u + e]) * a),
        (t[o] = (n[3 * o + u] + n[3 * u + o]) * a);
    }
    return t;
  }
  var Qt,
    Yt,
    Xt,
    Zt,
    _t,
    Bt,
    Nt = nt,
    kt = at,
    Ut = rt,
    Wt = ut,
    Ct = et,
    Gt = St,
    Ht = ht,
    Jt = bt,
    Kt = mt,
    $t = ft,
    tn = $t,
    nn = lt,
    an = nn,
    rn = vt,
    un = dt,
    en = xt,
    on =
      ((Qt = O()),
      (Yt = D(1, 0, 0)),
      (Xt = D(0, 1, 0)),
      function (t, n, a) {
        var r = _(n, a);
        return r < -0.999999
          ? (B(Qt, Yt, n),
            H(Qt) < 1e-6 && B(Qt, Xt, n),
            Z(Qt, Qt),
            It(t, Qt, Math.PI),
            t)
          : r > 0.999999
            ? ((t[0] = 0), (t[1] = 0), (t[2] = 0), (t[3] = 1), t)
            : (B(Qt, n, a),
              (t[0] = Qt[0]),
              (t[1] = Qt[1]),
              (t[2] = Qt[2]),
              (t[3] = 1 + r),
              rn(t, t));
      }),
    cn =
      ((Zt = jt()),
      (_t = jt()),
      function (t, n, a, r, u, e) {
        return (
          Lt(Zt, n, u, e), Lt(_t, a, r, e), Lt(t, Zt, _t, 2 * e * (1 - e)), t
        );
      }),
    hn =
      ((Bt = m()),
      function (t, n, a, r) {
        return (
          (Bt[0] = a[0]),
          (Bt[3] = a[1]),
          (Bt[6] = a[2]),
          (Bt[1] = r[0]),
          (Bt[4] = r[1]),
          (Bt[7] = r[2]),
          (Bt[2] = -n[0]),
          (Bt[5] = -n[1]),
          (Bt[8] = -n[2]),
          rn(t, Vt(t, Bt))
        );
      }),
    sn = Object.freeze({
      create: jt,
      identity: function (t) {
        return (t[0] = 0), (t[1] = 0), (t[2] = 0), (t[3] = 1), t;
      },
      setAxisAngle: It,
      getAxisAngle: function (t, a) {
        var r = 2 * Math.acos(a[3]),
          u = Math.sin(r / 2);
        return (
          u > n
            ? ((t[0] = a[0] / u), (t[1] = a[1] / u), (t[2] = a[2] / u))
            : ((t[0] = 1), (t[1] = 0), (t[2] = 0)),
          r
        );
      },
      getAngle: function (t, n) {
        var a = Jt(t, n);
        return Math.acos(2 * a * a - 1);
      },
      multiply: St,
      rotateX: Et,
      rotateY: Ot,
      rotateZ: Tt,
      calculateW: function (t, n) {
        var a = n[0],
          r = n[1],
          u = n[2];
        return (
          (t[0] = a),
          (t[1] = r),
          (t[2] = u),
          (t[3] = Math.sqrt(Math.abs(1 - a * a - r * r - u * u))),
          t
        );
      },
      exp: Dt,
      ln: Ft,
      pow: function (t, n, a) {
        return Ft(t, n), Ht(t, t, a), Dt(t, t), t;
      },
      slerp: Lt,
      random: function (t) {
        var n = r(),
          a = r(),
          u = r(),
          e = Math.sqrt(1 - n),
          o = Math.sqrt(n);
        return (
          (t[0] = e * Math.sin(2 * Math.PI * a)),
          (t[1] = e * Math.cos(2 * Math.PI * a)),
          (t[2] = o * Math.sin(2 * Math.PI * u)),
          (t[3] = o * Math.cos(2 * Math.PI * u)),
          t
        );
      },
      invert: function (t, n) {
        var a = n[0],
          r = n[1],
          u = n[2],
          e = n[3],
          o = a * a + r * r + u * u + e * e,
          i = o ? 1 / o : 0;
        return (
          (t[0] = -a * i), (t[1] = -r * i), (t[2] = -u * i), (t[3] = e * i), t
        );
      },
      conjugate: function (t, n) {
        return (t[0] = -n[0]), (t[1] = -n[1]), (t[2] = -n[2]), (t[3] = n[3]), t;
      },
      fromMat3: Vt,
      fromEuler: function (t, n, a, r) {
        var u = (0.5 * Math.PI) / 180;
        (n *= u), (a *= u), (r *= u);
        var e = Math.sin(n),
          o = Math.cos(n),
          i = Math.sin(a),
          c = Math.cos(a),
          h = Math.sin(r),
          s = Math.cos(r);
        return (
          (t[0] = e * c * s - o * i * h),
          (t[1] = o * i * s + e * c * h),
          (t[2] = o * c * h - e * i * s),
          (t[3] = o * c * s + e * i * h),
          t
        );
      },
      str: function (t) {
        return "quat(" + t[0] + ", " + t[1] + ", " + t[2] + ", " + t[3] + ")";
      },
      clone: Nt,
      fromValues: kt,
      copy: Ut,
      set: Wt,
      add: Ct,
      mul: Gt,
      scale: Ht,
      dot: Jt,
      lerp: Kt,
      length: $t,
      len: tn,
      squaredLength: nn,
      sqrLen: an,
      normalize: rn,
      exactEquals: un,
      equals: en,
      rotationTo: on,
      sqlerp: cn,
      setAxes: hn,
    });
  function Mn(t, n, a) {
    var r = 0.5 * a[0],
      u = 0.5 * a[1],
      e = 0.5 * a[2],
      o = n[0],
      i = n[1],
      c = n[2],
      h = n[3];
    return (
      (t[0] = o),
      (t[1] = i),
      (t[2] = c),
      (t[3] = h),
      (t[4] = r * h + u * c - e * i),
      (t[5] = u * h + e * o - r * c),
      (t[6] = e * h + r * i - u * o),
      (t[7] = -r * o - u * i - e * c),
      t
    );
  }
  function fn(t, n) {
    return (
      (t[0] = n[0]),
      (t[1] = n[1]),
      (t[2] = n[2]),
      (t[3] = n[3]),
      (t[4] = n[4]),
      (t[5] = n[5]),
      (t[6] = n[6]),
      (t[7] = n[7]),
      t
    );
  }
  var ln = Ut;
  var vn = Ut;
  function bn(t, n, a) {
    var r = n[0],
      u = n[1],
      e = n[2],
      o = n[3],
      i = a[4],
      c = a[5],
      h = a[6],
      s = a[7],
      M = n[4],
      f = n[5],
      l = n[6],
      v = n[7],
      b = a[0],
      m = a[1],
      d = a[2],
      x = a[3];
    return (
      (t[0] = r * x + o * b + u * d - e * m),
      (t[1] = u * x + o * m + e * b - r * d),
      (t[2] = e * x + o * d + r * m - u * b),
      (t[3] = o * x - r * b - u * m - e * d),
      (t[4] = r * s + o * i + u * h - e * c + M * x + v * b + f * d - l * m),
      (t[5] = u * s + o * c + e * i - r * h + f * x + v * m + l * b - M * d),
      (t[6] = e * s + o * h + r * c - u * i + l * x + v * d + M * m - f * b),
      (t[7] = o * s - r * i - u * c - e * h + v * x - M * b - f * m - l * d),
      t
    );
  }
  var mn = bn;
  var dn = Jt;
  var xn = $t,
    pn = xn,
    yn = nn,
    qn = yn;
  var gn = Object.freeze({
    create: function () {
      var t = new a(8);
      return (
        a != Float32Array &&
          ((t[0] = 0),
          (t[1] = 0),
          (t[2] = 0),
          (t[4] = 0),
          (t[5] = 0),
          (t[6] = 0),
          (t[7] = 0)),
        (t[3] = 1),
        t
      );
    },
    clone: function (t) {
      var n = new a(8);
      return (
        (n[0] = t[0]),
        (n[1] = t[1]),
        (n[2] = t[2]),
        (n[3] = t[3]),
        (n[4] = t[4]),
        (n[5] = t[5]),
        (n[6] = t[6]),
        (n[7] = t[7]),
        n
      );
    },
    fromValues: function (t, n, r, u, e, o, i, c) {
      var h = new a(8);
      return (
        (h[0] = t),
        (h[1] = n),
        (h[2] = r),
        (h[3] = u),
        (h[4] = e),
        (h[5] = o),
        (h[6] = i),
        (h[7] = c),
        h
      );
    },
    fromRotationTranslationValues: function (t, n, r, u, e, o, i) {
      var c = new a(8);
      (c[0] = t), (c[1] = n), (c[2] = r), (c[3] = u);
      var h = 0.5 * e,
        s = 0.5 * o,
        M = 0.5 * i;
      return (
        (c[4] = h * u + s * r - M * n),
        (c[5] = s * u + M * t - h * r),
        (c[6] = M * u + h * n - s * t),
        (c[7] = -h * t - s * n - M * r),
        c
      );
    },
    fromRotationTranslation: Mn,
    fromTranslation: function (t, n) {
      return (
        (t[0] = 0),
        (t[1] = 0),
        (t[2] = 0),
        (t[3] = 1),
        (t[4] = 0.5 * n[0]),
        (t[5] = 0.5 * n[1]),
        (t[6] = 0.5 * n[2]),
        (t[7] = 0),
        t
      );
    },
    fromRotation: function (t, n) {
      return (
        (t[0] = n[0]),
        (t[1] = n[1]),
        (t[2] = n[2]),
        (t[3] = n[3]),
        (t[4] = 0),
        (t[5] = 0),
        (t[6] = 0),
        (t[7] = 0),
        t
      );
    },
    fromMat4: function (t, n) {
      var r = jt();
      P(r, n);
      var u = new a(3);
      return R(u, n), Mn(t, r, u), t;
    },
    copy: fn,
    identity: function (t) {
      return (
        (t[0] = 0),
        (t[1] = 0),
        (t[2] = 0),
        (t[3] = 1),
        (t[4] = 0),
        (t[5] = 0),
        (t[6] = 0),
        (t[7] = 0),
        t
      );
    },
    set: function (t, n, a, r, u, e, o, i, c) {
      return (
        (t[0] = n),
        (t[1] = a),
        (t[2] = r),
        (t[3] = u),
        (t[4] = e),
        (t[5] = o),
        (t[6] = i),
        (t[7] = c),
        t
      );
    },
    getReal: ln,
    getDual: function (t, n) {
      return (t[0] = n[4]), (t[1] = n[5]), (t[2] = n[6]), (t[3] = n[7]), t;
    },
    setReal: vn,
    setDual: function (t, n) {
      return (t[4] = n[0]), (t[5] = n[1]), (t[6] = n[2]), (t[7] = n[3]), t;
    },
    getTranslation: function (t, n) {
      var a = n[4],
        r = n[5],
        u = n[6],
        e = n[7],
        o = -n[0],
        i = -n[1],
        c = -n[2],
        h = n[3];
      return (
        (t[0] = 2 * (a * h + e * o + r * c - u * i)),
        (t[1] = 2 * (r * h + e * i + u * o - a * c)),
        (t[2] = 2 * (u * h + e * c + a * i - r * o)),
        t
      );
    },
    translate: function (t, n, a) {
      var r = n[0],
        u = n[1],
        e = n[2],
        o = n[3],
        i = 0.5 * a[0],
        c = 0.5 * a[1],
        h = 0.5 * a[2],
        s = n[4],
        M = n[5],
        f = n[6],
        l = n[7];
      return (
        (t[0] = r),
        (t[1] = u),
        (t[2] = e),
        (t[3] = o),
        (t[4] = o * i + u * h - e * c + s),
        (t[5] = o * c + e * i - r * h + M),
        (t[6] = o * h + r * c - u * i + f),
        (t[7] = -r * i - u * c - e * h + l),
        t
      );
    },
    rotateX: function (t, n, a) {
      var r = -n[0],
        u = -n[1],
        e = -n[2],
        o = n[3],
        i = n[4],
        c = n[5],
        h = n[6],
        s = n[7],
        M = i * o + s * r + c * e - h * u,
        f = c * o + s * u + h * r - i * e,
        l = h * o + s * e + i * u - c * r,
        v = s * o - i * r - c * u - h * e;
      return (
        Et(t, n, a),
        (r = t[0]),
        (u = t[1]),
        (e = t[2]),
        (o = t[3]),
        (t[4] = M * o + v * r + f * e - l * u),
        (t[5] = f * o + v * u + l * r - M * e),
        (t[6] = l * o + v * e + M * u - f * r),
        (t[7] = v * o - M * r - f * u - l * e),
        t
      );
    },
    rotateY: function (t, n, a) {
      var r = -n[0],
        u = -n[1],
        e = -n[2],
        o = n[3],
        i = n[4],
        c = n[5],
        h = n[6],
        s = n[7],
        M = i * o + s * r + c * e - h * u,
        f = c * o + s * u + h * r - i * e,
        l = h * o + s * e + i * u - c * r,
        v = s * o - i * r - c * u - h * e;
      return (
        Ot(t, n, a),
        (r = t[0]),
        (u = t[1]),
        (e = t[2]),
        (o = t[3]),
        (t[4] = M * o + v * r + f * e - l * u),
        (t[5] = f * o + v * u + l * r - M * e),
        (t[6] = l * o + v * e + M * u - f * r),
        (t[7] = v * o - M * r - f * u - l * e),
        t
      );
    },
    rotateZ: function (t, n, a) {
      var r = -n[0],
        u = -n[1],
        e = -n[2],
        o = n[3],
        i = n[4],
        c = n[5],
        h = n[6],
        s = n[7],
        M = i * o + s * r + c * e - h * u,
        f = c * o + s * u + h * r - i * e,
        l = h * o + s * e + i * u - c * r,
        v = s * o - i * r - c * u - h * e;
      return (
        Tt(t, n, a),
        (r = t[0]),
        (u = t[1]),
        (e = t[2]),
        (o = t[3]),
        (t[4] = M * o + v * r + f * e - l * u),
        (t[5] = f * o + v * u + l * r - M * e),
        (t[6] = l * o + v * e + M * u - f * r),
        (t[7] = v * o - M * r - f * u - l * e),
        t
      );
    },
    rotateByQuatAppend: function (t, n, a) {
      var r = a[0],
        u = a[1],
        e = a[2],
        o = a[3],
        i = n[0],
        c = n[1],
        h = n[2],
        s = n[3];
      return (
        (t[0] = i * o + s * r + c * e - h * u),
        (t[1] = c * o + s * u + h * r - i * e),
        (t[2] = h * o + s * e + i * u - c * r),
        (t[3] = s * o - i * r - c * u - h * e),
        (i = n[4]),
        (c = n[5]),
        (h = n[6]),
        (s = n[7]),
        (t[4] = i * o + s * r + c * e - h * u),
        (t[5] = c * o + s * u + h * r - i * e),
        (t[6] = h * o + s * e + i * u - c * r),
        (t[7] = s * o - i * r - c * u - h * e),
        t
      );
    },
    rotateByQuatPrepend: function (t, n, a) {
      var r = n[0],
        u = n[1],
        e = n[2],
        o = n[3],
        i = a[0],
        c = a[1],
        h = a[2],
        s = a[3];
      return (
        (t[0] = r * s + o * i + u * h - e * c),
        (t[1] = u * s + o * c + e * i - r * h),
        (t[2] = e * s + o * h + r * c - u * i),
        (t[3] = o * s - r * i - u * c - e * h),
        (i = a[4]),
        (c = a[5]),
        (h = a[6]),
        (s = a[7]),
        (t[4] = r * s + o * i + u * h - e * c),
        (t[5] = u * s + o * c + e * i - r * h),
        (t[6] = e * s + o * h + r * c - u * i),
        (t[7] = o * s - r * i - u * c - e * h),
        t
      );
    },
    rotateAroundAxis: function (t, a, r, u) {
      if (Math.abs(u) < n) return fn(t, a);
      var e = Math.hypot(r[0], r[1], r[2]);
      u *= 0.5;
      var o = Math.sin(u),
        i = (o * r[0]) / e,
        c = (o * r[1]) / e,
        h = (o * r[2]) / e,
        s = Math.cos(u),
        M = a[0],
        f = a[1],
        l = a[2],
        v = a[3];
      (t[0] = M * s + v * i + f * h - l * c),
        (t[1] = f * s + v * c + l * i - M * h),
        (t[2] = l * s + v * h + M * c - f * i),
        (t[3] = v * s - M * i - f * c - l * h);
      var b = a[4],
        m = a[5],
        d = a[6],
        x = a[7];
      return (
        (t[4] = b * s + x * i + m * h - d * c),
        (t[5] = m * s + x * c + d * i - b * h),
        (t[6] = d * s + x * h + b * c - m * i),
        (t[7] = x * s - b * i - m * c - d * h),
        t
      );
    },
    add: function (t, n, a) {
      return (
        (t[0] = n[0] + a[0]),
        (t[1] = n[1] + a[1]),
        (t[2] = n[2] + a[2]),
        (t[3] = n[3] + a[3]),
        (t[4] = n[4] + a[4]),
        (t[5] = n[5] + a[5]),
        (t[6] = n[6] + a[6]),
        (t[7] = n[7] + a[7]),
        t
      );
    },
    multiply: bn,
    mul: mn,
    scale: function (t, n, a) {
      return (
        (t[0] = n[0] * a),
        (t[1] = n[1] * a),
        (t[2] = n[2] * a),
        (t[3] = n[3] * a),
        (t[4] = n[4] * a),
        (t[5] = n[5] * a),
        (t[6] = n[6] * a),
        (t[7] = n[7] * a),
        t
      );
    },
    dot: dn,
    lerp: function (t, n, a, r) {
      var u = 1 - r;
      return (
        dn(n, a) < 0 && (r = -r),
        (t[0] = n[0] * u + a[0] * r),
        (t[1] = n[1] * u + a[1] * r),
        (t[2] = n[2] * u + a[2] * r),
        (t[3] = n[3] * u + a[3] * r),
        (t[4] = n[4] * u + a[4] * r),
        (t[5] = n[5] * u + a[5] * r),
        (t[6] = n[6] * u + a[6] * r),
        (t[7] = n[7] * u + a[7] * r),
        t
      );
    },
    invert: function (t, n) {
      var a = yn(n);
      return (
        (t[0] = -n[0] / a),
        (t[1] = -n[1] / a),
        (t[2] = -n[2] / a),
        (t[3] = n[3] / a),
        (t[4] = -n[4] / a),
        (t[5] = -n[5] / a),
        (t[6] = -n[6] / a),
        (t[7] = n[7] / a),
        t
      );
    },
    conjugate: function (t, n) {
      return (
        (t[0] = -n[0]),
        (t[1] = -n[1]),
        (t[2] = -n[2]),
        (t[3] = n[3]),
        (t[4] = -n[4]),
        (t[5] = -n[5]),
        (t[6] = -n[6]),
        (t[7] = n[7]),
        t
      );
    },
    length: xn,
    len: pn,
    squaredLength: yn,
    sqrLen: qn,
    normalize: function (t, n) {
      var a = yn(n);
      if (a > 0) {
        a = Math.sqrt(a);
        var r = n[0] / a,
          u = n[1] / a,
          e = n[2] / a,
          o = n[3] / a,
          i = n[4],
          c = n[5],
          h = n[6],
          s = n[7],
          M = r * i + u * c + e * h + o * s;
        (t[0] = r),
          (t[1] = u),
          (t[2] = e),
          (t[3] = o),
          (t[4] = (i - r * M) / a),
          (t[5] = (c - u * M) / a),
          (t[6] = (h - e * M) / a),
          (t[7] = (s - o * M) / a);
      }
      return t;
    },
    str: function (t) {
      return (
        "quat2(" +
        t[0] +
        ", " +
        t[1] +
        ", " +
        t[2] +
        ", " +
        t[3] +
        ", " +
        t[4] +
        ", " +
        t[5] +
        ", " +
        t[6] +
        ", " +
        t[7] +
        ")"
      );
    },
    exactEquals: function (t, n) {
      return (
        t[0] === n[0] &&
        t[1] === n[1] &&
        t[2] === n[2] &&
        t[3] === n[3] &&
        t[4] === n[4] &&
        t[5] === n[5] &&
        t[6] === n[6] &&
        t[7] === n[7]
      );
    },
    equals: function (t, a) {
      var r = t[0],
        u = t[1],
        e = t[2],
        o = t[3],
        i = t[4],
        c = t[5],
        h = t[6],
        s = t[7],
        M = a[0],
        f = a[1],
        l = a[2],
        v = a[3],
        b = a[4],
        m = a[5],
        d = a[6],
        x = a[7];
      return (
        Math.abs(r - M) <= n * Math.max(1, Math.abs(r), Math.abs(M)) &&
        Math.abs(u - f) <= n * Math.max(1, Math.abs(u), Math.abs(f)) &&
        Math.abs(e - l) <= n * Math.max(1, Math.abs(e), Math.abs(l)) &&
        Math.abs(o - v) <= n * Math.max(1, Math.abs(o), Math.abs(v)) &&
        Math.abs(i - b) <= n * Math.max(1, Math.abs(i), Math.abs(b)) &&
        Math.abs(c - m) <= n * Math.max(1, Math.abs(c), Math.abs(m)) &&
        Math.abs(h - d) <= n * Math.max(1, Math.abs(h), Math.abs(d)) &&
        Math.abs(s - x) <= n * Math.max(1, Math.abs(s), Math.abs(x))
      );
    },
  });
  function An() {
    var t = new a(2);
    return a != Float32Array && ((t[0] = 0), (t[1] = 0)), t;
  }
  function wn(t, n, a) {
    return (t[0] = n[0] - a[0]), (t[1] = n[1] - a[1]), t;
  }
  function Rn(t, n, a) {
    return (t[0] = n[0] * a[0]), (t[1] = n[1] * a[1]), t;
  }
  function zn(t, n, a) {
    return (t[0] = n[0] / a[0]), (t[1] = n[1] / a[1]), t;
  }
  function Pn(t, n) {
    var a = n[0] - t[0],
      r = n[1] - t[1];
    return Math.hypot(a, r);
  }
  function jn(t, n) {
    var a = n[0] - t[0],
      r = n[1] - t[1];
    return a * a + r * r;
  }
  function In(t) {
    var n = t[0],
      a = t[1];
    return Math.hypot(n, a);
  }
  function Sn(t) {
    var n = t[0],
      a = t[1];
    return n * n + a * a;
  }
  var En = In,
    On = wn,
    Tn = Rn,
    Dn = zn,
    Fn = Pn,
    Ln = jn,
    Vn = Sn,
    Qn = (function () {
      var t = An();
      return function (n, a, r, u, e, o) {
        var i, c;
        for (
          a || (a = 2),
            r || (r = 0),
            c = u ? Math.min(u * a + r, n.length) : n.length,
            i = r;
          i < c;
          i += a
        )
          (t[0] = n[i]),
            (t[1] = n[i + 1]),
            e(t, t, o),
            (n[i] = t[0]),
            (n[i + 1] = t[1]);
        return n;
      };
    })(),
    Yn = Object.freeze({
      create: An,
      clone: function (t) {
        var n = new a(2);
        return (n[0] = t[0]), (n[1] = t[1]), n;
      },
      fromValues: function (t, n) {
        var r = new a(2);
        return (r[0] = t), (r[1] = n), r;
      },
      copy: function (t, n) {
        return (t[0] = n[0]), (t[1] = n[1]), t;
      },
      set: function (t, n, a) {
        return (t[0] = n), (t[1] = a), t;
      },
      add: function (t, n, a) {
        return (t[0] = n[0] + a[0]), (t[1] = n[1] + a[1]), t;
      },
      subtract: wn,
      multiply: Rn,
      divide: zn,
      ceil: function (t, n) {
        return (t[0] = Math.ceil(n[0])), (t[1] = Math.ceil(n[1])), t;
      },
      floor: function (t, n) {
        return (t[0] = Math.floor(n[0])), (t[1] = Math.floor(n[1])), t;
      },
      min: function (t, n, a) {
        return (t[0] = Math.min(n[0], a[0])), (t[1] = Math.min(n[1], a[1])), t;
      },
      max: function (t, n, a) {
        return (t[0] = Math.max(n[0], a[0])), (t[1] = Math.max(n[1], a[1])), t;
      },
      round: function (t, n) {
        return (t[0] = Math.round(n[0])), (t[1] = Math.round(n[1])), t;
      },
      scale: function (t, n, a) {
        return (t[0] = n[0] * a), (t[1] = n[1] * a), t;
      },
      scaleAndAdd: function (t, n, a, r) {
        return (t[0] = n[0] + a[0] * r), (t[1] = n[1] + a[1] * r), t;
      },
      distance: Pn,
      squaredDistance: jn,
      length: In,
      squaredLength: Sn,
      negate: function (t, n) {
        return (t[0] = -n[0]), (t[1] = -n[1]), t;
      },
      inverse: function (t, n) {
        return (t[0] = 1 / n[0]), (t[1] = 1 / n[1]), t;
      },
      normalize: function (t, n) {
        var a = n[0],
          r = n[1],
          u = a * a + r * r;
        return (
          u > 0 && (u = 1 / Math.sqrt(u)),
          (t[0] = n[0] * u),
          (t[1] = n[1] * u),
          t
        );
      },
      dot: function (t, n) {
        return t[0] * n[0] + t[1] * n[1];
      },
      cross: function (t, n, a) {
        var r = n[0] * a[1] - n[1] * a[0];
        return (t[0] = t[1] = 0), (t[2] = r), t;
      },
      lerp: function (t, n, a, r) {
        var u = n[0],
          e = n[1];
        return (t[0] = u + r * (a[0] - u)), (t[1] = e + r * (a[1] - e)), t;
      },
      random: function (t, n) {
        n = n || 1;
        var a = 2 * r() * Math.PI;
        return (t[0] = Math.cos(a) * n), (t[1] = Math.sin(a) * n), t;
      },
      transformMat2: function (t, n, a) {
        var r = n[0],
          u = n[1];
        return (t[0] = a[0] * r + a[2] * u), (t[1] = a[1] * r + a[3] * u), t;
      },
      transformMat2d: function (t, n, a) {
        var r = n[0],
          u = n[1];
        return (
          (t[0] = a[0] * r + a[2] * u + a[4]),
          (t[1] = a[1] * r + a[3] * u + a[5]),
          t
        );
      },
      transformMat3: function (t, n, a) {
        var r = n[0],
          u = n[1];
        return (
          (t[0] = a[0] * r + a[3] * u + a[6]),
          (t[1] = a[1] * r + a[4] * u + a[7]),
          t
        );
      },
      transformMat4: function (t, n, a) {
        var r = n[0],
          u = n[1];
        return (
          (t[0] = a[0] * r + a[4] * u + a[12]),
          (t[1] = a[1] * r + a[5] * u + a[13]),
          t
        );
      },
      rotate: function (t, n, a, r) {
        var u = n[0] - a[0],
          e = n[1] - a[1],
          o = Math.sin(r),
          i = Math.cos(r);
        return (t[0] = u * i - e * o + a[0]), (t[1] = u * o + e * i + a[1]), t;
      },
      angle: function (t, n) {
        var a = t[0],
          r = t[1],
          u = n[0],
          e = n[1],
          o = a * a + r * r;
        o > 0 && (o = 1 / Math.sqrt(o));
        var i = u * u + e * e;
        i > 0 && (i = 1 / Math.sqrt(i));
        var c = (a * u + r * e) * o * i;
        return c > 1 ? 0 : c < -1 ? Math.PI : Math.acos(c);
      },
      zero: function (t) {
        return (t[0] = 0), (t[1] = 0), t;
      },
      str: function (t) {
        return "vec2(" + t[0] + ", " + t[1] + ")";
      },
      exactEquals: function (t, n) {
        return t[0] === n[0] && t[1] === n[1];
      },
      equals: function (t, a) {
        var r = t[0],
          u = t[1],
          e = a[0],
          o = a[1];
        return (
          Math.abs(r - e) <= n * Math.max(1, Math.abs(r), Math.abs(e)) &&
          Math.abs(u - o) <= n * Math.max(1, Math.abs(u), Math.abs(o))
        );
      },
      len: En,
      sub: On,
      mul: Tn,
      div: Dn,
      dist: Fn,
      sqrDist: Ln,
      sqrLen: Vn,
      forEach: Qn,
    });
  (t.glMatrix = e),
    (t.mat2 = s),
    (t.mat2d = b),
    (t.mat3 = q),
    (t.mat4 = E),
    (t.quat = sn),
    (t.quat2 = gn),
    (t.vec2 = Yn),
    (t.vec3 = $),
    (t.vec4 = Pt),
    Object.defineProperty(t, "__esModule", { value: !0 });
});

// ["glMatrix", "mat2", "mat2d", "mat3", "mat4", "quat", "quat2", "vec2", "vec3", "vec4"]
window.glMatrix = glMatrix;
window.mat2 = glMatrix.mat2;
window.mat2d = glMatrix.mat2d;
window.mat3 = glMatrix.mat3;
window.mat4 = glMatrix.mat4;
window.quat = glMatrix.quat;
window.quat2 = glMatrix.quat2;
window.vec2 = glMatrix.vec2;
window.vec3 = glMatrix.vec3;
window.vec4 = glMatrix.vec4;

var CABLES = CABLES || {};
CABLES.build = {
  timestamp: 1701939081153,
  created: "2023-12-07T08:51:21.153Z",
  git: {
    branch: "master",
    commit: "4bcad0e1f8525d4d59faa49644f419195eaf3c3c",
    date: "2023-12-07T08:51:03.000Z",
    message: "live changes",
  },
};
if (!CABLES.exportedPatches) CABLES.exportedPatches = {};
CABLES.exportedPatches["2myFLH"] = {
  ops: [
    {
      id: "c4nbn4unw",
      uiAttribs: { subPatch: "d9d56413-14d4-4bc4-aa2c-67e1f8fe2dbf" },
      portsIn: [
        { name: "Coordinates index", value: 0 },
        { name: "Coordinates", value: "-1 to 1" },
        { name: "Area index", value: 0 },
        { name: "Area", value: "Canvas" },
        { name: "flip y", value: true },
        { name: "right click prevent default", value: false },
        { name: "Touch support", value: false },
        { name: "Active", value: true },
      ],
      portsOut: [
        {
          name: "x",
          links: [
            {
              portIn: "value",
              portOut: "x",
              objIn: "7b39eacc-6305-4549-9220-f95f570c738d",
              objOut: "c4nbn4unw",
            },
          ],
        },
        {
          name: "y",
          links: [
            {
              portIn: "value",
              portOut: "y",
              objIn: "7ripfb4hq",
              objOut: "c4nbn4unw",
            },
          ],
        },
        { name: "Button is down", value: 0 },
        { name: "Mouse is hovering", value: 0 },
      ],
      objName: "Ops.Devices.Mouse.Mouse_v3",
    },
    {
      id: "7b39eacc-6305-4549-9220-f95f570c738d",
      uiAttribs: { subPatch: "d9d56413-14d4-4bc4-aa2c-67e1f8fe2dbf" },
      portsIn: [
        { name: "old min", value: -1 },
        { name: "old max", value: 1 },
        { name: "new min", value: 0 },
        { name: "new max", value: 20 },
        { name: "Easing index", value: 0 },
        { name: "Easing", value: "Linear" },
      ],
      portsOut: [
        {
          name: "result",
          links: [
            {
              portIn: "number1",
              portOut: "result",
              objIn: "658cc009-6a0c-43ac-a52b-8dd5cdc024a1",
              objOut: "7b39eacc-6305-4549-9220-f95f570c738d",
            },
          ],
        },
      ],
      objName: "Ops.Math.MapRange",
    },
    {
      id: "7ripfb4hq",
      uiAttribs: { subPatch: "d9d56413-14d4-4bc4-aa2c-67e1f8fe2dbf" },
      portsIn: [
        { name: "old min", value: -1 },
        { name: "old max", value: 1 },
        { name: "new min", value: 0 },
        { name: "new max", value: 20 },
        { name: "Easing index", value: 0 },
        { name: "Easing", value: "Linear" },
      ],
      portsOut: [
        {
          name: "result",
          links: [
            {
              portIn: "number1",
              portOut: "result",
              objIn: "a53ce4a5-fe8a-4e4a-ae88-bb7bd84648d9",
              objOut: "7ripfb4hq",
            },
          ],
        },
      ],
      objName: "Ops.Math.MapRange",
    },
    {
      id: "658cc009-6a0c-43ac-a52b-8dd5cdc024a1",
      uiAttribs: { subPatch: "d9d56413-14d4-4bc4-aa2c-67e1f8fe2dbf" },
      portsIn: [{ name: "number2", value: 20.22 }],
      portsOut: [
        {
          name: "result",
          links: [
            {
              portIn: "number1",
              portOut: "result",
              objIn: "sead3j9rf",
              objOut: "658cc009-6a0c-43ac-a52b-8dd5cdc024a1",
            },
          ],
        },
      ],
      objName: "Ops.Math.Sum",
    },
    {
      id: "a53ce4a5-fe8a-4e4a-ae88-bb7bd84648d9",
      uiAttribs: { subPatch: "d9d56413-14d4-4bc4-aa2c-67e1f8fe2dbf" },
      portsIn: [{ name: "number2", value: -22.06 }],
      portsOut: [
        {
          name: "result",
          links: [
            {
              portIn: "number1",
              portOut: "result",
              objIn: "xd1ax0y1d",
              objOut: "a53ce4a5-fe8a-4e4a-ae88-bb7bd84648d9",
            },
          ],
        },
      ],
      objName: "Ops.Math.Sum",
    },
    {
      id: "g135m25tl",
      uiAttribs: { subPatch: "d9d56413-14d4-4bc4-aa2c-67e1f8fe2dbf" },
      portsIn: [
        { name: "Separate inc/dec", value: false },
        { name: "Inc factor", value: 100, title: "Inc/Dec factor" },
        { name: "Dec factor", value: 4 },
      ],
      portsOut: [{ name: "Result", value: 0 }],
      objName: "Ops.Anim.Smooth",
    },
    {
      id: "dk000ttew",
      uiAttribs: { subPatch: "d9d56413-14d4-4bc4-aa2c-67e1f8fe2dbf" },
      portsIn: [
        { name: "Separate inc/dec", value: false },
        { name: "Inc factor", value: 100, title: "Inc/Dec factor" },
        { name: "Dec factor", value: 4 },
      ],
      portsOut: [{ name: "Result", value: 0 }],
      objName: "Ops.Anim.Smooth",
    },
    {
      id: "d7520180-d502-4253-b524-862489fa03ae",
      uiAttribs: { subPatch: "d9d56413-14d4-4bc4-aa2c-67e1f8fe2dbf" },
      portsOut: [
        {
          name: "Changed",
          links: [
            {
              portIn: "Trigger",
              portOut: "Changed",
              objIn: "e451ab65-a112-47be-b831-d3048cf11326",
              objOut: "d7520180-d502-4253-b524-862489fa03ae",
            },
          ],
        },
        { name: "Result", value: "New String" },
      ],
      objName: "Ops.Trigger.TriggerOnChangeString",
    },
    {
      id: "7ec3bd86-a299-42e3-beae-59256abd844f",
      uiAttribs: { subPatch: "d9d56413-14d4-4bc4-aa2c-67e1f8fe2dbf" },
      portsIn: [
        { name: "min", value: -10 },
        { name: "max", value: 10 },
        { name: "Integer", value: false },
        { name: "No consecutive duplicates", value: true },
      ],
      portsOut: [
        {
          name: "result",
          links: [
            {
              portIn: "number2",
              portOut: "result",
              objIn: "sead3j9rf",
              objOut: "7ec3bd86-a299-42e3-beae-59256abd844f",
            },
          ],
        },
      ],
      objName: "Ops.Math.TriggerRandomNumber_v2",
    },
    {
      id: "e451ab65-a112-47be-b831-d3048cf11326",
      uiAttribs: { subPatch: "d9d56413-14d4-4bc4-aa2c-67e1f8fe2dbf" },
      portsOut: [
        {
          name: "Next",
          links: [
            {
              portIn: "Generate",
              portOut: "Next",
              objIn: "7ec3bd86-a299-42e3-beae-59256abd844f",
              objOut: "e451ab65-a112-47be-b831-d3048cf11326",
            },
            {
              portIn: "Generate",
              portOut: "Next",
              objIn: "6c2tkdtx2",
              objOut: "e451ab65-a112-47be-b831-d3048cf11326",
            },
            {
              portIn: "Generate",
              portOut: "Next",
              objIn: "wf8or6sx5",
              objOut: "e451ab65-a112-47be-b831-d3048cf11326",
            },
          ],
        },
      ],
      objName: "Ops.Trigger.TriggerButton",
    },
    {
      id: "sead3j9rf",
      uiAttribs: { subPatch: "d9d56413-14d4-4bc4-aa2c-67e1f8fe2dbf" },
      portsOut: [
        {
          name: "result",
          links: [
            {
              portIn: "Value",
              portOut: "result",
              objIn: "g135m25tl",
              objOut: "sead3j9rf",
            },
          ],
        },
      ],
      objName: "Ops.Math.Sum",
    },
    {
      id: "6c2tkdtx2",
      uiAttribs: { subPatch: "d9d56413-14d4-4bc4-aa2c-67e1f8fe2dbf" },
      portsIn: [
        { name: "min", value: -10 },
        { name: "max", value: 10 },
        { name: "Integer", value: false },
        { name: "No consecutive duplicates", value: true },
      ],
      portsOut: [
        {
          name: "result",
          links: [
            {
              portIn: "number2",
              portOut: "result",
              objIn: "xd1ax0y1d",
              objOut: "6c2tkdtx2",
            },
          ],
        },
      ],
      objName: "Ops.Math.TriggerRandomNumber_v2",
    },
    {
      id: "xd1ax0y1d",
      uiAttribs: { subPatch: "d9d56413-14d4-4bc4-aa2c-67e1f8fe2dbf" },
      portsOut: [
        {
          name: "result",
          links: [
            {
              portIn: "Value",
              portOut: "result",
              objIn: "dk000ttew",
              objOut: "xd1ax0y1d",
            },
          ],
        },
      ],
      objName: "Ops.Math.Sum",
    },
    {
      id: "wf8or6sx5",
      uiAttribs: { subPatch: "d9d56413-14d4-4bc4-aa2c-67e1f8fe2dbf" },
      portsIn: [
        { name: "min", value: -10 },
        { name: "max", value: 10 },
        { name: "Integer", value: false },
        { name: "No consecutive duplicates", value: true },
      ],
      portsOut: [
        {
          name: "result",
          links: [
            {
              portIn: "number1",
              portOut: "result",
              objIn: "2nwqj122c",
              objOut: "wf8or6sx5",
            },
          ],
        },
      ],
      objName: "Ops.Math.TriggerRandomNumber_v2",
    },
    {
      id: "vwgc5nyev",
      uiAttribs: { subPatch: "d9d56413-14d4-4bc4-aa2c-67e1f8fe2dbf" },
      portsIn: [
        { name: "Separate inc/dec", value: false },
        { name: "Inc factor", value: 100, title: "Inc/Dec factor" },
        { name: "Dec factor", value: 4 },
      ],
      portsOut: [{ name: "Result", value: 0 }],
      objName: "Ops.Anim.Smooth",
    },
    {
      id: "2nwqj122c",
      uiAttribs: { subPatch: "d9d56413-14d4-4bc4-aa2c-67e1f8fe2dbf" },
      portsIn: [{ name: "number2", value: -51.27 }],
      portsOut: [
        {
          name: "result",
          links: [
            {
              portIn: "Value",
              portOut: "result",
              objIn: "vwgc5nyev",
              objOut: "2nwqj122c",
            },
          ],
        },
      ],
      objName: "Ops.Math.Sum",
    },
    {
      id: "otdiewxu8",
      uiAttribs: { subPatch: "d9d56413-14d4-4bc4-aa2c-67e1f8fe2dbf" },
      portsIn: [{ name: "Variable", value: "imageUrl" }],
      portsOut: [
        {
          name: "Value",
          links: [
            {
              portIn: "String",
              portOut: "Value",
              objIn: "d7520180-d502-4253-b524-862489fa03ae",
              objOut: "otdiewxu8",
            },
          ],
        },
      ],
      objName: "Ops.Vars.VarGetString",
    },
    {
      id: "1912e32f-b447-4384-adf0-44cc04b0dec7",
      uiAttribs: { subPatch: "d9d56413-14d4-4bc4-aa2c-67e1f8fe2dbf" },
      portsOut: [{ name: "create port", value: 0 }],
      objName: "Ops.Ui.PatchInput",
    },
    {
      id: "38674664-f35b-40fc-9232-f3343d361ea9",
      uiAttribs: { subPatch: "d9d56413-14d4-4bc4-aa2c-67e1f8fe2dbf" },
      portsIn: [{ name: "create port", value: 0 }],
      objName: "Ops.Ui.PatchOutput",
    },
    {
      id: "y1ek6ethe",
      uiAttribs: {},
      portsIn: [
        { name: "FPS Limit", value: 60 },
        { name: "Reduce FPS not focussed", value: false },
        { name: "Reduce FPS loading", value: false },
        { name: "Clear", value: false },
        { name: "ClearAlpha", value: false },
        { name: "Fullscreen Button", value: false },
        { name: "Hires Displays", value: false },
        { name: "Pixel Unit index", value: 0 },
        { name: "Pixel Unit", value: "Display" },
      ],
      portsOut: [
        {
          name: "trigger",
          links: [
            {
              portIn: "exe",
              portOut: "trigger",
              objIn: "hdbfyi4so",
              objOut: "y1ek6ethe",
            },
          ],
        },
        { name: "width", value: 694 },
        { name: "height", value: 1080 },
      ],
      objName: "Ops.Gl.MainLoop",
    },
    {
      id: "2ntt23rk3",
      uiAttribs: { subPatch: "fe4bc287-1aa5-4ba8-98bc-8f2bdc690aef" },
      portsOut: [
        {
          name: "trigger",
          links: [
            {
              portIn: "render",
              portOut: "trigger",
              objIn: "ycerb854n",
              objOut: "2ntt23rk3",
            },
          ],
        },
        { name: "index", value: 26 },
        {
          name: "value",
          links: [
            {
              portIn: "Data",
              portOut: "value",
              objIn: "wlexf7y4c",
              objOut: "2ntt23rk3",
            },
            {
              portIn: "Data",
              portOut: "value",
              objIn: "s4q4ruy44",
              objOut: "2ntt23rk3",
            },
            {
              portIn: "Data",
              portOut: "value",
              objIn: "l7dfseihc",
              objOut: "2ntt23rk3",
            },
            {
              portIn: "Data",
              portOut: "value",
              objIn: "u9xdonso0",
              objOut: "2ntt23rk3",
            },
            {
              portIn: "Data",
              portOut: "value",
              objIn: "ak01572n2",
              objOut: "2ntt23rk3",
            },
            {
              portIn: "Data",
              portOut: "value",
              objIn: "shz5fecuv",
              objOut: "2ntt23rk3",
            },
            {
              portIn: "Data",
              portOut: "value",
              objIn: "p4f215dps",
              objOut: "2ntt23rk3",
            },
            {
              portIn: "Data",
              portOut: "value",
              objIn: "y46v1327m",
              objOut: "2ntt23rk3",
            },
          ],
        },
      ],
      objName: "Ops.Array.ArrayIteratorObjects",
    },
    {
      id: "ycerb854n",
      uiAttribs: { subPatch: "fe4bc287-1aa5-4ba8-98bc-8f2bdc690aef" },
      portsIn: [
        { name: "scale", value: 1 },
        { name: "rotX", value: 0 },
        { name: "rotZ", value: 0 },
      ],
      portsOut: [
        {
          name: "trigger",
          links: [
            {
              portIn: "Execute",
              portOut: "trigger",
              objIn: "pgm4y2zsw",
              objOut: "ycerb854n",
            },
          ],
        },
      ],
      objName: "Ops.Gl.Matrix.Transform",
    },
    {
      id: "3e9jbf60v",
      uiAttribs: {},
      portsOut: [
        {
          name: "trigger",
          links: [
            {
              portIn: "in0 Ops.Gl.Matrix.TransformView trigger",
              portOut: "trigger",
              objIn: "09j1w8t67",
              objOut: "3e9jbf60v",
            },
          ],
        },
      ],
      objName: "Ops.Gl.Matrix.TransformView",
    },
    {
      id: "wlexf7y4c",
      uiAttribs: { subPatch: "fe4bc287-1aa5-4ba8-98bc-8f2bdc690aef" },
      portsIn: [{ name: "Key", value: "P(0)" }],
      portsOut: [
        {
          name: "Result",
          links: [
            {
              portIn: "posX",
              portOut: "Result",
              objIn: "ycerb854n",
              objOut: "wlexf7y4c",
            },
          ],
        },
        { name: "Found", value: 1 },
      ],
      objName: "Ops.Json.ObjectGetNumber_v2",
    },
    {
      id: "s4q4ruy44",
      uiAttribs: { subPatch: "fe4bc287-1aa5-4ba8-98bc-8f2bdc690aef" },
      portsIn: [{ name: "Key", value: "P(1)" }],
      portsOut: [
        {
          name: "Result",
          links: [
            {
              portIn: "posY",
              portOut: "Result",
              objIn: "ycerb854n",
              objOut: "s4q4ruy44",
            },
          ],
        },
        { name: "Found", value: 1 },
      ],
      objName: "Ops.Json.ObjectGetNumber_v2",
    },
    {
      id: "l7dfseihc",
      uiAttribs: { subPatch: "fe4bc287-1aa5-4ba8-98bc-8f2bdc690aef" },
      portsIn: [{ name: "Key", value: "P(2)" }],
      portsOut: [
        {
          name: "Result",
          links: [
            {
              portIn: "posZ",
              portOut: "Result",
              objIn: "ycerb854n",
              objOut: "l7dfseihc",
            },
          ],
        },
        { name: "Found", value: 1 },
      ],
      objName: "Ops.Json.ObjectGetNumber_v2",
    },
    {
      id: "u9xdonso0",
      uiAttribs: { subPatch: "fe4bc287-1aa5-4ba8-98bc-8f2bdc690aef" },
      portsIn: [{ name: "Key", value: "id" }],
      portsOut: [
        {
          name: "Result",
          links: [
            {
              portIn: "Switch Value",
              portOut: "Result",
              objIn: "412cpvr3l",
              objOut: "u9xdonso0",
            },
            {
              portIn: "number1",
              portOut: "Result",
              objIn: "zuplev70x",
              objOut: "u9xdonso0",
            },
            {
              portIn: "number1",
              portOut: "Result",
              objIn: "sk66l3rre",
              objOut: "u9xdonso0",
            },
          ],
        },
        { name: "Found", value: 1 },
      ],
      objName: "Ops.Json.ObjectGetNumber_v2",
    },
    {
      id: "412cpvr3l",
      uiAttribs: { subPatch: "fe4bc287-1aa5-4ba8-98bc-8f2bdc690aef" },
      portsOut: [
        {
          name: "Next Trigger",
          links: [
            {
              portIn: "out1 Ops.Trigger.RouteTrigger Next Trigger",
              portOut: "Next Trigger",
              objIn: "vuczmz7aq",
              objOut: "412cpvr3l",
            },
          ],
        },
        { name: "Switched Value", value: 2 },
        {
          name: "Trigger 1",
          links: [
            {
              portIn: "Render",
              portOut: "Trigger 1",
              objIn: "2zyh6jndg",
              objOut: "412cpvr3l",
            },
          ],
        },
        {
          name: "Trigger 2",
          links: [
            {
              portIn: "Render",
              portOut: "Trigger 2",
              objIn: "cumryawca",
              objOut: "412cpvr3l",
            },
          ],
        },
        {
          name: "Trigger 3",
          links: [
            {
              portIn: "Render",
              portOut: "Trigger 3",
              objIn: "wlciv31ho",
              objOut: "412cpvr3l",
            },
          ],
        },
        {
          name: "Trigger 4",
          links: [
            {
              portIn: "render",
              portOut: "Trigger 4",
              objIn: "9z1h5v2ud",
              objOut: "412cpvr3l",
            },
          ],
        },
        {
          name: "Trigger 5",
          links: [
            {
              portIn: "render",
              portOut: "Trigger 5",
              objIn: "j8jdjbzny",
              objOut: "412cpvr3l",
            },
          ],
        },
      ],
      objName: "Ops.Trigger.RouteTrigger",
    },
    {
      id: "84fqupsq5",
      uiAttribs: {},
      portsIn: [
        { name: "projection mode index", value: 0 },
        { name: "projection mode", value: "ortogonal" },
        { name: "frustum near", value: 0.01 },
        { name: "frustum far", value: 5e3 },
        { name: "fov", value: 45 },
        { name: "Auto Aspect Ratio", value: true },
        { name: "Aspect Ratio", value: 1 },
        { name: "eye X", value: 0 },
        { name: "eye Y", value: 0 },
        { name: "eye Z", value: 5 },
        { name: "center X", value: 0 },
        { name: "center Y", value: 0 },
        { name: "center Z", value: 0 },
        { name: "truck", value: 0 },
        { name: "boom", value: 0 },
        { name: "dolly", value: 0 },
        { name: "tilt", value: 0 },
        { name: "pan", value: 0 },
        { name: "roll", value: 0 },
      ],
      portsOut: [
        {
          name: "trigger",
          links: [
            {
              portIn: "Execute",
              portOut: "trigger",
              objIn: "whp28n8pi",
              objOut: "84fqupsq5",
            },
          ],
        },
        { name: "Aspect", value: 0.6425925925925926 },
      ],
      objName: "Ops.Gl.Matrix.Camera",
    },
    {
      id: "ak01572n2",
      uiAttribs: { subPatch: "fe4bc287-1aa5-4ba8-98bc-8f2bdc690aef" },
      portsIn: [{ name: "Key", value: "groups" }],
      portsOut: [
        {
          name: "Result",
          links: [
            {
              portIn: "value",
              portOut: "Result",
              objIn: "29knikgx6",
              objOut: "ak01572n2",
            },
          ],
        },
        { name: "Found", value: 1 },
      ],
      objName: "Ops.Json.ObjectGetNumber_v2",
    },
    {
      id: "29knikgx6",
      uiAttribs: { subPatch: "fe4bc287-1aa5-4ba8-98bc-8f2bdc690aef" },
      portsIn: [
        { name: "old min", value: 0 },
        { name: "old max", value: 1 },
        { name: "new min", value: 0 },
        { name: "new max", value: 1 },
        { name: "Easing index", value: 0 },
        { name: "Easing", value: "Linear" },
      ],
      portsOut: [
        {
          name: "result",
          links: [
            {
              portIn: "Switch Value",
              portOut: "result",
              objIn: "pgm4y2zsw",
              objOut: "29knikgx6",
            },
          ],
        },
      ],
      objName: "Ops.Math.MapRange",
    },
    {
      id: "wlciv31ho",
      uiAttribs: { subPatch: "fe4bc287-1aa5-4ba8-98bc-8f2bdc690aef" },
      portsIn: [
        { name: "data", value: "" },
        { name: "glb File", value: "ShapeBox.glb", display: "file" },
        { name: "Draw", value: true },
        { name: "Camera index", value: 0 },
        { name: "Camera", value: "None" },
        { name: "Animation", value: "" },
        { name: "Center index", value: 1 },
        { name: "Center", value: "XYZ" },
        { name: "Rescale", value: true },
        { name: "Rescale Size", value: 0.5 },
        { name: "Time", value: 0 },
        { name: "Sync to timeline", value: false },
        { name: "Loop", value: true },
        { name: "Normals Format index", value: 0 },
        { name: "Normals Format", value: "XYZ" },
        { name: "Vertices Format index", value: 0 },
        { name: "Vertices Format", value: "XYZ" },
        { name: "Calc Normals index", value: 0 },
        { name: "Calc Normals", value: "Auto" },
        { name: "Hide Nodes", value: 0 },
        { name: "Use Material Properties", value: false },
        { name: "Active", value: true },
      ],
      portsOut: [
        { name: "Generator", value: "Khronos glTF Blender I/O v3.4.50" },
        { name: "GLTF Version", value: 2 },
        { name: "Anim Length", value: 0 },
        { name: "Anim Time", value: 0 },
        { name: "Loading", value: false },
      ],
      objName: "Ops.Gl.GLTF.GltfScene_v4",
    },
    {
      id: "2zyh6jndg",
      uiAttribs: { subPatch: "fe4bc287-1aa5-4ba8-98bc-8f2bdc690aef" },
      portsIn: [
        { name: "data", value: "" },
        {
          name: "glb File",
          value: "ShapeMidBoxLower_absCenter.glb",
          display: "file",
        },
        { name: "Draw", value: true },
        { name: "Camera index", value: 0 },
        { name: "Camera", value: "None" },
        { name: "Animation", value: "" },
        { name: "Center index", value: 1 },
        { name: "Center", value: "None" },
        { name: "Rescale", value: true },
        { name: "Rescale Size", value: 0.5 },
        { name: "Time", value: 0 },
        { name: "Sync to timeline", value: false },
        { name: "Loop", value: true },
        { name: "Normals Format index", value: 0 },
        { name: "Normals Format", value: "XYZ" },
        { name: "Vertices Format index", value: 0 },
        { name: "Vertices Format", value: "XYZ" },
        { name: "Calc Normals index", value: 0 },
        { name: "Calc Normals", value: "Auto" },
        { name: "Hide Nodes", value: 0 },
        { name: "Use Material Properties", value: false },
        { name: "Active", value: true },
      ],
      portsOut: [
        { name: "Generator", value: "Khronos glTF Blender I/O v3.4.50" },
        { name: "GLTF Version", value: 2 },
        { name: "Anim Length", value: 0 },
        { name: "Anim Time", value: 0 },
        { name: "Loading", value: false },
      ],
      objName: "Ops.Gl.GLTF.GltfScene_v4",
    },
    {
      id: "wc441c2ne",
      uiAttribs: { subPatch: "fe4bc287-1aa5-4ba8-98bc-8f2bdc690aef" },
      portsIn: [
        { name: "data", value: "" },
        { name: "glb File", value: "ShapeShearBox.glb", display: "file" },
        { name: "Draw", value: true },
        { name: "Camera index", value: 0 },
        { name: "Camera", value: "None" },
        { name: "Animation", value: "" },
        { name: "Center index", value: 1 },
        { name: "Center", value: "None" },
        { name: "Rescale", value: true },
        { name: "Rescale Size", value: 0.75 },
        { name: "Time", value: 0 },
        { name: "Sync to timeline", value: false },
        { name: "Loop", value: true },
        { name: "Normals Format index", value: 0 },
        { name: "Normals Format", value: "XYZ" },
        { name: "Vertices Format index", value: 0 },
        { name: "Vertices Format", value: "XYZ" },
        { name: "Calc Normals index", value: 0 },
        { name: "Calc Normals", value: "Auto" },
        { name: "Hide Nodes", value: 0 },
        { name: "Use Material Properties", value: false },
        { name: "Active", value: true },
      ],
      portsOut: [
        { name: "Generator", value: "Khronos glTF Blender I/O v3.4.50" },
        { name: "GLTF Version", value: 2 },
        { name: "Anim Length", value: 0 },
        { name: "Anim Time", value: 0 },
        { name: "Loading", value: false },
      ],
      objName: "Ops.Gl.GLTF.GltfScene_v4",
    },
    {
      id: "9z1h5v2ud",
      uiAttribs: { subPatch: "fe4bc287-1aa5-4ba8-98bc-8f2bdc690aef" },
      portsIn: [
        { name: "posX", value: 0 },
        { name: "posY", value: 0 },
        { name: "posZ", value: 0 },
        { name: "scale", value: 1 },
        { name: "rotX", value: 0 },
        { name: "rotY", value: 90 },
        { name: "rotZ", value: 0 },
      ],
      portsOut: [
        {
          name: "trigger",
          links: [
            {
              portIn: "Render",
              portOut: "trigger",
              objIn: "wc441c2ne",
              objOut: "9z1h5v2ud",
            },
          ],
        },
      ],
      objName: "Ops.Gl.Matrix.Transform",
    },
    {
      id: "j8jdjbzny",
      uiAttribs: { subPatch: "fe4bc287-1aa5-4ba8-98bc-8f2bdc690aef" },
      portsIn: [
        { name: "posX", value: 0 },
        { name: "posY", value: 0 },
        { name: "posZ", value: -0.25 },
        { name: "scale", value: 1 },
        { name: "rotX", value: 0 },
        { name: "rotY", value: 0 },
        { name: "rotZ", value: 0 },
      ],
      portsOut: [
        {
          name: "trigger",
          links: [
            {
              portIn: "Render",
              portOut: "trigger",
              objIn: "wfijf6f7h",
              objOut: "j8jdjbzny",
            },
          ],
        },
      ],
      objName: "Ops.Gl.Matrix.Transform",
    },
    {
      id: "wfijf6f7h",
      uiAttribs: { subPatch: "fe4bc287-1aa5-4ba8-98bc-8f2bdc690aef" },
      portsIn: [
        { name: "data", value: "" },
        { name: "glb File", value: "ShapeShearBoxMin.glb", display: "file" },
        { name: "Draw", value: true },
        { name: "Camera index", value: 0 },
        { name: "Camera", value: "None" },
        { name: "Animation", value: "" },
        { name: "Center index", value: 1 },
        { name: "Center", value: "XYZ" },
        { name: "Rescale", value: true },
        { name: "Rescale Size", value: 0.5 },
        { name: "Time", value: 0 },
        { name: "Sync to timeline", value: false },
        { name: "Loop", value: true },
        { name: "Normals Format index", value: 0 },
        { name: "Normals Format", value: "XYZ" },
        { name: "Vertices Format index", value: 0 },
        { name: "Vertices Format", value: "XYZ" },
        { name: "Calc Normals index", value: 0 },
        { name: "Calc Normals", value: "Auto" },
        { name: "Hide Nodes", value: 0 },
        { name: "Use Material Properties", value: false },
        { name: "Active", value: true },
      ],
      portsOut: [
        { name: "Generator", value: "Khronos glTF Blender I/O v3.4.50" },
        { name: "GLTF Version", value: 2 },
        { name: "Anim Length", value: 0 },
        { name: "Anim Time", value: 0 },
        { name: "Loading", value: false },
      ],
      objName: "Ops.Gl.GLTF.GltfScene_v4",
    },
    {
      id: "shz5fecuv",
      uiAttribs: { subPatch: "fe4bc287-1aa5-4ba8-98bc-8f2bdc690aef" },
      portsIn: [{ name: "Key", value: "N(0)" }],
      portsOut: [
        {
          name: "Result",
          links: [
            {
              portIn: "value",
              portOut: "Result",
              objIn: "47r4v0qha",
              objOut: "shz5fecuv",
            },
          ],
        },
        { name: "Found", value: 1 },
      ],
      objName: "Ops.Json.ObjectGetNumber_v2",
    },
    {
      id: "47r4v0qha",
      uiAttribs: { subPatch: "fe4bc287-1aa5-4ba8-98bc-8f2bdc690aef" },
      portsIn: [
        { name: "old min", value: -1 },
        { name: "old max", value: 1 },
        { name: "new min", value: -180 },
        { name: "new max", value: 0 },
        { name: "Easing index", value: 0 },
        { name: "Easing", value: "Linear" },
      ],
      portsOut: [
        {
          name: "result",
          links: [
            {
              portIn: "number2",
              portOut: "result",
              objIn: "tzfacbc2c",
              objOut: "47r4v0qha",
            },
          ],
        },
      ],
      objName: "Ops.Math.MapRange",
    },
    {
      id: "cumryawca",
      uiAttribs: { subPatch: "fe4bc287-1aa5-4ba8-98bc-8f2bdc690aef" },
      portsIn: [
        { name: "data", value: "" },
        {
          name: "glb File",
          value: "Shape.MidBoxUpper_absCenter.glb",
          display: "file",
        },
        { name: "Draw", value: true },
        { name: "Camera index", value: 0 },
        { name: "Camera", value: "None" },
        { name: "Animation", value: "" },
        { name: "Center index", value: 1 },
        { name: "Center", value: "None" },
        { name: "Rescale", value: true },
        { name: "Rescale Size", value: 0.5 },
        { name: "Time", value: 0 },
        { name: "Sync to timeline", value: false },
        { name: "Loop", value: true },
        { name: "Normals Format index", value: 0 },
        { name: "Normals Format", value: "XYZ" },
        { name: "Vertices Format index", value: 0 },
        { name: "Vertices Format", value: "XYZ" },
        { name: "Calc Normals index", value: 0 },
        { name: "Calc Normals", value: "Auto" },
        { name: "Hide Nodes", value: 0 },
        { name: "Use Material Properties", value: false },
        { name: "Active", value: true },
      ],
      portsOut: [
        { name: "Generator", value: "Khronos glTF Blender I/O v3.4.50" },
        { name: "GLTF Version", value: 2 },
        { name: "Anim Length", value: 0 },
        { name: "Anim Time", value: 0 },
        { name: "Loading", value: false },
      ],
      objName: "Ops.Gl.GLTF.GltfScene_v4",
    },
    {
      id: "zuplev70x",
      uiAttribs: { subPatch: "fe4bc287-1aa5-4ba8-98bc-8f2bdc690aef" },
      portsIn: [{ name: "number2", value: 5 }],
      portsOut: [
        {
          name: "result",
          links: [
            {
              portIn: "number1",
              portOut: "result",
              objIn: "h8278fmwj",
              objOut: "zuplev70x",
            },
          ],
        },
      ],
      objName: "Ops.Math.Compare.Equals",
    },
    {
      id: "p4f215dps",
      uiAttribs: { subPatch: "fe4bc287-1aa5-4ba8-98bc-8f2bdc690aef" },
      portsIn: [{ name: "Key", value: "N(2)" }],
      portsOut: [{ name: "Found", value: 1 }],
      objName: "Ops.Json.ObjectGetNumber_v2",
    },
    {
      id: "y46v1327m",
      uiAttribs: { subPatch: "fe4bc287-1aa5-4ba8-98bc-8f2bdc690aef" },
      portsIn: [{ name: "Key", value: "N(1)" }],
      portsOut: [{ name: "Found", value: 1 }],
      objName: "Ops.Json.ObjectGetNumber_v2",
    },
    {
      id: "tzfacbc2c",
      uiAttribs: { subPatch: "fe4bc287-1aa5-4ba8-98bc-8f2bdc690aef" },
      portsOut: [
        {
          name: "result",
          links: [
            {
              portIn: "rotY",
              portOut: "result",
              objIn: "ycerb854n",
              objOut: "tzfacbc2c",
            },
          ],
        },
      ],
      objName: "Ops.Math.Multiply",
    },
    {
      id: "h8278fmwj",
      uiAttribs: { subPatch: "fe4bc287-1aa5-4ba8-98bc-8f2bdc690aef" },
      portsOut: [
        {
          name: "result",
          links: [
            {
              portIn: "number1",
              portOut: "result",
              objIn: "tzfacbc2c",
              objOut: "h8278fmwj",
            },
          ],
        },
      ],
      objName: "Ops.Math.Sum",
    },
    {
      id: "sk66l3rre",
      uiAttribs: { subPatch: "fe4bc287-1aa5-4ba8-98bc-8f2bdc690aef" },
      portsIn: [{ name: "number2", value: 4 }],
      portsOut: [
        {
          name: "result",
          links: [
            {
              portIn: "number2",
              portOut: "result",
              objIn: "h8278fmwj",
              objOut: "sk66l3rre",
            },
          ],
        },
      ],
      objName: "Ops.Math.Compare.Equals",
    },
    {
      id: "zfaiserj7",
      uiAttribs: { subPatch: "fe4bc287-1aa5-4ba8-98bc-8f2bdc690aef" },
      portsIn: [
        { name: "r", value: 1 },
        { name: "g", value: 1 },
        { name: "b", value: 1 },
        { name: "a", value: 0 },
        { name: "colorizeTexture", value: false },
        { name: "Vertex Colors", value: false },
        { name: "Alpha Mask Source index", value: 0 },
        { name: "Alpha Mask Source", value: "Luminance" },
        { name: "Opacity TexCoords Transform", value: false },
        { name: "Discard Transparent Pixels", value: false },
        { name: "diffuseRepeatX", value: 1 },
        { name: "diffuseRepeatY", value: 1 },
        { name: "Tex Offset X", value: 0 },
        { name: "Tex Offset Y", value: 0 },
        { name: "Crop TexCoords", value: false },
        { name: "billboard", value: false },
      ],
      portsOut: [
        {
          name: "trigger",
          links: [
            {
              portIn: "Execute",
              portOut: "trigger",
              objIn: "412cpvr3l",
              objOut: "zfaiserj7",
            },
          ],
        },
      ],
      objName: "Ops.Gl.Shader.BasicMaterial_v3",
    },
    {
      id: "pgm4y2zsw",
      uiAttribs: { subPatch: "fe4bc287-1aa5-4ba8-98bc-8f2bdc690aef" },
      portsOut: [
        { name: "Switched Value", value: 0 },
        {
          name: "Trigger 0",
          links: [
            {
              portIn: "render",
              portOut: "Trigger 0",
              objIn: "zfaiserj7",
              objOut: "pgm4y2zsw",
            },
          ],
        },
        {
          name: "Trigger 1",
          links: [
            {
              portIn: "Execute",
              portOut: "Trigger 1",
              objIn: "3bkjas95z",
              objOut: "pgm4y2zsw",
            },
          ],
        },
      ],
      objName: "Ops.Trigger.RouteTrigger",
    },
    {
      id: "600tufksy",
      uiAttribs: { subPatch: "0d43ee2c-77f9-426f-94be-83a5661c1c30" },
      portsIn: [
        { name: "Speed", value: 0 },
        { name: "Sync to timeline", value: false },
      ],
      portsOut: [
        {
          name: "Time",
          links: [
            {
              portIn: "number2",
              portOut: "Time",
              objIn: "5dwayxrzz",
              objOut: "600tufksy",
            },
            {
              portIn: "number2",
              portOut: "Time",
              objIn: "reg9vwfcd",
              objOut: "600tufksy",
            },
            {
              portIn: "number1",
              portOut: "Time",
              objIn: "afauxbika",
              objOut: "600tufksy",
            },
          ],
        },
      ],
      objName: "Ops.Anim.Timer_v2",
    },
    {
      id: "5dwayxrzz",
      uiAttribs: { subPatch: "0d43ee2c-77f9-426f-94be-83a5661c1c30" },
      portsOut: [
        {
          name: "result",
          links: [
            {
              portIn: "Value",
              portOut: "result",
              objIn: "gp32r37dt",
              objOut: "5dwayxrzz",
            },
          ],
        },
      ],
      objName: "Ops.Math.Sum",
    },
    {
      id: "reg9vwfcd",
      uiAttribs: { subPatch: "0d43ee2c-77f9-426f-94be-83a5661c1c30" },
      portsOut: [
        {
          name: "result",
          links: [
            {
              portIn: "Value",
              portOut: "result",
              objIn: "1siwhtehi",
              objOut: "reg9vwfcd",
            },
          ],
        },
      ],
      objName: "Ops.Math.Sum",
    },
    {
      id: "afauxbika",
      uiAttribs: { subPatch: "0d43ee2c-77f9-426f-94be-83a5661c1c30" },
      portsIn: [{ name: "number2", value: 0 }],
      portsOut: [
        {
          name: "result",
          links: [
            {
              portIn: "number1",
              portOut: "result",
              objIn: "86f86taet",
              objOut: "afauxbika",
            },
          ],
        },
      ],
      objName: "Ops.Math.Sum",
    },
    {
      id: "letw5oe6b",
      uiAttribs: { subPatch: "0d43ee2c-77f9-426f-94be-83a5661c1c30" },
      portsIn: [{ name: "Default Value", value: 0 }],
      portsOut: [
        {
          name: "Current value",
          links: [
            {
              portIn: "number1",
              portOut: "Current value",
              objIn: "5dwayxrzz",
              objOut: "letw5oe6b",
            },
          ],
        },
      ],
      objName: "Ops.Math.Accumulator",
    },
    {
      id: "gp32r37dt",
      uiAttribs: { subPatch: "0d43ee2c-77f9-426f-94be-83a5661c1c30" },
      portsIn: [
        { name: "Separate inc/dec", value: false },
        { name: "Inc factor", value: 10, title: "Inc/Dec factor" },
        { name: "Dec factor", value: 4 },
      ],
      portsOut: [
        {
          name: "Result",
          links: [
            {
              portIn: "out0 TransformView rotY",
              portOut: "Result",
              objIn: "r8nj3z8fa",
              objOut: "gp32r37dt",
            },
          ],
        },
      ],
      objName: "Ops.Anim.Smooth",
    },
    {
      id: "1siwhtehi",
      uiAttribs: { subPatch: "0d43ee2c-77f9-426f-94be-83a5661c1c30" },
      portsIn: [
        { name: "Separate inc/dec", value: false },
        { name: "Inc factor", value: 10, title: "Inc/Dec factor" },
        { name: "Dec factor", value: 4 },
      ],
      portsOut: [
        {
          name: "Result",
          links: [
            {
              portIn: "out1 TransformView rotX",
              portOut: "Result",
              objIn: "r8nj3z8fa",
              objOut: "1siwhtehi",
            },
          ],
        },
      ],
      objName: "Ops.Anim.Smooth",
    },
    {
      id: "0acd0gufh",
      uiAttribs: { subPatch: "0d43ee2c-77f9-426f-94be-83a5661c1c30" },
      portsIn: [
        { name: "Coordinates index", value: 0 },
        { name: "Coordinates", value: "-1 to 1" },
        { name: "Area index", value: 0 },
        { name: "Area", value: "Canvas" },
        { name: "flip y", value: true },
        { name: "right click prevent default", value: true },
        { name: "Touch support", value: true },
        { name: "Active", value: true },
      ],
      portsOut: [
        {
          name: "x",
          links: [
            {
              portIn: "Add to number",
              portOut: "x",
              objIn: "letw5oe6b",
              objOut: "0acd0gufh",
            },
            {
              portIn: "Value",
              portOut: "x",
              objIn: "2e13fdb7-07bb-4725-9c68-8896336e559f",
              objOut: "0acd0gufh",
            },
          ],
        },
        {
          name: "y",
          links: [
            {
              portIn: "Add to number",
              portOut: "y",
              objIn: "2m41zlvup",
              objOut: "0acd0gufh",
            },
          ],
        },
        { name: "Button is down", value: 0 },
        { name: "Mouse is hovering", value: 0 },
      ],
      objName: "Ops.Devices.Mouse.Mouse_v3",
    },
    {
      id: "2m41zlvup",
      uiAttribs: { subPatch: "0d43ee2c-77f9-426f-94be-83a5661c1c30" },
      portsIn: [{ name: "Default Value", value: 0 }],
      portsOut: [
        {
          name: "Current value",
          links: [
            {
              portIn: "number1",
              portOut: "Current value",
              objIn: "reg9vwfcd",
              objOut: "2m41zlvup",
            },
          ],
        },
      ],
      objName: "Ops.Math.Accumulator",
    },
    {
      id: "irydsk4pi",
      uiAttribs: {},
      portsIn: [
        {
          name: "value",
          value:
            '[{"id":"4","groups":"1","P(0)":"-0.5","P(1)":"-0.5","P(2)":"-0.5","N(0)":"-1","N(1)":"0","N(2)":"0"},{"id":"4","groups":"1","P(0)":"-0.5","P(1)":"-0.5","P(2)":"0","N(0)":"1","N(1)":"0","N(2)":"0"},{"id":"4","groups":"0","P(0)":"-0.5","P(1)":"-0.5","P(2)":"0.5","N(0)":"1","N(1)":"0","N(2)":"0"},{"id":"4","groups":"1","P(0)":"-0.5","P(1)":"0","P(2)":"-0.5","N(0)":"0","N(1)":"0","N(2)":"0"},{"id":"4","groups":"1","P(0)":"-0.5","P(1)":"0","P(2)":"0","N(0)":"-1","N(1)":"0","N(2)":"0"},{"id":"4","groups":"1","P(0)":"-0.5","P(1)":"0","P(2)":"0.5","N(0)":"0","N(1)":"0","N(2)":"0"},{"id":"4","groups":"0","P(0)":"-0.5","P(1)":"0.5","P(2)":"-0.5","N(0)":"0","N(1)":"0","N(2)":"0"},{"id":"4","groups":"1","P(0)":"-0.5","P(1)":"0.5","P(2)":"0","N(0)":"-1","N(1)":"0","N(2)":"0"},{"id":"4","groups":"1","P(0)":"-0.5","P(1)":"0.5","P(2)":"0.5","N(0)":"0","N(1)":"0","N(2)":"0"},{"id":"1","groups":"0","P(0)":"0","P(1)":"-0.5","P(2)":"-0.5","N(0)":"1","N(1)":"0","N(2)":"0"},{"id":"1","groups":"0","P(0)":"0","P(1)":"-0.5","P(2)":"0","N(0)":"0","N(1)":"0","N(2)":"0"},{"id":"1","groups":"0","P(0)":"0","P(1)":"-0.5","P(2)":"0.5","N(0)":"0","N(1)":"0","N(2)":"0"},{"id":"1","groups":"1","P(0)":"0","P(1)":"0","P(2)":"-0.5","N(0)":"-1","N(1)":"0","N(2)":"0"},{"id":"1","groups":"0","P(0)":"0","P(1)":"0","P(2)":"0","N(0)":"1","N(1)":"0","N(2)":"0"},{"id":"1","groups":"0","P(0)":"0","P(1)":"0","P(2)":"0.5","N(0)":"0","N(1)":"0","N(2)":"0"},{"id":"1","groups":"1","P(0)":"0","P(1)":"0.5","P(2)":"-0.5","N(0)":"1","N(1)":"0","N(2)":"0"},{"id":"1","groups":"0","P(0)":"0","P(1)":"0.5","P(2)":"0","N(0)":"-1","N(1)":"0","N(2)":"0"},{"id":"1","groups":"1","P(0)":"0","P(1)":"0.5","P(2)":"0.5","N(0)":"0","N(1)":"0","N(2)":"0"},{"id":"2","groups":"1","P(0)":"0.5","P(1)":"-0.5","P(2)":"-0.5","N(0)":"0","N(1)":"0","N(2)":"0"},{"id":"2","groups":"0","P(0)":"0.5","P(1)":"-0.5","P(2)":"0","N(0)":"-1","N(1)":"0","N(2)":"0"},{"id":"2","groups":"0","P(0)":"0.5","P(1)":"-0.5","P(2)":"0.5","N(0)":"-1","N(1)":"0","N(2)":"0"},{"id":"2","groups":"1","P(0)":"0.5","P(1)":"0","P(2)":"-0.5","N(0)":"-1","N(1)":"0","N(2)":"0"},{"id":"2","groups":"0","P(0)":"0.5","P(1)":"0","P(2)":"0","N(0)":"0","N(1)":"0","N(2)":"0"},{"id":"2","groups":"0","P(0)":"0.5","P(1)":"0","P(2)":"0.5","N(0)":"0","N(1)":"0","N(2)":"0"},{"id":"2","groups":"0","P(0)":"0.5","P(1)":"0.5","P(2)":"-0.5","N(0)":"-1","N(1)":"0","N(2)":"0"},{"id":"2","groups":"0","P(0)":"0.5","P(1)":"0.5","P(2)":"0","N(0)":"0","N(1)":"0","N(2)":"0"},{"id":"2","groups":"0","P(0)":"0.5","P(1)":"0.5","P(2)":"0.5","N(0)":"1","N(1)":"0","N(2)":"0"}]',
        },
        { name: "Syntax index", value: 0 },
        { name: "Syntax", value: "json" },
      ],
      portsOut: [
        {
          name: "Result",
          links: [
            {
              portIn: "JSON String",
              portOut: "Result",
              objIn: "be5eno95b",
              objOut: "irydsk4pi",
            },
          ],
        },
      ],
      objName: "Ops.String.StringEditor",
    },
    {
      id: "be5eno95b",
      uiAttribs: {},
      portsOut: [
        {
          name: "Result",
          links: [
            {
              portIn: "Object",
              portOut: "Result",
              objIn: "0a0vf3od5",
              objOut: "be5eno95b",
            },
          ],
        },
        { name: "Valid", value: 1 },
      ],
      objName: "Ops.Json.ParseObject_v2",
    },
    {
      id: "0a0vf3od5",
      uiAttribs: {},
      portsOut: [
        {
          name: "Array",
          links: [
            {
              portIn: "Array",
              portOut: "Array",
              objIn: "enzujvht8",
              objOut: "0a0vf3od5",
            },
            {
              portIn: "in1 Ops.Json.ObjectToArray Array",
              portOut: "Array",
              objIn: "09j1w8t67",
              objOut: "0a0vf3od5",
            },
          ],
        },
      ],
      objName: "Ops.Json.ObjectToArray",
    },
    {
      id: "pymi5dwfn",
      uiAttribs: {},
      portsIn: [
        { name: "Value", value: 0 },
        { name: "Variable", value: "workScroll" },
      ],
      objName: "Ops.Vars.VarSetNumber_v2",
    },
    {
      id: "idb5vni1j",
      uiAttribs: {},
      portsIn: [
        { name: "Value", value: 0 },
        { name: "Variable", value: "aboutScroll" },
      ],
      objName: "Ops.Vars.VarSetNumber_v2",
    },
    {
      id: "h36xf2f52",
      uiAttribs: {},
      portsIn: [
        { name: "Value", value: "index" },
        { name: "Variable", value: "pageContext" },
      ],
      objName: "Ops.Vars.VarSetString_v2",
    },
    {
      id: "cfmh16c3b",
      uiAttribs: {},
      portsIn: [
        { name: "PreRender Ops", value: true },
        { name: "Play Timeline", value: false },
      ],
      portsOut: [
        {
          name: "Next",
          links: [
            {
              portIn: "Trigger",
              portOut: "Next",
              objIn: "99nt7axny",
              objOut: "cfmh16c3b",
            },
            {
              portIn: "Execute",
              portOut: "Next",
              objIn: "o6iq01n0j",
              objOut: "cfmh16c3b",
            },
          ],
        },
        { name: "Finished Initial Loading", value: 1 },
        { name: "Loading", value: 0 },
        {
          name: "Progress",
          links: [
            {
              portIn: "Value",
              portOut: "Progress",
              objIn: "cb0k3nn3a",
              objOut: "cfmh16c3b",
            },
          ],
        },
        {
          name: "Trigger Loading Finished ",
          links: [
            {
              portIn: "Trigger",
              portOut: "Trigger Loading Finished ",
              objIn: "fy34a0ima",
              objOut: "cfmh16c3b",
            },
          ],
        },
      ],
      objName: "Ops.Cables.LoadingStatus_v2",
    },
    {
      id: "yycpxv7b2",
      uiAttribs: {},
      portsIn: [{ name: "Variable", value: "pageContext" }],
      portsOut: [
        {
          name: "Value",
          links: [
            {
              portIn: "Switch Value",
              portOut: "Value",
              objIn: "o6iq01n0j",
              objOut: "yycpxv7b2",
            },
          ],
        },
      ],
      objName: "Ops.Vars.VarGetString",
    },
    {
      id: "oh6cs98gm",
      uiAttribs: { subPatch: "0d43ee2c-77f9-426f-94be-83a5661c1c30" },
      portsOut: [
        { name: "has focus", value: true },
        {
          name: "Tab Visible",
          links: [
            {
              portIn: "Play",
              portOut: "Tab Visible",
              objIn: "600tufksy",
              objOut: "oh6cs98gm",
            },
          ],
        },
      ],
      objName: "Ops.Html.WindowHasFocus",
    },
    {
      id: "5cuc5vqu0",
      uiAttribs: {},
      portsIn: [
        { name: "r", value: 0 },
        { name: "g", value: 0 },
        { name: "b", value: 0 },
        { name: "a", value: 0 },
      ],
      portsOut: [
        {
          name: "trigger",
          links: [
            {
              portIn: "render",
              portOut: "trigger",
              objIn: "84fqupsq5",
              objOut: "5cuc5vqu0",
            },
          ],
        },
      ],
      objName: "Ops.Gl.ClearColor",
    },
    {
      id: "7e4ey2fi4",
      uiAttribs: {},
      portsIn: [
        { name: "r", value: 0 },
        { name: "g", value: 0 },
        { name: "b", value: 0 },
        { name: "a", value: 0 },
      ],
      portsOut: [
        {
          name: "trigger",
          links: [
            {
              portIn: "render",
              portOut: "trigger",
              objIn: "84fqupsq5",
              objOut: "7e4ey2fi4",
            },
          ],
        },
      ],
      objName: "Ops.Gl.ClearColor",
    },
    {
      id: "t9owyozop",
      uiAttribs: { subPatch: "fe4bc287-1aa5-4ba8-98bc-8f2bdc690aef" },
      portsIn: [
        { name: "Array 2", value: 0 },
        { name: "Array 3", value: 0 },
        { name: "Array 4", value: 0 },
        { name: "Array 5", value: 0 },
        { name: "Array 6", value: 0 },
        { name: "Array 7", value: 0 },
        { name: "Array 8", value: 0 },
        { name: "Array 9", value: 0 },
      ],
      portsOut: [
        {
          name: "Result",
          links: [
            {
              portIn: "array",
              portOut: "Result",
              objIn: "wa7lshxin",
              objOut: "t9owyozop",
            },
            {
              portIn: "array",
              portOut: "Result",
              objIn: "ebv6t3xke",
              objOut: "t9owyozop",
            },
            {
              portIn: "array",
              portOut: "Result",
              objIn: "jqp826rxs",
              objOut: "t9owyozop",
            },
          ],
        },
      ],
      objName: "Ops.Array.SwitchArray",
    },
    {
      id: "qmlavcsni",
      uiAttribs: { subPatch: "fe4bc287-1aa5-4ba8-98bc-8f2bdc690aef" },
      portsIn: [{ name: "a", value: 1 }],
      portsOut: [
        { name: "outr", value: 0 },
        { name: "outg", value: 0 },
        { name: "outb", value: 1 },
        { name: "outa", value: 1 },
        { name: "Hex", value: "0000FF" },
        {
          name: "Array",
          links: [
            {
              portIn: "Array 0",
              portOut: "Array",
              objIn: "t9owyozop",
              objOut: "qmlavcsni",
            },
          ],
        },
      ],
      objName: "Ops.Color.ColorValue",
    },
    {
      id: "290pxdqss",
      uiAttribs: { subPatch: "fe4bc287-1aa5-4ba8-98bc-8f2bdc690aef" },
      portsIn: [
        { name: "r", value: 0 },
        { name: "g", value: 0 },
        { name: "b", value: 0 },
        { name: "a", value: 0 },
      ],
      portsOut: [
        { name: "outr", value: 0 },
        { name: "outg", value: 0 },
        { name: "outb", value: 0 },
        { name: "outa", value: 0 },
        { name: "Hex", value: "000000" },
        {
          name: "Array",
          links: [
            {
              portIn: "Array 1",
              portOut: "Array",
              objIn: "t9owyozop",
              objOut: "290pxdqss",
            },
          ],
        },
      ],
      objName: "Ops.Color.ColorValue",
    },
    {
      id: "dwq5osdkj",
      uiAttribs: {},
      portsIn: [{ name: "Variable", value: "nContext" }],
      objName: "Ops.Vars.VarSetNumber_v2",
    },
    {
      id: "9ehsf9qk3",
      uiAttribs: { subPatch: "fe4bc287-1aa5-4ba8-98bc-8f2bdc690aef" },
      portsIn: [{ name: "Variable", value: "nContext" }],
      portsOut: [
        {
          name: "Value",
          links: [
            {
              portIn: "Index",
              portOut: "Value",
              objIn: "t9owyozop",
              objOut: "9ehsf9qk3",
            },
          ],
        },
      ],
      objName: "Ops.Vars.VarGetNumber_v2",
    },
    {
      id: "wa7lshxin",
      uiAttribs: { subPatch: "fe4bc287-1aa5-4ba8-98bc-8f2bdc690aef" },
      portsIn: [{ name: "index", value: 0 }],
      portsOut: [
        {
          name: "value",
          links: [
            {
              portIn: "r",
              portOut: "value",
              objIn: "35gxsvgw6",
              objOut: "wa7lshxin",
            },
          ],
        },
      ],
      objName: "Ops.Array.ArrayGetNumber",
    },
    {
      id: "ebv6t3xke",
      uiAttribs: { subPatch: "fe4bc287-1aa5-4ba8-98bc-8f2bdc690aef" },
      portsIn: [{ name: "index", value: 1 }],
      portsOut: [
        {
          name: "value",
          links: [
            {
              portIn: "g",
              portOut: "value",
              objIn: "35gxsvgw6",
              objOut: "ebv6t3xke",
            },
          ],
        },
      ],
      objName: "Ops.Array.ArrayGetNumber",
    },
    {
      id: "jqp826rxs",
      uiAttribs: { subPatch: "fe4bc287-1aa5-4ba8-98bc-8f2bdc690aef" },
      portsIn: [{ name: "index", value: 2 }],
      portsOut: [
        {
          name: "value",
          links: [
            {
              portIn: "b",
              portOut: "value",
              objIn: "35gxsvgw6",
              objOut: "jqp826rxs",
            },
          ],
        },
      ],
      objName: "Ops.Array.ArrayGetNumber",
    },
    {
      id: "fy34a0ima",
      uiAttribs: {},
      portsIn: [{ name: "Named Trigger", value: "loaded" }],
      objName: "Ops.Trigger.TriggerSend",
    },
    {
      id: "cb0k3nn3a",
      uiAttribs: {},
      portsIn: [{ name: "Variable", value: "loadingStatus" }],
      objName: "Ops.Vars.VarSetNumber_v2",
    },
    {
      id: "99nt7axny",
      uiAttribs: {},
      portsIn: [{ name: "Named Trigger", value: "mainLoop" }],
      objName: "Ops.Trigger.TriggerSend",
    },
    {
      id: "5h5n3tj5w",
      uiAttribs: { subPatch: "fe4bc287-1aa5-4ba8-98bc-8f2bdc690aef" },
      portsOut: [
        { name: "create port", value: 0 },
        {
          name: "in0 Ops.Gl.Matrix.TransformView trigger",
          links: [
            {
              portIn: "exe",
              portOut: "in0 Ops.Gl.Matrix.TransformView trigger",
              objIn: "2ntt23rk3",
              objOut: "5h5n3tj5w",
            },
          ],
        },
        {
          name: "in1 Ops.Json.ObjectToArray Array",
          links: [
            {
              portIn: "array",
              portOut: "in1 Ops.Json.ObjectToArray Array",
              objIn: "2ntt23rk3",
              objOut: "5h5n3tj5w",
            },
          ],
        },
        { name: "in2 var get  Value", value: 0 },
      ],
      objName: "Ops.Ui.PatchInput",
    },
    {
      id: "09j1w8t67",
      uiAttribs: {},
      storage: { subPatchVer: 1 },
      portsIn: [
        { name: "create port", value: 0 },
        {
          name: "dataStr",
          value:
            '{"ports":[{"name":"in0 Ops.Gl.Matrix.TransformView trigger","type":1},{"name":"in1 Ops.Json.ObjectToArray Array","type":3,"value":null},{"name":"in2 var get  Value","type":5,"value":null}],"portsOut":[{"name":"out0 Ops.Ui.VizArrayTable Start Row","type":0},{"name":"out1 Ops.Trigger.RouteTrigger Next Trigger","type":1}]}',
        },
        { name: "patchId", value: "fe4bc287-1aa5-4ba8-98bc-8f2bdc690aef" },
      ],
      portsOut: [{ name: "create port out", value: 0 }],
      objName: "Ops.Ui.SubPatch",
    },
    {
      id: "86f86taet",
      uiAttribs: { subPatch: "0d43ee2c-77f9-426f-94be-83a5661c1c30" },
      portsIn: [{ name: "number2", value: 10 }],
      portsOut: [
        {
          name: "result",
          links: [
            {
              portIn: "out2 TransformView rotZ",
              portOut: "result",
              objIn: "r8nj3z8fa",
              objOut: "86f86taet",
            },
          ],
        },
      ],
      objName: "Ops.Math.Divide",
    },
    {
      id: "vuczmz7aq",
      uiAttribs: { subPatch: "fe4bc287-1aa5-4ba8-98bc-8f2bdc690aef" },
      portsIn: [
        { name: "create port", value: 0 },
        { name: "out0 Ops.Ui.VizArrayTable Start Row", value: 0 },
      ],
      objName: "Ops.Ui.PatchOutput",
    },
    {
      id: "6sdme9fss",
      uiAttribs: { subPatch: "fe4bc287-1aa5-4ba8-98bc-8f2bdc690aef" },
      portsIn: [
        { name: "blendMode index", value: 0 },
        { name: "blendMode", value: "normal" },
        { name: "Amount", value: 1 },
        { name: "Target index", value: 0 },
        { name: "Target", value: "Color" },
        { name: "Scale", value: 1 },
        { name: "Use Texture Alpha", value: false },
        { name: "Pos X", value: 0 },
        { name: "Pos Y", value: 0 },
        { name: "Rot X", value: 0 },
        { name: "Rot Y", value: 0 },
        { name: "Rot Z", value: 0 },
        { name: "Mapping index", value: 1 },
        { name: "Mapping", value: "Screen" },
        { name: "Discard", value: false },
        { name: "WorldSpace", value: false },
      ],
      portsOut: [
        {
          name: "trigger",
          links: [
            {
              portIn: "Execute",
              portOut: "trigger",
              objIn: "412cpvr3l",
              objOut: "6sdme9fss",
            },
          ],
        },
      ],
      objName: "Ops.Gl.ShaderEffects.TextureProjection_v2",
    },
    {
      id: "703egzgtr",
      uiAttribs: {},
      portsIn: [
        { name: "Value", value: "New String" },
        { name: "Variable", value: "imageUrl" },
      ],
      objName: "Ops.Vars.VarSetString_v2",
    },
    {
      id: "qzulbuoq2",
      uiAttribs: { subPatch: "fe4bc287-1aa5-4ba8-98bc-8f2bdc690aef" },
      portsIn: [{ name: "Variable", value: "nContext" }],
      portsOut: [
        {
          name: "Value",
          links: [
            {
              portIn: "Switch Value",
              portOut: "Value",
              objIn: "3bkjas95z",
              objOut: "qzulbuoq2",
            },
          ],
        },
      ],
      objName: "Ops.Vars.VarGetNumber_v2",
    },
    {
      id: "3bkjas95z",
      uiAttribs: { subPatch: "fe4bc287-1aa5-4ba8-98bc-8f2bdc690aef" },
      portsOut: [
        { name: "Switched Value", value: 0 },
        {
          name: "Trigger 0",
          links: [
            {
              portIn: "render",
              portOut: "Trigger 0",
              objIn: "35gxsvgw6",
              objOut: "3bkjas95z",
            },
          ],
        },
        {
          name: "Trigger 1",
          links: [
            {
              portIn: "render",
              portOut: "Trigger 1",
              objIn: "6sdme9fss",
              objOut: "3bkjas95z",
            },
          ],
        },
      ],
      objName: "Ops.Trigger.RouteTrigger",
    },
    {
      id: "whp28n8pi",
      uiAttribs: {},
      portsOut: [
        { name: "Switched Value", value: 0 },
        {
          name: "Trigger 0",
          links: [
            {
              portIn: "Execute",
              portOut: "Trigger 0",
              objIn: "uqyteclc3",
              objOut: "whp28n8pi",
            },
          ],
        },
        {
          name: "Trigger 1",
          links: [
            {
              portIn: "Execute",
              portOut: "Trigger 1",
              objIn: "val0mhtoj",
              objOut: "whp28n8pi",
            },
          ],
        },
      ],
      objName: "Ops.Trigger.RouteTrigger",
    },
    {
      id: "rdi6zanod",
      uiAttribs: {},
      portsIn: [{ name: "Variable", value: "nContext" }],
      portsOut: [
        {
          name: "Value",
          links: [
            {
              portIn: "Switch Value",
              portOut: "Value",
              objIn: "whp28n8pi",
              objOut: "rdi6zanod",
            },
          ],
        },
      ],
      objName: "Ops.Vars.VarGetNumber_v2",
    },
    {
      id: "qskdnkqbh",
      uiAttribs: {},
      portsIn: [
        { name: "posX", value: 2.21 },
        { name: "posY", value: -1.53 },
        { name: "posZ", value: 0 },
      ],
      portsOut: [
        {
          name: "trigger",
          links: [
            {
              portIn: "in0 Ops.Gl.Matrix.TransformView trigger",
              portOut: "trigger",
              objIn: "09j1w8t67",
              objOut: "qskdnkqbh",
            },
          ],
        },
      ],
      objName: "Ops.Gl.Matrix.TransformView",
    },
    {
      id: "j2v7lizv8",
      uiAttribs: {},
      portsIn: [{ name: "Variable", value: "textTexture" }],
      objName: "Ops.Vars.VarSetTexture_v2",
    },
    {
      id: "y0pluz7aa",
      uiAttribs: { subPatch: "fe4bc287-1aa5-4ba8-98bc-8f2bdc690aef" },
      portsIn: [{ name: "Variable", value: "textTexture" }],
      portsOut: [
        {
          name: "Value",
          links: [
            {
              portIn: "Texture",
              portOut: "Value",
              objIn: "0jv7bxxzm",
              objOut: "y0pluz7aa",
            },
          ],
        },
      ],
      objName: "Ops.Vars.VarGetTexture_v2",
    },
    {
      id: "0jv7bxxzm",
      uiAttribs: { subPatch: "fe4bc287-1aa5-4ba8-98bc-8f2bdc690aef" },
      portsIn: [
        { name: "blendMode index", value: 0 },
        { name: "blendMode", value: "normal" },
        { name: "Amount", value: 1 },
        { name: "Target index", value: 0 },
        { name: "Target", value: "Alpha" },
        { name: "Scale", value: 1 },
        { name: "Use Texture Alpha", value: false },
        { name: "Pos X", value: 0 },
        { name: "Pos Y", value: 0 },
        { name: "Rot X", value: 0 },
        { name: "Rot Y", value: 0 },
        { name: "Rot Z", value: 0 },
        { name: "Mapping index", value: 1 },
        { name: "Mapping", value: "Screen" },
        { name: "Discard", value: false },
        { name: "WorldSpace", value: false },
      ],
      portsOut: [
        {
          name: "trigger",
          links: [
            {
              portIn: "Execute",
              portOut: "trigger",
              objIn: "412cpvr3l",
              objOut: "0jv7bxxzm",
            },
          ],
        },
      ],
      objName: "Ops.Gl.ShaderEffects.TextureProjection_v2",
    },
    {
      id: "jvioe1871",
      uiAttribs: {},
      portsIn: [
        { name: "Value", value: "Media Design" },
        { name: "Variable", value: "stringTexture" },
      ],
      objName: "Ops.Vars.VarSetString_v2",
    },
    {
      id: "35gxsvgw6",
      uiAttribs: { subPatch: "fe4bc287-1aa5-4ba8-98bc-8f2bdc690aef" },
      portsIn: [
        { name: "a", value: 1 },
        { name: "colorizeTexture", value: false },
        { name: "Vertex Colors", value: false },
        { name: "Alpha Mask Source index", value: 0 },
        { name: "Alpha Mask Source", value: "Luminance" },
        { name: "Opacity TexCoords Transform", value: false },
        { name: "Discard Transparent Pixels", value: false },
        { name: "diffuseRepeatX", value: 1 },
        { name: "diffuseRepeatY", value: 1 },
        { name: "Tex Offset X", value: 0 },
        { name: "Tex Offset Y", value: 0 },
        { name: "Crop TexCoords", value: false },
        { name: "billboard", value: false },
      ],
      portsOut: [
        {
          name: "trigger",
          links: [
            {
              portIn: "render",
              portOut: "trigger",
              objIn: "0jv7bxxzm",
              objOut: "35gxsvgw6",
            },
          ],
        },
      ],
      objName: "Ops.Gl.Shader.BasicMaterial_v3",
    },
    {
      id: "bw5x42j1o",
      uiAttribs: {},
      portsIn: [{ name: "Variable", value: "imageTexture" }],
      objName: "Ops.Vars.VarSetTexture_v2",
    },
    {
      id: "cj09n9u2m",
      uiAttribs: { subPatch: "fe4bc287-1aa5-4ba8-98bc-8f2bdc690aef" },
      portsIn: [{ name: "Variable", value: "imageTexture" }],
      portsOut: [
        {
          name: "Value",
          links: [
            {
              portIn: "Texture",
              portOut: "Value",
              objIn: "6sdme9fss",
              objOut: "cj09n9u2m",
            },
          ],
        },
      ],
      objName: "Ops.Vars.VarGetTexture_v2",
    },
    {
      id: "hdbfyi4so",
      uiAttribs: {},
      portsIn: [
        { name: "Visible", value: false },
        { name: "Measure GPU", value: true },
        { name: "Position index", value: 0 },
        { name: "Position", value: "bottom" },
        { name: "Open", value: false },
        { name: "Smooth Graph", value: false },
        { name: "Scale", value: 3 },
        { name: "Size", value: 128 },
      ],
      portsOut: [
        {
          name: "childs",
          links: [
            {
              portIn: "exe",
              portOut: "childs",
              objIn: "cfmh16c3b",
              objOut: "hdbfyi4so",
            },
          ],
        },
        { name: "FPS", value: 60 },
      ],
      objName: "Ops.Gl.Performance",
    },
    {
      id: "wuo33hidd",
      uiAttribs: {},
      portsIn: [
        { name: "Value", value: "mq2" },
        { name: "Variable", value: "mediaQuery" },
      ],
      objName: "Ops.Vars.VarSetString_v2",
    },
    {
      id: "e0embtgzv",
      uiAttribs: {},
      portsIn: [{ name: "Variable", value: "videoUrl" }],
      objName: "Ops.Vars.VarSetString_v2",
    },
    {
      id: "qb3s9mooa",
      uiAttribs: {},
      portsIn: [
        {
          name: "value",
          value:
            "https://assets-global.website-files.com/652bc54ee3e8f97337aa19b7/657f41cd39f61b597a37b108_GridSys02_01.png",
        },
      ],
      portsOut: [
        {
          name: "String",
          value:
            "https://assets-global.website-files.com/652bc54ee3e8f97337aa19b7/657f41cd39f61b597a37b108_GridSys02_01.png",
        },
      ],
      objName: "Ops.String.String_v2",
    },
    {
      id: "h042fj5j0",
      uiAttribs: {},
      portsOut: [
        { name: "has focus", value: true },
        {
          name: "Tab Visible",
          links: [
            {
              portIn: "Active",
              portOut: "Tab Visible",
              objIn: "y1ek6ethe",
              objOut: "h042fj5j0",
            },
          ],
        },
      ],
      objName: "Ops.Html.WindowHasFocus",
    },
    {
      id: "enzujvht8",
      uiAttribs: {},
      portsIn: [{ name: "Start Row", value: 0 }],
      objName: "Ops.Ui.VizArrayTable",
    },
    {
      id: "jh3l549w8",
      uiAttribs: {},
      portsIn: [{ name: "Variable", value: "mediaQuery" }],
      portsOut: [
        {
          name: "Value",
          links: [
            {
              portIn: "Switch Value",
              portOut: "Value",
              objIn: "val0mhtoj",
              objOut: "jh3l549w8",
            },
          ],
        },
      ],
      objName: "Ops.Vars.VarGetString",
    },
    {
      id: "6velbs3jo",
      uiAttribs: {},
      portsIn: [
        { name: "posX", value: 3.51 },
        { name: "posZ", value: 0 },
        { name: "scale", value: 8.17 },
        { name: "rotX", value: 19.59 },
        { name: "rotY", value: 18.87 },
        { name: "rotZ", value: 0 },
      ],
      portsOut: [
        {
          name: "trigger",
          links: [
            {
              portIn: "in0 Ops.Gl.Matrix.TransformView trigger",
              portOut: "trigger",
              objIn: "09j1w8t67",
              objOut: "6velbs3jo",
            },
          ],
        },
      ],
      objName: "Ops.Gl.Matrix.TransformView",
    },
    {
      id: "6phyrtpfm",
      uiAttribs: {},
      portsIn: [{ name: "Variable", value: "mediaQuery" }],
      portsOut: [
        {
          name: "Value",
          links: [
            {
              portIn: "Switch Value",
              portOut: "Value",
              objIn: "uqyteclc3",
              objOut: "6phyrtpfm",
            },
          ],
        },
      ],
      objName: "Ops.Vars.VarGetString",
    },
    {
      id: "mk2ylcetg",
      uiAttribs: { subPatch: "0d43ee2c-77f9-426f-94be-83a5661c1c30" },
      portsOut: [
        { name: "create port", value: 0 },
        {
          name: "in0 Accumulator Trigger in",
          links: [
            {
              portIn: "Trigger in",
              portOut: "in0 Accumulator Trigger in",
              objIn: "letw5oe6b",
              objOut: "mk2ylcetg",
            },
            {
              portIn: "Trigger in",
              portOut: "in0 Accumulator Trigger in",
              objIn: "2m41zlvup",
              objOut: "mk2ylcetg",
            },
            {
              portIn: "Update",
              portOut: "in0 Accumulator Trigger in",
              objIn: "gp32r37dt",
              objOut: "mk2ylcetg",
            },
            {
              portIn: "Update",
              portOut: "in0 Accumulator Trigger in",
              objIn: "1siwhtehi",
              objOut: "mk2ylcetg",
            },
          ],
        },
        {
          name: "in1 Ops.Math.Accumulator Multiplier to add number",
          links: [
            {
              portIn: "number1",
              portOut: "in1 Ops.Math.Accumulator Multiplier to add number",
              objIn: "81d72014-bb34-4744-a501-118c439e0e63",
              objOut: "mk2ylcetg",
            },
          ],
        },
      ],
      objName: "Ops.Ui.PatchInput",
    },
    {
      id: "r8nj3z8fa",
      uiAttribs: { subPatch: "0d43ee2c-77f9-426f-94be-83a5661c1c30" },
      portsIn: [{ name: "create port", value: 0 }],
      objName: "Ops.Ui.PatchOutput",
    },
    {
      id: "xciwr2lx9",
      uiAttribs: {},
      storage: { subPatchVer: 1 },
      portsIn: [
        { name: "create port", value: 0 },
        {
          name: "dataStr",
          value:
            '{"ports":[{"name":"in0 Accumulator Trigger in","type":1},{"name":"in1 Ops.Math.Accumulator Multiplier to add number","type":0,"value":0.2}],"portsOut":[{"name":"out0 TransformView rotY","type":0},{"name":"out1 TransformView rotX","type":0},{"name":"out2 TransformView rotZ","type":0}]}',
        },
        { name: "patchId", value: "0d43ee2c-77f9-426f-94be-83a5661c1c30" },
      ],
      portsOut: [
        { name: "create port out", value: 0 },
        {
          name: "out0 TransformView rotY",
          links: [
            {
              portIn: "number1",
              portOut: "out0 TransformView rotY",
              objIn: "sd5jtt6y5",
              objOut: "xciwr2lx9",
            },
            {
              portIn: "number1",
              portOut: "out0 TransformView rotY",
              objIn: "50466924-e24f-4a70-8a30-07952092a3b5",
              objOut: "xciwr2lx9",
            },
          ],
        },
        {
          name: "out1 TransformView rotX",
          links: [
            {
              portIn: "number1",
              portOut: "out1 TransformView rotX",
              objIn: "zpdk4s7hr",
              objOut: "xciwr2lx9",
            },
            {
              portIn: "number1",
              portOut: "out1 TransformView rotX",
              objIn: "q1ipltazp",
              objOut: "xciwr2lx9",
            },
          ],
        },
        {
          name: "out2 TransformView rotZ",
          links: [
            {
              portIn: "number1",
              portOut: "out2 TransformView rotZ",
              objIn: "e6ylr7btl",
              objOut: "xciwr2lx9",
            },
            {
              portIn: "number1",
              portOut: "out2 TransformView rotZ",
              objIn: "n25ws11bd",
              objOut: "xciwr2lx9",
            },
          ],
        },
      ],
      objName: "Ops.Ui.SubPatch",
    },
    {
      id: "1uo673v4k",
      uiAttribs: {},
      portsIn: [
        { name: "Text", value: "" },
        { name: "Id", value: "playerControls" },
        { name: "Class", value: "" },
        { name: "Style", value: "" },
        { name: "Interactive", value: false },
        { name: "Visible", value: true },
        { name: "Convert Line Breaks", value: false },
        { name: "Propagate Click-Events", value: true },
      ],
      portsOut: [
        {
          name: "DOM Element",
          links: [
            {
              portIn: "Parent",
              portOut: "DOM Element",
              objIn: "25y6yg4oe",
              objOut: "1uo673v4k",
            },
            {
              portIn: "Parent",
              portOut: "DOM Element",
              objIn: "ig6gvf99w",
              objOut: "1uo673v4k",
            },
          ],
        },
        { name: "Hover", value: 0 },
      ],
      objName: "Ops.Html.DivElement_v3",
    },
    { id: "q1gy5qfaz", uiAttribs: {}, objName: "Ops.Html.AppendChild_v2" },
    {
      id: "wze449nxn",
      uiAttribs: {},
      portsIn: [
        { name: "Text", value: "" },
        { name: "Id", value: "controlPlay" },
        { name: "Class", value: "" },
        { name: "Style", value: "" },
        { name: "Interactive", value: true },
        { name: "Visible", value: true },
        { name: "Convert Line Breaks", value: false },
        { name: "Propagate Click-Events", value: true },
      ],
      portsOut: [
        {
          name: "DOM Element",
          links: [
            {
              portIn: "Child",
              portOut: "DOM Element",
              objIn: "q1gy5qfaz",
              objOut: "wze449nxn",
            },
          ],
        },
        { name: "Hover", value: 0 },
        {
          name: "Clicked",
          links: [
            {
              portIn: "Trigger",
              portOut: "Clicked",
              objIn: "so5w3nzg2",
              objOut: "wze449nxn",
            },
          ],
        },
      ],
      objName: "Ops.Html.DivElement_v3",
    },
    {
      id: "bry9wi4ld",
      uiAttribs: {},
      portsIn: [
        { name: "Text", value: "" },
        { name: "Id", value: "controlFullScreen" },
        { name: "Class", value: "" },
        { name: "Style", value: "" },
        { name: "Interactive", value: true },
        { name: "Visible", value: true },
        { name: "Convert Line Breaks", value: false },
        { name: "Propagate Click-Events", value: true },
      ],
      portsOut: [
        {
          name: "DOM Element",
          links: [
            {
              portIn: "Child",
              portOut: "DOM Element",
              objIn: "2s0sars7x",
              objOut: "bry9wi4ld",
            },
          ],
        },
        { name: "Hover", value: 0 },
        {
          name: "Clicked",
          links: [
            {
              portIn: "Trigger",
              portOut: "Clicked",
              objIn: "zc9bsydnl",
              objOut: "bry9wi4ld",
            },
            {
              portIn: "trigger",
              portOut: "Clicked",
              objIn: "o5grdfvz6",
              objOut: "bry9wi4ld",
            },
          ],
        },
      ],
      objName: "Ops.Html.DivElement_v3",
    },
    {
      id: "fws002e87",
      uiAttribs: {},
      portsIn: [
        { name: "Text", value: "" },
        { name: "Id", value: "controlAudio" },
        { name: "Class", value: "" },
        { name: "Style", value: "" },
        { name: "Interactive", value: true },
        { name: "Visible", value: true },
        { name: "Convert Line Breaks", value: false },
        { name: "Propagate Click-Events", value: true },
      ],
      portsOut: [
        {
          name: "DOM Element",
          links: [
            {
              portIn: "Child",
              portOut: "DOM Element",
              objIn: "48bnt74w4",
              objOut: "fws002e87",
            },
          ],
        },
        { name: "Hover", value: 0 },
        {
          name: "Clicked",
          links: [
            {
              portIn: "Trigger",
              portOut: "Clicked",
              objIn: "ja6bx4di1",
              objOut: "fws002e87",
            },
            {
              portIn: "trigger",
              portOut: "Clicked",
              objIn: "hkulc2vfa",
              objOut: "fws002e87",
            },
          ],
        },
      ],
      objName: "Ops.Html.DivElement_v3",
    },
    {
      id: "so5w3nzg2",
      uiAttribs: {},
      portsIn: [{ name: "Named Trigger", value: "controlPlay" }],
      objName: "Ops.Trigger.TriggerSend",
    },
    { id: "2s0sars7x", uiAttribs: {}, objName: "Ops.Html.AppendChild_v2" },
    { id: "48bnt74w4", uiAttribs: {}, objName: "Ops.Html.AppendChild_v2" },
    {
      id: "zc9bsydnl",
      uiAttribs: {},
      portsIn: [{ name: "Named Trigger", value: "controlFullscreen" }],
      objName: "Ops.Trigger.TriggerSend",
    },
    {
      id: "ja6bx4di1",
      uiAttribs: {},
      portsIn: [{ name: "Named Trigger", value: "controlAudio" }],
      objName: "Ops.Trigger.TriggerSend",
    },
    {
      id: "707v4leq3",
      uiAttribs: {},
      portsIn: [{ name: "Default", value: false }],
      portsOut: [
        {
          name: "result",
          links: [
            {
              portIn: "Index",
              portOut: "result",
              objIn: "nmckaay6j",
              objOut: "707v4leq3",
            },
          ],
        },
      ],
      objName: "Ops.Boolean.ToggleBool_v2",
    },
    {
      id: "4bp8isxoe",
      uiAttribs: {},
      portsIn: [{ name: "Named Trigger", value: "controlFullscreen" }],
      portsOut: [
        {
          name: "Triggered",
          links: [
            {
              portIn: "trigger",
              portOut: "Triggered",
              objIn: "707v4leq3",
              objOut: "4bp8isxoe",
            },
          ],
        },
      ],
      objName: "Ops.Trigger.TriggerReceive",
    },
    {
      id: "nmckaay6j",
      uiAttribs: {},
      portsIn: [
        { name: "Value 0", value: 5.63 },
        { name: "Value 1", value: 15 },
        { name: "Value 2", value: 0 },
        { name: "Value 3", value: 0 },
        { name: "Value 4", value: 0 },
        { name: "Value 5", value: 0 },
        { name: "Value 6", value: 0 },
        { name: "Value 7", value: 0 },
        { name: "Value 8", value: 0 },
        { name: "Value 9", value: 0 },
        { name: "Value 10", value: 0 },
        { name: "Value 11", value: 0 },
        { name: "Value 12", value: 0 },
        { name: "Value 13", value: 0 },
        { name: "Value 14", value: 0 },
        { name: "Value 15", value: 0 },
      ],
      portsOut: [
        {
          name: "Result",
          links: [
            {
              portIn: "Value",
              portOut: "Result",
              objIn: "etk1vm5rn",
              objOut: "nmckaay6j",
            },
          ],
        },
      ],
      objName: "Ops.Number.SwitchNumber",
    },
    {
      id: "etk1vm5rn",
      uiAttribs: {},
      portsIn: [
        { name: "Separate inc/dec", value: true },
        { name: "Inc factor", value: 10, title: "Inc factor" },
        { name: "Dec factor", value: 10 },
      ],
      portsOut: [
        {
          name: "Result",
          links: [
            {
              portIn: "scale",
              portOut: "Result",
              objIn: "qskdnkqbh",
              objOut: "etk1vm5rn",
            },
          ],
        },
      ],
      objName: "Ops.Anim.Smooth",
    },
    {
      id: "4m7mjjd7p",
      uiAttribs: {},
      portsIn: [{ name: "Named Trigger", value: "mainLoop" }],
      portsOut: [
        {
          name: "Triggered",
          links: [
            {
              portIn: "Update",
              portOut: "Triggered",
              objIn: "etk1vm5rn",
              objOut: "4m7mjjd7p",
            },
          ],
        },
      ],
      objName: "Ops.Trigger.TriggerReceive",
    },
    {
      id: "isiuxw17x",
      uiAttribs: {},
      portsIn: [
        {
          name: "value",
          value:
            "https://player.vimeo.com/progressive_redirect/playback/748056711/rendition/1080p/file.mp4?loc=external&log_user=0&signature=8b7ab83b08656ed8c0ed49316046bab6d99116b3a54f3126d3bffd2a28a33460",
        },
      ],
      portsOut: [
        {
          name: "String",
          links: [
            {
              portIn: "Value",
              portOut: "String",
              objIn: "e0embtgzv",
              objOut: "isiuxw17x",
            },
          ],
        },
      ],
      objName: "Ops.String.String_v2",
    },
    { id: "25y6yg4oe", uiAttribs: {}, objName: "Ops.Html.AppendChild_v2" },
    {
      id: "hpkac5v3r",
      uiAttribs: {},
      portsIn: [
        { name: "Text", value: "" },
        { name: "Id", value: "area1" },
        { name: "Class", value: "" },
        { name: "Style", value: "" },
        { name: "Interactive", value: false },
        { name: "Visible", value: true },
        { name: "Convert Line Breaks", value: false },
        { name: "Propagate Click-Events", value: true },
      ],
      portsOut: [
        {
          name: "DOM Element",
          links: [
            {
              portIn: "Child",
              portOut: "DOM Element",
              objIn: "25y6yg4oe",
              objOut: "hpkac5v3r",
            },
          ],
        },
        { name: "Hover", value: 0 },
      ],
      objName: "Ops.Html.DivElement_v3",
    },
    {
      id: "vsu75mtwz",
      uiAttribs: {},
      portsIn: [
        { name: "Text", value: "" },
        { name: "Id", value: "area2" },
        { name: "Class", value: "" },
        { name: "Style", value: "" },
        { name: "Interactive", value: false },
        { name: "Visible", value: true },
        { name: "Convert Line Breaks", value: false },
        { name: "Propagate Click-Events", value: true },
      ],
      portsOut: [
        {
          name: "DOM Element",
          links: [
            {
              portIn: "Child",
              portOut: "DOM Element",
              objIn: "ig6gvf99w",
              objOut: "vsu75mtwz",
            },
            {
              portIn: "Parent",
              portOut: "DOM Element",
              objIn: "2s0sars7x",
              objOut: "vsu75mtwz",
            },
            {
              portIn: "Parent",
              portOut: "DOM Element",
              objIn: "48bnt74w4",
              objOut: "vsu75mtwz",
            },
            {
              portIn: "Parent",
              portOut: "DOM Element",
              objIn: "q1gy5qfaz",
              objOut: "vsu75mtwz",
            },
          ],
        },
        { name: "Hover", value: 0 },
      ],
      objName: "Ops.Html.DivElement_v3",
    },
    { id: "ig6gvf99w", uiAttribs: {}, objName: "Ops.Html.AppendChild_v2" },
    {
      id: "ow7wpn2sw",
      uiAttribs: {},
      portsIn: [{ name: "Variable", value: "videoFullscreen" }],
      objName: "Ops.Vars.VarSetNumber_v2",
    },
    {
      id: "o5grdfvz6",
      uiAttribs: {},
      portsIn: [{ name: "Default", value: false }],
      portsOut: [
        {
          name: "result",
          links: [
            {
              portIn: "Value",
              portOut: "result",
              objIn: "ow7wpn2sw",
              objOut: "o5grdfvz6",
            },
          ],
        },
      ],
      objName: "Ops.Boolean.ToggleBool_v2",
    },
    {
      id: "hkulc2vfa",
      uiAttribs: {},
      portsIn: [{ name: "Default", value: true }],
      portsOut: [
        {
          name: "result",
          links: [
            {
              portIn: "Value",
              portOut: "result",
              objIn: "jvhtj4evy",
              objOut: "hkulc2vfa",
            },
          ],
        },
      ],
      objName: "Ops.Boolean.ToggleBool_v2",
    },
    {
      id: "jvhtj4evy",
      uiAttribs: {},
      portsIn: [{ name: "Variable", value: "videoMuted" }],
      objName: "Ops.Vars.VarSetNumber_v2",
    },
    {
      id: "bthr506p2",
      uiAttribs: {},
      portsOut: [
        { name: "Width", value: 0 },
        {
          name: "Height",
          links: [
            {
              portIn: "number1",
              portOut: "Height",
              objIn: "39gcj8fx7",
              objOut: "bthr506p2",
            },
          ],
        },
        { name: "X", value: 0 },
        {
          name: "Y",
          links: [
            {
              portIn: "number2",
              portOut: "Y",
              objIn: "39gcj8fx7",
              objOut: "bthr506p2",
            },
          ],
        },
      ],
      objName: "Ops.Html.ElementClientRect",
    },
    {
      id: "0shu534hw",
      uiAttribs: {},
      portsIn: [
        { name: "Query", value: "main" },
        { name: "Mode index", value: 0 },
        { name: "Mode", value: "document" },
        { name: "Type index", value: 0 },
        { name: "Type", value: "text/html" },
        { name: "Document", value: "xml" },
      ],
      portsOut: [
        {
          name: "Element",
          links: [
            {
              portIn: "Element",
              portOut: "Element",
              objIn: "bthr506p2",
              objOut: "0shu534hw",
            },
          ],
        },
      ],
      objName: "Ops.Html.QuerySelector_v2",
    },
    {
      id: "6npf31cp1",
      uiAttribs: {},
      portsIn: [{ name: "Named Trigger", value: "mainLoop" }],
      portsOut: [
        {
          name: "Triggered",
          links: [
            {
              portIn: "Update",
              portOut: "Triggered",
              objIn: "0shu534hw",
              objOut: "6npf31cp1",
            },
            {
              portIn: "Update",
              portOut: "Triggered",
              objIn: "bthr506p2",
              objOut: "6npf31cp1",
            },
          ],
        },
      ],
      objName: "Ops.Trigger.TriggerReceive",
    },
    {
      id: "39gcj8fx7",
      uiAttribs: {},
      portsOut: [
        {
          name: "result",
          links: [
            {
              portIn: "number1",
              portOut: "result",
              objIn: "7z5xrzqx7",
              objOut: "39gcj8fx7",
            },
          ],
        },
      ],
      objName: "Ops.Math.Sum",
    },
    {
      id: "7jneaeqbm",
      uiAttribs: {},
      portsIn: [
        { name: "old min", value: 0 },
        { name: "old max", value: 1 },
        { name: "new min", value: -1.45 },
        { name: "new max", value: -12.79 },
        { name: "Easing index", value: 0 },
        { name: "Easing", value: "Linear" },
      ],
      portsOut: [
        {
          name: "result",
          links: [
            {
              portIn: "posY",
              portOut: "result",
              objIn: "6velbs3jo",
              objOut: "7jneaeqbm",
            },
          ],
        },
      ],
      objName: "Ops.Math.MapRange",
    },
    {
      id: "7z5xrzqx7",
      uiAttribs: {},
      portsOut: [
        {
          name: "result",
          links: [
            {
              portIn: "value",
              portOut: "result",
              objIn: "7jneaeqbm",
              objOut: "7z5xrzqx7",
            },
          ],
        },
      ],
      objName: "Ops.Math.Divide",
    },
    {
      id: "vuspak6eg",
      uiAttribs: {},
      portsIn: [
        { name: "Pixel Unit index", value: 0 },
        { name: "Pixel Unit", value: "Display" },
      ],
      portsOut: [
        { name: "width", value: 694 },
        {
          name: "height",
          links: [
            {
              portIn: "number2",
              portOut: "height",
              objIn: "7z5xrzqx7",
              objOut: "vuspak6eg",
            },
          ],
        },
        { name: "Pixel Ratio", value: 1 },
        { name: "Pixel Width", value: 694 },
        { name: "Pixel Height", value: 1080 },
        { name: "Aspect Ratio", value: 0.6425925925925926 },
        { name: "Landscape", value: 0 },
      ],
      objName: "Ops.Gl.CanvasInfo_v2",
    },
    {
      id: "pr42gl4je",
      uiAttribs: { subPatch: "ab28f98c-cb15-427f-986a-04aeaaa181f4" },
      portsIn: [
        { name: "data", value: "" },
        { name: "glb File", value: "ShapeShearBox.glb", display: "file" },
        { name: "Draw", value: true },
        { name: "Camera index", value: 0 },
        { name: "Camera", value: "None" },
        { name: "Animation", value: "" },
        { name: "Center index", value: 1 },
        { name: "Center", value: "None" },
        { name: "Rescale", value: true },
        { name: "Rescale Size", value: 0.5 },
        { name: "Time", value: 0 },
        { name: "Sync to timeline", value: false },
        { name: "Loop", value: true },
        { name: "Normals Format index", value: 0 },
        { name: "Normals Format", value: "XYZ" },
        { name: "Vertices Format index", value: 0 },
        { name: "Vertices Format", value: "XYZ" },
        { name: "Calc Normals index", value: 0 },
        { name: "Calc Normals", value: "Auto" },
        { name: "Hide Nodes", value: 0 },
        { name: "Use Material Properties", value: false },
        { name: "Active", value: true },
      ],
      portsOut: [
        { name: "Generator", value: "Khronos glTF Blender I/O v3.4.50" },
        { name: "GLTF Version", value: 2 },
        { name: "Anim Length", value: 0 },
        { name: "Anim Time", value: 0 },
        { name: "Loading", value: false },
      ],
      objName: "Ops.Gl.GLTF.GltfScene_v4",
    },
    {
      id: "vjmafvky7",
      uiAttribs: { subPatch: "ab28f98c-cb15-427f-986a-04aeaaa181f4" },
      portsIn: [
        { name: "a", value: 1 },
        { name: "colorizeTexture", value: false },
        { name: "Vertex Colors", value: false },
        { name: "Alpha Mask Source index", value: 0 },
        { name: "Alpha Mask Source", value: "Luminance" },
        { name: "Opacity TexCoords Transform", value: false },
        { name: "Discard Transparent Pixels", value: false },
        { name: "diffuseRepeatX", value: 1 },
        { name: "diffuseRepeatY", value: 1 },
        { name: "Tex Offset X", value: 0 },
        { name: "Tex Offset Y", value: 0 },
        { name: "Crop TexCoords", value: false },
        { name: "billboard", value: false },
      ],
      portsOut: [
        {
          name: "trigger",
          links: [
            {
              portIn: "Exec",
              portOut: "trigger",
              objIn: "kz74gyd5g",
              objOut: "vjmafvky7",
            },
          ],
        },
      ],
      objName: "Ops.Gl.Shader.BasicMaterial_v3",
    },
    {
      id: "ul6zrb5k6",
      uiAttribs: { subPatch: "ab28f98c-cb15-427f-986a-04aeaaa181f4" },
      portsIn: [
        { name: "posX", value: 0 },
        { name: "posY", value: 0 },
        { name: "posZ", value: 0 },
        { name: "scale", value: 1 },
        { name: "rotX", value: 0 },
        { name: "rotY", value: 0 },
        { name: "rotZ", value: 0 },
      ],
      portsOut: [
        {
          name: "trigger",
          links: [
            {
              portIn: "render",
              portOut: "trigger",
              objIn: "vjmafvky7",
              objOut: "ul6zrb5k6",
            },
          ],
        },
      ],
      objName: "Ops.Gl.Matrix.TransformView",
    },
    {
      id: "gm13f4zcc",
      uiAttribs: {},
      portsIn: [
        { name: "r", value: 0 },
        { name: "g", value: 0 },
        { name: "b", value: 1 },
        { name: "a", value: 1 },
      ],
      portsOut: [
        { name: "outr", value: 0 },
        { name: "outg", value: 0 },
        { name: "outb", value: 1 },
        { name: "outa", value: 1 },
        { name: "Hex", value: "0000FF" },
        {
          name: "Array",
          links: [
            {
              portIn: "Value",
              portOut: "Array",
              objIn: "sokw138q9",
              objOut: "gm13f4zcc",
            },
          ],
        },
      ],
      objName: "Ops.Color.ColorValue",
    },
    {
      id: "sokw138q9",
      uiAttribs: {},
      portsIn: [{ name: "Variable", value: "blue" }],
      objName: "Ops.Vars.VarSetArray_v2",
    },
    {
      id: "78z1dsqf5",
      uiAttribs: { subPatch: "ab28f98c-cb15-427f-986a-04aeaaa181f4" },
      portsIn: [{ name: "Variable", value: "blue" }],
      portsOut: [
        {
          name: "Value",
          links: [
            {
              portIn: "Array",
              portOut: "Value",
              objIn: "tk9jp6s6x",
              objOut: "78z1dsqf5",
            },
          ],
        },
      ],
      objName: "Ops.Vars.VarGetArray_v2",
    },
    {
      id: "tk9jp6s6x",
      uiAttribs: { subPatch: "ab28f98c-cb15-427f-986a-04aeaaa181f4" },
      portsIn: [{ name: "Index", value: 0 }],
      portsOut: [
        {
          name: "X",
          links: [
            {
              portIn: "r",
              portOut: "X",
              objIn: "vjmafvky7",
              objOut: "tk9jp6s6x",
            },
          ],
        },
        {
          name: "Y",
          links: [
            {
              portIn: "g",
              portOut: "Y",
              objIn: "vjmafvky7",
              objOut: "tk9jp6s6x",
            },
          ],
        },
        {
          name: "Z",
          links: [
            {
              portIn: "b",
              portOut: "Z",
              objIn: "vjmafvky7",
              objOut: "tk9jp6s6x",
            },
          ],
        },
      ],
      objName: "Ops.Array.Array3GetNumbers",
    },
    {
      id: "dqkememuz",
      uiAttribs: { subPatch: "fe4bc287-1aa5-4ba8-98bc-8f2bdc690aef" },
      portsIn: [{ name: "Variable", value: "blue" }],
      portsOut: [
        {
          name: "Value",
          links: [
            {
              portIn: "Array",
              portOut: "Value",
              objIn: "8hb46vcab",
              objOut: "dqkememuz",
            },
          ],
        },
      ],
      objName: "Ops.Vars.VarGetArray_v2",
    },
    {
      id: "8hb46vcab",
      uiAttribs: { subPatch: "fe4bc287-1aa5-4ba8-98bc-8f2bdc690aef" },
      portsIn: [{ name: "Index", value: 0 }],
      portsOut: [
        {
          name: "X",
          links: [
            {
              portIn: "r",
              portOut: "X",
              objIn: "qmlavcsni",
              objOut: "8hb46vcab",
            },
          ],
        },
        {
          name: "Y",
          links: [
            {
              portIn: "g",
              portOut: "Y",
              objIn: "qmlavcsni",
              objOut: "8hb46vcab",
            },
          ],
        },
        {
          name: "Z",
          links: [
            {
              portIn: "b",
              portOut: "Z",
              objIn: "qmlavcsni",
              objOut: "8hb46vcab",
            },
          ],
        },
      ],
      objName: "Ops.Array.Array3GetNumbers",
    },
    {
      id: "fdg714pud",
      uiAttribs: { subPatch: "ab28f98c-cb15-427f-986a-04aeaaa181f4" },
      portsIn: [
        { name: "blendMode index", value: 0 },
        { name: "blendMode", value: "normal" },
        { name: "Amount", value: 1 },
        { name: "Target index", value: 0 },
        { name: "Target", value: "Alpha" },
        { name: "Scale", value: 0.8 },
        { name: "Use Texture Alpha", value: false },
        { name: "Pos X", value: 0.61 },
        { name: "Pos Y", value: 0.63 },
        { name: "Rot X", value: 0 },
        { name: "Rot Y", value: 0 },
        { name: "Rot Z", value: 0 },
        { name: "Mapping index", value: 1 },
        { name: "Mapping", value: "Screen" },
        { name: "Discard", value: false },
        { name: "WorldSpace", value: false },
      ],
      objName: "Ops.Gl.ShaderEffects.TextureProjection_v2",
    },
    {
      id: "m58hauto1",
      uiAttribs: { subPatch: "ab28f98c-cb15-427f-986a-04aeaaa181f4" },
      portsIn: [{ name: "Variable", value: "textTexture" }],
      portsOut: [
        {
          name: "Value",
          links: [
            {
              portIn: "Texture",
              portOut: "Value",
              objIn: "fdg714pud",
              objOut: "m58hauto1",
            },
          ],
        },
      ],
      objName: "Ops.Vars.VarGetTexture_v2",
    },
    {
      id: "a6v6ehq4l",
      uiAttribs: { subPatch: "ab28f98c-cb15-427f-986a-04aeaaa181f4" },
      portsOut: [
        { name: "create port", value: 0 },
        {
          name: "in0 Ops.Trigger.RouteTriggerString Trigger 0",
          links: [
            {
              portIn: "render",
              portOut: "in0 Ops.Trigger.RouteTriggerString Trigger 0",
              objIn: "ul6zrb5k6",
              objOut: "a6v6ehq4l",
            },
          ],
        },
      ],
      objName: "Ops.Ui.PatchInput",
    },
    {
      id: "97v008uwc",
      uiAttribs: { subPatch: "ab28f98c-cb15-427f-986a-04aeaaa181f4" },
      portsIn: [{ name: "create port", value: 0 }],
      objName: "Ops.Ui.PatchOutput",
    },
    {
      id: "fmv4mvs4s",
      uiAttribs: {},
      storage: { subPatchVer: 1 },
      portsIn: [
        { name: "create port", value: 0 },
        {
          name: "dataStr",
          value:
            '{"ports":[{"name":"in0 Ops.Trigger.RouteTriggerString Trigger 0","type":1}],"portsOut":[]}',
        },
        { name: "patchId", value: "ab28f98c-cb15-427f-986a-04aeaaa181f4" },
      ],
      portsOut: [{ name: "create port out", value: 0 }],
      objName: "Ops.Ui.SubPatch",
    },
    {
      id: "3epglv4s5",
      uiAttribs: { subPatch: "ab28f98c-cb15-427f-986a-04aeaaa181f4" },
      portsIn: [
        { name: "posX", value: 2.8 },
        { name: "posZ", value: 0 },
        { name: "scale", value: 20 },
        { name: "rotX", value: -221.86 },
        { name: "rotY", value: -14.3 },
        { name: "rotZ", value: 0 },
      ],
      portsOut: [
        {
          name: "trigger",
          links: [
            {
              portIn: "Render",
              portOut: "trigger",
              objIn: "pr42gl4je",
              objOut: "3epglv4s5",
            },
          ],
        },
      ],
      objName: "Ops.Gl.Matrix.Transform",
    },
    {
      id: "kz74gyd5g",
      uiAttribs: { subPatch: "ab28f98c-cb15-427f-986a-04aeaaa181f4" },
      portsIn: [
        { name: "X", value: 0.07 },
        { name: "Y", value: 0.12 },
        { name: "Input Type index", value: 0 },
        { name: "Input Type", value: "-1 to 1" },
      ],
      portsOut: [
        {
          name: "Trigger out",
          links: [
            {
              portIn: "render",
              portOut: "Trigger out",
              objIn: "3epglv4s5",
              objOut: "kz74gyd5g",
            },
          ],
        },
        { name: "Result X", value: 2.2499999403953552 },
        {
          name: "Result Y",
          links: [
            {
              portIn: "posY",
              portOut: "Result Y",
              objIn: "3epglv4s5",
              objOut: "kz74gyd5g",
            },
          ],
        },
      ],
      objName: "Ops.Gl.Matrix.ScreenPosTo3d_v3",
    },
    {
      id: "val0mhtoj",
      uiAttribs: {},
      portsIn: [
        { name: "String 0", value: "mq1" },
        { name: "String 1", value: "mq2" },
        { name: "String 2", value: "mq3" },
        { name: "String 3", value: "" },
        { name: "String 4", value: "" },
        { name: "String 5", value: "" },
        { name: "String 6", value: "" },
        { name: "String 7", value: "" },
        { name: "String 8", value: "" },
        { name: "String 9", value: "" },
        { name: "String 10", value: "" },
        { name: "String 11", value: "" },
        { name: "String 12", value: "" },
        { name: "String 13", value: "" },
        { name: "String 14", value: "" },
        { name: "String 15", value: "" },
        { name: "String 16", value: "" },
        { name: "String 17", value: "" },
        { name: "String 18", value: "" },
        { name: "String 19", value: "" },
        { name: "String 20", value: "" },
        { name: "String 21", value: "" },
        { name: "String 22", value: "" },
        { name: "String 23", value: "" },
      ],
      portsOut: [
        { name: "Switched Index", value: 2 },
        {
          name: "Trigger 0",
          links: [
            {
              portIn: "render",
              portOut: "Trigger 0",
              objIn: "6velbs3jo",
              objOut: "val0mhtoj",
            },
          ],
        },
        {
          name: "Trigger 1",
          links: [
            {
              portIn: "render",
              portOut: "Trigger 1",
              objIn: "h39znwnt5",
              objOut: "val0mhtoj",
            },
          ],
        },
        {
          name: "Trigger 2",
          links: [
            {
              portIn: "render",
              portOut: "Trigger 2",
              objIn: "qskdnkqbh",
              objOut: "val0mhtoj",
            },
          ],
        },
      ],
      objName: "Ops.Trigger.RouteTriggerString_v2",
    },
    {
      id: "uqyteclc3",
      uiAttribs: {},
      portsIn: [
        { name: "String 0", value: "mq1" },
        { name: "String 1", value: "mq2" },
        { name: "String 2", value: "mq3" },
        { name: "String 3", value: "" },
        { name: "String 4", value: "" },
        { name: "String 5", value: "" },
        { name: "String 6", value: "" },
        { name: "String 7", value: "" },
        { name: "String 8", value: "" },
        { name: "String 9", value: "" },
        { name: "String 10", value: "" },
        { name: "String 11", value: "" },
        { name: "String 12", value: "" },
        { name: "String 13", value: "" },
        { name: "String 14", value: "" },
        { name: "String 15", value: "" },
        { name: "String 16", value: "" },
        { name: "String 17", value: "" },
        { name: "String 18", value: "" },
        { name: "String 19", value: "" },
        { name: "String 20", value: "" },
        { name: "String 21", value: "" },
        { name: "String 22", value: "" },
        { name: "String 23", value: "" },
      ],
      portsOut: [
        {
          name: "Switched Index",
          links: [
            {
              portIn: "Value",
              portOut: "Switched Index",
              objIn: "400e715b-2702-4f99-acf3-b545cbb099f7",
              objOut: "uqyteclc3",
            },
          ],
        },
        {
          name: "Trigger 0",
          links: [
            {
              portIn: "exe",
              portOut: "Trigger 0",
              objIn: "l6tabrnqs",
              objOut: "uqyteclc3",
            },
          ],
        },
        {
          name: "Trigger 1",
          links: [
            {
              portIn: "exe",
              portOut: "Trigger 1",
              objIn: "o5t2bt6k9",
              objOut: "uqyteclc3",
            },
          ],
        },
        {
          name: "Trigger 2",
          links: [
            {
              portIn: "exe",
              portOut: "Trigger 2",
              objIn: "qf6lbghx2",
              objOut: "uqyteclc3",
            },
            {
              portIn: "in0 Accumulator Trigger in",
              portOut: "Trigger 2",
              objIn: "xciwr2lx9",
              objOut: "uqyteclc3",
            },
          ],
        },
      ],
      objName: "Ops.Trigger.RouteTriggerString_v2",
    },
    {
      id: "o6iq01n0j",
      uiAttribs: {},
      portsIn: [
        { name: "String 0", value: "index" },
        { name: "String 1", value: "works" },
        { name: "String 2", value: "" },
        { name: "String 3", value: "" },
        { name: "String 4", value: "" },
        { name: "String 5", value: "" },
        { name: "String 6", value: "" },
        { name: "String 7", value: "" },
        { name: "String 8", value: "" },
        { name: "String 9", value: "" },
        { name: "String 10", value: "" },
        { name: "String 11", value: "" },
        { name: "String 12", value: "" },
        { name: "String 13", value: "" },
        { name: "String 14", value: "" },
        { name: "String 15", value: "" },
        { name: "String 16", value: "" },
        { name: "String 17", value: "" },
        { name: "String 18", value: "" },
        { name: "String 19", value: "" },
        { name: "String 20", value: "" },
        { name: "String 21", value: "" },
        { name: "String 22", value: "" },
        { name: "String 23", value: "" },
      ],
      portsOut: [
        {
          name: "Switched Index",
          links: [
            {
              portIn: "Value",
              portOut: "Switched Index",
              objIn: "dwq5osdkj",
              objOut: "o6iq01n0j",
            },
          ],
        },
        {
          name: "Trigger 0",
          links: [
            {
              portIn: "render",
              portOut: "Trigger 0",
              objIn: "5cuc5vqu0",
              objOut: "o6iq01n0j",
            },
            {
              portIn: "in0 Ops.Trigger.RouteTriggerString_v2 Trigger 0",
              portOut: "Trigger 0",
              objIn: "425b037e-4043-4a0d-8402-af6e284f76b4",
              objOut: "o6iq01n0j",
            },
          ],
        },
        {
          name: "Trigger 1",
          links: [
            {
              portIn: "render",
              portOut: "Trigger 1",
              objIn: "7e4ey2fi4",
              objOut: "o6iq01n0j",
            },
            {
              portIn: "in0 Ops.Trigger.RouteTriggerString_v2 Trigger 1",
              portOut: "Trigger 1",
              objIn: "c3020432-d72e-41bb-8274-dbd55ba98235",
              objOut: "o6iq01n0j",
            },
          ],
        },
      ],
      objName: "Ops.Trigger.RouteTriggerString_v2",
    },
    {
      id: "02dqfiup0",
      uiAttribs: { subPatch: "f367970a-2b76-4d41-a0e5-f709cc8d452e" },
      portsOut: [
        { name: "create port", value: 0 },
        {
          name: "in0 ImageCompose Render",
          links: [
            {
              portIn: "Render",
              portOut: "in0 ImageCompose Render",
              objIn: "cf4kalvny",
              objOut: "02dqfiup0",
            },
          ],
        },
      ],
      objName: "Ops.Ui.PatchInput",
    },
    {
      id: "e4uv0ty50",
      uiAttribs: { subPatch: "f367970a-2b76-4d41-a0e5-f709cc8d452e" },
      portsIn: [{ name: "create port", value: 0 }],
      objName: "Ops.Ui.PatchOutput",
    },
    {
      id: "3aemrntxe",
      uiAttribs: {},
      storage: { subPatchVer: 1 },
      portsIn: [
        { name: "create port", value: 0 },
        {
          name: "dataStr",
          value:
            '{"ports":[{"name":"in0 ImageCompose Render","type":1}],"portsOut":[{"name":"out0 var set Value","type":2,"objType":"texture"}]}',
        },
        { name: "patchId", value: "f367970a-2b76-4d41-a0e5-f709cc8d452e" },
      ],
      portsOut: [
        { name: "create port out", value: 0 },
        {
          name: "out0 var set Value",
          links: [
            {
              portIn: "Value",
              portOut: "out0 var set Value",
              objIn: "zwjfh1hin",
              objOut: "3aemrntxe",
            },
          ],
        },
      ],
      objName: "Ops.Ui.SubPatch",
    },
    {
      id: "uozfbhj8i",
      uiAttribs: { subPatch: "f367970a-2b76-4d41-a0e5-f709cc8d452e" },
      portsIn: [
        { name: "Blend Mode index", value: 0 },
        { name: "Blend Mode", value: "normal" },
        { name: "Amount", value: 1 },
        { name: "Method index", value: 0 },
        { name: "Method", value: "Luminance" },
        { name: "Min", value: 0 },
        { name: "Max", value: 1 },
        { name: "Position", value: 0 },
      ],
      objName: "Ops.Gl.ImageCompose.ColorMap_v2",
    },
    {
      id: "cf4kalvny",
      uiAttribs: { subPatch: "f367970a-2b76-4d41-a0e5-f709cc8d452e" },
      portsIn: [
        { name: "Size index", value: 0 },
        { name: "Size", value: "Auto" },
        { name: "Width", value: 512 },
        { name: "Height", value: 512 },
        { name: "Filter index", value: 1 },
        { name: "Filter", value: "linear" },
        { name: "Wrap index", value: 0 },
        { name: "Wrap", value: "clamp to edge" },
        { name: "Pixel Format index", value: 0 },
        { name: "Pixel Format", value: "RGBA 8bit ubyte" },
        { name: "R", value: 0 },
        { name: "G", value: 0 },
        { name: "B", value: 0 },
        { name: "A", value: 0 },
      ],
      portsOut: [
        {
          name: "Next",
          links: [
            {
              portIn: "render",
              portOut: "Next",
              objIn: "ofypb04dc",
              objOut: "cf4kalvny",
            },
          ],
        },
        {
          name: "texture_out",
          links: [
            {
              portIn: "out0 var set Value",
              portOut: "texture_out",
              objIn: "e4uv0ty50",
              objOut: "cf4kalvny",
            },
          ],
        },
        { name: "Aspect Ratio", value: 1.5936507936507935 },
        { name: "Texture Width", value: 1004 },
        { name: "Texture Height", value: 630 },
      ],
      objName: "Ops.Gl.ImageCompose.ImageCompose_v4",
    },
    {
      id: "ofypb04dc",
      uiAttribs: { subPatch: "f367970a-2b76-4d41-a0e5-f709cc8d452e" },
      portsIn: [
        { name: "Blend Mode index", value: 0 },
        { name: "Blend Mode", value: "normal" },
        { name: "Alpha Mask index", value: 0 },
        { name: "Alpha Mask", value: "Off" },
        { name: "Amount", value: 1 },
        { name: "Color index", value: 0 },
        { name: "Color", value: "Mono" },
        { name: "Scale", value: 0.5 },
        { name: "Multiply", value: 3 },
        { name: "Value index", value: 0 },
        { name: "Value", value: "0-1" },
        { name: "Harmonics index", value: 0 },
        { name: "Harmonics", value: "1" },
        { name: "X", value: 0 },
        { name: "Y", value: 0 },
        { name: "Offset Multiply", value: 1 },
        { name: "Offset X index", value: 0 },
        { name: "Offset X", value: "None" },
        { name: "Offset Y index", value: 0 },
        { name: "Offset Y", value: "None" },
        { name: "Offset Z index", value: 1 },
        { name: "Offset Z", value: "R" },
      ],
      portsOut: [
        {
          name: "trigger",
          links: [
            {
              portIn: "render",
              portOut: "trigger",
              objIn: "uozfbhj8i",
              objOut: "ofypb04dc",
            },
          ],
        },
      ],
      objName: "Ops.Gl.ImageCompose.Noise.PerlinNoise_v2",
    },
    {
      id: "mknzkas0h",
      uiAttribs: { subPatch: "f367970a-2b76-4d41-a0e5-f709cc8d452e" },
      portsIn: [
        { name: "Speed", value: 0.05 },
        { name: "Play", value: true },
        { name: "Sync to timeline", value: false },
      ],
      portsOut: [
        {
          name: "Time",
          links: [
            {
              portIn: "Z",
              portOut: "Time",
              objIn: "ofypb04dc",
              objOut: "mknzkas0h",
            },
          ],
        },
      ],
      objName: "Ops.Anim.Timer_v2",
    },
    {
      id: "qjn714dw3",
      uiAttribs: { subPatch: "f367970a-2b76-4d41-a0e5-f709cc8d452e" },
      portsIn: [
        {
          name: "Gradient",
          value:
            '{"keys":[{"pos":0,"posy":0.69,"r":0,"g":0,"b":1},{"pos":0.302734375,"posy":0.69,"r":0,"g":0,"b":1},{"pos":1,"posy":0.5,"r":0.1466666666666666,"g":0.1466666666666666,"b":0.1466666666666666},{"pos":1,"posy":0.5,"r":0.1466666666666666,"g":0.1466666666666666,"b":0.1466666666666666}]}',
        },
        { name: "Direction index", value: 0 },
        { name: "Direction", value: "X" },
        { name: "Smoothstep", value: false },
        { name: "Step", value: false },
        { name: "Flip", value: false },
        { name: "sRGB", value: false },
        { name: "Oklab", value: false },
        { name: "Size", value: 256 },
        { name: "filter index", value: 1 },
        { name: "filter", value: "linear" },
        { name: "wrap index", value: 0 },
        { name: "wrap", value: "clamp to edge" },
        { name: "Gradient Array", value: 0 },
      ],
      portsOut: [
        {
          name: "Texture",
          links: [
            {
              portIn: "Gradient",
              portOut: "Texture",
              objIn: "uozfbhj8i",
              objOut: "qjn714dw3",
            },
          ],
        },
      ],
      objName: "Ops.Gl.GradientTexture",
    },
    {
      id: "zwjfh1hin",
      uiAttribs: {},
      portsIn: [{ name: "Variable", value: "gradientTexture" }],
      objName: "Ops.Vars.VarSetTexture_v2",
    },
    {
      id: "d2zyvti8g",
      uiAttribs: {},
      portsIn: [{ name: "Named Trigger", value: "mainLoop" }],
      portsOut: [
        {
          name: "Triggered",
          links: [
            {
              portIn: "Exe",
              portOut: "Triggered",
              objIn: "0co9dzwpn",
              objOut: "d2zyvti8g",
            },
          ],
        },
      ],
      objName: "Ops.Trigger.TriggerReceive",
    },
    {
      id: "o9o1lvbn5",
      uiAttribs: {},
      portsIn: [{ name: "Index", value: 0 }],
      portsOut: [
        {
          name: "X",
          links: [
            {
              portIn: "posX",
              portOut: "X",
              objIn: "3e9jbf60v",
              objOut: "o9o1lvbn5",
            },
          ],
        },
        {
          name: "Y",
          links: [
            {
              portIn: "posY",
              portOut: "Y",
              objIn: "3e9jbf60v",
              objOut: "o9o1lvbn5",
            },
          ],
        },
        {
          name: "Z",
          links: [
            {
              portIn: "posZ",
              portOut: "Z",
              objIn: "3e9jbf60v",
              objOut: "o9o1lvbn5",
            },
          ],
        },
      ],
      objName: "Ops.Array.Array3GetNumbers",
    },
    {
      id: "cqjowcwqt",
      uiAttribs: {},
      portsIn: [{ name: "index", value: 3 }],
      portsOut: [
        {
          name: "value",
          links: [
            {
              portIn: "scale",
              portOut: "value",
              objIn: "3e9jbf60v",
              objOut: "cqjowcwqt",
            },
          ],
        },
      ],
      objName: "Ops.Array.ArrayGetNumber",
    },
    {
      id: "e6ylr7btl",
      uiAttribs: {},
      portsOut: [
        {
          name: "result",
          links: [
            {
              portIn: "rotZ",
              portOut: "result",
              objIn: "3e9jbf60v",
              objOut: "e6ylr7btl",
            },
          ],
        },
      ],
      objName: "Ops.Math.Sum",
    },
    {
      id: "ub6p4urcu",
      uiAttribs: {},
      portsIn: [{ name: "Index", value: 4 }],
      portsOut: [
        {
          name: "X",
          links: [
            {
              portIn: "number2",
              portOut: "X",
              objIn: "zpdk4s7hr",
              objOut: "ub6p4urcu",
            },
          ],
        },
        {
          name: "Y",
          links: [
            {
              portIn: "number2",
              portOut: "Y",
              objIn: "sd5jtt6y5",
              objOut: "ub6p4urcu",
            },
          ],
        },
        {
          name: "Z",
          links: [
            {
              portIn: "number2",
              portOut: "Z",
              objIn: "e6ylr7btl",
              objOut: "ub6p4urcu",
            },
          ],
        },
      ],
      objName: "Ops.Array.Array3GetNumbers",
    },
    {
      id: "zpdk4s7hr",
      uiAttribs: {},
      portsOut: [
        {
          name: "result",
          links: [
            {
              portIn: "rotX",
              portOut: "result",
              objIn: "3e9jbf60v",
              objOut: "zpdk4s7hr",
            },
          ],
        },
      ],
      objName: "Ops.Math.Sum",
    },
    {
      id: "sd5jtt6y5",
      uiAttribs: {},
      portsOut: [
        {
          name: "result",
          links: [
            {
              portIn: "rotY",
              portOut: "result",
              objIn: "3e9jbf60v",
              objOut: "sd5jtt6y5",
            },
          ],
        },
      ],
      objName: "Ops.Math.Sum",
    },
    {
      id: "517d43ff-1a0c-40b2-922f-ac3d72171222",
      uiAttribs: {},
      portsIn: [
        { name: "Array 1", value: 0 },
        { name: "Array 2", value: 0 },
      ],
      portsOut: [{ name: "Array length", value: 0 }],
      objName: "Ops.Array.ArrayPack2",
    },
    {
      id: "h39znwnt5",
      uiAttribs: {},
      portsIn: [
        { name: "posX", value: 3.08 },
        { name: "posY", value: -7.14 },
        { name: "posZ", value: 0 },
        { name: "scale", value: 8.5 },
        { name: "rotX", value: -15.34 },
        { name: "rotY", value: 33.89 },
        { name: "rotZ", value: -2.06 },
      ],
      portsOut: [
        {
          name: "trigger",
          links: [
            {
              portIn: "in0 Ops.Gl.Matrix.TransformView trigger",
              portOut: "trigger",
              objIn: "09j1w8t67",
              objOut: "h39znwnt5",
            },
          ],
        },
      ],
      objName: "Ops.Gl.Matrix.TransformView",
    },
    {
      id: "50466924-e24f-4a70-8a30-07952092a3b5",
      uiAttribs: {},
      portsIn: [{ name: "number2", value: 1 }],
      portsOut: [
        {
          name: "result",
          links: [
            {
              portIn: "rotX",
              portOut: "result",
              objIn: "qskdnkqbh",
              objOut: "50466924-e24f-4a70-8a30-07952092a3b5",
            },
          ],
        },
      ],
      objName: "Ops.Math.Sum",
    },
    {
      id: "q1ipltazp",
      uiAttribs: {},
      portsIn: [{ name: "number2", value: 1 }],
      portsOut: [
        {
          name: "result",
          links: [
            {
              portIn: "rotY",
              portOut: "result",
              objIn: "qskdnkqbh",
              objOut: "q1ipltazp",
            },
          ],
        },
      ],
      objName: "Ops.Math.Sum",
    },
    {
      id: "n25ws11bd",
      uiAttribs: {},
      portsIn: [{ name: "number2", value: 301.22 }],
      portsOut: [
        {
          name: "result",
          links: [
            {
              portIn: "rotZ",
              portOut: "result",
              objIn: "qskdnkqbh",
              objOut: "n25ws11bd",
            },
          ],
        },
      ],
      objName: "Ops.Math.Sum",
    },
    {
      id: "5bf8ed48-cc97-4597-a6f0-82572be13d7d",
      uiAttribs: { subPatch: "0d43ee2c-77f9-426f-94be-83a5661c1c30" },
      portsIn: [
        { name: "Speed", value: 1 },
        { name: "Play", value: true },
        { name: "Sync to timeline", value: false },
      ],
      portsOut: [
        {
          name: "Time",
          links: [
            {
              portIn: "value",
              portOut: "Time",
              objIn: "56630f3d-37e4-4812-bbf6-467817062d8c",
              objOut: "5bf8ed48-cc97-4597-a6f0-82572be13d7d",
            },
          ],
        },
      ],
      objName: "Ops.Anim.Timer_v2",
    },
    {
      id: "2e13fdb7-07bb-4725-9c68-8896336e559f",
      uiAttribs: { subPatch: "0d43ee2c-77f9-426f-94be-83a5661c1c30" },
      portsOut: [
        {
          name: "Next",
          links: [
            {
              portIn: "Reset",
              portOut: "Next",
              objIn: "5bf8ed48-cc97-4597-a6f0-82572be13d7d",
              objOut: "2e13fdb7-07bb-4725-9c68-8896336e559f",
            },
          ],
        },
        { name: "Number", value: -0.7550432276657061 },
      ],
      objName: "Ops.Number.TriggerOnChangeNumber",
    },
    {
      id: "56630f3d-37e4-4812-bbf6-467817062d8c",
      uiAttribs: { subPatch: "0d43ee2c-77f9-426f-94be-83a5661c1c30" },
      portsIn: [
        { name: "old min", value: 0 },
        { name: "old max", value: 5 },
        { name: "new min", value: 1 },
        { name: "new max", value: 0 },
        { name: "Easing index", value: 0 },
        { name: "Easing", value: "Linear" },
      ],
      portsOut: [
        {
          name: "result",
          links: [
            {
              portIn: "number2",
              portOut: "result",
              objIn: "81d72014-bb34-4744-a501-118c439e0e63",
              objOut: "56630f3d-37e4-4812-bbf6-467817062d8c",
            },
          ],
        },
      ],
      objName: "Ops.Math.MapRange",
    },
    {
      id: "81d72014-bb34-4744-a501-118c439e0e63",
      uiAttribs: { subPatch: "0d43ee2c-77f9-426f-94be-83a5661c1c30" },
      portsOut: [
        {
          name: "result",
          links: [
            {
              portIn: "Multiplier to add number",
              portOut: "result",
              objIn: "2m41zlvup",
              objOut: "81d72014-bb34-4744-a501-118c439e0e63",
            },
            {
              portIn: "Multiplier to add number",
              portOut: "result",
              objIn: "letw5oe6b",
              objOut: "81d72014-bb34-4744-a501-118c439e0e63",
            },
          ],
        },
      ],
      objName: "Ops.Math.Multiply",
    },
    {
      id: "264f7705-d351-4704-b1af-31a96f652a42",
      uiAttribs: { subPatch: "8aabf450-104c-4af6-a226-3166d810c3b7" },
      portsOut: [
        { name: "create port", value: 0 },
        {
          name: "in0 Ops.Trigger.RouteTriggerString_v2 Trigger 0",
          links: [
            {
              portIn: "render",
              portOut: "in0 Ops.Trigger.RouteTriggerString_v2 Trigger 0",
              objIn: "sbutkbbpd",
              objOut: "264f7705-d351-4704-b1af-31a96f652a42",
            },
            {
              portIn: "Update",
              portOut: "in0 Ops.Trigger.RouteTriggerString_v2 Trigger 0",
              objIn: "fdffb771-d6eb-4b9d-b1b2-5f9259464c9d",
              objOut: "264f7705-d351-4704-b1af-31a96f652a42",
            },
          ],
        },
      ],
      objName: "Ops.Ui.PatchInput",
    },
    {
      id: "633fcfd6-3b60-4199-8456-600c4268674b",
      uiAttribs: { subPatch: "8aabf450-104c-4af6-a226-3166d810c3b7" },
      portsIn: [{ name: "create port", value: 0 }],
      objName: "Ops.Ui.PatchOutput",
    },
    {
      id: "425b037e-4043-4a0d-8402-af6e284f76b4",
      uiAttribs: {},
      storage: { subPatchVer: 1 },
      portsIn: [
        { name: "create port", value: 0 },
        {
          name: "dataStr",
          value:
            '{"ports":[{"name":"in0 Ops.Trigger.RouteTriggerString_v2 Trigger 0","type":1}],"portsOut":[{"name":"out0 var set Value","type":2,"objType":"texture"}]}',
        },
        { name: "patchId", value: "8aabf450-104c-4af6-a226-3166d810c3b7" },
      ],
      portsOut: [
        { name: "create port out", value: 0 },
        {
          name: "out0 var set Value",
          links: [
            {
              portIn: "Value",
              portOut: "out0 var set Value",
              objIn: "j2v7lizv8",
              objOut: "425b037e-4043-4a0d-8402-af6e284f76b4",
            },
          ],
        },
      ],
      objName: "Ops.Ui.SubPatch",
    },
    {
      id: "ij6fmyxoh",
      uiAttribs: { subPatch: "8aabf450-104c-4af6-a226-3166d810c3b7" },
      portsIn: [{ name: "Variable", value: "aboutScroll" }],
      portsOut: [
        {
          name: "Value",
          links: [
            {
              portIn: "value",
              portOut: "Value",
              objIn: "77d96f78-698e-41ae-bb23-0629be5e1104",
              objOut: "ij6fmyxoh",
            },
          ],
        },
      ],
      objName: "Ops.Vars.VarGetNumber_v2",
    },
    {
      id: "77d96f78-698e-41ae-bb23-0629be5e1104",
      uiAttribs: { subPatch: "8aabf450-104c-4af6-a226-3166d810c3b7" },
      portsIn: [
        { name: "old min", value: 0.5 },
        { name: "old max", value: 1 },
        { name: "new min", value: 0 },
        { name: "new max", value: 4.62 },
        { name: "Easing index", value: 0 },
        { name: "Easing", value: "Linear" },
      ],
      portsOut: [
        {
          name: "result",
          links: [
            {
              portIn: "Value",
              portOut: "result",
              objIn: "fdffb771-d6eb-4b9d-b1b2-5f9259464c9d",
              objOut: "77d96f78-698e-41ae-bb23-0629be5e1104",
            },
          ],
        },
      ],
      objName: "Ops.Math.MapRange",
    },
    {
      id: "fdffb771-d6eb-4b9d-b1b2-5f9259464c9d",
      uiAttribs: { subPatch: "8aabf450-104c-4af6-a226-3166d810c3b7" },
      portsIn: [
        { name: "Separate inc/dec", value: false },
        { name: "Inc factor", value: 10, title: "Inc/Dec factor" },
        { name: "Dec factor", value: 4 },
      ],
      portsOut: [
        {
          name: "Result",
          links: [
            {
              portIn: "width",
              portOut: "Result",
              objIn: "7cd72475-69a9-4bc2-8455-ad4e77a5e94f",
              objOut: "fdffb771-d6eb-4b9d-b1b2-5f9259464c9d",
            },
          ],
        },
      ],
      objName: "Ops.Anim.Smooth",
    },
    {
      id: "567be9b1-31ea-4ecb-9d1a-c8247e2c1a5a",
      uiAttribs: { subPatch: "8aabf450-104c-4af6-a226-3166d810c3b7" },
      portsIn: [
        { name: "Scale", value: 1 },
        { name: "Font", value: "everettLight" },
        { name: "align index", value: 1 },
        { name: "align", value: "left" },
        { name: "vertical align index", value: 1 },
        { name: "vertical align", value: "Middle" },
        { name: "Line Height", value: 1 },
        { name: "Letter Spacing", value: 0 },
        { name: "filter index", value: 2 },
        { name: "filter", value: "linear" },
        { name: "Anisotropic index", value: 0 },
        { name: "Anisotropic", value: 0 },
        { name: "r", value: 1 },
        { name: "g", value: 1 },
        { name: "b", value: 1 },
      ],
      portsOut: [
        { name: "Total Lines", value: 1 },
        { name: "Width", value: 1.58499999273391 },
        { name: "Font Available", value: 1 },
      ],
      objName: "Ops.Gl.Meshes.TextMesh_v2",
    },
    {
      id: "7cd72475-69a9-4bc2-8455-ad4e77a5e94f",
      uiAttribs: { subPatch: "8aabf450-104c-4af6-a226-3166d810c3b7" },
      portsIn: [
        { name: "render", title: "Trigger" },
        { name: "Render Mesh", value: true, title: "Render" },
        { name: "height", value: 0.07 },
        { name: "pivot x index", value: 1 },
        { name: "pivot x", value: "left" },
        { name: "pivot y index", value: 1 },
        { name: "pivot y", value: "center" },
        { name: "axis index", value: 0 },
        { name: "axis", value: "xy" },
        { name: "Flip TexCoord X", value: false },
        { name: "Flip TexCoord Y", value: true },
        { name: "num columns", value: 1 },
        { name: "num rows", value: 1 },
      ],
      objName: "Ops.Gl.Meshes.Rectangle_v4",
    },
    {
      id: "5d0ec005-1f22-4816-ad6c-4835301ff51d",
      uiAttribs: { subPatch: "8aabf450-104c-4af6-a226-3166d810c3b7" },
      portsIn: [
        { name: "posX", value: 1.66 },
        { name: "posY", value: 0.67 },
        { name: "posZ", value: 0 },
        { name: "scale", value: 1 },
        { name: "rotX", value: 0 },
        { name: "rotY", value: 0 },
        { name: "rotZ", value: 0 },
      ],
      portsOut: [
        {
          name: "trigger",
          links: [
            {
              portIn: "render",
              portOut: "trigger",
              objIn: "7cd72475-69a9-4bc2-8455-ad4e77a5e94f",
              objOut: "5d0ec005-1f22-4816-ad6c-4835301ff51d",
            },
          ],
        },
      ],
      objName: "Ops.Gl.Matrix.Transform",
    },
    {
      id: "sbutkbbpd",
      uiAttribs: { subPatch: "8aabf450-104c-4af6-a226-3166d810c3b7" },
      portsIn: [
        { name: "Size index", value: 0 },
        { name: "Size", value: "Canvas" },
        { name: "texture width", value: 694 },
        { name: "texture height", value: 1080 },
        { name: "Auto Aspect", value: true },
        { name: "filter index", value: 1 },
        { name: "filter", value: "linear" },
        { name: "Wrap index", value: 1 },
        { name: "Wrap", value: "Repeat" },
        { name: "MSAA index", value: 0 },
        { name: "MSAA", value: "none" },
        { name: "Pixel Format index", value: 4 },
        { name: "Pixel Format", value: "RGBA 8bit ubyte" },
        { name: "Depth", value: true },
        { name: "Clear", value: true },
      ],
      portsOut: [
        {
          name: "trigger",
          links: [
            {
              portIn: "render",
              portOut: "trigger",
              objIn: "k5uqrdyel",
              objOut: "sbutkbbpd",
            },
          ],
        },
        {
          name: "texture",
          links: [
            {
              portIn: "out0 var set Value",
              portOut: "texture",
              objIn: "633fcfd6-3b60-4199-8456-600c4268674b",
              objOut: "sbutkbbpd",
            },
          ],
        },
      ],
      objName: "Ops.Gl.RenderToTexture_v3",
    },
    {
      id: "k5uqrdyel",
      uiAttribs: { subPatch: "8aabf450-104c-4af6-a226-3166d810c3b7" },
      portsIn: [
        { name: "r", value: 1 },
        { name: "g", value: 1 },
        { name: "b", value: 1 },
        { name: "a", value: 1 },
        { name: "colorizeTexture", value: false },
        { name: "Vertex Colors", value: false },
        { name: "Alpha Mask Source index", value: 0 },
        { name: "Alpha Mask Source", value: "Luminance" },
        { name: "Opacity TexCoords Transform", value: false },
        { name: "Discard Transparent Pixels", value: false },
        { name: "diffuseRepeatX", value: 1 },
        { name: "diffuseRepeatY", value: 1 },
        { name: "Tex Offset X", value: 0 },
        { name: "Tex Offset Y", value: 0 },
        { name: "Crop TexCoords", value: false },
        { name: "billboard", value: false },
      ],
      portsOut: [
        {
          name: "trigger",
          links: [
            {
              portIn: "Execute",
              portOut: "trigger",
              objIn: "8ddd41ca-6590-44ae-921e-e7a6d4100a9e",
              objOut: "k5uqrdyel",
            },
          ],
        },
      ],
      objName: "Ops.Gl.Shader.BasicMaterial_v3",
    },
    {
      id: "xgv9wair5",
      uiAttribs: { subPatch: "8aabf450-104c-4af6-a226-3166d810c3b7" },
      portsIn: [
        { name: "posX", value: 0 },
        { name: "posY", value: 1 },
        { name: "posZ", value: 0 },
        { name: "scale", value: 1 },
        { name: "rotX", value: 0 },
        { name: "rotY", value: 0 },
        { name: "rotZ", value: 0 },
      ],
      portsOut: [
        {
          name: "trigger",
          links: [
            {
              portIn: "Render",
              portOut: "trigger",
              objIn: "567be9b1-31ea-4ecb-9d1a-c8247e2c1a5a",
              objOut: "xgv9wair5",
            },
          ],
        },
      ],
      objName: "Ops.Gl.Matrix.Transform",
    },
    {
      id: "9246dc11-b438-4e67-8183-fde9e783d3e9",
      uiAttribs: { subPatch: "8aabf450-104c-4af6-a226-3166d810c3b7" },
      portsIn: [
        { name: "separator", value: " " },
        { name: "Numbers", value: false },
        { name: "Trim", value: true },
        { name: "Split Lines", value: false },
      ],
      portsOut: [
        {
          name: "array",
          links: [
            {
              portIn: "array",
              portOut: "array",
              objIn: "72e6d210-3cfb-4c65-a409-6503acb80fbb",
              objOut: "9246dc11-b438-4e67-8183-fde9e783d3e9",
            },
            {
              portIn: "array",
              portOut: "array",
              objIn: "6smsknegu",
              objOut: "9246dc11-b438-4e67-8183-fde9e783d3e9",
            },
            {
              portIn: "array",
              portOut: "array",
              objIn: "9ubmxweld",
              objOut: "9246dc11-b438-4e67-8183-fde9e783d3e9",
            },
          ],
        },
        { name: "length", value: 3 },
      ],
      objName: "Ops.Array.StringToArray_v2",
    },
    {
      id: "72e6d210-3cfb-4c65-a409-6503acb80fbb",
      uiAttribs: { subPatch: "8aabf450-104c-4af6-a226-3166d810c3b7" },
      portsIn: [{ name: "index", value: 0 }],
      portsOut: [
        {
          name: "result",
          links: [
            {
              portIn: "Text",
              portOut: "result",
              objIn: "567be9b1-31ea-4ecb-9d1a-c8247e2c1a5a",
              objOut: "72e6d210-3cfb-4c65-a409-6503acb80fbb",
            },
          ],
        },
      ],
      objName: "Ops.Array.ArrayGetString",
    },
    {
      id: "jqbsp3ksd",
      uiAttribs: { subPatch: "8aabf450-104c-4af6-a226-3166d810c3b7" },
      portsIn: [
        { name: "Scale", value: 1 },
        { name: "Font", value: "everettBold" },
        { name: "align index", value: 1 },
        { name: "align", value: "left" },
        { name: "vertical align index", value: 1 },
        { name: "vertical align", value: "Middle" },
        { name: "Line Height", value: 1 },
        { name: "Letter Spacing", value: 0 },
        { name: "filter index", value: 2 },
        { name: "filter", value: "linear" },
        { name: "Anisotropic index", value: 0 },
        { name: "Anisotropic", value: 0 },
        { name: "r", value: 1 },
        { name: "g", value: 1 },
        { name: "b", value: 1 },
      ],
      portsOut: [
        { name: "Total Lines", value: 1 },
        { name: "Width", value: 1.997142791748047 },
        { name: "Font Available", value: 1 },
      ],
      objName: "Ops.Gl.Meshes.TextMesh_v2",
    },
    {
      id: "xx9i0ectp",
      uiAttribs: { subPatch: "8aabf450-104c-4af6-a226-3166d810c3b7" },
      portsIn: [
        { name: "posX", value: 1.65 },
        { name: "posY", value: 1 },
        { name: "posZ", value: 0 },
        { name: "scale", value: 1 },
        { name: "rotX", value: 0 },
        { name: "rotY", value: 0 },
        { name: "rotZ", value: 0 },
      ],
      portsOut: [
        {
          name: "trigger",
          links: [
            {
              portIn: "Render",
              portOut: "trigger",
              objIn: "jqbsp3ksd",
              objOut: "xx9i0ectp",
            },
          ],
        },
      ],
      objName: "Ops.Gl.Matrix.Transform",
    },
    {
      id: "6smsknegu",
      uiAttribs: { subPatch: "8aabf450-104c-4af6-a226-3166d810c3b7" },
      portsIn: [{ name: "index", value: 1 }],
      portsOut: [
        {
          name: "result",
          links: [
            {
              portIn: "Text",
              portOut: "result",
              objIn: "jqbsp3ksd",
              objOut: "6smsknegu",
            },
          ],
        },
      ],
      objName: "Ops.Array.ArrayGetString",
    },
    {
      id: "uui9drc5q",
      uiAttribs: { subPatch: "8aabf450-104c-4af6-a226-3166d810c3b7" },
      portsIn: [
        { name: "Scale", value: 1 },
        { name: "Font", value: "everettLight" },
        { name: "align index", value: 1 },
        { name: "align", value: "left" },
        { name: "vertical align index", value: 1 },
        { name: "vertical align", value: "Middle" },
        { name: "Line Height", value: 1 },
        { name: "Letter Spacing", value: 0 },
        { name: "filter index", value: 2 },
        { name: "filter", value: "linear" },
        { name: "Anisotropic index", value: 0 },
        { name: "Anisotropic", value: 0 },
        { name: "r", value: 1 },
        { name: "g", value: 1 },
        { name: "b", value: 1 },
      ],
      portsOut: [
        { name: "Total Lines", value: 1 },
        { name: "Width", value: 3.1114285786946616 },
        { name: "Font Available", value: 1 },
      ],
      objName: "Ops.Gl.Meshes.TextMesh_v2",
    },
    {
      id: "fknvcvc8z",
      uiAttribs: { subPatch: "8aabf450-104c-4af6-a226-3166d810c3b7" },
      portsIn: [
        { name: "posX", value: 0 },
        { name: "posY", value: 0.25 },
        { name: "posZ", value: 0 },
        { name: "scale", value: 1 },
        { name: "rotX", value: 0 },
        { name: "rotY", value: 0 },
        { name: "rotZ", value: 0 },
      ],
      portsOut: [
        {
          name: "trigger",
          links: [
            {
              portIn: "Render",
              portOut: "trigger",
              objIn: "uui9drc5q",
              objOut: "fknvcvc8z",
            },
          ],
        },
      ],
      objName: "Ops.Gl.Matrix.Transform",
    },
    {
      id: "t4olo9axm",
      uiAttribs: { subPatch: "8aabf450-104c-4af6-a226-3166d810c3b7" },
      portsIn: [
        { name: "posZ", value: 0 },
        { name: "rotX", value: 0 },
        { name: "rotY", value: 0 },
        { name: "rotZ", value: 0 },
      ],
      portsOut: [
        {
          name: "trigger",
          links: [
            {
              portIn: "render",
              portOut: "trigger",
              objIn: "xgv9wair5",
              objOut: "t4olo9axm",
            },
            {
              portIn: "render",
              portOut: "trigger",
              objIn: "xx9i0ectp",
              objOut: "t4olo9axm",
            },
            {
              portIn: "render",
              portOut: "trigger",
              objIn: "fknvcvc8z",
              objOut: "t4olo9axm",
            },
            {
              portIn: "render",
              portOut: "trigger",
              objIn: "5d0ec005-1f22-4816-ad6c-4835301ff51d",
              objOut: "t4olo9axm",
            },
          ],
        },
      ],
      objName: "Ops.Gl.Matrix.Transform",
    },
    {
      id: "9ubmxweld",
      uiAttribs: { subPatch: "8aabf450-104c-4af6-a226-3166d810c3b7" },
      portsIn: [{ name: "index", value: 2 }],
      portsOut: [
        {
          name: "result",
          links: [
            {
              portIn: "Text",
              portOut: "result",
              objIn: "uui9drc5q",
              objOut: "9ubmxweld",
            },
          ],
        },
      ],
      objName: "Ops.Array.ArrayGetString",
    },
    {
      id: "d6dfe00c-a333-4385-a551-7ca5093b463e",
      uiAttribs: {},
      portsIn: [
        { name: "file", display: "file" },
        { name: "family", value: "everettLight" },
      ],
      portsOut: [{ name: "Loaded", value: 1 }],
      objName: "Ops.Html.FontFile_v2",
    },
    {
      id: "fe53c691-9587-4d39-9499-356538b54e80",
      uiAttribs: {},
      portsIn: [
        { name: "file", display: "file" },
        { name: "family", value: "everettBold" },
      ],
      portsOut: [{ name: "Loaded", value: 1 }],
      objName: "Ops.Html.FontFile_v2",
    },
    {
      id: "3d3047d4-9fe2-44ed-97f3-f629a929d695",
      uiAttribs: { subPatch: "8aabf450-104c-4af6-a226-3166d810c3b7" },
      portsIn: [
        { name: "Input Type index", value: 0 },
        { name: "Input Type", value: "-1 to 1" },
      ],
      portsOut: [
        {
          name: "Trigger out",
          links: [
            {
              portIn: "render",
              portOut: "Trigger out",
              objIn: "t4olo9axm",
              objOut: "3d3047d4-9fe2-44ed-97f3-f629a929d695",
            },
          ],
        },
        {
          name: "Result X",
          links: [
            {
              portIn: "posX",
              portOut: "Result X",
              objIn: "t4olo9axm",
              objOut: "3d3047d4-9fe2-44ed-97f3-f629a929d695",
            },
          ],
        },
        {
          name: "Result Y",
          links: [
            {
              portIn: "posY",
              portOut: "Result Y",
              objIn: "t4olo9axm",
              objOut: "3d3047d4-9fe2-44ed-97f3-f629a929d695",
            },
          ],
        },
      ],
      objName: "Ops.Gl.Matrix.ScreenPosTo3d_v3",
    },
    {
      id: "56ab535f-13e7-4255-a15c-46783459d78f",
      uiAttribs: {},
      portsIn: [
        {
          name: "value",
          value:
            "https://uploads-ssl.webflow.com/630ca11296e48c2b70f1013e/652bc291b62af154c444c7f5_TWKEverett-Bold.otf",
        },
      ],
      portsOut: [
        {
          name: "String",
          links: [
            {
              portIn: "file",
              portOut: "String",
              objIn: "fe53c691-9587-4d39-9499-356538b54e80",
              objOut: "56ab535f-13e7-4255-a15c-46783459d78f",
            },
          ],
        },
      ],
      objName: "Ops.String.String_v2",
    },
    {
      id: "j64yb3d3e",
      uiAttribs: {},
      portsIn: [
        {
          name: "value",
          value:
            "https://uploads-ssl.webflow.com/630ca11296e48c2b70f1013e/652bc29129f6f7d9d2e6a5e7_TWKEverett-Light.otf",
        },
      ],
      portsOut: [
        {
          name: "String",
          links: [
            {
              portIn: "file",
              portOut: "String",
              objIn: "d6dfe00c-a333-4385-a551-7ca5093b463e",
              objOut: "j64yb3d3e",
            },
          ],
        },
      ],
      objName: "Ops.String.String_v2",
    },
    {
      id: "lmxf57w6m",
      uiAttribs: { subPatch: "0ff66c6c-0dc3-43ce-bbac-906b76f3f60b" },
      portsIn: [
        { name: "file", display: "file" },
        { name: "loop", value: true },
        { name: "Volume", value: 0.5 },
        { name: "Update FPS", value: 25 },
        { name: "Filter index", value: 1 },
        { name: "Filter", value: "linear" },
        { name: "Wrap index", value: 2 },
        { name: "Wrap", value: "repeat" },
        { name: "flip", value: true },
        { name: "set time", value: 0 },
        { name: "Preload", value: true },
        { name: "Show Interaction needed Button", value: false },
      ],
      portsOut: [
        {
          name: "Next",
          links: [
            {
              portIn: "exec",
              portOut: "Next",
              objIn: "wm3l5lbrt",
              objOut: "lmxf57w6m",
            },
          ],
        },
        {
          name: "texture",
          links: [
            {
              portIn: "texture0",
              portOut: "texture",
              objIn: "wm3l5lbrt",
              objOut: "lmxf57w6m",
            },
          ],
        },
        { name: "duration", value: 70.57 },
        { name: "progress", value: 0.21846728071418453 },
        { name: "Interaction Needed", value: 0 },
        { name: "CurrentTime", value: 15.417236 },
        {
          name: "Loading",
          links: [
            {
              portIn: "in bool",
              portOut: "Loading",
              objIn: "k66hq3ihz",
              objOut: "lmxf57w6m",
            },
          ],
        },
        { name: "Playing", value: 1 },
        { name: "Can Play Through", value: 1 },
        { name: "Width", value: 1920 },
        { name: "Height", value: 1080 },
        {
          name: "Aspect Ratio",
          links: [
            {
              portIn: "Value 0",
              portOut: "Aspect Ratio",
              objIn: "728bc2af-66ca-4c6f-a6d4-2b51f809033d",
              objOut: "lmxf57w6m",
            },
          ],
        },
        { name: "Has Error", value: 1 },
        {
          name: "Error Message",
          value:
            "Error 2/PIPELINE_ERROR_READ: FFmpegDemuxer: data source error",
        },
      ],
      objName: "Ops.Gl.Textures.VideoTexture_v3",
    },
    {
      id: "ck7se7ko6",
      uiAttribs: { subPatch: "0ff66c6c-0dc3-43ce-bbac-906b76f3f60b" },
      portsIn: [
        { name: "File", display: "file" },
        { name: "Filter index", value: 0 },
        { name: "Filter", value: "mipmap" },
        { name: "Wrap index", value: 2 },
        { name: "Wrap", value: "repeat" },
        { name: "Anisotropic index", value: 0 },
        { name: "Anisotropic", value: "0" },
        { name: "Data Format index", value: 3 },
        { name: "Data Format", value: "RGB" },
        { name: "Flip", value: false },
        { name: "Pre Multiplied Alpha", value: false },
        { name: "Save Memory", value: true },
      ],
      portsOut: [
        {
          name: "Texture",
          links: [
            {
              portIn: "texture1",
              portOut: "Texture",
              objIn: "wm3l5lbrt",
              objOut: "ck7se7ko6",
            },
          ],
        },
        { name: "Width", value: 8 },
        { name: "Height", value: 8 },
        {
          name: "Aspect Ratio",
          links: [
            {
              portIn: "Value 1",
              portOut: "Aspect Ratio",
              objIn: "728bc2af-66ca-4c6f-a6d4-2b51f809033d",
              objOut: "ck7se7ko6",
            },
          ],
        },
        { name: "Loaded", value: true },
        { name: "Loading", value: false },
      ],
      objName: "Ops.Gl.Texture_v2",
    },
    {
      id: "1vm54l2e2",
      uiAttribs: { subPatch: "0ff66c6c-0dc3-43ce-bbac-906b76f3f60b" },
      portsIn: [{ name: "Variable", value: "imageUrl" }],
      portsOut: [
        {
          name: "Value",
          links: [
            {
              portIn: "File",
              portOut: "Value",
              objIn: "ck7se7ko6",
              objOut: "1vm54l2e2",
            },
          ],
        },
      ],
      objName: "Ops.Vars.VarGetString",
    },
    {
      id: "wm3l5lbrt",
      uiAttribs: { subPatch: "0ff66c6c-0dc3-43ce-bbac-906b76f3f60b" },
      portsIn: [{ name: "Default Texture Transparent", value: true }],
      portsOut: [
        {
          name: "Next",
          links: [
            {
              portIn: "render",
              portOut: "Next",
              objIn: "v38pi7nzw",
              objOut: "wm3l5lbrt",
            },
          ],
        },
        {
          name: "texture",
          links: [
            {
              portIn: "textureInput",
              portOut: "texture",
              objIn: "v38pi7nzw",
              objOut: "wm3l5lbrt",
            },
          ],
        },
      ],
      objName: "Ops.Gl.Textures.SwitchTextures_v2",
    },
    {
      id: "3czynyjwm",
      uiAttribs: { subPatch: "0ff66c6c-0dc3-43ce-bbac-906b76f3f60b" },
      portsOut: [
        {
          name: "result",
          links: [
            {
              portIn: "num",
              portOut: "result",
              objIn: "wm3l5lbrt",
              objOut: "3czynyjwm",
            },
          ],
        },
      ],
      objName: "Ops.Number.Number",
    },
    {
      id: "b4tefn2a1",
      uiAttribs: { subPatch: "0ff66c6c-0dc3-43ce-bbac-906b76f3f60b" },
      portsOut: [
        {
          name: "result",
          links: [
            {
              portIn: "Value",
              portOut: "result",
              objIn: "o2rjjfyi8",
              objOut: "b4tefn2a1",
            },
            {
              portIn: "speed",
              portOut: "result",
              objIn: "lmxf57w6m",
              objOut: "b4tefn2a1",
            },
          ],
        },
      ],
      objName: "Ops.Number.Number",
    },
    {
      id: "9sekcc5gw",
      uiAttribs: { subPatch: "0ff66c6c-0dc3-43ce-bbac-906b76f3f60b" },
      portsIn: [
        { name: "Coordinates index", value: 0 },
        { name: "Coordinates", value: "-1 to 1" },
        { name: "Area index", value: 0 },
        { name: "Area", value: "Canvas" },
        { name: "flip y", value: true },
        { name: "right click prevent default", value: true },
        { name: "Touch support", value: true },
      ],
      portsOut: [
        { name: "x", value: -0.7550432276657061 },
        { name: "y", value: -0.7851851851851852 },
        {
          name: "click",
          links: [
            {
              portIn: "Execute",
              portOut: "click",
              objIn: "3j7vi0s9v",
              objOut: "9sekcc5gw",
            },
          ],
        },
        { name: "Button is down", value: 0 },
        { name: "Mouse is hovering", value: 0 },
      ],
      objName: "Ops.Devices.Mouse.Mouse_v3",
    },
    {
      id: "wo3yxin4e",
      uiAttribs: { subPatch: "0ff66c6c-0dc3-43ce-bbac-906b76f3f60b" },
      portsIn: [{ name: "Default", value: false }],
      portsOut: [
        {
          name: "result",
          links: [
            {
              portIn: "value",
              portOut: "result",
              objIn: "b4tefn2a1",
              objOut: "wo3yxin4e",
            },
          ],
        },
      ],
      objName: "Ops.Boolean.ToggleBool_v2",
    },
    {
      id: "3j7vi0s9v",
      uiAttribs: { subPatch: "0ff66c6c-0dc3-43ce-bbac-906b76f3f60b" },
      portsIn: [{ name: "Pass Through", value: true }],
      portsOut: [
        {
          name: "Trigger out",
          links: [
            {
              portIn: "trigger",
              portOut: "Trigger out",
              objIn: "wo3yxin4e",
              objOut: "3j7vi0s9v",
            },
          ],
        },
      ],
      objName: "Ops.Trigger.GateTrigger",
    },
    {
      id: "7b956q2sq",
      uiAttribs: { subPatch: "0ff66c6c-0dc3-43ce-bbac-906b76f3f60b" },
      portsIn: [{ name: "SearchValue", value: ".png" }],
      portsOut: [
        {
          name: "Found",
          links: [
            {
              portIn: "bool 1",
              portOut: "Found",
              objIn: "dvlao3w4r",
              objOut: "7b956q2sq",
            },
          ],
        },
        { name: "Index", value: -1 },
      ],
      objName: "Ops.String.StringContains_v2",
    },
    {
      id: "dvlao3w4r",
      uiAttribs: { subPatch: "0ff66c6c-0dc3-43ce-bbac-906b76f3f60b" },
      portsIn: [
        { name: "bool 4", value: false },
        { name: "bool 5", value: false },
        { name: "bool 6", value: false },
        { name: "bool 7", value: false },
        { name: "bool 8", value: false },
        { name: "bool 9", value: false },
        { name: "bool 10", value: false },
      ],
      portsOut: [
        {
          name: "result",
          links: [
            {
              portIn: "value",
              portOut: "result",
              objIn: "3czynyjwm",
              objOut: "dvlao3w4r",
            },
            {
              portIn: "Value",
              portOut: "result",
              objIn: "jg54smpee",
              objOut: "dvlao3w4r",
            },
            {
              portIn: "Active",
              portOut: "result",
              objIn: "ck7se7ko6",
              objOut: "dvlao3w4r",
            },
          ],
        },
      ],
      objName: "Ops.Boolean.Or",
    },
    {
      id: "wer07k5pg",
      uiAttribs: { subPatch: "0ff66c6c-0dc3-43ce-bbac-906b76f3f60b" },
      portsIn: [{ name: "Variable", value: "imageUrl" }],
      portsOut: [
        {
          name: "Value",
          links: [
            {
              portIn: "String",
              portOut: "Value",
              objIn: "7b956q2sq",
              objOut: "wer07k5pg",
            },
            {
              portIn: "String",
              portOut: "Value",
              objIn: "oqal79lge",
              objOut: "wer07k5pg",
            },
            {
              portIn: "String",
              portOut: "Value",
              objIn: "s00nrdmzx",
              objOut: "wer07k5pg",
            },
          ],
        },
      ],
      objName: "Ops.Vars.VarGetString",
    },
    {
      id: "oqal79lge",
      uiAttribs: { subPatch: "0ff66c6c-0dc3-43ce-bbac-906b76f3f60b" },
      portsIn: [{ name: "SearchValue", value: ".jpg" }],
      portsOut: [
        {
          name: "Found",
          links: [
            {
              portIn: "bool 2",
              portOut: "Found",
              objIn: "dvlao3w4r",
              objOut: "oqal79lge",
            },
          ],
        },
        { name: "Index", value: -1 },
      ],
      objName: "Ops.String.StringContains_v2",
    },
    {
      id: "s00nrdmzx",
      uiAttribs: { subPatch: "0ff66c6c-0dc3-43ce-bbac-906b76f3f60b" },
      portsIn: [{ name: "SearchValue", value: ".jpeg" }],
      portsOut: [
        {
          name: "Found",
          links: [
            {
              portIn: "bool 3",
              portOut: "Found",
              objIn: "dvlao3w4r",
              objOut: "s00nrdmzx",
            },
          ],
        },
        { name: "Index", value: -1 },
      ],
      objName: "Ops.String.StringContains_v2",
    },
    {
      id: "jg54smpee",
      uiAttribs: { subPatch: "0ff66c6c-0dc3-43ce-bbac-906b76f3f60b" },
      portsIn: [{ name: "Variable", value: "isImage" }],
      objName: "Ops.Vars.VarSetNumber_v2",
    },
    {
      id: "zl9l016gb",
      uiAttribs: { subPatch: "0ff66c6c-0dc3-43ce-bbac-906b76f3f60b" },
      portsIn: [{ name: "Variable", value: "isImage" }],
      portsOut: [
        {
          name: "Value",
          links: [
            {
              portIn: "in bool",
              portOut: "Value",
              objIn: "xwiak10cy",
              objOut: "zl9l016gb",
            },
          ],
        },
      ],
      objName: "Ops.Vars.VarGetNumber_v2",
    },
    {
      id: "xwiak10cy",
      uiAttribs: { subPatch: "0ff66c6c-0dc3-43ce-bbac-906b76f3f60b" },
      portsOut: [
        {
          name: "out bool",
          links: [
            {
              portIn: "Active",
              portOut: "out bool",
              objIn: "9sekcc5gw",
              objOut: "xwiak10cy",
            },
          ],
        },
      ],
      objName: "Ops.Boolean.ToggleBoolValue",
    },
    {
      id: "8o9m36la4",
      uiAttribs: { subPatch: "0ff66c6c-0dc3-43ce-bbac-906b76f3f60b" },
      portsIn: [{ name: "Variable", value: "videoUrl" }],
      portsOut: [
        {
          name: "Value",
          links: [
            {
              portIn: "String",
              portOut: "Value",
              objIn: "r4kfaaige",
              objOut: "8o9m36la4",
            },
            {
              portIn: "file",
              portOut: "Value",
              objIn: "lmxf57w6m",
              objOut: "8o9m36la4",
            },
          ],
        },
      ],
      objName: "Ops.Vars.VarGetString",
    },
    {
      id: "r4kfaaige",
      uiAttribs: { subPatch: "0ff66c6c-0dc3-43ce-bbac-906b76f3f60b" },
      portsOut: [
        {
          name: "Changed",
          links: [
            {
              portIn: "exe",
              portOut: "Changed",
              objIn: "8tjrih3pf",
              objOut: "r4kfaaige",
            },
          ],
        },
        {
          name: "Result",
          value:
            "https://player.vimeo.com/progressive_redirect/playback/748056711/rendition/1080p/file.mp4?loc=external&log_user=0&signature=8b7ab83b08656ed8c0ed49316046bab6d99116b3a54f3126d3bffd2a28a33460",
        },
      ],
      objName: "Ops.Trigger.TriggerOnChangeString",
    },
    {
      id: "ldn5adez0",
      uiAttribs: { subPatch: "0ff66c6c-0dc3-43ce-bbac-906b76f3f60b" },
      portsIn: [{ name: "Variable", value: "isImage" }],
      portsOut: [
        {
          name: "Value",
          links: [
            {
              portIn: "Value",
              portOut: "Value",
              objIn: "oaq4sw0ce",
              objOut: "ldn5adez0",
            },
            {
              portIn: "Value",
              portOut: "Value",
              objIn: "55vyxi8a2",
              objOut: "ldn5adez0",
            },
          ],
        },
      ],
      objName: "Ops.Vars.VarGetNumber_v2",
    },
    {
      id: "oaq4sw0ce",
      uiAttribs: { subPatch: "0ff66c6c-0dc3-43ce-bbac-906b76f3f60b" },
      portsOut: [
        {
          name: "Next",
          links: [
            {
              portIn: "trigger",
              portOut: "Next",
              objIn: "wo3yxin4e",
              objOut: "oaq4sw0ce",
            },
          ],
        },
      ],
      objName: "Ops.Boolean.TriggerChangedFalse",
    },
    {
      id: "55vyxi8a2",
      uiAttribs: { subPatch: "0ff66c6c-0dc3-43ce-bbac-906b76f3f60b" },
      portsOut: [
        {
          name: "Next",
          links: [
            {
              portIn: "reset",
              portOut: "Next",
              objIn: "wo3yxin4e",
              objOut: "55vyxi8a2",
            },
          ],
        },
      ],
      objName: "Ops.Boolean.TriggerChangedTrue",
    },
    {
      id: "8tjrih3pf",
      uiAttribs: { subPatch: "0ff66c6c-0dc3-43ce-bbac-906b76f3f60b" },
      portsIn: [{ name: "delay", value: 0.1 }],
      portsOut: [
        {
          name: "next",
          links: [
            {
              portIn: "Rewind",
              portOut: "next",
              objIn: "lmxf57w6m",
              objOut: "8tjrih3pf",
            },
          ],
        },
        { name: "Delaying", value: false },
      ],
      objName: "Ops.Trigger.DelayedTrigger",
    },
    {
      id: "z1jnexqjf",
      uiAttribs: { subPatch: "0ff66c6c-0dc3-43ce-bbac-906b76f3f60b" },
      portsIn: [{ name: "Variable", value: "videoAspectRatio" }],
      objName: "Ops.Vars.VarSetNumber_v2",
    },
    {
      id: "axrb9y4f6",
      uiAttribs: { subPatch: "0ff66c6c-0dc3-43ce-bbac-906b76f3f60b" },
      portsIn: [{ name: "Variable", value: "videoLoaded" }],
      objName: "Ops.Vars.VarSetNumber_v2",
    },
    {
      id: "k66hq3ihz",
      uiAttribs: { subPatch: "0ff66c6c-0dc3-43ce-bbac-906b76f3f60b" },
      portsOut: [
        {
          name: "out bool",
          links: [
            {
              portIn: "Value",
              portOut: "out bool",
              objIn: "axrb9y4f6",
              objOut: "k66hq3ihz",
            },
          ],
        },
      ],
      objName: "Ops.Boolean.ToggleBoolValue",
    },
    {
      id: "axv61bs99",
      uiAttribs: { subPatch: "2154fd20-4fef-42fd-bef2-ef39e6975cdf" },
      portsIn: [{ name: "Variable", value: "videoAspectRatio" }],
      portsOut: [
        {
          name: "Value",
          links: [
            {
              portIn: "number1",
              portOut: "Value",
              objIn: "gwlsewuc3",
              objOut: "axv61bs99",
            },
            {
              portIn: "number2",
              portOut: "Value",
              objIn: "snccy8bvu",
              objOut: "axv61bs99",
            },
          ],
        },
      ],
      objName: "Ops.Vars.VarGetNumber_v2",
    },
    {
      id: "snccy8bvu",
      uiAttribs: { subPatch: "2154fd20-4fef-42fd-bef2-ef39e6975cdf" },
      portsOut: [
        {
          name: "result",
          links: [
            {
              portIn:
                "out0 Ops.Gl.ShaderEffects.TransformTextureCoordinates Repeat X",
              portOut: "result",
              objIn: "ltmbqybsn",
              objOut: "snccy8bvu",
            },
          ],
        },
      ],
      objName: "Ops.Math.Divide",
    },
    {
      id: "gwlsewuc3",
      uiAttribs: { subPatch: "2154fd20-4fef-42fd-bef2-ef39e6975cdf" },
      portsOut: [
        {
          name: "result",
          links: [
            {
              portIn: "number1",
              portOut: "result",
              objIn: "rwab84mme",
              objOut: "gwlsewuc3",
            },
          ],
        },
      ],
      objName: "Ops.Math.Subtract",
    },
    {
      id: "l7yax5e5f",
      uiAttribs: { subPatch: "2154fd20-4fef-42fd-bef2-ef39e6975cdf" },
      portsOut: [
        {
          name: "result",
          links: [
            {
              portIn:
                "out1 Ops.Gl.ShaderEffects.TransformTextureCoordinates Translate X",
              portOut: "result",
              objIn: "ltmbqybsn",
              objOut: "l7yax5e5f",
            },
          ],
        },
      ],
      objName: "Ops.Math.Sum",
    },
    {
      id: "rwab84mme",
      uiAttribs: { subPatch: "2154fd20-4fef-42fd-bef2-ef39e6975cdf" },
      portsIn: [{ name: "number2", value: 2 }],
      portsOut: [
        {
          name: "result",
          links: [
            {
              portIn: "number1",
              portOut: "result",
              objIn: "l7yax5e5f",
              objOut: "rwab84mme",
            },
          ],
        },
      ],
      objName: "Ops.Math.Divide",
    },
    {
      id: "or292emfj",
      uiAttribs: { subPatch: "2154fd20-4fef-42fd-bef2-ef39e6975cdf" },
      portsOut: [
        { name: "create port", value: 0 },
        {
          name: "in0 + number2",
          links: [
            {
              portIn: "number2",
              portOut: "in0 + number2",
              objIn: "l7yax5e5f",
              objOut: "or292emfj",
            },
          ],
        },
      ],
      objName: "Ops.Ui.PatchInput",
    },
    {
      id: "ltmbqybsn",
      uiAttribs: { subPatch: "2154fd20-4fef-42fd-bef2-ef39e6975cdf" },
      portsIn: [{ name: "create port", value: 0 }],
      objName: "Ops.Ui.PatchOutput",
    },
    {
      id: "gpxi4rlmc",
      uiAttribs: { subPatch: "0ff66c6c-0dc3-43ce-bbac-906b76f3f60b" },
      storage: { subPatchVer: 1 },
      portsIn: [
        { name: "create port", value: 0 },
        {
          name: "dataStr",
          value:
            '{"ports":[{"name":"in0 + number2","type":0,"value":0}],"portsOut":[{"name":"out0 Ops.Gl.ShaderEffects.TransformTextureCoordinates Repeat X","type":0},{"name":"out1 Ops.Gl.ShaderEffects.TransformTextureCoordinates Translate X","type":0}]}',
        },
        { name: "patchId", value: "2154fd20-4fef-42fd-bef2-ef39e6975cdf" },
      ],
      portsOut: [
        { name: "create port out", value: 0 },
        {
          name: "out0 Ops.Gl.ShaderEffects.TransformTextureCoordinates Repeat X",
          links: [
            {
              portIn: "repeat X",
              portOut:
                "out0 Ops.Gl.ShaderEffects.TransformTextureCoordinates Repeat X",
              objIn: "v38pi7nzw",
              objOut: "gpxi4rlmc",
            },
          ],
        },
        {
          name: "out1 Ops.Gl.ShaderEffects.TransformTextureCoordinates Translate X",
          links: [
            {
              portIn: "offset X",
              portOut:
                "out1 Ops.Gl.ShaderEffects.TransformTextureCoordinates Translate X",
              objIn: "v38pi7nzw",
              objOut: "gpxi4rlmc",
            },
          ],
        },
      ],
      objName: "Ops.Ui.SubPatch",
    },
    {
      id: "xm013etp7",
      uiAttribs: { subPatch: "0ff66c6c-0dc3-43ce-bbac-906b76f3f60b" },
      portsOut: [
        {
          name: "number",
          links: [
            {
              portIn: "play",
              portOut: "number",
              objIn: "lmxf57w6m",
              objOut: "xm013etp7",
            },
          ],
        },
      ],
      objName: "Ops.Trigger.NumberByTrigger",
    },
    {
      id: "b2sqi3l7g",
      uiAttribs: { subPatch: "0ff66c6c-0dc3-43ce-bbac-906b76f3f60b" },
      portsIn: [{ name: "Named Trigger", value: "loaded" }],
      portsOut: [
        {
          name: "Triggered",
          links: [
            {
              portIn: "exe",
              portOut: "Triggered",
              objIn: "a4u8a1x4q",
              objOut: "b2sqi3l7g",
            },
          ],
        },
      ],
      objName: "Ops.Trigger.TriggerReceive",
    },
    {
      id: "a4u8a1x4q",
      uiAttribs: { subPatch: "0ff66c6c-0dc3-43ce-bbac-906b76f3f60b" },
      portsIn: [{ name: "delay", value: 0.1 }],
      portsOut: [
        {
          name: "next",
          links: [
            {
              portIn: "1",
              portOut: "next",
              objIn: "xm013etp7",
              objOut: "a4u8a1x4q",
            },
            {
              portIn: "trigger",
              portOut: "next",
              objIn: "wo3yxin4e",
              objOut: "a4u8a1x4q",
            },
          ],
        },
        { name: "Delaying", value: false },
      ],
      objName: "Ops.Trigger.DelayedTrigger",
    },
    {
      id: "3fessdj9o",
      uiAttribs: { subPatch: "0ff66c6c-0dc3-43ce-bbac-906b76f3f60b" },
      portsIn: [{ name: "Named Trigger", value: "controlPlay" }],
      portsOut: [
        {
          name: "Triggered",
          links: [
            {
              portIn: "trigger",
              portOut: "Triggered",
              objIn: "wo3yxin4e",
              objOut: "3fessdj9o",
            },
          ],
        },
      ],
      objName: "Ops.Trigger.TriggerReceive",
    },
    {
      id: "bjviqw6ag",
      uiAttribs: { subPatch: "0ff66c6c-0dc3-43ce-bbac-906b76f3f60b" },
      portsIn: [{ name: "Named Trigger", value: "controlAudio" }],
      portsOut: [
        {
          name: "Triggered",
          links: [
            {
              portIn: "trigger",
              portOut: "Triggered",
              objIn: "5xswzwyh7",
              objOut: "bjviqw6ag",
            },
          ],
        },
      ],
      objName: "Ops.Trigger.TriggerReceive",
    },
    {
      id: "5xswzwyh7",
      uiAttribs: { subPatch: "0ff66c6c-0dc3-43ce-bbac-906b76f3f60b" },
      portsIn: [{ name: "Default", value: true }],
      portsOut: [
        {
          name: "result",
          links: [
            {
              portIn: "mute",
              portOut: "result",
              objIn: "lmxf57w6m",
              objOut: "5xswzwyh7",
            },
          ],
        },
      ],
      objName: "Ops.Boolean.ToggleBool_v2",
    },
    {
      id: "o2rjjfyi8",
      uiAttribs: { subPatch: "0ff66c6c-0dc3-43ce-bbac-906b76f3f60b" },
      portsIn: [{ name: "Variable", value: "playerStatus" }],
      objName: "Ops.Vars.VarSetNumber_v2",
    },
    {
      id: "vthhei9c5",
      uiAttribs: { subPatch: "0ff66c6c-0dc3-43ce-bbac-906b76f3f60b" },
      portsIn: [
        { name: "Use Viewport Size", value: true },
        { name: "Width", value: 1402 },
        { name: "Height", value: 805 },
        { name: "filter index", value: 0 },
        { name: "filter", value: "linear" },
        { name: "wrap index", value: 0 },
        { name: "wrap", value: "clamp to edge" },
        { name: "Floating Point", value: false },
        { name: "Num Textures index", value: 0 },
        { name: "Num Textures", value: "1" },
      ],
      portsOut: [
        {
          name: "Texture",
          links: [
            {
              portIn: "out0 ImageCompose texture_out",
              portOut: "Texture",
              objIn: "c2dfdfab-f08f-46c6-8599-9c62d64da7c1",
              objOut: "vthhei9c5",
            },
          ],
        },
      ],
      objName: "Ops.Gl.Shader.ShaderToTexture",
    },
    {
      id: "v38pi7nzw",
      uiAttribs: { subPatch: "0ff66c6c-0dc3-43ce-bbac-906b76f3f60b" },
      portsIn: [
        {
          name: "Fragment Code",
          value:
            "IN vec2 texCoord;\r\n\r\nUNI vec2 offset;  // Offset in X and Y directions\r\nUNI vec2 repeat;  // Repeat in X and Y directions\r\nUNI sampler2D textureInput;\r\n\r\n{{MODULES_HEAD}}\r\nvoid main()\r\n{\r\n    vec2 uv = texCoord * repeat + offset; // Apply offset and repeat\r\n\r\n    // Wrap UV coordinates to ensure they stay within the [0, 1] range\r\n    uv = fract(uv);\r\n\r\n    {{MODULE_COLOR}}\r\n    outColor = texture(textureInput, uv); // Sample the texture using modified coordinates\r\n}\r\n",
        },
        {
          name: "Vertex Code",
          value:
            "{{MODULES_HEAD}}\nIN vec3 vPosition;\nIN vec2 attrTexCoord;\nIN vec3 attrVertNormal;\nIN vec3 attrTangent,attrBiTangent;\n\nIN float attrVertIndex;\n\nOUT vec2 texCoord;\nOUT vec3 norm;\nUNI mat4 projMatrix;\nUNI mat4 viewMatrix;\nUNI mat4 modelMatrix;\n\nvoid main()\n{\n    texCoord=attrTexCoord;\n    norm=attrVertNormal;\n    vec4 pos=vec4(vPosition,  1.0);\n    vec3 tangent=attrTangent;\n    vec3 bitangent=attrBiTangent;\n    mat4 mMatrix=modelMatrix;\n    gl_PointSize=10.0;\n\n    {{MODULE_VERTEX_POSITION}}\n    gl_Position = projMatrix * (viewMatrix*mMatrix) * pos;\n}\n",
        },
        { name: "Use As Material", value: false },
        { name: "offset Y", value: 0 },
        { name: "repeat Y", value: 1 },
      ],
      portsOut: [
        {
          name: "trigger",
          links: [
            {
              portIn: "Render",
              portOut: "trigger",
              objIn: "vthhei9c5",
              objOut: "v38pi7nzw",
            },
          ],
        },
        {
          name: "Shader",
          links: [
            {
              portIn: "Shader",
              portOut: "Shader",
              objIn: "vthhei9c5",
              objOut: "v38pi7nzw",
            },
          ],
        },
        { name: "Has Errors", value: false },
      ],
      objName: "Ops.Gl.Shader.CustomShader_v2",
    },
    {
      id: "dl6cx25rk",
      uiAttribs: { subPatch: "2154fd20-4fef-42fd-bef2-ef39e6975cdf" },
      portsIn: [
        { name: "Pixel Unit index", value: 0 },
        { name: "Pixel Unit", value: "Display" },
      ],
      portsOut: [
        { name: "width", value: 694 },
        { name: "height", value: 1080 },
        { name: "Pixel Ratio", value: 1 },
        { name: "Pixel Width", value: 694 },
        { name: "Pixel Height", value: 1080 },
        {
          name: "Aspect Ratio",
          links: [
            {
              portIn: "number1",
              portOut: "Aspect Ratio",
              objIn: "snccy8bvu",
              objOut: "dl6cx25rk",
            },
            {
              portIn: "number2",
              portOut: "Aspect Ratio",
              objIn: "gwlsewuc3",
              objOut: "dl6cx25rk",
            },
          ],
        },
        { name: "Landscape", value: 0 },
      ],
      objName: "Ops.Gl.CanvasInfo_v2",
    },
    {
      id: "ece3100d-56f4-40e1-bd04-711aba30c988",
      uiAttribs: { subPatch: "0ff66c6c-0dc3-43ce-bbac-906b76f3f60b" },
      portsOut: [
        { name: "create port", value: 0 },
        {
          name: "in0 Ops.Trigger.RouteTriggerString_v2 Trigger 1",
          links: [
            {
              portIn: "Update",
              portOut: "in0 Ops.Trigger.RouteTriggerString_v2 Trigger 1",
              objIn: "lmxf57w6m",
              objOut: "ece3100d-56f4-40e1-bd04-711aba30c988",
            },
          ],
        },
      ],
      objName: "Ops.Ui.PatchInput",
    },
    {
      id: "c2dfdfab-f08f-46c6-8599-9c62d64da7c1",
      uiAttribs: { subPatch: "0ff66c6c-0dc3-43ce-bbac-906b76f3f60b" },
      portsIn: [{ name: "create port", value: 0 }],
      objName: "Ops.Ui.PatchOutput",
    },
    {
      id: "c3020432-d72e-41bb-8274-dbd55ba98235",
      uiAttribs: {},
      storage: { subPatchVer: 1 },
      portsIn: [
        { name: "create port", value: 0 },
        {
          name: "dataStr",
          value:
            '{"ports":[{"name":"in0 Ops.Trigger.RouteTriggerString_v2 Trigger 1","type":1}],"portsOut":[{"name":"out0 ImageCompose texture_out","type":2,"objType":"texture"}]}',
        },
        { name: "patchId", value: "0ff66c6c-0dc3-43ce-bbac-906b76f3f60b" },
      ],
      portsOut: [
        { name: "create port out", value: 0 },
        {
          name: "out0 ImageCompose texture_out",
          links: [
            {
              portIn: "Value",
              portOut: "out0 ImageCompose texture_out",
              objIn: "bw5x42j1o",
              objOut: "c3020432-d72e-41bb-8274-dbd55ba98235",
            },
          ],
        },
      ],
      objName: "Ops.Ui.SubPatch",
    },
    {
      id: "728bc2af-66ca-4c6f-a6d4-2b51f809033d",
      uiAttribs: { subPatch: "0ff66c6c-0dc3-43ce-bbac-906b76f3f60b" },
      portsIn: [
        { name: "Value 2", value: 0 },
        { name: "Value 3", value: 0 },
        { name: "Value 4", value: 0 },
        { name: "Value 5", value: 0 },
        { name: "Value 6", value: 0 },
        { name: "Value 7", value: 0 },
        { name: "Value 8", value: 0 },
        { name: "Value 9", value: 0 },
        { name: "Value 10", value: 0 },
        { name: "Value 11", value: 0 },
        { name: "Value 12", value: 0 },
        { name: "Value 13", value: 0 },
        { name: "Value 14", value: 0 },
        { name: "Value 15", value: 0 },
      ],
      portsOut: [
        {
          name: "Result",
          links: [
            {
              portIn: "Value",
              portOut: "Result",
              objIn: "z1jnexqjf",
              objOut: "728bc2af-66ca-4c6f-a6d4-2b51f809033d",
            },
          ],
        },
      ],
      objName: "Ops.Number.SwitchNumber",
    },
    {
      id: "73996b48-d3cb-4a6f-8009-ad1df84c1427",
      uiAttribs: { subPatch: "0ff66c6c-0dc3-43ce-bbac-906b76f3f60b" },
      portsIn: [{ name: "Variable", value: "isImage" }],
      portsOut: [
        {
          name: "Value",
          links: [
            {
              portIn: "Index",
              portOut: "Value",
              objIn: "728bc2af-66ca-4c6f-a6d4-2b51f809033d",
              objOut: "73996b48-d3cb-4a6f-8009-ad1df84c1427",
            },
          ],
        },
      ],
      objName: "Ops.Vars.VarGetNumber_v2",
    },
    {
      id: "8cb39b08-233c-41df-9989-8c042077a031",
      uiAttribs: { subPatch: "8aabf450-104c-4af6-a226-3166d810c3b7" },
      portsIn: [{ name: "Variable", value: "aboutScroll" }],
      portsOut: [
        {
          name: "Value",
          links: [
            {
              portIn: "number1",
              portOut: "Value",
              objIn: "f6581a46-e715-49b1-a33c-568d6fafd195",
              objOut: "8cb39b08-233c-41df-9989-8c042077a031",
            },
          ],
        },
      ],
      objName: "Ops.Vars.VarGetNumber_v2",
    },
    {
      id: "8ddd41ca-6590-44ae-921e-e7a6d4100a9e",
      uiAttribs: { subPatch: "8aabf450-104c-4af6-a226-3166d810c3b7" },
      portsOut: [
        { name: "Switched Value", value: 0 },
        {
          name: "Trigger 0",
          links: [
            {
              portIn: "Exec",
              portOut: "Trigger 0",
              objIn: "i8jtphua0",
              objOut: "8ddd41ca-6590-44ae-921e-e7a6d4100a9e",
            },
          ],
        },
        {
          name: "Trigger 1",
          links: [
            {
              portIn: "Execute",
              portOut: "Trigger 1",
              objIn: "x5xpc6yqk",
              objOut: "8ddd41ca-6590-44ae-921e-e7a6d4100a9e",
            },
          ],
        },
      ],
      objName: "Ops.Trigger.RouteTrigger",
    },
    {
      id: "23hn8lq74",
      uiAttribs: { subPatch: "8aabf450-104c-4af6-a226-3166d810c3b7" },
      portsIn: [
        { name: "Scale", value: 1 },
        { name: "Font", value: "everettLight" },
        { name: "align index", value: 1 },
        { name: "align", value: "left" },
        { name: "vertical align index", value: 1 },
        { name: "vertical align", value: "Middle" },
        { name: "Line Height", value: 1 },
        { name: "Letter Spacing", value: 0 },
        { name: "filter index", value: 2 },
        { name: "filter", value: "linear" },
        { name: "Anisotropic index", value: 0 },
        { name: "Anisotropic", value: 0 },
        { name: "r", value: 1 },
        { name: "g", value: 1 },
        { name: "b", value: 1 },
      ],
      portsOut: [
        { name: "Total Lines", value: 1 },
        { name: "Width", value: 2.9449999673025946 },
        { name: "Font Available", value: 1 },
      ],
      objName: "Ops.Gl.Meshes.TextMesh_v2",
    },
    {
      id: "w2bt6ipmn",
      uiAttribs: { subPatch: "8aabf450-104c-4af6-a226-3166d810c3b7" },
      portsIn: [
        { name: "posX", value: 0 },
        { name: "posY", value: 0.25 },
        { name: "posZ", value: 0 },
        { name: "scale", value: 1 },
        { name: "rotX", value: 0 },
        { name: "rotY", value: 0 },
        { name: "rotZ", value: 0 },
      ],
      portsOut: [
        {
          name: "trigger",
          links: [
            {
              portIn: "Render",
              portOut: "trigger",
              objIn: "23hn8lq74",
              objOut: "w2bt6ipmn",
            },
          ],
        },
      ],
      objName: "Ops.Gl.Matrix.Transform",
    },
    {
      id: "b5w7sghze",
      uiAttribs: { subPatch: "8aabf450-104c-4af6-a226-3166d810c3b7" },
      portsIn: [
        { name: "posZ", value: 0 },
        { name: "rotX", value: 0 },
        { name: "rotY", value: 0 },
        { name: "rotZ", value: 0 },
      ],
      portsOut: [
        {
          name: "trigger",
          links: [
            {
              portIn: "render",
              portOut: "trigger",
              objIn: "w2bt6ipmn",
              objOut: "b5w7sghze",
            },
          ],
        },
      ],
      objName: "Ops.Gl.Matrix.Transform",
    },
    {
      id: "i8jtphua0",
      uiAttribs: { subPatch: "8aabf450-104c-4af6-a226-3166d810c3b7" },
      portsIn: [
        { name: "Input Type index", value: 0 },
        { name: "Input Type", value: "-1 to 1" },
      ],
      portsOut: [
        {
          name: "Trigger out",
          links: [
            {
              portIn: "render",
              portOut: "Trigger out",
              objIn: "b5w7sghze",
              objOut: "i8jtphua0",
            },
          ],
        },
        {
          name: "Result X",
          links: [
            {
              portIn: "posX",
              portOut: "Result X",
              objIn: "b5w7sghze",
              objOut: "i8jtphua0",
            },
          ],
        },
        {
          name: "Result Y",
          links: [
            {
              portIn: "posY",
              portOut: "Result Y",
              objIn: "b5w7sghze",
              objOut: "i8jtphua0",
            },
          ],
        },
      ],
      objName: "Ops.Gl.Matrix.ScreenPosTo3d_v3",
    },
    {
      id: "228f7fb1-304b-4a25-a4c7-484a3b258885",
      uiAttribs: { subPatch: "8aabf450-104c-4af6-a226-3166d810c3b7" },
      portsIn: [{ name: "value", value: "Let's Work Togheter" }],
      portsOut: [
        {
          name: "String",
          links: [
            {
              portIn: "text",
              portOut: "String",
              objIn: "9246dc11-b438-4e67-8183-fde9e783d3e9",
              objOut: "228f7fb1-304b-4a25-a4c7-484a3b258885",
            },
          ],
        },
      ],
      objName: "Ops.String.String_v2",
    },
    {
      id: "ru215pscg",
      uiAttribs: { subPatch: "8aabf450-104c-4af6-a226-3166d810c3b7" },
      portsIn: [{ name: "value", value: "src.phag" }],
      portsOut: [
        {
          name: "String",
          links: [
            {
              portIn: "Text",
              portOut: "String",
              objIn: "23hn8lq74",
              objOut: "ru215pscg",
            },
          ],
        },
      ],
      objName: "Ops.String.String_v2",
    },
    {
      id: "f6581a46-e715-49b1-a33c-568d6fafd195",
      uiAttribs: { subPatch: "8aabf450-104c-4af6-a226-3166d810c3b7" },
      portsIn: [{ name: "number2", value: 0 }],
      portsOut: [
        {
          name: "result",
          links: [
            {
              portIn: "Switch Value",
              portOut: "result",
              objIn: "8ddd41ca-6590-44ae-921e-e7a6d4100a9e",
              objOut: "f6581a46-e715-49b1-a33c-568d6fafd195",
            },
          ],
        },
      ],
      objName: "Ops.Math.Compare.GreaterThan",
    },
    {
      id: "ro2jeen9j",
      uiAttribs: { subPatch: "6e71a86b-bc99-42b8-8bfd-208d7ea5fb8e" },
      portsIn: [
        { name: "data", value: "" },
        { name: "glb File", value: "ShapeShearBox.glb", display: "file" },
        { name: "Draw", value: true },
        { name: "Camera index", value: 0 },
        { name: "Camera", value: "None" },
        { name: "Animation", value: "" },
        { name: "Center index", value: 1 },
        { name: "Center", value: "None" },
        { name: "Rescale", value: true },
        { name: "Rescale Size", value: 0.5 },
        { name: "Time", value: 0 },
        { name: "Sync to timeline", value: false },
        { name: "Loop", value: true },
        { name: "Normals Format index", value: 0 },
        { name: "Normals Format", value: "XYZ" },
        { name: "Vertices Format index", value: 0 },
        { name: "Vertices Format", value: "XYZ" },
        { name: "Calc Normals index", value: 0 },
        { name: "Calc Normals", value: "Auto" },
        { name: "Hide Nodes", value: 0 },
        { name: "Use Material Properties", value: false },
        { name: "Active", value: true },
      ],
      portsOut: [
        { name: "Generator", value: "Khronos glTF Blender I/O v3.4.50" },
        { name: "GLTF Version", value: 2 },
        { name: "Anim Length", value: 0 },
        { name: "Anim Time", value: 0 },
        { name: "Loading", value: false },
      ],
      objName: "Ops.Gl.GLTF.GltfScene_v4",
    },
    {
      id: "3z16sn203",
      uiAttribs: { subPatch: "6e71a86b-bc99-42b8-8bfd-208d7ea5fb8e" },
      portsIn: [
        { name: "a", value: 1 },
        { name: "colorizeTexture", value: false },
        { name: "Vertex Colors", value: false },
        { name: "Alpha Mask Source index", value: 0 },
        { name: "Alpha Mask Source", value: "Luminance" },
        { name: "Opacity TexCoords Transform", value: false },
        { name: "Discard Transparent Pixels", value: false },
        { name: "diffuseRepeatX", value: 1 },
        { name: "diffuseRepeatY", value: 1 },
        { name: "Tex Offset X", value: 0 },
        { name: "Tex Offset Y", value: 0 },
        { name: "Crop TexCoords", value: false },
        { name: "billboard", value: false },
      ],
      portsOut: [
        {
          name: "trigger",
          links: [
            {
              portIn: "render",
              portOut: "trigger",
              objIn: "ncdzmsois",
              objOut: "3z16sn203",
            },
          ],
        },
      ],
      objName: "Ops.Gl.Shader.BasicMaterial_v3",
    },
    {
      id: "4rb2lli2a",
      uiAttribs: { subPatch: "6e71a86b-bc99-42b8-8bfd-208d7ea5fb8e" },
      portsIn: [
        { name: "posX", value: 0 },
        { name: "posY", value: 0 },
        { name: "posZ", value: 0 },
        { name: "scale", value: 1 },
        { name: "rotX", value: 0 },
        { name: "rotY", value: 0 },
        { name: "rotZ", value: 0 },
      ],
      portsOut: [
        {
          name: "trigger",
          links: [
            {
              portIn: "render",
              portOut: "trigger",
              objIn: "3z16sn203",
              objOut: "4rb2lli2a",
            },
          ],
        },
      ],
      objName: "Ops.Gl.Matrix.TransformView",
    },
    {
      id: "e9yyjz89a",
      uiAttribs: { subPatch: "6e71a86b-bc99-42b8-8bfd-208d7ea5fb8e" },
      portsIn: [{ name: "Variable", value: "blue" }],
      portsOut: [
        {
          name: "Value",
          links: [
            {
              portIn: "Array",
              portOut: "Value",
              objIn: "jw4yyfn9g",
              objOut: "e9yyjz89a",
            },
          ],
        },
      ],
      objName: "Ops.Vars.VarGetArray_v2",
    },
    {
      id: "jw4yyfn9g",
      uiAttribs: { subPatch: "6e71a86b-bc99-42b8-8bfd-208d7ea5fb8e" },
      portsIn: [{ name: "Index", value: 0 }],
      portsOut: [
        {
          name: "X",
          links: [
            {
              portIn: "r",
              portOut: "X",
              objIn: "3z16sn203",
              objOut: "jw4yyfn9g",
            },
          ],
        },
        {
          name: "Y",
          links: [
            {
              portIn: "g",
              portOut: "Y",
              objIn: "3z16sn203",
              objOut: "jw4yyfn9g",
            },
          ],
        },
        {
          name: "Z",
          links: [
            {
              portIn: "b",
              portOut: "Z",
              objIn: "3z16sn203",
              objOut: "jw4yyfn9g",
            },
          ],
        },
      ],
      objName: "Ops.Array.Array3GetNumbers",
    },
    {
      id: "ao3mo5s9c",
      uiAttribs: { subPatch: "6e71a86b-bc99-42b8-8bfd-208d7ea5fb8e" },
      portsOut: [
        { name: "create port", value: 0 },
        {
          name: "in0 Ops.Trigger.RouteTriggerString Trigger 0",
          links: [
            {
              portIn: "render",
              portOut: "in0 Ops.Trigger.RouteTriggerString Trigger 0",
              objIn: "4rb2lli2a",
              objOut: "ao3mo5s9c",
            },
          ],
        },
      ],
      objName: "Ops.Ui.PatchInput",
    },
    {
      id: "sc86q96kr",
      uiAttribs: { subPatch: "6e71a86b-bc99-42b8-8bfd-208d7ea5fb8e" },
      portsIn: [{ name: "create port", value: 0 }],
      objName: "Ops.Ui.PatchOutput",
    },
    {
      id: "hsr3syavx",
      uiAttribs: {},
      storage: { subPatchVer: 1 },
      portsIn: [
        { name: "create port", value: 0 },
        {
          name: "dataStr",
          value:
            '{"ports":[{"name":"in0 Ops.Trigger.RouteTriggerString Trigger 0","type":1}],"portsOut":[]}',
        },
        { name: "patchId", value: "6e71a86b-bc99-42b8-8bfd-208d7ea5fb8e" },
      ],
      portsOut: [{ name: "create port out", value: 0 }],
      objName: "Ops.Ui.SubPatch",
    },
    {
      id: "ncdzmsois",
      uiAttribs: { subPatch: "6e71a86b-bc99-42b8-8bfd-208d7ea5fb8e" },
      portsIn: [
        { name: "posX", value: 0 },
        { name: "posY", value: 0 },
        { name: "posZ", value: 0 },
        { name: "scale", value: 20 },
        { name: "rotX", value: -221.86 },
        { name: "rotY", value: -14.3 },
        { name: "rotZ", value: 0 },
      ],
      portsOut: [
        {
          name: "trigger",
          links: [
            {
              portIn: "Render",
              portOut: "trigger",
              objIn: "ro2jeen9j",
              objOut: "ncdzmsois",
            },
          ],
        },
      ],
      objName: "Ops.Gl.Matrix.Transform",
    },
    {
      id: "mmolwn8pn",
      uiAttribs: {},
      portsIn: [{ name: "Variable", value: "aboutScroll" }],
      portsOut: [
        {
          name: "Value",
          links: [
            {
              portIn: "perc",
              portOut: "Value",
              objIn: "dbus6zao0",
              objOut: "mmolwn8pn",
            },
          ],
        },
      ],
      objName: "Ops.Vars.VarGetNumber_v2",
    },
    {
      id: "y53d604uk",
      uiAttribs: {},
      portsIn: [{ name: "Variable", value: "workScroll" }],
      portsOut: [
        {
          name: "Value",
          links: [
            {
              portIn: "perc",
              portOut: "Value",
              objIn: "0co9dzwpn",
              objOut: "y53d604uk",
            },
          ],
        },
      ],
      objName: "Ops.Vars.VarGetNumber_v2",
    },
    {
      id: "0co9dzwpn",
      uiAttribs: {},
      portsOut: [
        {
          name: "Next",
          links: [
            {
              portIn: "Exe",
              portOut: "Next",
              objIn: "dbus6zao0",
              objOut: "0co9dzwpn",
            },
          ],
        },
        {
          name: "Result",
          links: [
            {
              portIn: "Array 1",
              portOut: "Result",
              objIn: "dbus6zao0",
              objOut: "0co9dzwpn",
            },
          ],
        },
      ],
      objName: "Ops.Array.InterpolateArrays",
    },
    {
      id: "ddsl6t6bk",
      uiAttribs: {},
      portsIn: [
        { name: "Num Triplets", value: 1 },
        { name: "X", value: -0.06 },
        { name: "Y", value: 0 },
        { name: "Z", value: 0 },
      ],
      portsOut: [
        {
          name: "Array",
          links: [
            {
              portIn: "Array 0",
              portOut: "Array",
              objIn: "01spwg00b",
              objOut: "ddsl6t6bk",
            },
          ],
        },
        { name: "Total points", value: 1 },
        { name: "Array length", value: 3 },
      ],
      objName: "Ops.Array.Array3",
    },
    {
      id: "01spwg00b",
      uiAttribs: {},
      portsIn: [
        { name: "Array 3", value: 0 },
        { name: "Array 4", value: 0 },
        { name: "Array 5", value: 0 },
        { name: "Array 6", value: 0 },
        { name: "Array 7", value: 0 },
      ],
      portsOut: [
        {
          name: "Result",
          links: [
            {
              portIn: "Array 2",
              portOut: "Result",
              objIn: "9ab09c55-a9f4-45b3-91f7-1438b3975417",
              objOut: "01spwg00b",
            },
          ],
        },
        { name: "Array length", value: 7 },
      ],
      objName: "Ops.Array.ArrayMerge_v3",
    },
    {
      id: "qzskh1vdm",
      uiAttribs: {},
      portsIn: [
        { name: "Array 3", value: 0 },
        { name: "Array 4", value: 0 },
        { name: "Array 5", value: 0 },
        { name: "Array 6", value: 0 },
        { name: "Array 7", value: 0 },
      ],
      portsOut: [
        {
          name: "Result",
          links: [
            {
              portIn: "Array 2",
              portOut: "Result",
              objIn: "xunvxt053",
              objOut: "qzskh1vdm",
            },
          ],
        },
        { name: "Array length", value: 7 },
      ],
      objName: "Ops.Array.ArrayMerge_v3",
    },
    {
      id: "dbus6zao0",
      uiAttribs: {},
      portsOut: [
        {
          name: "Next",
          links: [
            {
              portIn: "Execute",
              portOut: "Next",
              objIn: "lywnyv9o4",
              objOut: "dbus6zao0",
            },
          ],
        },
        {
          name: "Result",
          links: [
            {
              portIn: "Array In",
              portOut: "Result",
              objIn: "lywnyv9o4",
              objOut: "dbus6zao0",
            },
          ],
        },
      ],
      objName: "Ops.Array.InterpolateArrays",
    },
    {
      id: "p7k3v9lts",
      uiAttribs: {},
      portsIn: [
        { name: "Num Triplets", value: 1 },
        { name: "X", value: 2.52 },
        { name: "Y", value: -1.89 },
        { name: "Z", value: 0 },
      ],
      portsOut: [
        {
          name: "Array",
          links: [
            {
              portIn: "Array 0",
              portOut: "Array",
              objIn: "auusg6zev",
              objOut: "p7k3v9lts",
            },
          ],
        },
        { name: "Total points", value: 1 },
        { name: "Array length", value: 3 },
      ],
      objName: "Ops.Array.Array3",
    },
    {
      id: "auusg6zev",
      uiAttribs: {},
      portsIn: [
        { name: "Array 3", value: 0 },
        { name: "Array 4", value: 0 },
        { name: "Array 5", value: 0 },
        { name: "Array 6", value: 0 },
        { name: "Array 7", value: 0 },
      ],
      portsOut: [
        {
          name: "Result",
          links: [
            {
              portIn: "Array 2",
              portOut: "Result",
              objIn: "zazzu6gav",
              objOut: "auusg6zev",
            },
          ],
        },
        { name: "Array length", value: 7 },
      ],
      objName: "Ops.Array.ArrayMerge_v3",
    },
    {
      id: "lywnyv9o4",
      uiAttribs: {},
      portsIn: [
        { name: "Separate inc/dec", value: false },
        { name: "Inc factor", value: 30, title: "Inc/Dec factor" },
        { name: "Dec factor", value: 4 },
      ],
      portsOut: [
        {
          name: "Array Out",
          links: [
            {
              portIn: "Array",
              portOut: "Array Out",
              objIn: "ub6p4urcu",
              objOut: "lywnyv9o4",
            },
            {
              portIn: "array",
              portOut: "Array Out",
              objIn: "cqjowcwqt",
              objOut: "lywnyv9o4",
            },
            {
              portIn: "Array",
              portOut: "Array Out",
              objIn: "o9o1lvbn5",
              objOut: "lywnyv9o4",
            },
          ],
        },
      ],
      objName: "Ops.Array.SmoothArray",
    },
    {
      id: "ycrgn21to",
      uiAttribs: {},
      portsIn: [
        { name: "Array length", value: 1 },
        { name: "Mode select index", value: 0 },
        { name: "Mode select", value: "Number" },
        { name: "Default Value", value: 4.34 },
        { name: "Reverse", value: false },
      ],
      portsOut: [
        {
          name: "Array",
          links: [
            {
              portIn: "Array 1",
              portOut: "Array",
              objIn: "qzskh1vdm",
              objOut: "ycrgn21to",
            },
          ],
        },
        { name: "Array length out", value: 1 },
      ],
      objName: "Ops.Array.Array_v3",
    },
    {
      id: "linzxvbdf",
      uiAttribs: {},
      portsIn: [
        { name: "Num Triplets", value: 1 },
        { name: "X", value: 7.09 },
        { name: "Y", value: 1.22 },
        { name: "Z", value: 0 },
      ],
      portsOut: [
        {
          name: "Array",
          links: [
            {
              portIn: "Array 0",
              portOut: "Array",
              objIn: "qzskh1vdm",
              objOut: "linzxvbdf",
            },
          ],
        },
        { name: "Total points", value: 1 },
        { name: "Array length", value: 3 },
      ],
      objName: "Ops.Array.Array3",
    },
    {
      id: "mgvdxuuuc",
      uiAttribs: {},
      portsIn: [
        { name: "Array length", value: 1 },
        { name: "Mode select index", value: 0 },
        { name: "Mode select", value: "Number" },
        { name: "Default Value", value: 3.34 },
        { name: "Reverse", value: false },
      ],
      portsOut: [
        {
          name: "Array",
          links: [
            {
              portIn: "Array 1",
              portOut: "Array",
              objIn: "01spwg00b",
              objOut: "mgvdxuuuc",
            },
          ],
        },
        { name: "Array length out", value: 1 },
      ],
      objName: "Ops.Array.Array_v3",
    },
    {
      id: "fvwxvkc7e",
      uiAttribs: {},
      portsIn: [
        { name: "Array length", value: 1 },
        { name: "Mode select index", value: 0 },
        { name: "Mode select", value: "Number" },
        { name: "Default Value", value: 7.11 },
        { name: "Reverse", value: false },
      ],
      portsOut: [
        {
          name: "Array",
          links: [
            {
              portIn: "Array 1",
              portOut: "Array",
              objIn: "auusg6zev",
              objOut: "fvwxvkc7e",
            },
          ],
        },
        { name: "Array length out", value: 1 },
      ],
      objName: "Ops.Array.Array_v3",
    },
    {
      id: "zysefy4tf",
      uiAttribs: {},
      portsIn: [
        { name: "Num Triplets", value: 1 },
        { name: "X", value: 44.77 },
        { name: "Y", value: -29.22 },
        { name: "Z", value: 0 },
      ],
      portsOut: [
        {
          name: "Array",
          links: [
            {
              portIn: "Array 2",
              portOut: "Array",
              objIn: "qzskh1vdm",
              objOut: "zysefy4tf",
            },
          ],
        },
        { name: "Total points", value: 1 },
        { name: "Array length", value: 3 },
      ],
      objName: "Ops.Array.Array3",
    },
    {
      id: "gnz3lfvnx",
      uiAttribs: {},
      portsIn: [
        { name: "Num Triplets", value: 1 },
        { name: "X", value: 204.44 },
        { name: "Y", value: -41.89 },
        { name: "Z", value: 0 },
      ],
      portsOut: [
        {
          name: "Array",
          links: [
            {
              portIn: "Array 2",
              portOut: "Array",
              objIn: "01spwg00b",
              objOut: "gnz3lfvnx",
            },
          ],
        },
        { name: "Total points", value: 1 },
        { name: "Array length", value: 3 },
      ],
      objName: "Ops.Array.Array3",
    },
    {
      id: "942sin0e5",
      uiAttribs: {},
      portsIn: [
        { name: "Num Triplets", value: 1 },
        { name: "X", value: 34.11 },
        { name: "Y", value: -18.54 },
        { name: "Z", value: 0 },
      ],
      portsOut: [
        {
          name: "Array",
          links: [
            {
              portIn: "Array 2",
              portOut: "Array",
              objIn: "auusg6zev",
              objOut: "942sin0e5",
            },
          ],
        },
        { name: "Total points", value: 1 },
        { name: "Array length", value: 3 },
      ],
      objName: "Ops.Array.Array3",
    },
    {
      id: "2pia5etca",
      uiAttribs: {},
      portsIn: [{ name: "Named Trigger", value: "mainLoop" }],
      portsOut: [
        {
          name: "Triggered",
          links: [
            {
              portIn: "Exe",
              portOut: "Triggered",
              objIn: "ebqpr9y5m",
              objOut: "2pia5etca",
            },
          ],
        },
      ],
      objName: "Ops.Trigger.TriggerReceive",
    },
    {
      id: "gtc8zcj6f",
      uiAttribs: {},
      portsIn: [{ name: "Index", value: 0 }],
      portsOut: [
        {
          name: "X",
          links: [
            {
              portIn: "posX",
              portOut: "X",
              objIn: "yphqk9m5e",
              objOut: "gtc8zcj6f",
            },
          ],
        },
        {
          name: "Y",
          links: [
            {
              portIn: "posY",
              portOut: "Y",
              objIn: "yphqk9m5e",
              objOut: "gtc8zcj6f",
            },
          ],
        },
        {
          name: "Z",
          links: [
            {
              portIn: "posZ",
              portOut: "Z",
              objIn: "yphqk9m5e",
              objOut: "gtc8zcj6f",
            },
          ],
        },
      ],
      objName: "Ops.Array.Array3GetNumbers",
    },
    {
      id: "ebovefhxj",
      uiAttribs: {},
      portsIn: [{ name: "index", value: 3 }],
      portsOut: [
        {
          name: "value",
          links: [
            {
              portIn: "scale",
              portOut: "value",
              objIn: "yphqk9m5e",
              objOut: "ebovefhxj",
            },
          ],
        },
      ],
      objName: "Ops.Array.ArrayGetNumber",
    },
    {
      id: "hc1mj9mt4",
      uiAttribs: {},
      portsIn: [{ name: "Variable", value: "aboutScroll" }],
      portsOut: [
        {
          name: "Value",
          links: [
            {
              portIn: "perc",
              portOut: "Value",
              objIn: "52snbcv8b",
              objOut: "hc1mj9mt4",
            },
          ],
        },
      ],
      objName: "Ops.Vars.VarGetNumber_v2",
    },
    {
      id: "gsg23m1s0",
      uiAttribs: {},
      portsIn: [{ name: "Variable", value: "workScroll" }],
      portsOut: [
        {
          name: "Value",
          links: [
            {
              portIn: "perc",
              portOut: "Value",
              objIn: "ebqpr9y5m",
              objOut: "gsg23m1s0",
            },
          ],
        },
      ],
      objName: "Ops.Vars.VarGetNumber_v2",
    },
    {
      id: "ebqpr9y5m",
      uiAttribs: {},
      portsOut: [
        {
          name: "Next",
          links: [
            {
              portIn: "Exe",
              portOut: "Next",
              objIn: "52snbcv8b",
              objOut: "ebqpr9y5m",
            },
          ],
        },
        {
          name: "Result",
          links: [
            {
              portIn: "Array 1",
              portOut: "Result",
              objIn: "52snbcv8b",
              objOut: "ebqpr9y5m",
            },
          ],
        },
      ],
      objName: "Ops.Array.InterpolateArrays",
    },
    {
      id: "kupa1fkd4",
      uiAttribs: {},
      portsIn: [
        { name: "Array 3", value: 0 },
        { name: "Array 4", value: 0 },
        { name: "Array 5", value: 0 },
        { name: "Array 6", value: 0 },
        { name: "Array 7", value: 0 },
      ],
      portsOut: [
        {
          name: "Result",
          links: [
            {
              portIn: "Array 1",
              portOut: "Result",
              objIn: "ebqpr9y5m",
              objOut: "kupa1fkd4",
            },
            {
              portIn: "Array 2",
              portOut: "Result",
              objIn: "52snbcv8b",
              objOut: "kupa1fkd4",
            },
          ],
        },
        { name: "Array length", value: 7 },
      ],
      objName: "Ops.Array.ArrayMerge_v3",
    },
    {
      id: "5hdj2sv1u",
      uiAttribs: {},
      portsIn: [
        { name: "Array 3", value: 0 },
        { name: "Array 4", value: 0 },
        { name: "Array 5", value: 0 },
        { name: "Array 6", value: 0 },
        { name: "Array 7", value: 0 },
      ],
      portsOut: [
        {
          name: "Result",
          links: [
            {
              portIn: "Array 2",
              portOut: "Result",
              objIn: "ebqpr9y5m",
              objOut: "5hdj2sv1u",
            },
          ],
        },
        { name: "Array length", value: 7 },
      ],
      objName: "Ops.Array.ArrayMerge_v3",
    },
    {
      id: "52snbcv8b",
      uiAttribs: {},
      portsOut: [
        {
          name: "Next",
          links: [
            {
              portIn: "Execute",
              portOut: "Next",
              objIn: "hapxxwqkz",
              objOut: "52snbcv8b",
            },
          ],
        },
        {
          name: "Result",
          links: [
            {
              portIn: "Array In",
              portOut: "Result",
              objIn: "hapxxwqkz",
              objOut: "52snbcv8b",
            },
          ],
        },
      ],
      objName: "Ops.Array.InterpolateArrays",
    },
    {
      id: "hapxxwqkz",
      uiAttribs: {},
      portsIn: [
        { name: "Separate inc/dec", value: false },
        { name: "Inc factor", value: 30, title: "Inc/Dec factor" },
        { name: "Dec factor", value: 4 },
      ],
      portsOut: [
        {
          name: "Array Out",
          links: [
            {
              portIn: "array",
              portOut: "Array Out",
              objIn: "ebovefhxj",
              objOut: "hapxxwqkz",
            },
            {
              portIn: "Array",
              portOut: "Array Out",
              objIn: "gtc8zcj6f",
              objOut: "hapxxwqkz",
            },
          ],
        },
      ],
      objName: "Ops.Array.SmoothArray",
    },
    {
      id: "v2zd80jw7",
      uiAttribs: {},
      portsIn: [
        { name: "Array length", value: 1 },
        { name: "Mode select index", value: 0 },
        { name: "Mode select", value: "Number" },
        { name: "Default Value", value: 0.9 },
        { name: "Reverse", value: false },
      ],
      portsOut: [
        {
          name: "Array",
          links: [
            {
              portIn: "Array 1",
              portOut: "Array",
              objIn: "5hdj2sv1u",
              objOut: "v2zd80jw7",
            },
          ],
        },
        { name: "Array length out", value: 1 },
      ],
      objName: "Ops.Array.Array_v3",
    },
    {
      id: "pwri2k7ek",
      uiAttribs: {},
      portsIn: [
        { name: "Num Triplets", value: 1 },
        { name: "X", value: -4.12 },
        { name: "Y", value: -5.37 },
        { name: "Z", value: 0 },
      ],
      portsOut: [
        {
          name: "Array",
          links: [
            {
              portIn: "Array 0",
              portOut: "Array",
              objIn: "5hdj2sv1u",
              objOut: "pwri2k7ek",
            },
          ],
        },
        { name: "Total points", value: 1 },
        { name: "Array length", value: 3 },
      ],
      objName: "Ops.Array.Array3",
    },
    {
      id: "0e6l04czt",
      uiAttribs: {},
      portsIn: [
        { name: "Num Triplets", value: 1 },
        { name: "X", value: 44.77 },
        { name: "Y", value: -29.22 },
        { name: "Z", value: 0 },
      ],
      portsOut: [
        {
          name: "Array",
          links: [
            {
              portIn: "Array 2",
              portOut: "Array",
              objIn: "5hdj2sv1u",
              objOut: "0e6l04czt",
            },
          ],
        },
        { name: "Total points", value: 1 },
        { name: "Array length", value: 3 },
      ],
      objName: "Ops.Array.Array3",
    },
    {
      id: "yphqk9m5e",
      uiAttribs: {},
      portsIn: [
        { name: "rotX", value: -25.67 },
        { name: "rotY", value: 0 },
        { name: "rotZ", value: 0 },
      ],
      portsOut: [
        {
          name: "trigger",
          links: [
            {
              portIn: "in0 Ops.Trigger.RouteTriggerString Trigger 0",
              portOut: "trigger",
              objIn: "hsr3syavx",
              objOut: "yphqk9m5e",
            },
          ],
        },
      ],
      objName: "Ops.Gl.Matrix.TransformView",
    },
    {
      id: "qf6lbghx2",
      uiAttribs: {},
      portsOut: [
        {
          name: "trigger 0",
          links: [
            {
              portIn: "render",
              portOut: "trigger 0",
              objIn: "3e9jbf60v",
              objOut: "qf6lbghx2",
            },
          ],
        },
        {
          name: "trigger 1",
          links: [
            {
              portIn: "render",
              portOut: "trigger 1",
              objIn: "yphqk9m5e",
              objOut: "qf6lbghx2",
            },
          ],
        },
      ],
      objName: "Ops.Trigger.Sequence",
    },
    {
      id: "kjbqecunk",
      uiAttribs: {},
      portsIn: [
        { name: "Array length", value: 1 },
        { name: "Mode select index", value: 0 },
        { name: "Mode select", value: "Number" },
        { name: "Default Value", value: 0.9 },
        { name: "Reverse", value: false },
      ],
      portsOut: [
        {
          name: "Array",
          links: [
            {
              portIn: "Array 1",
              portOut: "Array",
              objIn: "kupa1fkd4",
              objOut: "kjbqecunk",
            },
          ],
        },
        { name: "Array length out", value: 1 },
      ],
      objName: "Ops.Array.Array_v3",
    },
    {
      id: "52hizm1h4",
      uiAttribs: {},
      portsIn: [
        { name: "Num Triplets", value: 1 },
        { name: "X", value: -8.89 },
        { name: "Y", value: -7.09 },
        { name: "Z", value: 0 },
      ],
      portsOut: [
        {
          name: "Array",
          links: [
            {
              portIn: "Array 0",
              portOut: "Array",
              objIn: "kupa1fkd4",
              objOut: "52hizm1h4",
            },
          ],
        },
        { name: "Total points", value: 1 },
        { name: "Array length", value: 3 },
      ],
      objName: "Ops.Array.Array3",
    },
    {
      id: "vrwo5fgu5",
      uiAttribs: {},
      portsIn: [
        { name: "Num Triplets", value: 1 },
        { name: "X", value: 44.77 },
        { name: "Y", value: -29.22 },
        { name: "Z", value: 0 },
      ],
      portsOut: [
        {
          name: "Array",
          links: [
            {
              portIn: "Array 2",
              portOut: "Array",
              objIn: "kupa1fkd4",
              objOut: "vrwo5fgu5",
            },
          ],
        },
        { name: "Total points", value: 1 },
        { name: "Array length", value: 3 },
      ],
      objName: "Ops.Array.Array3",
    },
    {
      id: "d1c94912-856a-4c82-b660-6d30a31e21fe",
      uiAttribs: { subPatch: "8aabf450-104c-4af6-a226-3166d810c3b7" },
      portsIn: [{ name: "Variable", value: "workScroll" }],
      portsOut: [
        {
          name: "Value",
          links: [
            {
              portIn: "value",
              portOut: "Value",
              objIn: "0f815593-468f-448a-908e-670889fee745",
              objOut: "d1c94912-856a-4c82-b660-6d30a31e21fe",
            },
          ],
        },
      ],
      objName: "Ops.Vars.VarGetNumber_v2",
    },
    {
      id: "0f815593-468f-448a-908e-670889fee745",
      uiAttribs: { subPatch: "8aabf450-104c-4af6-a226-3166d810c3b7" },
      portsIn: [
        { name: "old min", value: 0 },
        { name: "old max", value: 0.5 },
        { name: "new min", value: 1 },
        { name: "new max", value: 0 },
        { name: "Easing index", value: 0 },
        { name: "Easing", value: "Linear" },
      ],
      portsOut: [
        {
          name: "result",
          links: [
            {
              portIn: "a",
              portOut: "result",
              objIn: "23hn8lq74",
              objOut: "0f815593-468f-448a-908e-670889fee745",
            },
          ],
        },
      ],
      objName: "Ops.Math.MapRange",
    },
    {
      id: "o5t2bt6k9",
      uiAttribs: {},
      portsOut: [
        {
          name: "trigger 0",
          links: [
            {
              portIn: "render",
              portOut: "trigger 0",
              objIn: "3e9jbf60v",
              objOut: "o5t2bt6k9",
            },
          ],
        },
      ],
      objName: "Ops.Trigger.Sequence",
    },
    {
      id: "l6tabrnqs",
      uiAttribs: {},
      portsOut: [
        {
          name: "trigger 0",
          links: [
            {
              portIn: "render",
              portOut: "trigger 0",
              objIn: "3e9jbf60v",
              objOut: "l6tabrnqs",
            },
          ],
        },
        {
          name: "trigger 1",
          links: [
            {
              portIn: "in0 Ops.Trigger.RouteTriggerString Trigger 0",
              portOut: "trigger 1",
              objIn: "fmv4mvs4s",
              objOut: "l6tabrnqs",
            },
          ],
        },
      ],
      objName: "Ops.Trigger.Sequence",
    },
    {
      id: "9ab09c55-a9f4-45b3-91f7-1438b3975417",
      uiAttribs: {},
      portsIn: [
        { name: "Array 3", value: 0 },
        { name: "Array 4", value: 0 },
        { name: "Array 5", value: 0 },
        { name: "Array 6", value: 0 },
        { name: "Array 7", value: 0 },
        { name: "Array 8", value: 0 },
        { name: "Array 9", value: 0 },
      ],
      portsOut: [
        {
          name: "Result",
          links: [
            {
              portIn: "Array 1",
              portOut: "Result",
              objIn: "0co9dzwpn",
              objOut: "9ab09c55-a9f4-45b3-91f7-1438b3975417",
            },
          ],
        },
      ],
      objName: "Ops.Array.SwitchArray",
    },
    {
      id: "axxi4fptj",
      uiAttribs: {},
      portsIn: [
        { name: "Num Triplets", value: 1 },
        { name: "X", value: 3.88 },
        { name: "Y", value: 0.89 },
        { name: "Z", value: 0 },
      ],
      portsOut: [
        {
          name: "Array",
          links: [
            {
              portIn: "Array 0",
              portOut: "Array",
              objIn: "kt0lwkcse",
              objOut: "axxi4fptj",
            },
          ],
        },
        { name: "Total points", value: 1 },
        { name: "Array length", value: 3 },
      ],
      objName: "Ops.Array.Array3",
    },
    {
      id: "kt0lwkcse",
      uiAttribs: {},
      portsIn: [
        { name: "Array 3", value: 0 },
        { name: "Array 4", value: 0 },
        { name: "Array 5", value: 0 },
        { name: "Array 6", value: 0 },
        { name: "Array 7", value: 0 },
      ],
      portsOut: [
        {
          name: "Result",
          links: [
            {
              portIn: "Array 1",
              portOut: "Result",
              objIn: "9ab09c55-a9f4-45b3-91f7-1438b3975417",
              objOut: "kt0lwkcse",
            },
          ],
        },
        { name: "Array length", value: 7 },
      ],
      objName: "Ops.Array.ArrayMerge_v3",
    },
    {
      id: "j03rg049z",
      uiAttribs: {},
      portsIn: [
        { name: "Array length", value: 1 },
        { name: "Mode select index", value: 0 },
        { name: "Mode select", value: "Number" },
        { name: "Default Value", value: 5.95 },
        { name: "Reverse", value: false },
      ],
      portsOut: [
        {
          name: "Array",
          links: [
            {
              portIn: "Array 1",
              portOut: "Array",
              objIn: "kt0lwkcse",
              objOut: "j03rg049z",
            },
          ],
        },
        { name: "Array length out", value: 1 },
      ],
      objName: "Ops.Array.Array_v3",
    },
    {
      id: "8y1oktz3a",
      uiAttribs: {},
      portsIn: [
        { name: "Num Triplets", value: 1 },
        { name: "X", value: 248.87 },
        { name: "Y", value: -40.95 },
        { name: "Z", value: 0 },
      ],
      portsOut: [
        {
          name: "Array",
          links: [
            {
              portIn: "Array 2",
              portOut: "Array",
              objIn: "kt0lwkcse",
              objOut: "8y1oktz3a",
            },
          ],
        },
        { name: "Total points", value: 1 },
        { name: "Array length", value: 3 },
      ],
      objName: "Ops.Array.Array3",
    },
    {
      id: "wx3xv98h7",
      uiAttribs: {},
      portsIn: [
        { name: "Num Triplets", value: 1 },
        { name: "X", value: 1.44 },
        { name: "Y", value: 0 },
        { name: "Z", value: 0 },
      ],
      portsOut: [
        {
          name: "Array",
          links: [
            {
              portIn: "Array 0",
              portOut: "Array",
              objIn: "wpd61jipm",
              objOut: "wx3xv98h7",
            },
          ],
        },
        { name: "Total points", value: 1 },
        { name: "Array length", value: 3 },
      ],
      objName: "Ops.Array.Array3",
    },
    {
      id: "wpd61jipm",
      uiAttribs: {},
      portsIn: [
        { name: "Array 3", value: 0 },
        { name: "Array 4", value: 0 },
        { name: "Array 5", value: 0 },
        { name: "Array 6", value: 0 },
        { name: "Array 7", value: 0 },
      ],
      portsOut: [
        {
          name: "Result",
          links: [
            {
              portIn: "Array 0",
              portOut: "Result",
              objIn: "9ab09c55-a9f4-45b3-91f7-1438b3975417",
              objOut: "wpd61jipm",
            },
          ],
        },
        { name: "Array length", value: 7 },
      ],
      objName: "Ops.Array.ArrayMerge_v3",
    },
    {
      id: "e8q4y3pw7",
      uiAttribs: {},
      portsIn: [
        { name: "Array length", value: 1 },
        { name: "Mode select index", value: 0 },
        { name: "Mode select", value: "Number" },
        { name: "Default Value", value: 8.68 },
        { name: "Reverse", value: false },
      ],
      portsOut: [
        {
          name: "Array",
          links: [
            {
              portIn: "Array 1",
              portOut: "Array",
              objIn: "wpd61jipm",
              objOut: "e8q4y3pw7",
            },
          ],
        },
        { name: "Array length out", value: 1 },
      ],
      objName: "Ops.Array.Array_v3",
    },
    {
      id: "vxb8vaeuh",
      uiAttribs: {},
      portsIn: [
        { name: "Num Triplets", value: 1 },
        { name: "X", value: 332.62 },
        { name: "Y", value: -88.68 },
        { name: "Z", value: 0 },
      ],
      portsOut: [
        {
          name: "Array",
          links: [
            {
              portIn: "Array 2",
              portOut: "Array",
              objIn: "wpd61jipm",
              objOut: "vxb8vaeuh",
            },
          ],
        },
        { name: "Total points", value: 1 },
        { name: "Array length", value: 3 },
      ],
      objName: "Ops.Array.Array3",
    },
    {
      id: "400e715b-2702-4f99-acf3-b545cbb099f7",
      uiAttribs: {},
      portsIn: [{ name: "Variable", value: "mediaQueryIndex" }],
      objName: "Ops.Vars.VarSetNumber_v2",
    },
    {
      id: "25dac18d-a406-44cb-a11e-6770fc5fe1e3",
      uiAttribs: {},
      portsIn: [{ name: "Variable", value: "mediaQueryIndex" }],
      portsOut: [
        {
          name: "Value",
          links: [
            {
              portIn: "Index",
              portOut: "Value",
              objIn: "9ab09c55-a9f4-45b3-91f7-1438b3975417",
              objOut: "25dac18d-a406-44cb-a11e-6770fc5fe1e3",
            },
            {
              portIn: "Index",
              portOut: "Value",
              objIn: "xunvxt053",
              objOut: "25dac18d-a406-44cb-a11e-6770fc5fe1e3",
            },
            {
              portIn: "Index",
              portOut: "Value",
              objIn: "zazzu6gav",
              objOut: "25dac18d-a406-44cb-a11e-6770fc5fe1e3",
            },
          ],
        },
      ],
      objName: "Ops.Vars.VarGetNumber_v2",
    },
    {
      id: "xunvxt053",
      uiAttribs: {},
      portsIn: [
        { name: "Array 3", value: 0 },
        { name: "Array 4", value: 0 },
        { name: "Array 5", value: 0 },
        { name: "Array 6", value: 0 },
        { name: "Array 7", value: 0 },
        { name: "Array 8", value: 0 },
        { name: "Array 9", value: 0 },
      ],
      portsOut: [
        {
          name: "Result",
          links: [
            {
              portIn: "Array 2",
              portOut: "Result",
              objIn: "0co9dzwpn",
              objOut: "xunvxt053",
            },
          ],
        },
      ],
      objName: "Ops.Array.SwitchArray",
    },
    {
      id: "dpswbpkzx",
      uiAttribs: {},
      portsIn: [
        { name: "Num Triplets", value: 1 },
        { name: "X", value: 0.51 },
        { name: "Y", value: -6.73 },
        { name: "Z", value: 0 },
      ],
      portsOut: [
        {
          name: "Array",
          links: [
            {
              portIn: "Array 0",
              portOut: "Array",
              objIn: "d6gmy36f9",
              objOut: "dpswbpkzx",
            },
          ],
        },
        { name: "Total points", value: 1 },
        { name: "Array length", value: 3 },
      ],
      objName: "Ops.Array.Array3",
    },
    {
      id: "d6gmy36f9",
      uiAttribs: {},
      portsIn: [
        { name: "Array 3", value: 0 },
        { name: "Array 4", value: 0 },
        { name: "Array 5", value: 0 },
        { name: "Array 6", value: 0 },
        { name: "Array 7", value: 0 },
      ],
      portsOut: [
        {
          name: "Result",
          links: [
            {
              portIn: "Array 1",
              portOut: "Result",
              objIn: "xunvxt053",
              objOut: "d6gmy36f9",
            },
          ],
        },
        { name: "Array length", value: 7 },
      ],
      objName: "Ops.Array.ArrayMerge_v3",
    },
    {
      id: "w8erdggi3",
      uiAttribs: {},
      portsIn: [
        { name: "Array length", value: 1 },
        { name: "Mode select index", value: 0 },
        { name: "Mode select", value: "Number" },
        { name: "Default Value", value: 5.95 },
        { name: "Reverse", value: false },
      ],
      portsOut: [
        {
          name: "Array",
          links: [
            {
              portIn: "Array 1",
              portOut: "Array",
              objIn: "d6gmy36f9",
              objOut: "w8erdggi3",
            },
          ],
        },
        { name: "Array length out", value: 1 },
      ],
      objName: "Ops.Array.Array_v3",
    },
    {
      id: "vatxefuk6",
      uiAttribs: {},
      portsIn: [
        { name: "Num Triplets", value: 1 },
        { name: "X", value: 250.28 },
        { name: "Y", value: -45.93 },
        { name: "Z", value: 0 },
      ],
      portsOut: [
        {
          name: "Array",
          links: [
            {
              portIn: "Array 2",
              portOut: "Array",
              objIn: "d6gmy36f9",
              objOut: "vatxefuk6",
            },
          ],
        },
        { name: "Total points", value: 1 },
        { name: "Array length", value: 3 },
      ],
      objName: "Ops.Array.Array3",
    },
    {
      id: "6twf5ybew",
      uiAttribs: {},
      portsIn: [
        { name: "Array 3", value: 0 },
        { name: "Array 4", value: 0 },
        { name: "Array 5", value: 0 },
        { name: "Array 6", value: 0 },
        { name: "Array 7", value: 0 },
      ],
      portsOut: [
        {
          name: "Result",
          links: [
            {
              portIn: "Array 0",
              portOut: "Result",
              objIn: "xunvxt053",
              objOut: "6twf5ybew",
            },
          ],
        },
        { name: "Array length", value: 7 },
      ],
      objName: "Ops.Array.ArrayMerge_v3",
    },
    {
      id: "zazzu6gav",
      uiAttribs: {},
      portsIn: [
        { name: "Array 3", value: 0 },
        { name: "Array 4", value: 0 },
        { name: "Array 5", value: 0 },
        { name: "Array 6", value: 0 },
        { name: "Array 7", value: 0 },
        { name: "Array 8", value: 0 },
        { name: "Array 9", value: 0 },
      ],
      portsOut: [
        {
          name: "Result",
          links: [
            {
              portIn: "Array 2",
              portOut: "Result",
              objIn: "dbus6zao0",
              objOut: "zazzu6gav",
            },
          ],
        },
      ],
      objName: "Ops.Array.SwitchArray",
    },
    {
      id: "6gi28gw4p",
      uiAttribs: {},
      portsIn: [
        { name: "Num Triplets", value: 1 },
        { name: "X", value: 0.17 },
        { name: "Y", value: -3.43 },
        { name: "Z", value: 0 },
      ],
      portsOut: [
        {
          name: "Array",
          links: [
            {
              portIn: "Array 0",
              portOut: "Array",
              objIn: "1v0uxxgaz",
              objOut: "6gi28gw4p",
            },
          ],
        },
        { name: "Total points", value: 1 },
        { name: "Array length", value: 3 },
      ],
      objName: "Ops.Array.Array3",
    },
    {
      id: "1v0uxxgaz",
      uiAttribs: {},
      portsIn: [
        { name: "Array 3", value: 0 },
        { name: "Array 4", value: 0 },
        { name: "Array 5", value: 0 },
        { name: "Array 6", value: 0 },
        { name: "Array 7", value: 0 },
      ],
      portsOut: [
        {
          name: "Result",
          links: [
            {
              portIn: "Array 1",
              portOut: "Result",
              objIn: "zazzu6gav",
              objOut: "1v0uxxgaz",
            },
          ],
        },
        { name: "Array length", value: 7 },
      ],
      objName: "Ops.Array.ArrayMerge_v3",
    },
    {
      id: "o9a97qk5l",
      uiAttribs: {},
      portsIn: [
        { name: "Array length", value: 1 },
        { name: "Mode select index", value: 0 },
        { name: "Mode select", value: "Number" },
        { name: "Default Value", value: 9.08 },
        { name: "Reverse", value: false },
      ],
      portsOut: [
        {
          name: "Array",
          links: [
            {
              portIn: "Array 1",
              portOut: "Array",
              objIn: "1v0uxxgaz",
              objOut: "o9a97qk5l",
            },
          ],
        },
        { name: "Array length out", value: 1 },
      ],
      objName: "Ops.Array.Array_v3",
    },
    {
      id: "rpg72v3hb",
      uiAttribs: {},
      portsIn: [
        { name: "Num Triplets", value: 1 },
        { name: "X", value: 340.51 },
        { name: "Y", value: 8.92 },
        { name: "Z", value: 0 },
      ],
      portsOut: [
        {
          name: "Array",
          links: [
            {
              portIn: "Array 2",
              portOut: "Array",
              objIn: "1v0uxxgaz",
              objOut: "rpg72v3hb",
            },
          ],
        },
        { name: "Total points", value: 1 },
        { name: "Array length", value: 3 },
      ],
      objName: "Ops.Array.Array3",
    },
    {
      id: "e76umqz32",
      uiAttribs: {},
      portsIn: [
        { name: "Num Triplets", value: 1 },
        { name: "X", value: -3.09 },
        { name: "Y", value: 4.9 },
        { name: "Z", value: 0 },
      ],
      portsOut: [
        {
          name: "Array",
          links: [
            {
              portIn: "Array 0",
              portOut: "Array",
              objIn: "xi6z6ub59",
              objOut: "e76umqz32",
            },
          ],
        },
        { name: "Total points", value: 1 },
        { name: "Array length", value: 3 },
      ],
      objName: "Ops.Array.Array3",
    },
    {
      id: "xi6z6ub59",
      uiAttribs: {},
      portsIn: [
        { name: "Array 3", value: 0 },
        { name: "Array 4", value: 0 },
        { name: "Array 5", value: 0 },
        { name: "Array 6", value: 0 },
        { name: "Array 7", value: 0 },
      ],
      portsOut: [
        {
          name: "Result",
          links: [
            {
              portIn: "Array 0",
              portOut: "Result",
              objIn: "zazzu6gav",
              objOut: "xi6z6ub59",
            },
          ],
        },
        { name: "Array length", value: 7 },
      ],
      objName: "Ops.Array.ArrayMerge_v3",
    },
    {
      id: "soeojty5o",
      uiAttribs: {},
      portsIn: [
        { name: "Array length", value: 1 },
        { name: "Mode select index", value: 0 },
        { name: "Mode select", value: "Number" },
        { name: "Default Value", value: 11.08 },
        { name: "Reverse", value: false },
      ],
      portsOut: [
        {
          name: "Array",
          links: [
            {
              portIn: "Array 1",
              portOut: "Array",
              objIn: "xi6z6ub59",
              objOut: "soeojty5o",
            },
          ],
        },
        { name: "Array length out", value: 1 },
      ],
      objName: "Ops.Array.Array_v3",
    },
    {
      id: "ov7enx4pu",
      uiAttribs: {},
      portsIn: [
        { name: "Num Triplets", value: 1 },
        { name: "X", value: 222.34 },
        { name: "Y", value: -123.39 },
        { name: "Z", value: 11.62 },
      ],
      portsOut: [
        {
          name: "Array",
          links: [
            {
              portIn: "Array 2",
              portOut: "Array",
              objIn: "xi6z6ub59",
              objOut: "ov7enx4pu",
            },
          ],
        },
        { name: "Total points", value: 1 },
        { name: "Array length", value: 3 },
      ],
      objName: "Ops.Array.Array3",
    },
    {
      id: "zou6ni0gj",
      uiAttribs: { subPatch: "8aabf450-104c-4af6-a226-3166d810c3b7" },
      portsIn: [
        { name: "Num Triplets", value: 1 },
        { name: "X", value: -0.91 },
        { name: "Y", value: 0.1 },
        { name: "Z", value: 0 },
      ],
      portsOut: [
        {
          name: "Array",
          links: [
            {
              portIn: "Array 0",
              portOut: "Array",
              objIn: "cfpl9gv6t",
              objOut: "zou6ni0gj",
            },
          ],
        },
        { name: "Total points", value: 1 },
        { name: "Array length", value: 3 },
      ],
      objName: "Ops.Array.Array3",
    },
    {
      id: "cfpl9gv6t",
      uiAttribs: { subPatch: "8aabf450-104c-4af6-a226-3166d810c3b7" },
      portsIn: [
        { name: "Array 2" },
        { name: "Array 3", value: 0 },
        { name: "Array 4", value: 0 },
        { name: "Array 5", value: 0 },
        { name: "Array 6", value: 0 },
        { name: "Array 7", value: 0 },
      ],
      portsOut: [
        {
          name: "Result",
          links: [
            {
              portIn: "Array 2",
              portOut: "Result",
              objIn: "099cc813-a8ed-4bea-a67d-8887290f206b",
              objOut: "cfpl9gv6t",
            },
          ],
        },
        { name: "Array length", value: 4 },
      ],
      objName: "Ops.Array.ArrayMerge_v3",
    },
    {
      id: "cjgux61rl",
      uiAttribs: { subPatch: "8aabf450-104c-4af6-a226-3166d810c3b7" },
      portsIn: [
        { name: "Array length", value: 1 },
        { name: "Mode select index", value: 0 },
        { name: "Mode select", value: "Number" },
        { name: "Default Value", value: 0.43 },
        { name: "Reverse", value: false },
      ],
      portsOut: [
        {
          name: "Array",
          links: [
            {
              portIn: "Array 1",
              portOut: "Array",
              objIn: "cfpl9gv6t",
              objOut: "cjgux61rl",
            },
          ],
        },
        { name: "Array length out", value: 1 },
      ],
      objName: "Ops.Array.Array_v3",
    },
    {
      id: "apqywu8w0",
      uiAttribs: { subPatch: "8aabf450-104c-4af6-a226-3166d810c3b7" },
      portsIn: [
        { name: "Num Triplets", value: 1 },
        { name: "X", value: -0.91 },
        { name: "Y", value: 0.17 },
        { name: "Z", value: 0 },
      ],
      portsOut: [
        {
          name: "Array",
          links: [
            {
              portIn: "Array 0",
              portOut: "Array",
              objIn: "vrf55zl3j",
              objOut: "apqywu8w0",
            },
          ],
        },
        { name: "Total points", value: 1 },
        { name: "Array length", value: 3 },
      ],
      objName: "Ops.Array.Array3",
    },
    {
      id: "vrf55zl3j",
      uiAttribs: { subPatch: "8aabf450-104c-4af6-a226-3166d810c3b7" },
      portsIn: [
        { name: "Array 2" },
        { name: "Array 3", value: 0 },
        { name: "Array 4", value: 0 },
        { name: "Array 5", value: 0 },
        { name: "Array 6", value: 0 },
        { name: "Array 7", value: 0 },
      ],
      portsOut: [
        {
          name: "Result",
          links: [
            {
              portIn: "Array 1",
              portOut: "Result",
              objIn: "099cc813-a8ed-4bea-a67d-8887290f206b",
              objOut: "vrf55zl3j",
            },
          ],
        },
        { name: "Array length", value: 4 },
      ],
      objName: "Ops.Array.ArrayMerge_v3",
    },
    {
      id: "yp5z7nu9h",
      uiAttribs: { subPatch: "8aabf450-104c-4af6-a226-3166d810c3b7" },
      portsIn: [
        { name: "Array length", value: 1 },
        { name: "Mode select index", value: 0 },
        { name: "Mode select", value: "Number" },
        { name: "Default Value", value: 0.31 },
        { name: "Reverse", value: false },
      ],
      portsOut: [
        {
          name: "Array",
          links: [
            {
              portIn: "Array 1",
              portOut: "Array",
              objIn: "vrf55zl3j",
              objOut: "yp5z7nu9h",
            },
          ],
        },
        { name: "Array length out", value: 1 },
      ],
      objName: "Ops.Array.Array_v3",
    },
    {
      id: "099cc813-a8ed-4bea-a67d-8887290f206b",
      uiAttribs: { subPatch: "8aabf450-104c-4af6-a226-3166d810c3b7" },
      portsIn: [
        { name: "Array 0" },
        { name: "Array 3", value: 0 },
        { name: "Array 4", value: 0 },
        { name: "Array 5", value: 0 },
        { name: "Array 6", value: 0 },
        { name: "Array 7", value: 0 },
        { name: "Array 8", value: 0 },
        { name: "Array 9", value: 0 },
      ],
      portsOut: [
        {
          name: "Result",
          links: [
            {
              portIn: "Array",
              portOut: "Result",
              objIn: "mj3ip9m6y",
              objOut: "099cc813-a8ed-4bea-a67d-8887290f206b",
            },
            {
              portIn: "array",
              portOut: "Result",
              objIn: "k57n722rv",
              objOut: "099cc813-a8ed-4bea-a67d-8887290f206b",
            },
          ],
        },
      ],
      objName: "Ops.Array.SwitchArray",
    },
    {
      id: "mj3ip9m6y",
      uiAttribs: { subPatch: "8aabf450-104c-4af6-a226-3166d810c3b7" },
      portsIn: [{ name: "Index", value: 0 }],
      portsOut: [
        {
          name: "X",
          links: [
            {
              portIn: "X",
              portOut: "X",
              objIn: "3d3047d4-9fe2-44ed-97f3-f629a929d695",
              objOut: "mj3ip9m6y",
            },
          ],
        },
        {
          name: "Y",
          links: [
            {
              portIn: "Y",
              portOut: "Y",
              objIn: "3d3047d4-9fe2-44ed-97f3-f629a929d695",
              objOut: "mj3ip9m6y",
            },
          ],
        },
        { name: "Z", value: 0 },
      ],
      objName: "Ops.Array.Array3GetNumbers",
    },
    {
      id: "k57n722rv",
      uiAttribs: { subPatch: "8aabf450-104c-4af6-a226-3166d810c3b7" },
      portsIn: [{ name: "index", value: 3 }],
      portsOut: [
        {
          name: "value",
          links: [
            {
              portIn: "scale",
              portOut: "value",
              objIn: "t4olo9axm",
              objOut: "k57n722rv",
            },
          ],
        },
      ],
      objName: "Ops.Array.ArrayGetNumber",
    },
    {
      id: "qomuf9jvd",
      uiAttribs: { subPatch: "8aabf450-104c-4af6-a226-3166d810c3b7" },
      portsIn: [{ name: "Variable", value: "mediaQueryIndex" }],
      portsOut: [
        {
          name: "Value",
          links: [
            {
              portIn: "Index",
              portOut: "Value",
              objIn: "099cc813-a8ed-4bea-a67d-8887290f206b",
              objOut: "qomuf9jvd",
            },
          ],
        },
      ],
      objName: "Ops.Vars.VarGetNumber_v2",
    },
    {
      id: "d2ol2blmp",
      uiAttribs: { subPatch: "8aabf450-104c-4af6-a226-3166d810c3b7" },
      portsIn: [{ name: "Variable", value: "mediaQuery" }],
      portsOut: [
        {
          name: "Value",
          links: [
            {
              portIn: "Switch Value",
              portOut: "Value",
              objIn: "x5xpc6yqk",
              objOut: "d2ol2blmp",
            },
          ],
        },
      ],
      objName: "Ops.Vars.VarGetString",
    },
    {
      id: "x5xpc6yqk",
      uiAttribs: { subPatch: "8aabf450-104c-4af6-a226-3166d810c3b7" },
      portsIn: [
        { name: "String 0", value: "mq1" },
        { name: "String 1", value: "mq2" },
        { name: "String 2", value: "mq3" },
        { name: "String 3", value: "" },
        { name: "String 4", value: "" },
        { name: "String 5", value: "" },
        { name: "String 6", value: "" },
        { name: "String 7", value: "" },
        { name: "String 8", value: "" },
        { name: "String 9", value: "" },
        { name: "String 10", value: "" },
        { name: "String 11", value: "" },
        { name: "String 12", value: "" },
        { name: "String 13", value: "" },
        { name: "String 14", value: "" },
        { name: "String 15", value: "" },
        { name: "String 16", value: "" },
        { name: "String 17", value: "" },
        { name: "String 18", value: "" },
        { name: "String 19", value: "" },
        { name: "String 20", value: "" },
        { name: "String 21", value: "" },
        { name: "String 22", value: "" },
        { name: "String 23", value: "" },
      ],
      portsOut: [
        { name: "Switched Index", value: 1 },
        {
          name: "Trigger 1",
          links: [
            {
              portIn: "Exec",
              portOut: "Trigger 1",
              objIn: "3d3047d4-9fe2-44ed-97f3-f629a929d695",
              objOut: "x5xpc6yqk",
            },
          ],
        },
        {
          name: "Trigger 2",
          links: [
            {
              portIn: "Exec",
              portOut: "Trigger 2",
              objIn: "3d3047d4-9fe2-44ed-97f3-f629a929d695",
              objOut: "x5xpc6yqk",
            },
          ],
        },
      ],
      objName: "Ops.Trigger.RouteTriggerString_v2",
    },
    {
      id: "yqk7pb1zt",
      uiAttribs: {},
      portsIn: [
        { name: "Num Triplets", value: 1 },
        { name: "X", value: 2.32 },
        { name: "Y", value: -10.94 },
        { name: "Z", value: 0 },
      ],
      portsOut: [
        {
          name: "Array",
          links: [
            {
              portIn: "Array 0",
              portOut: "Array",
              objIn: "6twf5ybew",
              objOut: "yqk7pb1zt",
            },
          ],
        },
        { name: "Total points", value: 1 },
        { name: "Array length", value: 3 },
      ],
      objName: "Ops.Array.Array3",
    },
    {
      id: "05p204bh9",
      uiAttribs: {},
      portsIn: [
        { name: "Array length", value: 1 },
        { name: "Mode select index", value: 0 },
        { name: "Mode select", value: "Number" },
        { name: "Default Value", value: 8.68 },
        { name: "Reverse", value: false },
      ],
      portsOut: [
        {
          name: "Array",
          links: [
            {
              portIn: "Array 1",
              portOut: "Array",
              objIn: "6twf5ybew",
              objOut: "05p204bh9",
            },
          ],
        },
        { name: "Array length out", value: 1 },
      ],
      objName: "Ops.Array.Array_v3",
    },
    {
      id: "wr7b3jrd2",
      uiAttribs: {},
      portsIn: [
        { name: "Num Triplets", value: 1 },
        { name: "X", value: 332.62 },
        { name: "Y", value: -88.68 },
        { name: "Z", value: 0 },
      ],
      portsOut: [
        {
          name: "Array",
          links: [
            {
              portIn: "Array 2",
              portOut: "Array",
              objIn: "6twf5ybew",
              objOut: "wr7b3jrd2",
            },
          ],
        },
        { name: "Total points", value: 1 },
        { name: "Array length", value: 3 },
      ],
      objName: "Ops.Array.Array3",
    },
    {
      id: "a0jpx6v4k",
      uiAttribs: { subPatch: "8aabf450-104c-4af6-a226-3166d810c3b7" },
      portsIn: [
        { name: "Num Triplets", value: 1 },
        { name: "X", value: 0.21 },
        { name: "Y", value: 0.72 },
        { name: "Z", value: 0 },
      ],
      portsOut: [
        {
          name: "Array",
          links: [
            {
              portIn: "Array 0",
              portOut: "Array",
              objIn: "vhmydc2fa",
              objOut: "a0jpx6v4k",
            },
          ],
        },
        { name: "Total points", value: 1 },
        { name: "Array length", value: 3 },
      ],
      objName: "Ops.Array.Array3",
    },
    {
      id: "vhmydc2fa",
      uiAttribs: { subPatch: "8aabf450-104c-4af6-a226-3166d810c3b7" },
      portsIn: [
        { name: "Array 2", value: 0 },
        { name: "Array 3", value: 0 },
        { name: "Array 4", value: 0 },
        { name: "Array 5", value: 0 },
        { name: "Array 6", value: 0 },
        { name: "Array 7", value: 0 },
      ],
      portsOut: [
        {
          name: "Result",
          links: [
            {
              portIn: "Array 2",
              portOut: "Result",
              objIn: "ys37zjv66",
              objOut: "vhmydc2fa",
            },
            {
              portIn: "Array 1",
              portOut: "Result",
              objIn: "ys37zjv66",
              objOut: "vhmydc2fa",
            },
          ],
        },
        { name: "Array length", value: 4 },
      ],
      objName: "Ops.Array.ArrayMerge_v3",
    },
    {
      id: "6dfsiof4z",
      uiAttribs: { subPatch: "8aabf450-104c-4af6-a226-3166d810c3b7" },
      portsIn: [
        { name: "Array length", value: 1 },
        { name: "Mode select index", value: 0 },
        { name: "Mode select", value: "Number" },
        { name: "Default Value", value: 1.27 },
        { name: "Reverse", value: false },
      ],
      portsOut: [
        {
          name: "Array",
          links: [
            {
              portIn: "Array 1",
              portOut: "Array",
              objIn: "vhmydc2fa",
              objOut: "6dfsiof4z",
            },
          ],
        },
        { name: "Array length out", value: 1 },
      ],
      objName: "Ops.Array.Array_v3",
    },
    {
      id: "ys37zjv66",
      uiAttribs: { subPatch: "8aabf450-104c-4af6-a226-3166d810c3b7" },
      portsIn: [
        { name: "Array 3", value: 0 },
        { name: "Array 4", value: 0 },
        { name: "Array 5", value: 0 },
        { name: "Array 6", value: 0 },
        { name: "Array 7", value: 0 },
        { name: "Array 8", value: 0 },
        { name: "Array 9", value: 0 },
      ],
      portsOut: [
        {
          name: "Result",
          links: [
            {
              portIn: "Array",
              portOut: "Result",
              objIn: "6qcvkg8dt",
              objOut: "ys37zjv66",
            },
            {
              portIn: "array",
              portOut: "Result",
              objIn: "nc2zo61lq",
              objOut: "ys37zjv66",
            },
          ],
        },
      ],
      objName: "Ops.Array.SwitchArray",
    },
    {
      id: "6qcvkg8dt",
      uiAttribs: { subPatch: "8aabf450-104c-4af6-a226-3166d810c3b7" },
      portsIn: [{ name: "Index", value: 0 }],
      portsOut: [
        {
          name: "X",
          links: [
            {
              portIn: "X",
              portOut: "X",
              objIn: "i8jtphua0",
              objOut: "6qcvkg8dt",
            },
          ],
        },
        {
          name: "Y",
          links: [
            {
              portIn: "Y",
              portOut: "Y",
              objIn: "i8jtphua0",
              objOut: "6qcvkg8dt",
            },
          ],
        },
        { name: "Z", value: 0 },
      ],
      objName: "Ops.Array.Array3GetNumbers",
    },
    {
      id: "nc2zo61lq",
      uiAttribs: { subPatch: "8aabf450-104c-4af6-a226-3166d810c3b7" },
      portsIn: [{ name: "index", value: 3 }],
      portsOut: [
        {
          name: "value",
          links: [
            {
              portIn: "scale",
              portOut: "value",
              objIn: "b5w7sghze",
              objOut: "nc2zo61lq",
            },
          ],
        },
      ],
      objName: "Ops.Array.ArrayGetNumber",
    },
    {
      id: "5hy5vsc2p",
      uiAttribs: { subPatch: "8aabf450-104c-4af6-a226-3166d810c3b7" },
      portsIn: [{ name: "Variable", value: "mediaQueryIndex" }],
      portsOut: [
        {
          name: "Value",
          links: [
            {
              portIn: "Index",
              portOut: "Value",
              objIn: "ys37zjv66",
              objOut: "5hy5vsc2p",
            },
          ],
        },
      ],
      objName: "Ops.Vars.VarGetNumber_v2",
    },
    {
      id: "168wwxi3m",
      uiAttribs: { subPatch: "8aabf450-104c-4af6-a226-3166d810c3b7" },
      portsIn: [
        { name: "Num Triplets", value: 1 },
        { name: "X", value: -0.84 },
        { name: "Y", value: 0.57 },
        { name: "Z", value: 0 },
      ],
      portsOut: [
        {
          name: "Array",
          links: [
            {
              portIn: "Array 0",
              portOut: "Array",
              objIn: "11l1sehfu",
              objOut: "168wwxi3m",
            },
          ],
        },
        { name: "Total points", value: 1 },
        { name: "Array length", value: 3 },
      ],
      objName: "Ops.Array.Array3",
    },
    {
      id: "11l1sehfu",
      uiAttribs: { subPatch: "8aabf450-104c-4af6-a226-3166d810c3b7" },
      portsIn: [
        { name: "Array 2", value: 0 },
        { name: "Array 3", value: 0 },
        { name: "Array 4", value: 0 },
        { name: "Array 5", value: 0 },
        { name: "Array 6", value: 0 },
        { name: "Array 7", value: 0 },
      ],
      portsOut: [
        {
          name: "Result",
          links: [
            {
              portIn: "Array 0",
              portOut: "Result",
              objIn: "ys37zjv66",
              objOut: "11l1sehfu",
            },
          ],
        },
        { name: "Array length", value: 4 },
      ],
      objName: "Ops.Array.ArrayMerge_v3",
    },
    {
      id: "ww2b8u1ti",
      uiAttribs: { subPatch: "8aabf450-104c-4af6-a226-3166d810c3b7" },
      portsIn: [
        { name: "Array length", value: 1 },
        { name: "Mode select index", value: 0 },
        { name: "Mode select", value: "Number" },
        { name: "Default Value", value: 1.27 },
        { name: "Reverse", value: false },
      ],
      portsOut: [
        {
          name: "Array",
          links: [
            {
              portIn: "Array 1",
              portOut: "Array",
              objIn: "11l1sehfu",
              objOut: "ww2b8u1ti",
            },
          ],
        },
        { name: "Array length out", value: 1 },
      ],
      objName: "Ops.Array.Array_v3",
    },
    {
      id: "1tsza17id",
      uiAttribs: { subPatch: "8aabf450-104c-4af6-a226-3166d810c3b7" },
      portsIn: [
        { name: "old min", value: 0 },
        { name: "old max", value: 0.25 },
        { name: "new min", value: 0 },
        { name: "new max", value: 1 },
        { name: "Easing index", value: 0 },
        { name: "Easing", value: "Linear" },
      ],
      portsOut: [
        {
          name: "result",
          links: [
            {
              portIn: "a",
              portOut: "result",
              objIn: "567be9b1-31ea-4ecb-9d1a-c8247e2c1a5a",
              objOut: "1tsza17id",
            },
            {
              portIn: "a",
              portOut: "result",
              objIn: "jqbsp3ksd",
              objOut: "1tsza17id",
            },
            {
              portIn: "a",
              portOut: "result",
              objIn: "uui9drc5q",
              objOut: "1tsza17id",
            },
          ],
        },
      ],
      objName: "Ops.Math.MapRange",
    },
    {
      id: "gw0jjb769",
      uiAttribs: { subPatch: "8aabf450-104c-4af6-a226-3166d810c3b7" },
      portsIn: [{ name: "Variable", value: "aboutScroll" }],
      portsOut: [
        {
          name: "Value",
          links: [
            {
              portIn: "value",
              portOut: "Value",
              objIn: "1tsza17id",
              objOut: "gw0jjb769",
            },
          ],
        },
      ],
      objName: "Ops.Vars.VarGetNumber_v2",
    },
  ],
  _id: "651a88bdc6d98bfb822e8d4a",
  export: {
    time: "2024-01-14 19:56:24",
    service: "download",
    exportNumber: 86,
  },
};
if (!CABLES.exportedPatch) {
  CABLES.exportedPatch = CABLES.exportedPatches["2myFLH"];
}
("use strict");
var CABLES = CABLES || {};
CABLES.OPS = CABLES.OPS || {};
var Ops = Ops || {};
Ops.Gl = Ops.Gl || {};
Ops.Ui = Ops.Ui || {};
Ops.Anim = Ops.Anim || {};
Ops.Html = Ops.Html || {};
Ops.Json = Ops.Json || {};
Ops.Math = Ops.Math || {};
Ops.Vars = Ops.Vars || {};
Ops.Array = Ops.Array || {};
Ops.Color = Ops.Color || {};
Ops.Cables = Ops.Cables || {};
Ops.Number = Ops.Number || {};
Ops.String = Ops.String || {};
Ops.Boolean = Ops.Boolean || {};
Ops.Devices = Ops.Devices || {};
Ops.Gl.GLTF = Ops.Gl.GLTF || {};
Ops.Trigger = Ops.Trigger || {};
Ops.Gl.Matrix = Ops.Gl.Matrix || {};
Ops.Gl.Meshes = Ops.Gl.Meshes || {};
Ops.Gl.Shader = Ops.Gl.Shader || {};
Ops.Gl.Textures = Ops.Gl.Textures || {};
Ops.Math.Compare = Ops.Math.Compare || {};
Ops.Devices.Mouse = Ops.Devices.Mouse || {};
Ops.Gl.ImageCompose = Ops.Gl.ImageCompose || {};
Ops.Gl.ShaderEffects = Ops.Gl.ShaderEffects || {};
Ops.Gl.ImageCompose.Noise = Ops.Gl.ImageCompose.Noise || {};
Ops.Devices.Mouse.Mouse_v3 = function () {
  CABLES.Op.apply(this, arguments);
  const e = this;
  const t = (e.attachments = {});
  const n = e.inSwitch(
      "Coordinates",
      ["-1 to 1", "Pixel Display", "Pixel", "0 to 1"],
      "-1 to 1",
    ),
    r = e.inValueSelect(
      "Area",
      ["Canvas", "Document", "Parent Element", "Canvas Area"],
      "Canvas",
    ),
    i = e.inValueBool("flip y", true),
    a = e.inBool("right click prevent default", true),
    s = e.inValueBool("Touch support", true),
    o = e.inValueBool("Active", true),
    l = e.outNumber("x", 0),
    u = e.outNumber("y", 0),
    h = e.outTrigger("click"),
    c = e.outTrigger("click right"),
    m = e.outBoolNum("Button is down"),
    p = e.outBoolNum("Mouse is hovering");
  const g = e.patch.cgl;
  let f = 1;
  let d = null;
  let b = null;
  r.onChange = P;
  n.onChange = _;
  e.onDelete = M;
  P();
  e.on("loadedValueSet", () => {
    if (f == 0) {
      l.set(b.clientWidth / 2);
      u.set(b.clientHeight / 2);
    }
    if (f == 1) {
      l.set(0);
      u.set(0);
    }
    if (f == 2) {
      l.set(0.5);
      u.set(0.5);
    }
  });
  function v(r, i) {
    r = r || 0;
    i = i || 0;
    if (f == 0) {
      l.set(r);
      u.set(i);
    } else if (f == 3) {
      l.set(r * g.pixelDensity);
      u.set(i * g.pixelDensity);
    } else {
      let n = b.clientWidth / g.pixelDensity;
      let a = b.clientHeight / g.pixelDensity;
      n = n || 1;
      a = a || 1;
      if (f == 1) {
        let e = (r / n) * 2 - 1;
        let t = (i / a) * 2 - 1;
        e = CABLES.clamp(e, -1, 1);
        t = CABLES.clamp(t, -1, 1);
        l.set(e);
        u.set(t);
      } else if (f == 2) {
        let e = r / n;
        let t = i / a;
        e = CABLES.clamp(e, 0, 1);
        t = CABLES.clamp(t, 0, 1);
        l.set(e);
        u.set(t);
      }
    }
  }
  function O(e) {
    const t = b.getBoundingClientRect();
    return (
      e.clientX > t.left &&
      e.clientX < t.left + t.width &&
      e.clientY > t.top &&
      e.clientY < t.top + t.height
    );
  }
  s.onChange = function () {
    M();
    P();
  };
  o.onChange = function () {
    if (d) M();
    if (o.get()) P();
  };
  function _() {
    if (n.get() == "Pixel") f = 0;
    else if (n.get() == "-1 to 1") f = 1;
    else if (n.get() == "0 to 1") f = 2;
    else if (n.get() == "Pixel Display") f = 3;
  }
  function A(e) {
    m.set(false);
    p.set(O(e));
  }
  function y(e) {
    if (!O(e)) return;
    m.set(true);
  }
  function x(e) {
    m.set(false);
  }
  function I(e) {
    if (!O(e)) return;
    c.trigger();
    if (a.get()) e.preventDefault();
  }
  function T(e) {
    if (!O(e)) return;
    h.trigger();
  }
  function S(e) {
    m.set(false);
    p.set(O(e));
  }
  function C(e) {
    let t = e.clientX;
    let n = e.clientY;
    if (r.get() != "Document") {
      t = e.offsetX;
      n = e.offsetY;
    }
    if (r.get() === "Canvas Area") {
      const a = b.getBoundingClientRect();
      t = e.clientX - a.left;
      n = e.clientY - a.top;
    }
    if (i.get()) n = b.clientHeight - n;
    v(t / g.pixelDensity, n / g.pixelDensity);
  }
  function j(e) {
    p.set(O(e));
    C(e);
  }
  function N(e) {
    if (event.touches && event.touches.length > 0) C(e.touches[0]);
  }
  function E(e) {
    m.set(true);
    if (e.touches && e.touches.length > 0) y(e.touches[0]);
  }
  function w(e) {
    m.set(false);
    x();
  }
  function M() {
    if (!d) return;
    d.removeEventListener("touchend", w);
    d.removeEventListener("touchstart", E);
    d.removeEventListener("touchmove", N);
    d.removeEventListener("click", T);
    d.removeEventListener("mousemove", j);
    d.removeEventListener("mouseleave", S);
    d.removeEventListener("mousedown", y);
    d.removeEventListener("mouseup", x);
    d.removeEventListener("mouseenter", A);
    d.removeEventListener("contextmenu", I);
    d = null;
  }
  function P() {
    if (d || !o.get()) M();
    if (!o.get()) return;
    d = b = g.canvas;
    if (r.get() == "Canvas Area") {
      b = g.canvas.parentElement;
      d = document.body;
    }
    if (r.get() == "Document") b = d = document.body;
    if (r.get() == "Parent Element") d = b = g.canvas.parentElement;
    if (s.get()) {
      d.addEventListener("touchend", w);
      d.addEventListener("touchstart", E);
      d.addEventListener("touchmove", N);
    }
    d.addEventListener("mousemove", j);
    d.addEventListener("mouseleave", S);
    d.addEventListener("mousedown", y);
    d.addEventListener("mouseup", x);
    d.addEventListener("mouseenter", A);
    d.addEventListener("contextmenu", I);
    d.addEventListener("click", T);
  }
};
Ops.Devices.Mouse.Mouse_v3.prototype = new CABLES.Op();
CABLES.OPS["6d1edbc0-088a-43d7-9156-918fb3d7f24b"] = {
  f: Ops.Devices.Mouse.Mouse_v3,
  objName: "Ops.Devices.Mouse.Mouse_v3",
};
Ops.Math.MapRange = function () {
  CABLES.Op.apply(this, arguments);
  const e = this;
  const t = (e.attachments = {});
  const m = e.inValueFloat("value", 0),
    p = e.inValueFloat("old min", 0),
    g = e.inValueFloat("old max", 1),
    f = e.inValueFloat("new min", -1),
    d = e.inValueFloat("new max", 1),
    n = e.inValueSelect(
      "Easing",
      ["Linear", "Smoothstep", "Smootherstep"],
      "Linear",
    ),
    b = e.outNumber("result", 0);
  e.setPortGroup("Input Range", [p, g]);
  e.setPortGroup("Output Range", [f, d]);
  let v = 0;
  let O = 0;
  m.onChange = p.onChange = g.onChange = f.onChange = d.onChange = a;
  a();
  n.onChange = function () {
    if (n.get() == "Smoothstep") v = 1;
    else if (n.get() == "Smootherstep") v = 2;
    else v = 0;
  };
  function a() {
    const e = f.get();
    const t = d.get();
    const n = p.get();
    const a = g.get();
    let r = m.get();
    if (r >= Math.max(a, n)) {
      b.set(t);
      return;
    } else if (r <= Math.min(a, n)) {
      b.set(e);
      return;
    }
    let i = false;
    const s = Math.min(n, a);
    const o = Math.max(n, a);
    if (s != n) i = true;
    let l = false;
    const u = Math.min(e, t);
    const h = Math.max(e, t);
    if (u != e) l = true;
    let c = 0;
    if (i) c = ((o - r) * (h - u)) / (o - s);
    else c = ((r - s) * (h - u)) / (o - s);
    if (l) O = h - c;
    else O = c + u;
    if (v === 0) {
      b.set(O);
    } else if (v == 1) {
      r = Math.max(0, Math.min(1, (O - e) / (t - e)));
      b.set(e + r * r * (3 - 2 * r) * (t - e));
    } else if (v == 2) {
      r = Math.max(0, Math.min(1, (O - e) / (t - e)));
      b.set(e + r * r * r * (r * (r * 6 - 15) + 10) * (t - e));
    }
  }
};
Ops.Math.MapRange.prototype = new CABLES.Op();
CABLES.OPS["2617b407-60a0-4ff6-b4a7-18136cfa7817"] = {
  f: Ops.Math.MapRange,
  objName: "Ops.Math.MapRange",
};
Ops.Math.Sum = function () {
  CABLES.Op.apply(this, arguments);
  const e = this;
  const t = (e.attachments = {});
  const n = e.inValueFloat("number1", 1),
    a = e.inValueFloat("number2", 1),
    r = e.outNumber("result");
  e.setTitle("+");
  n.onChange = a.onChange = i;
  i();
  function i() {
    const e = n.get() + a.get();
    if (!isNaN(e)) r.set(e);
  }
};
Ops.Math.Sum.prototype = new CABLES.Op();
CABLES.OPS["c8fb181e-0b03-4b41-9e55-06b6267bc634"] = {
  f: Ops.Math.Sum,
  objName: "Ops.Math.Sum",
};
Ops.Anim.Smooth = function () {
  CABLES.Op.apply(this, arguments);
  const e = this;
  const t = (e.attachments = {});
  const n = e.inTrigger("Update"),
    a = e.inBool("Separate inc/dec", false),
    r = e.inValue("Value"),
    i = e.outTrigger("Next"),
    s = e.inValue("Inc factor", 4),
    o = e.inValue("Dec factor", 4),
    l = e.outNumber("Result", 0);
  let u = 0;
  let h = 0;
  let c = 0;
  let m = 0;
  e.toWorkPortsNeedToBeLinked(n);
  let p;
  let g;
  let f = 4;
  let d = true;
  let b = 0;
  const v = 0;
  const O = 1;
  _();
  A();
  a.setUiAttribs({ hidePort: true });
  s.onChange = o.onChange = A;
  a.onChange = _;
  y();
  function _() {
    const e = a.get();
    if (!e) b = v;
    else b = O;
    if (b == v) {
      o.setUiAttribs({ greyout: true });
      s.setUiAttribs({ title: "Inc/Dec factor" });
    } else if (b == O) {
      o.setUiAttribs({ greyout: false });
      s.setUiAttribs({ title: "Inc factor" });
    }
    A();
    y();
  }
  function A() {
    if (b == v) {
      p = s.get();
      g = s.get();
    } else if (b == O) {
      p = s.get();
      g = o.get();
    }
    if (p <= 0.2 || p != p) p = 0.2;
    if (g <= 0.2 || g != g) g = 0.2;
  }
  r.onChange = function () {
    d = false;
    let e = h;
    h = r.get();
  };
  s.onChange = function () {
    A();
  };
  function y() {
    let e = 1;
    if (performance.now() - m > 500 || m === 0) u = r.get() || 0;
    else e = (performance.now() - m) / (performance.now() - m);
    m = performance.now();
    if (u != u) u = 0;
    if (f <= 0) f = 1e-4;
    const t = h - u;
    if (t >= 0) u += t / (g * e);
    else u += t / (p * e);
    if (Math.abs(t) < 1e-5) u = h;
    if (f != f) u = 0;
    if (u != u || u == -Infinity || u == Infinity) u = r.get();
    if (c != u) {
      l.set(u);
      c = u;
    }
    if (u == h && !d) {
      d = true;
      l.set(u);
    }
    i.trigger();
  }
  n.onTriggered = function () {
    y();
  };
};
Ops.Anim.Smooth.prototype = new CABLES.Op();
CABLES.OPS["5677b5b5-753a-4fbf-9e91-64c81ec68a2f"] = {
  f: Ops.Anim.Smooth,
  objName: "Ops.Anim.Smooth",
};
Ops.Trigger.TriggerOnChangeString = function () {
  CABLES.Op.apply(this, arguments);
  const e = this;
  const t = (e.attachments = {});
  const n = e.inString("String"),
    a = e.outTrigger("Changed"),
    r = e.outString("Result");
  n.onChange = function () {
    r.set(n.get());
    a.trigger();
  };
};
Ops.Trigger.TriggerOnChangeString.prototype = new CABLES.Op();
CABLES.OPS["319d07e0-5cbe-4bc1-89fb-a934fd41b0c4"] = {
  f: Ops.Trigger.TriggerOnChangeString,
  objName: "Ops.Trigger.TriggerOnChangeString",
};
Ops.Math.TriggerRandomNumber_v2 = function () {
  CABLES.Op.apply(this, arguments);
  const e = this;
  const t = (e.attachments = {});
  const n = e.inTriggerButton("Generate"),
    a = e.inValue("min", 0),
    r = e.inValue("max", 1),
    i = e.outTrigger("next"),
    s = e.outNumber("result"),
    o = e.inValueBool("Integer", false),
    l = e.inValueBool("No consecutive duplicates", false);
  e.setPortGroup("Value Range", [a, r]);
  n.onTriggered = r.onChange = a.onChange = o.onChange = u;
  u();
  function u() {
    let e = Math.random() * (r.get() - a.get()) + a.get();
    if (o.get()) e = h();
    if (a.get() != r.get() && r.get() > a.get())
      while (l.get() && e == s.get()) e = h();
    s.set(e);
    i.trigger();
  }
  function h() {
    return Math.floor(Math.random() * (r.get() - a.get() + 1) + a.get());
  }
};
Ops.Math.TriggerRandomNumber_v2.prototype = new CABLES.Op();
CABLES.OPS["26f446cc-9107-4164-8209-5254487fa132"] = {
  f: Ops.Math.TriggerRandomNumber_v2,
  objName: "Ops.Math.TriggerRandomNumber_v2",
};
Ops.Trigger.TriggerButton = function () {
  CABLES.Op.apply(this, arguments);
  const e = this;
  const t = (e.attachments = {});
  const n = e.inTriggerButton("Trigger"),
    a = e.outTrigger("Next");
  n.onTriggered = function () {
    a.trigger();
  };
};
Ops.Trigger.TriggerButton.prototype = new CABLES.Op();
CABLES.OPS["21630924-39e4-4df5-9965-b9136510d156"] = {
  f: Ops.Trigger.TriggerButton,
  objName: "Ops.Trigger.TriggerButton",
};
Ops.Vars.VarGetString = function () {
  CABLES.Op.apply(this, arguments);
  const e = this;
  const t = (e.attachments = {});
  var n = e.outString("Value");
  e.varName = e.inValueSelect("Variable", [], "", true);
  new CABLES.VarGetOpWrapper(e, "string", e.varName, n);
};
Ops.Vars.VarGetString.prototype = new CABLES.Op();
CABLES.OPS["3ad08cfc-bce6-4175-9746-fef2817a3b12"] = {
  f: Ops.Vars.VarGetString,
  objName: "Ops.Vars.VarGetString",
};
Ops.Ui.PatchInput = function () {
  CABLES.Op.apply(this, arguments);
  const r = this;
  const e = (r.attachments = {});
  const i = r.addOutPort(
    new CABLES.Port(r, "create port", CABLES.OP_PORT_TYPE_DYNAMIC),
  );
  function s() {
    for (let e in r.patch.ops) {
      if (r.patch.ops[e].patchId) {
        if (r.patch.ops[e].patchId.get() == r.uiAttribs.subPatch) {
          return r.patch.ops[e];
        }
      }
    }
  }
  i.onLinkChanged = () => {
    const e = s();
    if (!i.links.length || !e || !e.addNewInPort) return;
    const t = i.links[0].getOtherPort(i);
    i.removeLinks();
    const n = e.addNewInPort(t);
    const a = gui.scene().link(t.parent, t.getName(), r, n);
    e.saveData();
  };
};
Ops.Ui.PatchInput.prototype = new CABLES.Op();
CABLES.OPS["e3f68bc3-892a-4c78-9974-aca25c27025d"] = {
  f: Ops.Ui.PatchInput,
  objName: "Ops.Ui.PatchInput",
};
Ops.Ui.PatchOutput = function () {
  CABLES.Op.apply(this, arguments);
  const r = this;
  const e = (r.attachments = {});
  const i = r.addInPort(
    new CABLES.Port(r, "create port", CABLES.OP_PORT_TYPE_DYNAMIC),
  );
  function s() {
    for (let e in r.patch.ops) {
      if (r.patch.ops[e].patchId) {
        if (r.patch.ops[e].patchId.get() == r.uiAttribs.subPatch) {
          return r.patch.ops[e];
        }
      }
    }
  }
  i.onLinkChanged = () => {
    const e = s();
    if (!i.links.length) return;
    const t = i.links[0].getOtherPort(i);
    i.removeLinks();
    const n = e.addNewOutPort(t);
    const a = gui.scene().link(t.parent, t.getName(), r, n);
    e.saveData();
  };
};
Ops.Ui.PatchOutput.prototype = new CABLES.Op();
CABLES.OPS["851b44cb-5667-4140-9800-5aeb7031f1d7"] = {
  f: Ops.Ui.PatchOutput,
  objName: "Ops.Ui.PatchOutput",
};
Ops.Gl.MainLoop = function () {
  CABLES.Op.apply(this, arguments);
  const a = this;
  const e = (a.attachments = {});
  const t = a.inValue("FPS Limit", 0),
    n = a.outTrigger("trigger"),
    r = a.outNumber("width"),
    i = a.outNumber("height"),
    s = a.inValueBool("Reduce FPS not focussed", true),
    o = a.inValueBool("Reduce FPS loading"),
    l = a.inValueBool("Clear", true),
    u = a.inValueBool("ClearAlpha", true),
    h = a.inValueBool("Fullscreen Button", false),
    c = a.inValueBool("Active", true),
    m = a.inValueBool("Hires Displays", false),
    p = a.inSwitch("Pixel Unit", ["Display", "CSS"], "Display");
  a.onAnimFrame = I;
  m.onChange = function () {
    if (m.get()) a.patch.cgl.pixelDensity = window.devicePixelRatio;
    else a.patch.cgl.pixelDensity = 1;
    a.patch.cgl.updateSize();
    if (CABLES.UI) gui.setLayout();
  };
  c.onChange = function () {
    a.patch.removeOnAnimFrame(a);
    if (c.get()) {
      a.setUiAttrib({ extendTitle: "" });
      a.onAnimFrame = I;
      a.patch.addOnAnimFrame(a);
      a.log("adding again!");
    } else {
      a.setUiAttrib({ extendTitle: "Inactive" });
    }
  };
  const g = a.patch.cgl;
  let f = 0;
  let d = 0;
  if (!a.patch.cgl) a.uiAttr({ error: "No webgl cgl context" });
  const b = vec3.create();
  vec3.set(b, 0, 0, 0);
  const v = vec3.create();
  vec3.set(v, 0, 0, -2);
  h.onChange = x;
  setTimeout(x, 100);
  let O = null;
  let _ = true;
  let A = true;
  window.addEventListener("blur", () => {
    _ = false;
  });
  window.addEventListener("focus", () => {
    _ = true;
  });
  document.addEventListener("visibilitychange", () => {
    A = !document.hidden;
  });
  T();
  p.onChange = () => {
    r.set(0);
    i.set(0);
  };
  function y() {
    if (o.get() && a.patch.loading.getProgress() < 1) return 5;
    if (s.get()) {
      if (!A) return 10;
      if (!_) return 30;
    }
    return t.get();
  }
  function x() {
    function e() {
      if (O) O.style.display = "block";
    }
    function t() {
      if (O) O.style.display = "none";
    }
    a.patch.cgl.canvas.addEventListener("mouseleave", t);
    a.patch.cgl.canvas.addEventListener("mouseenter", e);
    if (h.get()) {
      if (!O) {
        O = document.createElement("div");
        const n = a.patch.cgl.canvas.parentElement;
        if (n) n.appendChild(O);
        O.addEventListener("mouseenter", e);
        O.addEventListener("click", function (e) {
          if (CABLES.UI && !e.shiftKey) gui.cycleFullscreen();
          else g.fullScreen();
        });
      }
      O.style.padding = "10px";
      O.style.position = "absolute";
      O.style.right = "5px";
      O.style.top = "5px";
      O.style.width = "20px";
      O.style.height = "20px";
      O.style.cursor = "pointer";
      O.style["border-radius"] = "40px";
      O.style.background = "#444";
      O.style["z-index"] = "9999";
      O.style.display = "none";
      O.innerHTML =
        '<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" id="Capa_1" x="0px" y="0px" viewBox="0 0 490 490" style="width:20px;height:20px;" xml:space="preserve" width="512px" height="512px"><g><path d="M173.792,301.792L21.333,454.251v-80.917c0-5.891-4.776-10.667-10.667-10.667C4.776,362.667,0,367.442,0,373.333V480     c0,5.891,4.776,10.667,10.667,10.667h106.667c5.891,0,10.667-4.776,10.667-10.667s-4.776-10.667-10.667-10.667H36.416     l152.459-152.459c4.093-4.237,3.975-10.99-0.262-15.083C184.479,297.799,177.926,297.799,173.792,301.792z" fill="#FFFFFF"/><path d="M480,0H373.333c-5.891,0-10.667,4.776-10.667,10.667c0,5.891,4.776,10.667,10.667,10.667h80.917L301.792,173.792     c-4.237,4.093-4.354,10.845-0.262,15.083c4.093,4.237,10.845,4.354,15.083,0.262c0.089-0.086,0.176-0.173,0.262-0.262     L469.333,36.416v80.917c0,5.891,4.776,10.667,10.667,10.667s10.667-4.776,10.667-10.667V10.667C490.667,4.776,485.891,0,480,0z" fill="#FFFFFF"/><path d="M36.416,21.333h80.917c5.891,0,10.667-4.776,10.667-10.667C128,4.776,123.224,0,117.333,0H10.667     C4.776,0,0,4.776,0,10.667v106.667C0,123.224,4.776,128,10.667,128c5.891,0,10.667-4.776,10.667-10.667V36.416l152.459,152.459     c4.237,4.093,10.99,3.975,15.083-0.262c3.992-4.134,3.992-10.687,0-14.82L36.416,21.333z" fill="#FFFFFF"/><path d="M480,362.667c-5.891,0-10.667,4.776-10.667,10.667v80.917L316.875,301.792c-4.237-4.093-10.99-3.976-15.083,0.261     c-3.993,4.134-3.993,10.688,0,14.821l152.459,152.459h-80.917c-5.891,0-10.667,4.776-10.667,10.667s4.776,10.667,10.667,10.667     H480c5.891,0,10.667-4.776,10.667-10.667V373.333C490.667,367.442,485.891,362.667,480,362.667z" fill="#FFFFFF"/></g></svg>';
    } else {
      if (O) {
        O.style.display = "none";
        O.remove();
        O = null;
      }
    }
  }
  a.onDelete = function () {
    g.gl.clearColor(0, 0, 0, 0);
    g.gl.clear(g.gl.COLOR_BUFFER_BIT | g.gl.DEPTH_BUFFER_BIT);
  };
  function I(e) {
    if (!c.get()) return;
    if (g.aborted || g.canvas.clientWidth === 0 || g.canvas.clientHeight === 0)
      return;
    a.patch.cg = g;
    if (m.get()) a.patch.cgl.pixelDensity = window.devicePixelRatio;
    const t = performance.now();
    a.patch.config.fpsLimit = y();
    if (g.canvasWidth == -1) {
      g.setCanvas(a.patch.config.glCanvasId);
      return;
    }
    if (g.canvasWidth != r.get() || g.canvasHeight != i.get()) {
      let e = 1;
      if (p.get() == "CSS") e = a.patch.cgl.pixelDensity;
      r.set(g.canvasWidth / e);
      i.set(g.canvasHeight / e);
    }
    if (CABLES.now() - d > 1e3) {
      CGL.fpsReport = CGL.fpsReport || [];
      if (a.patch.loading.getProgress() >= 1 && d !== 0) CGL.fpsReport.push(f);
      f = 0;
      d = CABLES.now();
    }
    CGL.MESH.lastShader = null;
    CGL.MESH.lastMesh = null;
    g.renderStart(g, b, v);
    if (l.get()) {
      g.gl.clearColor(0, 0, 0, 1);
      g.gl.clear(g.gl.COLOR_BUFFER_BIT | g.gl.DEPTH_BUFFER_BIT);
    }
    n.trigger();
    if (CGL.MESH.lastMesh) CGL.MESH.lastMesh.unBind();
    if (CGL.Texture.previewTexture) {
      if (!CGL.Texture.texturePreviewer)
        CGL.Texture.texturePreviewer = new CGL.Texture.texturePreview(g);
      CGL.Texture.texturePreviewer.render(CGL.Texture.previewTexture);
    }
    g.renderEnd(g);
    a.patch.cg = null;
    if (u.get()) {
      g.gl.clearColor(1, 1, 1, 1);
      g.gl.colorMask(false, false, false, true);
      g.gl.clear(g.gl.COLOR_BUFFER_BIT);
      g.gl.colorMask(true, true, true, true);
    }
    if (!g.frameStore.phong) g.frameStore.phong = {};
    f++;
    a.patch.cgl.profileData.profileMainloopMs = performance.now() - t;
  }
  function T() {
    setTimeout(() => {
      if (a.patch.getOpsByObjName(a.name).length > 1) {
        a.setUiError("multimainloop", "there should only be one mainloop op!");
        a.patch.addEventListener("onOpDelete", T);
      } else a.setUiError("multimainloop", null, 1);
    }, 500);
  }
};
Ops.Gl.MainLoop.prototype = new CABLES.Op();
CABLES.OPS["b0472a1d-db16-4ba6-8787-f300fbdc77bb"] = {
  f: Ops.Gl.MainLoop,
  objName: "Ops.Gl.MainLoop",
};
Ops.Array.ArrayIteratorObjects = function () {
  CABLES.Op.apply(this, arguments);
  const e = this;
  const t = (e.attachments = {});
  const n = e.inTrigger("exe"),
    a = e.inArray("array"),
    r = e.outTrigger("trigger"),
    i = e.outTrigger("finished"),
    s = e.outNumber("index"),
    o = e.outObject("value");
  n.onTriggered = function () {
    const t = a.get();
    if (!t) return;
    for (let e = 0; e < t.length; e++) {
      o.setRef(t[e]);
      s.set(e);
      r.trigger();
    }
    i.trigger();
  };
};
Ops.Array.ArrayIteratorObjects.prototype = new CABLES.Op();
CABLES.OPS["481d2d8f-b9ee-42a0-a905-caf9dc23a63f"] = {
  f: Ops.Array.ArrayIteratorObjects,
  objName: "Ops.Array.ArrayIteratorObjects",
};
Ops.Gl.Matrix.Transform = function () {
  CABLES.Op.apply(this, arguments);
  const n = this;
  const e = (n.attachments = {});
  const t = n.inTrigger("render"),
    a = n.inValue("posX", 0),
    r = n.inValue("posY", 0),
    i = n.inValue("posZ", 0),
    s = n.inValue("scale", 1),
    o = n.inValue("rotX", 0),
    l = n.inValue("rotY", 0),
    u = n.inValue("rotZ", 0),
    h = n.outTrigger("trigger");
  n.setPortGroup("Rotation", [o, l, u]);
  n.setPortGroup("Position", [a, r, i]);
  n.setPortGroup("Scale", [s]);
  n.setUiAxisPorts(a, r, i);
  n.toWorkPortsNeedToBeLinked(t, h);
  const c = vec3.create();
  const m = vec3.create();
  const p = mat4.create();
  mat4.identity(p);
  let g = false,
    f = false,
    d = true,
    b = true,
    v = true;
  o.onChange = l.onChange = u.onChange = I;
  a.onChange = r.onChange = i.onChange = y;
  s.onChange = x;
  t.onTriggered = function () {
    let e = false;
    if (d) {
      _();
      e = true;
    }
    if (b) {
      A();
      e = true;
    }
    if (v) e = true;
    if (e) O();
    const t = n.patch.cg || n.patch.cgl;
    t.pushModelMatrix();
    mat4.multiply(t.mMatrix, t.mMatrix, p);
    h.trigger();
    t.popModelMatrix();
    if (CABLES.UI && CABLES.UI.showCanvasTransforms)
      gui.setTransform(n.id, a.get(), r.get(), i.get());
    if (n.isCurrentUiOp()) gui.setTransformGizmo({ posX: a, posY: r, posZ: i });
  };
  n.transform3d = function () {
    return { pos: [a, r, i] };
  };
  function O() {
    mat4.identity(p);
    if (f) mat4.translate(p, p, c);
    if (o.get() !== 0) mat4.rotateX(p, p, o.get() * CGL.DEG2RAD);
    if (l.get() !== 0) mat4.rotateY(p, p, l.get() * CGL.DEG2RAD);
    if (u.get() !== 0) mat4.rotateZ(p, p, u.get() * CGL.DEG2RAD);
    if (g) mat4.scale(p, p, m);
    v = false;
  }
  function _() {
    f = false;
    if (a.get() !== 0 || r.get() !== 0 || i.get() !== 0) f = true;
    vec3.set(c, a.get(), r.get(), i.get());
    d = false;
  }
  function A() {
    g = true;
    vec3.set(m, s.get(), s.get(), s.get());
    b = false;
  }
  function y() {
    d = true;
  }
  function x() {
    b = true;
  }
  function I() {
    v = true;
  }
  O();
};
Ops.Gl.Matrix.Transform.prototype = new CABLES.Op();
CABLES.OPS["650baeb1-db2d-4781-9af6-ab4e9d4277be"] = {
  f: Ops.Gl.Matrix.Transform,
  objName: "Ops.Gl.Matrix.Transform",
};
Ops.Gl.Matrix.TransformView = function () {
  CABLES.Op.apply(this, arguments);
  const n = this;
  const e = (n.attachments = {});
  const t = n.inTrigger("render"),
    a = n.inValueFloat("posX"),
    r = n.inValueFloat("posY"),
    i = n.inValueFloat("posZ"),
    s = n.inValueFloat("scale"),
    o = n.inValueFloat("rotX"),
    l = n.inValueFloat("rotY"),
    u = n.inValueFloat("rotZ"),
    h = n.outTrigger("trigger");
  n.setPortGroup("Position", [a, r, i]);
  n.setPortGroup("Scale", [s]);
  n.setPortGroup("Rotation", [o, u, l]);
  const c = vec3.create();
  const m = vec3.create();
  const p = mat4.create();
  mat4.identity(p);
  let g = false;
  let f = false;
  let d = true;
  let b = true;
  let v = true;
  t.onTriggered = function () {
    const e = n.patch.cgl;
    let t = false;
    if (d) {
      _();
      t = true;
    }
    if (b) {
      A();
      t = true;
    }
    if (v) {
      t = true;
    }
    if (t) O();
    e.pushViewMatrix();
    mat4.multiply(e.vMatrix, e.vMatrix, p);
    h.trigger();
    e.popViewMatrix();
    if (n.isCurrentUiOp()) gui.setTransformGizmo({ posX: a, posY: r, posZ: i });
  };
  n.transform3d = function () {
    return { pos: [a, r, i] };
  };
  function O() {
    mat4.identity(p);
    if (f) mat4.translate(p, p, c);
    if (o.get() !== 0) mat4.rotateX(p, p, o.get() * CGL.DEG2RAD);
    if (l.get() !== 0) mat4.rotateY(p, p, l.get() * CGL.DEG2RAD);
    if (u.get() !== 0) mat4.rotateZ(p, p, u.get() * CGL.DEG2RAD);
    if (g) mat4.scale(p, p, m);
    I = false;
  }
  function _() {
    f = false;
    if (a.get() !== 0 || r.get() !== 0 || i.get() !== 0) f = true;
    vec3.set(c, a.get(), r.get(), i.get());
    d = false;
  }
  function A() {
    g = false;
    if (s.get() !== 0) g = true;
    vec3.set(m, s.get(), s.get(), s.get());
    x = false;
  }
  function y() {
    d = true;
  }
  function x() {
    b = true;
  }
  function I() {
    v = true;
  }
  o.onChange = l.onChange = u.onChange = I;
  s.onChange = x;
  a.onChange = r.onChange = i.onChange = y;
  o.set(0);
  l.set(0);
  u.set(0);
  s.set(1);
  a.set(0);
  r.set(0);
  i.set(0);
  O();
};
Ops.Gl.Matrix.TransformView.prototype = new CABLES.Op();
CABLES.OPS["0b3e04f7-323e-4ac8-8a22-a21e2f36e0e9"] = {
  f: Ops.Gl.Matrix.TransformView,
  objName: "Ops.Gl.Matrix.TransformView",
};
Ops.Json.ObjectGetNumber_v2 = function () {
  CABLES.Op.apply(this, arguments);
  const e = this;
  const t = (e.attachments = {});
  const n = e.inObject("Data"),
    a = e.inString("Key"),
    r = e.outNumber("Result"),
    i = e.outBoolNum("Found");
  r.ignoreValueSerialize = true;
  n.ignoreValueSerialize = true;
  e.setUiAttrib({ extendTitlePort: a.name });
  a.onChange = n.onChange = o;
  a.on("change", s);
  s();
  function s() {
    if (!a.get()) e.setUiError("nokey", "Missing Key Value");
    else e.setUiError("nokey", null);
  }
  function o() {
    const e = n.get();
    if (e) {
      const t = e[a.get()];
      r.set(parseFloat(t));
      if (t === undefined) i.set(0);
      else i.set(1);
    } else {
      r.set(0);
      i.set(0);
    }
  }
};
Ops.Json.ObjectGetNumber_v2.prototype = new CABLES.Op();
CABLES.OPS["a7335e79-046e-40da-9e9c-db779b0a5e53"] = {
  f: Ops.Json.ObjectGetNumber_v2,
  objName: "Ops.Json.ObjectGetNumber_v2",
};
Ops.Trigger.RouteTrigger = function () {
  CABLES.Op.apply(this, arguments);
  const t = this;
  const e = (t.attachments = {});
  const n = 24;
  const a = t.inTriggerButton("Execute");
  const r = t.inValueInt("Switch Value");
  const i = t.outTrigger("Next Trigger");
  const s = t.outNumber("Switched Value");
  const o = [];
  for (let e = 0; e < n; e++) {
    o[e] = t.outTrigger("Trigger " + e);
  }
  const l = t.outTrigger("Default Trigger");
  function u() {
    const e = Math.round(r.get());
    if (e >= 0 && e < n) {
      s.set(e);
      o[e].trigger();
    } else {
      s.set(-1);
      l.trigger();
    }
    i.trigger();
  }
  a.onTriggered = u;
};
Ops.Trigger.RouteTrigger.prototype = new CABLES.Op();
CABLES.OPS["44ceb5d8-b040-4722-b189-a6fb8172517d"] = {
  f: Ops.Trigger.RouteTrigger,
  objName: "Ops.Trigger.RouteTrigger",
};
Ops.Gl.Matrix.Camera = function () {
  CABLES.Op.apply(this, arguments);
  const e = this;
  const L = (e.attachments = {});
  const t = e.inTrigger("render");
  const n = e.outTrigger("trigger");
  const a = e.inValueSelect(
    "projection mode",
    ["prespective", "ortogonal"],
    "prespective",
  );
  const r = e.inValue("frustum near", 0.01);
  const i = e.inValue("frustum far", 5e3);
  const s = e.inValue("fov", 45);
  const o = e.inValueBool("Auto Aspect Ratio", true);
  const l = e.inValue("Aspect Ratio", 1);
  const u = e.inValue("eye X", 0);
  const h = e.inValue("eye Y", 0);
  const c = e.inValue("eye Z", 5);
  const m = e.inValue("center X", 0);
  const p = e.inValue("center Y", 0);
  const g = e.inValue("center Z", 0);
  const f = e.inValue("truck", 0);
  const d = e.inValue("boom", 0);
  const b = e.inValue("dolly", 0);
  const v = e.inValue("tilt", 0);
  const O = e.inValue("pan", 0);
  const _ = e.inValue("roll", 0);
  const A = e.outNumber("Aspect");
  const y = e.outArray("Look At Array");
  const x = e.patch.cgl;
  let I = 0;
  const T = vec3.create();
  const S = vec3.create();
  const C = vec3.create();
  const j = mat4.create();
  mat4.identity(j);
  const N = [];
  const E = vec3.create();
  const w = mat4.create();
  mat4.identity(w);
  let M = true;
  t.onTriggered = function () {
    if (x.frameStore.shadowPass) return n.trigger();
    if (!o.get()) I = l.get();
    else I = x.getViewPort()[2] / x.getViewPort()[3];
    A.set(I);
    x.pushViewMatrix();
    if (M) {
      mat4.identity(w);
      vec3.set(E, f.get(), d.get(), b.get());
      if (f.get() !== 0 || d.get() !== 0 || b.get() !== 0)
        mat4.translate(w, w, E);
      if (v.get() !== 0) mat4.rotateX(w, w, v.get() * CGL.DEG2RAD);
      if (O.get() !== 0) mat4.rotateY(w, w, O.get() * CGL.DEG2RAD);
      if (_.get() !== 0) mat4.rotateZ(w, w, _.get() * CGL.DEG2RAD);
      M = false;
    }
    mat4.multiply(x.vMatrix, x.vMatrix, w);
    x.pushPMatrix();
    x.pushViewMatrix();
    if (a.get() == "prespective") {
      mat4.perspective(x.pMatrix, s.get() * 0.0174533, I, r.get(), i.get());
    } else if (a.get() == "ortogonal") {
      mat4.ortho(
        x.pMatrix,
        -1 * (s.get() / 14),
        1 * (s.get() / 14),
        (-1 * (s.get() / 14)) / I,
        (1 * (s.get() / 14)) / I,
        r.get(),
        i.get(),
      );
    }
    N[0] = u.get();
    N[1] = h.get();
    N[2] = c.get();
    N[3] = m.get();
    N[4] = p.get();
    N[5] = g.get();
    N[6] = 0;
    N[7] = 1;
    N[8] = 0;
    y.setRef(N);
    vec3.set(T, 0, 1, 0);
    vec3.set(S, u.get(), h.get(), c.get());
    vec3.set(C, m.get(), p.get(), g.get());
    mat4.lookAt(j, S, C, T);
    mat4.multiply(x.vMatrix, x.vMatrix, j);
    n.trigger();
    x.popViewMatrix();
    x.popPMatrix();
    x.popViewMatrix();
    if (e.isCurrentUiOp()) gui.setTransformGizmo({ posX: f, posY: d, posZ: b });
  };
  const P = function () {
    if (!o.get()) {
      l.setUiAttribs({ greyout: false });
    } else {
      l.setUiAttribs({ greyout: true });
    }
  };
  const V = function () {
    M = true;
  };
  f.onChange = V;
  d.onChange = V;
  b.onChange = V;
  v.onChange = V;
  O.onChange = V;
  _.onChange = V;
  o.onChange = P;
  P();
};
Ops.Gl.Matrix.Camera.prototype = new CABLES.Op();
CABLES.OPS["b24dbfdc-485c-49d2-92a1-7258efd9239a"] = {
  f: Ops.Gl.Matrix.Camera,
  objName: "Ops.Gl.Matrix.Camera",
};
Ops.Gl.GLTF.GltfScene_v4 = function () {
  CABLES.Op.apply(this, arguments);
  const A = this;
  const l = (A.attachments = {
    inc_camera_js:
      "const gltfCamera = class\n{\n    constructor(gltf, node)\n    {\n        this.node = node;\n        this.name = node.name;\n        // console.log(gltf);\n        this.config = gltf.json.cameras[node.camera];\n\n        this.pos = vec3.create();\n        this.quat = quat.create();\n        this.vCenter = vec3.create();\n        this.vUp = vec3.create();\n        this.vMat = mat4.create();\n    }\n\n    updateAnim(time)\n    {\n        if (this.node && this.node._animTrans)\n        {\n            vec3.set(this.pos,\n                this.node._animTrans[0].getValue(time),\n                this.node._animTrans[1].getValue(time),\n                this.node._animTrans[2].getValue(time));\n\n            quat.set(this.quat,\n                this.node._animRot[0].getValue(time),\n                this.node._animRot[1].getValue(time),\n                this.node._animRot[2].getValue(time),\n                this.node._animRot[3].getValue(time));\n        }\n    }\n\n    start(time)\n    {\n        if (cgl.frameStore.shadowPass) return;\n\n        this.updateAnim(time);\n        const asp = cgl.getViewPort()[2] / cgl.getViewPort()[3];\n\n        cgl.pushPMatrix();\n        // mat4.perspective(\n        //     cgl.pMatrix,\n        //     this.config.perspective.yfov*0.5,\n        //     asp,\n        //     this.config.perspective.znear,\n        //     this.config.perspective.zfar);\n\n        cgl.pushViewMatrix();\n        // mat4.identity(cgl.vMatrix);\n\n        // if(this.node && this.node.parent)\n        // {\n        //     console.log(this.node.parent)\n        // vec3.add(this.pos,this.pos,this.node.parent._node.translation);\n        // vec3.sub(this.vCenter,this.vCenter,this.node.parent._node.translation);\n        // mat4.translate(cgl.vMatrix,cgl.vMatrix,\n        // [\n        //     -this.node.parent._node.translation[0],\n        //     -this.node.parent._node.translation[1],\n        //     -this.node.parent._node.translation[2]\n        // ])\n        // }\n\n        // vec3.set(this.vUp, 0, 1, 0);\n        // vec3.set(this.vCenter, 0, -1, 0);\n        // // vec3.set(this.vCenter, 0, 1, 0);\n        // vec3.transformQuat(this.vCenter, this.vCenter, this.quat);\n        // vec3.normalize(this.vCenter, this.vCenter);\n        // vec3.add(this.vCenter, this.vCenter, this.pos);\n\n        // mat4.lookAt(cgl.vMatrix, this.pos, this.vCenter, this.vUp);\n\n        let mv = mat4.create();\n        mat4.invert(mv, this.node.modelMatAbs());\n\n        // console.log(this.node.modelMatAbs());\n\n        this.vMat = mv;\n\n        mat4.identity(cgl.vMatrix);\n        // console.log(mv);\n        mat4.mul(cgl.vMatrix, cgl.vMatrix, mv);\n    }\n\n    end()\n    {\n        if (cgl.frameStore.shadowPass) return;\n        cgl.popPMatrix();\n        cgl.popViewMatrix();\n    }\n};\n",
    inc_gltf_js:
      'const le = true; // little endian\n\nconst Gltf = class\n{\n    constructor()\n    {\n        this.json = {};\n        this.accBuffers = [];\n        this.meshes = [];\n        this.nodes = [];\n        this.shaders = [];\n        this.timing = [];\n        this.cams = [];\n        this.startTime = performance.now();\n        this.bounds = new CABLES.CG.BoundingBox();\n        this.loaded = Date.now();\n        this.accBuffersDelete = [];\n    }\n\n    getNode(n)\n    {\n        for (let i = 0; i < this.nodes.length; i++)\n        {\n            if (this.nodes[i].name == n) return this.nodes[i];\n        }\n    }\n\n    unHideAll()\n    {\n        for (let i = 0; i < this.nodes.length; i++)\n        {\n            this.nodes[i].unHide();\n        }\n    }\n};\n\nfunction Utf8ArrayToStr(array)\n{\n    if (window.TextDecoder) return new TextDecoder("utf-8").decode(array);\n\n    let out, i, len, c;\n    let char2, char3;\n\n    out = "";\n    len = array.length;\n    i = 0;\n    while (i < len)\n    {\n        c = array[i++];\n        switch (c >> 4)\n        {\n        case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7:\n            // 0xxxxxxx\n            out += String.fromCharCode(c);\n            break;\n        case 12: case 13:\n            // 110x xxxx   10xx xxxx\n            char2 = array[i++];\n            out += String.fromCharCode(((c & 0x1F) << 6) | (char2 & 0x3F));\n            break;\n        case 14:\n            // 1110 xxxx  10xx xxxx  10xx xxxx\n            char2 = array[i++];\n            char3 = array[i++];\n            out += String.fromCharCode(((c & 0x0F) << 12) |\n                    ((char2 & 0x3F) << 6) |\n                    ((char3 & 0x3F) << 0));\n            break;\n        }\n    }\n\n    return out;\n}\n\nfunction readChunk(dv, bArr, arrayBuffer, offset)\n{\n    const chunk = {};\n\n    if (offset >= dv.byteLength)\n    {\n        op.log("could not read chunk...");\n        return;\n    }\n    chunk.size = dv.getUint32(offset + 0, le);\n\n    // chunk.type = new TextDecoder("utf-8").decode(bArr.subarray(offset+4, offset+4+4));\n    chunk.type = Utf8ArrayToStr(bArr.subarray(offset + 4, offset + 4 + 4));\n\n    if (chunk.type == "BIN\\0")\n    {\n        // console.log(chunk.size,arrayBuffer.length,offset);\n        // try\n        // {\n        chunk.dataView = new DataView(arrayBuffer, offset + 8, chunk.size);\n        // }\n        // catch(e)\n        // {\n        //     chunk.dataView = null;\n        //     console.log(e);\n        // }\n    }\n    else\n    if (chunk.type == "JSON")\n    {\n        const json = Utf8ArrayToStr(bArr.subarray(offset + 8, offset + 8 + chunk.size));\n\n        try\n        {\n            const obj = JSON.parse(json);\n            chunk.data = obj;\n            outGenerator.set(obj.asset.generator);\n        }\n        catch (e)\n        {\n        }\n    }\n    else\n    {\n        op.warn("unknown type", chunk.type);\n    }\n\n    return chunk;\n}\n\nfunction loadAnims(gltf)\n{\n    const uniqueAnimNames = {};\n\n    for (let i = 0; i < gltf.json.animations.length; i++)\n    {\n        const an = gltf.json.animations[i];\n\n        an.name = an.name || "unknown";\n\n        for (let ia = 0; ia < an.channels.length; ia++)\n        {\n            const chan = an.channels[ia];\n\n            const node = gltf.nodes[chan.target.node];\n            const sampler = an.samplers[chan.sampler];\n\n            const acc = gltf.json.accessors[sampler.input];\n            const bufferIn = gltf.accBuffers[sampler.input];\n\n            const accOut = gltf.json.accessors[sampler.output];\n            const bufferOut = gltf.accBuffers[sampler.output];\n\n            gltf.accBuffersDelete.push(sampler.output, sampler.input);\n\n            if (bufferIn && bufferOut)\n            {\n                let numComps = 1;\n                if (accOut.type === "VEC2")numComps = 2;\n                else if (accOut.type === "VEC3")numComps = 3;\n                else if (accOut.type === "VEC4")numComps = 4;\n                else if (accOut.type === "SCALAR")\n                {\n                    numComps = bufferOut.length / bufferIn.length; // is this really the way to find out ? cant find any other way,except number of morph targets, but not really connected...\n                }\n                else op.log("[] UNKNOWN accOut.type", accOut.type);\n\n                const anims = [];\n\n                uniqueAnimNames[an.name] = true;\n\n                for (let k = 0; k < numComps; k++)\n                {\n                    const newAnim = new CABLES.Anim();\n                    // newAnim.name=an.name;\n                    anims.push(newAnim);\n                }\n\n                if (sampler.interpolation === "LINEAR") {}\n                else if (sampler.interpolation === "STEP") for (let k = 0; k < numComps; k++) anims[k].defaultEasing = CABLES.EASING_ABSOLUTE;\n                else if (sampler.interpolation === "CUBICSPLINE") for (let k = 0; k < numComps; k++) anims[k].defaultEasing = CABLES.EASING_CUBICSPLINE;\n                else op.warn("unknown interpolation", sampler.interpolation);\n\n                // console.log(bufferOut)\n\n                // if there is no keyframe for time 0 copy value of first keyframe at time 0\n                if (bufferIn[0] !== 0.0)\n                    for (let k = 0; k < numComps; k++)\n                        anims[k].setValue(0, bufferOut[0 * numComps + k]);\n\n                for (let j = 0; j < bufferIn.length; j++)\n                {\n                    maxTime = Math.max(bufferIn[j], maxTime);\n\n                    for (let k = 0; k < numComps; k++)\n                    {\n                        if (anims[k].defaultEasing === CABLES.EASING_CUBICSPLINE)\n                        {\n                            const idx = ((j * numComps) * 3 + k);\n\n                            const key = anims[k].setValue(bufferIn[j], bufferOut[idx + numComps]);\n                            key.bezTangIn = bufferOut[idx];\n                            key.bezTangOut = bufferOut[idx + (numComps * 2)];\n\n                            // console.log(an.name,k,bufferOut[idx+1]);\n                        }\n                        else\n                        {\n                            // console.log(an.name,k,bufferOut[j * numComps + k]);\n                            anims[k].setValue(bufferIn[j], bufferOut[j * numComps + k]);\n                        }\n                    }\n                }\n\n                node.setAnim(chan.target.path, an.name, anims);\n            }\n            else\n            {\n                op.warn("loadAmins bufferIn undefined ", bufferIn === undefined);\n                op.warn("loadAmins bufferOut undefined ", bufferOut === undefined);\n                op.warn("loadAmins ", sampler, accOut);\n                op.warn("loadAmins num accBuffers", gltf.accBuffers.length);\n                op.warn("loadAmins num accessors", gltf.json.accessors.length);\n            }\n        }\n    }\n\n    gltf.uniqueAnimNames = uniqueAnimNames;\n\n    outAnims.setRef(Object.keys(uniqueAnimNames));\n}\n\nfunction loadCams(gltf)\n{\n    if (!gltf || !gltf.json.cameras) return;\n\n    gltf.cameras = gltf.cameras || [];\n\n    for (let i = 0; i < gltf.nodes.length; i++)\n    {\n        if (gltf.nodes[i].hasOwnProperty("camera"))\n        {\n            const cam = new gltfCamera(gltf, gltf.nodes[i]);\n            gltf.cameras.push(cam);\n        }\n    }\n}\n\nfunction loadAfterDraco()\n{\n    if (!window.DracoDecoder)\n    {\n        setTimeout(() =>\n        {\n            loadAfterDraco();\n        }, 100);\n    }\n\n    reloadSoon();\n}\n\nfunction parseGltf(arrayBuffer)\n{\n    const CHUNK_HEADER_SIZE = 8;\n\n    let j = 0, i = 0;\n\n    const gltf = new Gltf();\n    gltf.timing.push(["Start parsing", Math.round((performance.now() - gltf.startTime))]);\n\n    if (!arrayBuffer) return;\n    const byteArray = new Uint8Array(arrayBuffer);\n    let pos = 0;\n\n    // var string = new TextDecoder("utf-8").decode(byteArray.subarray(pos, 4));\n    const string = Utf8ArrayToStr(byteArray.subarray(pos, 4));\n    pos += 4;\n    if (string != "glTF") return;\n\n    gltf.timing.push(["dataview", Math.round((performance.now() - gltf.startTime))]);\n\n    const dv = new DataView(arrayBuffer);\n    const version = dv.getUint32(pos, le);\n    pos += 4;\n    const size = dv.getUint32(pos, le);\n    pos += 4;\n\n    outVersion.set(version);\n\n    const chunks = [];\n    gltf.chunks = chunks;\n\n    chunks.push(readChunk(dv, byteArray, arrayBuffer, pos));\n    pos += chunks[0].size + CHUNK_HEADER_SIZE;\n    gltf.json = chunks[0].data;\n\n    gltf.cables = {\n        "fileUrl": inFile.get(),\n        "shortFileName": CABLES.basename(inFile.get())\n    };\n\n    outJson.setRef(gltf.json);\n    outExtensions.setRef(gltf.json.extensionsUsed || []);\n\n    let ch = readChunk(dv, byteArray, arrayBuffer, pos);\n    while (ch)\n    {\n        chunks.push(ch);\n        pos += ch.size + CHUNK_HEADER_SIZE;\n        ch = readChunk(dv, byteArray, arrayBuffer, pos);\n    }\n\n    gltf.chunks = chunks;\n\n    const views = chunks[0].data.bufferViews;\n    const accessors = chunks[0].data.accessors;\n\n    gltf.timing.push(["Parse buffers", Math.round((performance.now() - gltf.startTime))]);\n\n    if (gltf.json.extensionsUsed && gltf.json.extensionsUsed.indexOf("KHR_draco_mesh_compression") > -1)\n    {\n        if (!window.DracoDecoder)\n        {\n            op.setUiError("gltfdraco", "GLTF draco compression lib not found / add draco op to your patch!");\n\n            loadAfterDraco();\n            return gltf;\n        }\n        else\n        {\n            gltf.useDraco = true;\n        }\n    }\n\n    op.setUiError("gltfdraco", null);\n    // let accPos = (view.byteOffset || 0) + (acc.byteOffset || 0);\n\n    if (views)\n    {\n        for (i = 0; i < accessors.length; i++)\n        {\n            const acc = accessors[i];\n            const view = views[acc.bufferView];\n\n            let numComps = 0;\n            if (acc.type == "SCALAR")numComps = 1;\n            else if (acc.type == "VEC2")numComps = 2;\n            else if (acc.type == "VEC3")numComps = 3;\n            else if (acc.type == "VEC4")numComps = 4;\n            else if (acc.type == "MAT4")numComps = 16;\n            else console.error("unknown accessor type", acc.type);\n\n            //   const decoder = new decoderModule.Decoder();\n            //   const decodedGeometry = decodeDracoData(data, decoder);\n            //   // Encode mesh\n            //   encodeMeshToFile(decodedGeometry, decoder);\n\n            //   decoderModule.destroy(decoder);\n            //   decoderModule.destroy(decodedGeometry);\n\n            // 5120 (BYTE)\t1\n            // 5121 (UNSIGNED_BYTE)\t1\n            // 5122 (SHORT)\t2\n\n            if (chunks[1].dataView)\n            {\n                if (view)\n                {\n                    const num = acc.count * numComps;\n                    let accPos = (view.byteOffset || 0) + (acc.byteOffset || 0);\n                    let stride = view.byteStride || 0;\n                    let dataBuff = null;\n\n                    if (acc.componentType == 5126 || acc.componentType == 5125) // 4byte FLOAT or INT\n                    {\n                        stride = stride || 4;\n\n                        const isInt = acc.componentType == 5125;\n                        if (isInt)dataBuff = new Uint32Array(num);\n                        else dataBuff = new Float32Array(num);\n\n                        for (j = 0; j < num; j++)\n                        {\n                            if (isInt) dataBuff[j] = chunks[1].dataView.getUint32(accPos, le);\n                            else dataBuff[j] = chunks[1].dataView.getFloat32(accPos, le);\n\n                            if (stride != 4 && (j + 1) % numComps === 0)accPos += stride - (numComps * 4);\n                            accPos += 4;\n                        }\n                    }\n                    else if (acc.componentType == 5123) // UNSIGNED_SHORT\n                    {\n                        stride = stride || 2;\n\n                        dataBuff = new Uint16Array(num);\n\n                        for (j = 0; j < num; j++)\n                        {\n                            dataBuff[j] = chunks[1].dataView.getUint16(accPos, le);\n\n                            if (stride != 2 && (j + 1) % numComps === 0) accPos += stride - (numComps * 2);\n\n                            accPos += 2;\n                        }\n                    }\n                    else if (acc.componentType == 5121) // UNSIGNED_BYTE\n                    {\n                        stride = stride || 1;\n\n                        dataBuff = new Uint8Array(num);\n\n                        for (j = 0; j < num; j++)\n                        {\n                            dataBuff[j] = chunks[1].dataView.getUint8(accPos, le);\n\n                            if (stride != 1 && (j + 1) % numComps === 0) accPos += stride - (numComps * 1);\n\n                            accPos += 1;\n                        }\n                    }\n\n                    else\n                    {\n                        console.error("unknown component type", acc.componentType);\n                    }\n\n                    gltf.accBuffers.push(dataBuff);\n                }\n                else\n                {\n                    // console.log("has no dataview");\n                }\n            }\n        }\n    }\n\n    gltf.timing.push(["Parse mesh groups", Math.round((performance.now() - gltf.startTime))]);\n\n    gltf.json.meshes = gltf.json.meshes || [];\n\n    if (gltf.json.meshes)\n    {\n        for (i = 0; i < gltf.json.meshes.length; i++)\n        {\n            const mesh = new gltfMeshGroup(gltf, gltf.json.meshes[i]);\n            gltf.meshes.push(mesh);\n        }\n    }\n\n    gltf.timing.push(["Parse nodes", Math.round((performance.now() - gltf.startTime))]);\n\n    for (i = 0; i < gltf.json.nodes.length; i++)\n    {\n        if (gltf.json.nodes[i].children)\n            for (j = 0; j < gltf.json.nodes[i].children.length; j++)\n            {\n                gltf.json.nodes[gltf.json.nodes[i].children[j]].isChild = true;\n            }\n    }\n\n    for (i = 0; i < gltf.json.nodes.length; i++)\n    {\n        const node = new gltfNode(gltf.json.nodes[i], gltf);\n        gltf.nodes.push(node);\n    }\n\n    for (i = 0; i < gltf.nodes.length; i++)\n    {\n        const node = gltf.nodes[i];\n\n        if (!node.children) continue;\n        for (let j = 0; j < node.children.length; j++)\n        {\n            gltf.nodes[node.children[j]].parent = node;\n        }\n    }\n\n    for (i = 0; i < gltf.nodes.length; i++)\n    {\n        gltf.nodes[i].initSkin();\n    }\n\n    needsMatUpdate = true;\n\n    gltf.timing.push(["load anims", Math.round((performance.now() - gltf.startTime))]);\n\n    if (gltf.json.animations) loadAnims(gltf);\n\n    gltf.timing.push(["load cameras", Math.round((performance.now() - gltf.startTime))]);\n\n    if (gltf.json.cameras) loadCams(gltf);\n\n    gltf.timing.push(["finished", Math.round((performance.now() - gltf.startTime))]);\n    return gltf;\n}\n',
    inc_mesh_js:
      'let gltfMesh = class\n{\n    constructor(name, prim, gltf, finished)\n    {\n        this.POINTS = 0;\n        this.LINES = 1;\n        this.LINE_LOOP = 2;\n        this.LINE_STRIP = 3;\n        this.TRIANGLES = 4;\n        this.TRIANGLE_STRIP = 5;\n        this.TRIANGLE_FAN = 6;\n\n        this.test = 0;\n        this.name = name;\n        this.submeshIndex = 0;\n        this.material = prim.material;\n        // console.log(prim);\n        this.mesh = null;\n        this.geom = new CGL.Geometry("gltf_" + this.name);\n        this.geom.verticesIndices = [];\n        this.bounds = null;\n        this.primitive = 4;\n        this.morphTargetsRenderMod = null;\n        this.weights = prim.weights;\n\n        if (prim.hasOwnProperty("mode")) this.primitive = prim.mode;\n\n        if (prim.hasOwnProperty("indices")) this.geom.verticesIndices = gltf.accBuffers[prim.indices];\n\n        gltf.loadingMeshes = gltf.loadingMeshes || 0;\n        gltf.loadingMeshes++;\n\n        this.materialJson =\n            this._matPbrMetalness =\n            this._matPbrRoughness =\n            this._matDiffuseColor = null;\n\n        if (gltf.json.materials)\n        {\n            if (this.material != -1) this.materialJson = gltf.json.materials[this.material];\n\n            if (this.materialJson && this.materialJson.pbrMetallicRoughness)\n            {\n                if (!this.materialJson.pbrMetallicRoughness.hasOwnProperty("baseColorFactor"))\n                {\n                    this._matDiffuseColor = [1, 1, 1, 1];\n                }\n                else\n                {\n                    this._matDiffuseColor = this.materialJson.pbrMetallicRoughness.baseColorFactor;\n                }\n\n                this._matDiffuseColor = this.materialJson.pbrMetallicRoughness.baseColorFactor;\n\n                if (!this.materialJson.pbrMetallicRoughness.hasOwnProperty("metallicFactor"))\n                {\n                    this._matPbrMetalness = 1.0;\n                }\n                else\n                {\n                    this._matPbrMetalness = this.materialJson.pbrMetallicRoughness.metallicFactor || null;\n                }\n\n                if (!this.materialJson.pbrMetallicRoughness.hasOwnProperty("roughnessFactor"))\n                {\n                    this._matPbrRoughness = 1.0;\n                }\n                else\n                {\n                    this._matPbrRoughness = this.materialJson.pbrMetallicRoughness.roughnessFactor || null;\n                }\n            }\n        }\n\n        if (gltf.useDraco && prim.extensions.KHR_draco_mesh_compression)\n        {\n            const view = gltf.chunks[0].data.bufferViews[prim.extensions.KHR_draco_mesh_compression.bufferView];\n            const num = view.byteLength;\n            const dataBuff = new Int8Array(num);\n            let accPos = (view.byteOffset || 0);// + (acc.byteOffset || 0);\n            for (let j = 0; j < num; j++)\n            {\n                dataBuff[j] = gltf.chunks[1].dataView.getInt8(accPos, le);\n                accPos++;\n            }\n\n            const dracoDecoder = window.DracoDecoder;\n            dracoDecoder.decodeGeometry(dataBuff.buffer, (geometry) =>\n            {\n                const geom = new CGL.Geometry("draco mesh " + name);\n\n                for (let i = 0; i < geometry.attributes.length; i++)\n                {\n                    const attr = geometry.attributes[i];\n\n                    if (attr.name === "position") geom.vertices = attr.array;\n                    else if (attr.name === "normal") geom.vertexNormals = attr.array;\n                    else if (attr.name === "uv") geom.texCoords = attr.array;\n                    else if (attr.name === "color") geom.vertexColors = this.calcVertexColors(attr.array);\n                    else if (attr.name === "joints") geom.setAttribute("attrJoints", Array.from(attr.array), 4);\n                    else if (attr.name === "weights")\n                    {\n                        const arr4 = new Float32Array(attr.array.length / attr.itemSize * 4);\n\n                        for (let k = 0; k < attr.array.length / attr.itemSize; k++)\n                        {\n                            arr4[k * 4] = arr4[k * 4 + 1] = arr4[k * 4 + 2] = arr4[k * 4 + 3] = 0;\n                            for (let j = 0; j < attr.itemSize; j++)\n                                arr4[k * 4 + j] = attr.array[k * attr.itemSize + j];\n                        }\n                        geom.setAttribute("attrWeights", arr4, 4);\n                    }\n                    else op.logWarn("unknown draco attrib", attr);\n                }\n\n                geometry.attributes = null;\n                geom.verticesIndices = geometry.index.array;\n\n                this.setGeom(geom);\n\n                this.mesh = null;\n                gltf.loadingMeshes--;\n                gltf.timing.push(["draco decode", Math.round((performance.now() - gltf.startTime))]);\n\n                if (finished)finished(this);\n            }, (error) => { op.logError(error); });\n        }\n        else\n        {\n            gltf.loadingMeshes--;\n            this.fillGeomAttribs(gltf, this.geom, prim.attributes);\n\n            if (prim.targets)\n            {\n                for (let j = 0; j < prim.targets.length; j++)\n                {\n                    const tgeom = new CGL.Geometry("gltf_target_" + j);\n\n                    // if (prim.hasOwnProperty("indices")) tgeom.verticesIndices = gltf.accBuffers[prim.indices];\n\n                    this.fillGeomAttribs(gltf, tgeom, prim.targets[j], false);\n\n                    // { // calculate normals for final position of morphtarget for later...\n                    //     for (let i = 0; i < tgeom.vertices.length; i++) tgeom.vertices[i] += this.geom.vertices[i];\n                    //     tgeom.calculateNormals();\n                    //     for (let i = 0; i < tgeom.vertices.length; i++) tgeom.vertices[i] -= this.geom.vertices[i];\n                    // }\n\n                    this.geom.morphTargets.push(tgeom);\n                }\n            }\n            if (finished)finished(this);\n        }\n    }\n\n    _linearToSrgb(x)\n    {\n        if (x <= 0)\n            return 0;\n        else if (x >= 1)\n            return 1;\n        else if (x < 0.0031308)\n            return x * 12.92;\n        else\n            return x ** (1 / 2.2) * 1.055 - 0.055;\n    }\n\n    calcVertexColors(arr)\n    {\n        let vertexColors = null;\n        if (arr instanceof Float32Array)\n        {\n            let div = false;\n            for (let i = 0; i < arr.length; i++)\n            {\n                if (arr[i] > 1)\n                {\n                    div = true;\n                    continue;\n                }\n            }\n\n            if (div)\n                for (let i = 0; i < arr.length; i++) arr[i] /= 65535;\n\n            vertexColors = arr;\n        }\n\n        else if (arr instanceof Uint16Array)\n        {\n            const fb = new Float32Array(arr.length);\n            for (let i = 0; i < arr.length; i++) fb[i] = arr[i] / 65535;\n\n            vertexColors = fb;\n        }\n        else vertexColors = arr;\n\n        for (let i = 0; i < vertexColors.length; i++)\n        {\n            vertexColors[i] = this._linearToSrgb(vertexColors[i]);\n        }\n\n        return vertexColors;\n    }\n\n    fillGeomAttribs(gltf, tgeom, attribs, setGeom)\n    {\n        if (attribs.hasOwnProperty("POSITION")) tgeom.vertices = gltf.accBuffers[attribs.POSITION];\n        if (attribs.hasOwnProperty("NORMAL")) tgeom.vertexNormals = gltf.accBuffers[attribs.NORMAL];\n        if (attribs.hasOwnProperty("TANGENT")) tgeom.tangents = gltf.accBuffers[attribs.TANGENT];\n\n        if (attribs.hasOwnProperty("COLOR_0")) tgeom.vertexColors = this.calcVertexColors(gltf.accBuffers[attribs.COLOR_0]);\n        if (attribs.hasOwnProperty("COLOR_1")) tgeom.setAttribute("attrVertColor1", this.calcVertexColors(gltf.accBuffers[attribs.COLOR_1]), 4);\n        if (attribs.hasOwnProperty("COLOR_2")) tgeom.setAttribute("attrVertColor2", this.calcVertexColors(gltf.accBuffers[attribs.COLOR_2]), 4);\n        if (attribs.hasOwnProperty("COLOR_3")) tgeom.setAttribute("attrVertColor3", this.calcVertexColors(gltf.accBuffers[attribs.COLOR_3]), 4);\n        if (attribs.hasOwnProperty("COLOR_4")) tgeom.setAttribute("attrVertColor4", this.calcVertexColors(gltf.accBuffers[attribs.COLOR_4]), 4);\n\n        if (attribs.hasOwnProperty("TEXCOORD_0")) tgeom.texCoords = gltf.accBuffers[attribs.TEXCOORD_0];\n        if (attribs.hasOwnProperty("TEXCOORD_1")) tgeom.setAttribute("attrTexCoord1", gltf.accBuffers[attribs.TEXCOORD_1], 2);\n        if (attribs.hasOwnProperty("TEXCOORD_2")) tgeom.setAttribute("attrTexCoord2", gltf.accBuffers[attribs.TEXCOORD_2], 2);\n        if (attribs.hasOwnProperty("TEXCOORD_3")) tgeom.setAttribute("attrTexCoord3", gltf.accBuffers[attribs.TEXCOORD_3], 2);\n        if (attribs.hasOwnProperty("TEXCOORD_4")) tgeom.setAttribute("attrTexCoord4", gltf.accBuffers[attribs.TEXCOORD_4], 2);\n\n        if (attribs.hasOwnProperty("WEIGHTS_0"))\n        {\n            tgeom.setAttribute("attrWeights", gltf.accBuffers[attribs.WEIGHTS_0], 4);\n        }\n        if (attribs.hasOwnProperty("JOINTS_0"))\n        {\n            if (!gltf.accBuffers[attribs.JOINTS_0])console.log("no !gltf.accBuffers[attribs.JOINTS_0]");\n            tgeom.setAttribute("attrJoints", gltf.accBuffers[attribs.JOINTS_0], 4);\n        }\n\n        if (attribs.hasOwnProperty("POSITION")) gltf.accBuffersDelete.push(attribs.POSITION);\n        if (attribs.hasOwnProperty("NORMAL")) gltf.accBuffersDelete.push(attribs.NORMAL);\n        if (attribs.hasOwnProperty("TEXCOORD_0")) gltf.accBuffersDelete.push(attribs.TEXCOORD_0);\n        if (attribs.hasOwnProperty("TANGENT")) gltf.accBuffersDelete.push(attribs.TANGENT);\n        if (attribs.hasOwnProperty("COLOR_0"))gltf.accBuffersDelete.push(attribs.COLOR_0);\n        if (attribs.hasOwnProperty("COLOR_0"))gltf.accBuffersDelete.push(attribs.COLOR_0);\n        if (attribs.hasOwnProperty("COLOR_1"))gltf.accBuffersDelete.push(attribs.COLOR_1);\n        if (attribs.hasOwnProperty("COLOR_2"))gltf.accBuffersDelete.push(attribs.COLOR_2);\n        if (attribs.hasOwnProperty("COLOR_3"))gltf.accBuffersDelete.push(attribs.COLOR_3);\n\n        if (attribs.hasOwnProperty("TEXCOORD_1")) gltf.accBuffersDelete.push(attribs.TEXCOORD_1);\n        if (attribs.hasOwnProperty("TEXCOORD_2")) gltf.accBuffersDelete.push(attribs.TEXCOORD_2);\n        if (attribs.hasOwnProperty("TEXCOORD_3")) gltf.accBuffersDelete.push(attribs.TEXCOORD_3);\n        if (attribs.hasOwnProperty("TEXCOORD_4")) gltf.accBuffersDelete.push(attribs.TEXCOORD_4);\n\n        if (setGeom !== false) if (tgeom && tgeom.verticesIndices) this.setGeom(tgeom);\n    }\n\n    setGeom(geom)\n    {\n        if (inNormFormat.get() == "X-ZY")\n        {\n            for (let i = 0; i < geom.vertexNormals.length; i += 3)\n            {\n                let t = geom.vertexNormals[i + 2];\n                geom.vertexNormals[i + 2] = geom.vertexNormals[i + 1];\n                geom.vertexNormals[i + 1] = -t;\n            }\n        }\n\n        if (inVertFormat.get() == "XZ-Y")\n        {\n            for (let i = 0; i < geom.vertices.length; i += 3)\n            {\n                let t = geom.vertices[i + 2];\n                geom.vertices[i + 2] = -geom.vertices[i + 1];\n                geom.vertices[i + 1] = t;\n            }\n        }\n\n        if (this.primitive == this.TRIANGLES)\n        {\n            if (inCalcNormals.get() == "Force Smooth") geom.calculateNormals();\n            else if (!geom.vertexNormals.length && inCalcNormals.get() == "Auto") geom.calculateNormals({ "smooth": false });\n\n            if ((!geom.biTangents || geom.biTangents.length == 0) && geom.tangents)\n            {\n                const bitan = vec3.create();\n                const tan = vec3.create();\n\n                const tangents = geom.tangents;\n                geom.tangents = new Float32Array(tangents.length / 4 * 3);\n                geom.biTangents = new Float32Array(tangents.length / 4 * 3);\n\n                for (let i = 0; i < tangents.length; i += 4)\n                {\n                    const idx = i / 4 * 3;\n\n                    vec3.cross(\n                        bitan,\n                        [geom.vertexNormals[idx], geom.vertexNormals[idx + 1], geom.vertexNormals[idx + 2]],\n                        [tangents[i], tangents[i + 1], tangents[i + 2]]\n                    );\n\n                    vec3.div(bitan, bitan, [tangents[i + 3], tangents[i + 3], tangents[i + 3]]);\n                    vec3.normalize(bitan, bitan);\n\n                    geom.biTangents[idx + 0] = bitan[0];\n                    geom.biTangents[idx + 1] = bitan[1];\n                    geom.biTangents[idx + 2] = bitan[2];\n\n                    geom.tangents[idx + 0] = tangents[i + 0];\n                    geom.tangents[idx + 1] = tangents[i + 1];\n                    geom.tangents[idx + 2] = tangents[i + 2];\n                }\n            }\n\n            if (geom.tangents.length === 0 || inCalcNormals.get() != "Never")\n            {\n                // console.log("[gltf ]no tangents... calculating tangents...");\n                geom.calcTangentsBitangents();\n            }\n        }\n\n        this.geom = geom;\n\n        this.bounds = geom.getBounds();\n    }\n\n    render(cgl, ignoreMaterial, skinRenderer)\n    {\n        if (!this.mesh && this.geom && this.geom.verticesIndices)\n        {\n            let g = this.geom;\n            if (this.geom.vertices.length / 3 > 64000)\n            {\n                g = this.geom.copy();\n                g.unIndex(false, true);\n            }\n\n            let glprim;\n            if (this.primitive == this.TRIANGLES)glprim = cgl.gl.TRIANGLES;\n            else if (this.primitive == this.LINES)glprim = cgl.gl.LINES;\n            else if (this.primitive == this.LINE_STRIP)glprim = cgl.gl.LINE_STRIP;\n            else if (this.primitive == this.POINTS)glprim = cgl.gl.POINTS;\n            else\n            {\n                op.logWarn("unknown primitive type", this);\n            }\n\n            this.mesh = op.patch.cg.createMesh(g, glprim);\n            // this.mesh = new CGL.Mesh(cgl, g, glprim);\n        }\n        else\n        {\n            // update morphTargets\n            if (this.geom && this.geom.morphTargets.length && !this.morphTargetsRenderMod)\n            {\n                this.mesh.addVertexNumbers = true;\n                this.morphTargetsRenderMod = new GltfTargetsRenderer(this);\n            }\n\n            let useMat = !ignoreMaterial && this.material != -1 && gltf.shaders[this.material];\n            if (skinRenderer)useMat = false;\n\n            if (useMat) cgl.pushShader(gltf.shaders[this.material]);\n\n            const currentShader = cgl.getShader() || {};\n            const uniDiff = currentShader.uniformColorDiffuse;\n\n            const uniPbrMetalness = currentShader.uniformPbrMetalness;\n            const uniPbrRoughness = currentShader.uniformPbrRoughness;\n\n            if (!gltf.shaders[this.material] && inUseMatProps.get())\n            {\n                if (uniDiff && this._matDiffuseColor)\n                {\n                    this._matDiffuseColorOrig = [uniDiff.getValue()[0], uniDiff.getValue()[1], uniDiff.getValue()[2], uniDiff.getValue()[3]];\n                    uniDiff.setValue(this._matDiffuseColor);\n                }\n\n                if (uniPbrMetalness)\n                    if (this._matPbrMetalness != null)\n                    {\n                        this._matPbrMetalnessOrig = uniPbrMetalness.getValue();\n                        uniPbrMetalness.setValue(this._matPbrMetalness);\n                    }\n                    else\n                        uniPbrMetalness.setValue(0);\n\n                if (uniPbrRoughness)\n                    if (this._matPbrRoughness != null)\n                    {\n                        this._matPbrRoughnessOrig = uniPbrRoughness.getValue();\n                        uniPbrRoughness.setValue(this._matPbrRoughness);\n                    }\n                    else\n                    {\n                        uniPbrRoughness.setValue(0);\n                    }\n            }\n\n            if (this.morphTargetsRenderMod) this.morphTargetsRenderMod.renderStart(cgl, 0);\n            if (this.mesh)\n            {\n                // console.log(this.mesh)\n                // this.mesh.lastMaterial=0;\n                this.mesh.render(cgl.getShader(), ignoreMaterial);\n            }\n            if (this.morphTargetsRenderMod) this.morphTargetsRenderMod.renderFinish(cgl);\n\n            if (inUseMatProps.get())\n            {\n                if (uniDiff && this._matDiffuseColor) uniDiff.setValue(this._matDiffuseColorOrig);\n                if (uniPbrMetalness && this._matPbrMetalnessOrig != undefined) uniPbrMetalness.setValue(this._matPbrMetalnessOrig);\n                if (uniPbrRoughness && this._matPbrRoughnessOrig != undefined) uniPbrRoughness.setValue(this._matPbrRoughnessOrig);\n            }\n\n            if (useMat) cgl.popShader();\n        }\n    }\n};\n',
    inc_meshGroup_js:
      "const gltfMeshGroup = class\n{\n    constructor(gltf, m)\n    {\n        this.bounds = new CABLES.CG.BoundingBox();\n        this.meshes = [];\n        this.name = m.name;\n        const prims = m.primitives;\n\n        for (let i = 0; i < prims.length; i++)\n        {\n            const mesh = new gltfMesh(this.name, prims[i], gltf,\n                (mesh) =>\n                {\n                    mesh.extras = m.extras;\n                    this.bounds.apply(mesh.bounds);\n                });\n\n            mesh.submeshIndex = i;\n            this.meshes.push(mesh);\n        }\n    }\n\n    render(cgl, ignoreMat, skinRenderer, _time, weights)\n    {\n        for (let i = 0; i < this.meshes.length; i++)\n        {\n            const useMat = gltf.shaders[this.meshes[i].material];\n\n            if (!ignoreMat && useMat) cgl.pushShader(gltf.shaders[this.meshes[i].material]);\n            // console.log(gltf.shaders[this.meshes[i].material],this.meshes[i].material)\n            if (skinRenderer)skinRenderer.renderStart(cgl, _time);\n            if (weights) this.meshes[i].weights = weights;\n            this.meshes[i].render(cgl, ignoreMat, skinRenderer, _time);\n            if (skinRenderer)skinRenderer.renderFinish(cgl);\n            if (!ignoreMat && useMat) cgl.popShader();\n        }\n    }\n};\n",
    inc_node_js:
      'const gltfNode = class\n{\n    constructor(node, gltf)\n    {\n        this.isChild = node.isChild || false;\n        this.name = node.name;\n        if (node.hasOwnProperty("camera")) this.camera = node.camera;\n        this.hidden = false;\n        this.mat = mat4.create();\n        this._animActions = {};\n        this.animWeights = [];\n        this._animMat = mat4.create();\n        this._tempMat = mat4.create();\n        this._tempQuat = quat.create();\n        this._tempRotmat = mat4.create();\n        this.mesh = null;\n        this.children = [];\n        this._node = node;\n        this._gltf = gltf;\n        this.absMat = mat4.create();\n        this.addTranslate = null;\n        this._tempAnimScale = null;\n        this.addMulMat = null;\n        this.updateMatrix();\n        this.skinRenderer = null;\n        this.copies = [];\n    }\n\n    get skin()\n    {\n        if (this._node.hasOwnProperty("skin")) return this._node.skin;\n        else return -1;\n    }\n\n    copy()\n    {\n        this.isCopy = true;\n        const n = new gltfNode(this._node, this._gltf);\n        n.copyOf = this;\n\n        n._animActions = this._animActions;\n        n.children = this.children;\n        if (this.skin) n.skinRenderer = new GltfSkin(this);\n\n        this.updateMatrix();\n        return n;\n    }\n\n    hasSkin()\n    {\n        if (this._node.hasOwnProperty("skin")) return this._gltf.json.skins[this._node.skin].name || "unknown";\n        return false;\n    }\n\n    initSkin()\n    {\n        if (this.skin > -1)\n        {\n            this.skinRenderer = new GltfSkin(this);\n        }\n    }\n\n    updateMatrix()\n    {\n        mat4.identity(this.mat);\n        if (this._node.translation) mat4.translate(this.mat, this.mat, this._node.translation);\n\n        if (this._node.rotation)\n        {\n            const rotmat = mat4.create();\n            this._rot = this._node.rotation;\n\n            mat4.fromQuat(rotmat, this._node.rotation);\n            mat4.mul(this.mat, this.mat, rotmat);\n        }\n\n        if (this._node.scale)\n        {\n            this._scale = this._node.scale;\n            mat4.scale(this.mat, this.mat, this._scale);\n        }\n\n        if (this._node.hasOwnProperty("mesh"))\n        {\n            this.mesh = this._gltf.meshes[this._node.mesh];\n            if (this.isCopy)\n            {\n                // console.log(this.mesh);\n            }\n        }\n\n        if (this._node.children)\n        {\n            for (let i = 0; i < this._node.children.length; i++)\n            {\n                this._gltf.json.nodes[i].isChild = true;\n                if (this._gltf.nodes[this._node.children[i]]) this._gltf.nodes[this._node.children[i]].isChild = true;\n                this.children.push(this._node.children[i]);\n            }\n        }\n    }\n\n    unHide()\n    {\n        this.hidden = false;\n        for (let i = 0; i < this.children.length; i++)\n            if (this.children[i].unHide) this.children[i].unHide();\n    }\n\n    calcBounds(gltf, mat, bounds)\n    {\n        const localMat = mat4.create();\n\n        if (mat) mat4.copy(localMat, mat);\n        if (this.mat) mat4.mul(localMat, localMat, this.mat);\n\n        if (this.mesh)\n        {\n            const bb = this.mesh.bounds.copy();\n            bb.mulMat4(localMat);\n            bounds.apply(bb);\n\n            if (bounds.changed)\n            {\n                boundingPoints.push(\n                    bb._min[0] || 0, bb._min[1] || 0, bb._min[2] || 0,\n                    bb._max[0] || 0, bb._max[1] || 0, bb._max[2] || 0);\n            }\n        }\n\n        for (let i = 0; i < this.children.length; i++)\n        {\n            if (gltf.nodes[this.children[i]] && gltf.nodes[this.children[i]].calcBounds)\n            {\n                const b = gltf.nodes[this.children[i]].calcBounds(gltf, localMat, bounds);\n\n                bounds.apply(b);\n            }\n        }\n\n        if (bounds.changed) return bounds;\n        else return null;\n    }\n\n    setAnimAction(name)\n    {\n        // console.log("setAnimAction:", name);\n        if (!name) return;\n\n        this._currentAnimaction = name;\n\n        if (name && !this._animActions[name])\n        {\n            // console.log("no action found:", name,this._animActions);\n            return null;\n        }\n\n        // else console.log("YES action found:", name);\n        // console.log(this._animActions);\n\n        for (let path in this._animActions[name])\n        {\n            if (path == "translation") this._animTrans = this._animActions[name][path];\n            else if (path == "rotation") this._animRot = this._animActions[name][path];\n            else if (path == "scale") this._animScale = this._animActions[name][path];\n            else if (path == "weights") this.animWeights = this._animActions[name][path];\n            else console.log("[gltfNode] unknown anim path", path, this._animActions[name][path]);\n        }\n    }\n\n    setAnim(path, name, anims)\n    {\n        if (!path || !name || !anims) return;\n\n        // console.log("setanim", this._node.name, path, name, anims);\n\n        this._animActions[name] = this._animActions[name] || {};\n\n        // console.log(this._animActions);\n        // debugger;\n\n        // for (let i = 0; i < this.copies.length; i++) this.copies[i]._animActions = this._animActions;\n\n        if (this._animActions[name][path]) op.log("[gltfNode] animation action path already exists", name, path, this._animActions[name][path]);\n\n        this._animActions[name][path] = anims;\n\n        if (path == "translation") this._animTrans = anims;\n        else if (path == "rotation") this._animRot = anims;\n        else if (path == "scale") this._animScale = anims;\n        else if (path == "weights")\n        {\n            // console.log("weights",name,path,anims)\n            this.animWeights = this._animActions[name][path];\n            // console.log(this.animWeights);\n        }\n        else console.warn("unknown anim path", path, anims);\n    }\n\n    modelMatLocal()\n    {\n        return this._animMat || this.mat;\n    }\n\n    modelMatAbs()\n    {\n        return this.absMat;\n    }\n\n    transform(cgl, _time)\n    {\n        if (!_time && _time != 0)_time = time;\n\n        this._lastTimeTrans = _time;\n\n        // console.log(this._rot)\n\n        gltfTransforms++;\n\n        if (!this._animTrans && !this._animRot && !this._animScale)\n        {\n            mat4.mul(cgl.mMatrix, cgl.mMatrix, this.mat);\n            this._animMat = null;\n        }\n        else\n        {\n            this._animMat = this._animMat || mat4.create();\n            mat4.identity(this._animMat);\n\n            const playAnims = true;\n\n            if (playAnims && this._animTrans)\n            {\n                mat4.translate(this._animMat, this._animMat, [\n                    this._animTrans[0].getValue(_time),\n                    this._animTrans[1].getValue(_time),\n                    this._animTrans[2].getValue(_time)]);\n            }\n            else\n            if (this._node.translation) mat4.translate(this._animMat, this._animMat, this._node.translation);\n\n            if (playAnims && this._animRot)\n            {\n                if (this._animRot[0].defaultEasing == CABLES.EASING_LINEAR) CABLES.Anim.slerpQuaternion(_time, this._tempQuat, this._animRot[0], this._animRot[1], this._animRot[2], this._animRot[3]);\n                else if (this._animRot[0].defaultEasing == CABLES.EASING_ABSOLUTE)\n                {\n                    this._tempQuat[0] = this._animRot[0].getValue(_time);\n                    this._tempQuat[1] = this._animRot[1].getValue(_time);\n                    this._tempQuat[2] = this._animRot[2].getValue(_time);\n                    this._tempQuat[3] = this._animRot[3].getValue(_time);\n                }\n                else if (this._animRot[0].defaultEasing == CABLES.EASING_CUBICSPLINE)\n                {\n                    CABLES.Anim.slerpQuaternion(_time, this._tempQuat, this._animRot[0], this._animRot[1], this._animRot[2], this._animRot[3]);\n                }\n\n                mat4.fromQuat(this._tempMat, this._tempQuat);\n                mat4.mul(this._animMat, this._animMat, this._tempMat);\n            }\n            else if (this._rot)\n            {\n                mat4.fromQuat(this._tempRotmat, this._rot);\n                mat4.mul(this._animMat, this._animMat, this._tempRotmat);\n            }\n\n            if (playAnims && this._animScale)\n            {\n                if (!this._tempAnimScale) this._tempAnimScale = [1, 1, 1];\n                this._tempAnimScale[0] = this._animScale[0].getValue(_time);\n                this._tempAnimScale[1] = this._animScale[1].getValue(_time);\n                this._tempAnimScale[2] = this._animScale[2].getValue(_time);\n                mat4.scale(this._animMat, this._animMat, this._tempAnimScale);\n            }\n            else if (this._scale) mat4.scale(this._animMat, this._animMat, this._scale);\n\n            mat4.mul(cgl.mMatrix, cgl.mMatrix, this._animMat);\n        }\n\n        if (this.animWeights)\n        {\n            this.weights = this.weights || [];\n\n            let str = "";\n            for (let i = 0; i < this.animWeights.length; i++)\n            {\n                this.weights[i] = this.animWeights[i].getValue(_time);\n                str += this.weights[i] + "/";\n            }\n\n            // console.log(str);\n            // this.mesh.weights=this.animWeights.get(_time);\n            // console.log(this.animWeights);\n        }\n\n        if (this.addTranslate) mat4.translate(cgl.mMatrix, cgl.mMatrix, this.addTranslate);\n\n        if (this.addMulMat) mat4.mul(cgl.mMatrix, cgl.mMatrix, this.addMulMat);\n\n        mat4.copy(this.absMat, cgl.mMatrix);\n    }\n\n    render(cgl, dontTransform, dontDrawMesh, ignoreMaterial, ignoreChilds, drawHidden, _time)\n    {\n        if (!dontTransform) cgl.pushModelMatrix();\n\n        if (_time === undefined) _time = gltf.time;\n\n        if (!dontTransform || this.skinRenderer) this.transform(cgl, _time);\n\n        if (this.hidden && !drawHidden)\n        {\n        }\n        else\n        {\n            if (this.skinRenderer)\n            {\n                this.skinRenderer.time = _time;\n                if (!dontDrawMesh)\n                    this.mesh.render(cgl, ignoreMaterial, this.skinRenderer, _time, this.weights);\n            }\n            else\n            {\n                if (this.mesh && !dontDrawMesh)\n                    this.mesh.render(cgl, ignoreMaterial, null, _time, this.weights);\n            }\n        }\n\n        if (!ignoreChilds && !this.hidden)\n            for (let i = 0; i < this.children.length; i++)\n                if (gltf.nodes[this.children[i]])\n                    gltf.nodes[this.children[i]].render(cgl, dontTransform, dontDrawMesh, ignoreMaterial, ignoreChilds, drawHidden, _time);\n\n        if (!dontTransform)cgl.popModelMatrix();\n    }\n};\n',
    inc_print_js:
      'let tab = null;\n\nfunction closeTab()\n{\n    if (tab)gui.mainTabs.closeTab(tab.id);\n    tab = null;\n}\n\nfunction formatVec(arr)\n{\n    const nums = [];\n    for (let i = 0; i < arr.length; i++)\n    {\n        nums.push(Math.round(arr[i] * 1000) / 1000);\n    }\n\n    return nums.join(",");\n}\n\nfunction printNode(html, node, level)\n{\n    if (!gltf) return;\n\n    html += "<tr class=\\"row\\">";\n\n    let ident = "";\n    let identSpace = "";\n\n    for (let i = 1; i < level; i++)\n    {\n        identSpace += "&nbsp;&nbsp;&nbsp;";\n        let identClass = "identBg";\n        if (i == 1)identClass = "identBgLevel0";\n        ident += "<td class=\\"ident " + identClass + "\\" ><div style=\\"\\"></div></td>";\n    }\n    let id = CABLES.uuid();\n    html += ident;\n    html += "<td colspan=\\"" + (21 - level) + "\\">";\n\n    if (node.mesh && node.mesh.meshes.length)html += "<span class=\\"icon icon-cube\\"></span>&nbsp;";\n    else html += "<span class=\\"icon icon-box-select\\"></span> &nbsp;";\n\n    html += node.name + "</td><td></td>";\n\n    if (node.mesh)\n    {\n        html += "<td>";\n        for (let i = 0; i < node.mesh.meshes.length; i++)\n        {\n            if (i > 0)html += ", ";\n            html += node.mesh.meshes[i].name;\n        }\n\n        html += "</td>";\n\n        html += "<td>";\n        html += node.hasSkin() || "-";\n        html += "</td>";\n\n        html += "<td>";\n        let countMats = 0;\n        for (let i = 0; i < node.mesh.meshes.length; i++)\n        {\n            if (countMats > 0)html += ", ";\n            if (gltf.json.materials && node.mesh.meshes[i].hasOwnProperty("material"))\n            {\n                if (gltf.json.materials[node.mesh.meshes[i].material])\n                {\n                    html += gltf.json.materials[node.mesh.meshes[i].material].name;\n                    countMats++;\n                }\n            }\n        }\n        if (countMats == 0)html += "none";\n        html += "</td>";\n    }\n    else\n    {\n        html += "<td>-</td><td>-</td><td>-</td>";\n    }\n\n    html += "<td>";\n\n    if (node._node.translation || node._node.rotation || node._node.scale)\n    {\n        let info = "";\n\n        if (node._node.translation)info += "Translate: `" + formatVec(node._node.translation) + "` || ";\n        if (node._node.rotation)info += "Rotation: `" + formatVec(node._node.rotation) + "` || ";\n        if (node._node.scale)info += "Scale: `" + formatVec(node._node.scale) + "` || ";\n\n        html += "<span class=\\"icon icon-gizmo info\\" data-info=\\"" + info + "\\"></span> &nbsp;";\n    }\n\n    if (node._animRot || node._animScale || node._animTrans)\n    {\n        let info = "Animated: ";\n        if (node._animRot) info += "Rot ";\n        if (node._animScale) info += "Scale ";\n        if (node._animTrans) info += "Trans ";\n\n        html += "<span class=\\"icon icon-clock info\\" data-info=\\"" + info + "\\"></span>&nbsp;";\n    }\n\n    if (!node._node.translation && !node._node.rotation && !node._node.scale && !node._animRot && !node._animScale && !node._animTrans) html += "-";\n\n    html += "</td>";\n\n    html += "<td>";\n    let hideclass = "";\n    if (node.hidden)hideclass = "node-hidden";\n\n    // html+=\'\';\n    html += "<a onclick=\\"gui.corePatch().getOpById(\'" + op.id + "\').exposeNode(\'" + node.name + "\',\'transform\')\\" class=\\"treebutton\\">Transform</a>";\n    html += " <a onclick=\\"gui.corePatch().getOpById(\'" + op.id + "\').exposeNode(\'" + node.name + "\',\'hierarchy\')\\" class=\\"treebutton\\">Hierarchy</a>";\n    html += " <a onclick=\\"gui.corePatch().getOpById(\'" + op.id + "\').exposeNode(\'" + node.name + "\')\\" class=\\"treebutton\\">Node</a>";\n\n    if (node.hasSkin())\n        html += " <a onclick=\\"gui.corePatch().getOpById(\'" + op.id + "\').exposeNode(\'" + node.name + "\',false,{skin:true});\\" class=\\"treebutton\\">Skin</a>";\n\n    html += "</td><td>";\n    html += "&nbsp;<span class=\\"icon iconhover icon-eye " + hideclass + "\\" onclick=\\"gui.corePatch().getOpById(\'" + op.id + "\').toggleNodeVisibility(\'" + node.name + "\');this.classList.toggle(\'node-hidden\');\\"></span>";\n    html += "</td>";\n\n    html += "</tr>";\n\n    if (node.children)\n    {\n        for (let i = 0; i < node.children.length; i++)\n            html = printNode(html, gltf.nodes[node.children[i]], level + 1);\n    }\n\n    return html;\n}\n\nfunction printMaterial(mat, idx)\n{\n    let html = "<tr>";\n    html += " <td>" + idx + "</td>";\n    html += " <td>" + mat.name + "</td>";\n\n    html += " <td>";\n\n    const info = JSON.stringify(mat, null, 4).replaceAll("\\"", "").replaceAll("\\n", "<br/>");\n\n    html += "<span class=\\"icon icon-info\\" onclick=\\"new CABLES.UI.ModalDialog({ \'html\': \'<pre>" + info + "</pre>\', \'title\': \'" + mat.name + "\' });\\"></span>&nbsp;";\n\n    if (mat.pbrMetallicRoughness && mat.pbrMetallicRoughness.baseColorFactor)\n    {\n        let rgb = "";\n        rgb += "" + Math.round(mat.pbrMetallicRoughness.baseColorFactor[0] * 255);\n        rgb += "," + Math.round(mat.pbrMetallicRoughness.baseColorFactor[1] * 255);\n        rgb += "," + Math.round(mat.pbrMetallicRoughness.baseColorFactor[2] * 255);\n\n        html += "<div style=\\"width:15px;height:15px;background-color:rgb(" + rgb + ");display:inline-block\\">&nbsp;</a>";\n    }\n    html += " <td style=\\"\\">" + (gltf.shaders[idx] ? "-" : "<a onclick=\\"gui.corePatch().getOpById(\'" + op.id + "\').assignMaterial(\'" + mat.name + "\')\\" class=\\"treebutton\\">Assign</a>") + "<td>";\n    html += "<td>";\n\n    html += "</tr>";\n    return html;\n}\n\nfunction printInfo()\n{\n    if (!gltf) return;\n\n    const startTime = performance.now();\n    const sizes = {};\n    let html = "<div style=\\"overflow:scroll;width:100%;height:100%\\">";\n\n    html += "File: <a href=\\"" + CABLES.sandbox.getCablesUrl() + "/asset/patches/?filename=" + inFile.get() + "\\" target=\\"_blank\\">" + CABLES.basename(inFile.get()) + "</a><br/>";\n\n    html += "Generator:" + gltf.json.asset.generator;\n\n    let numNodes = 0;\n    if (gltf.json.nodes)numNodes = gltf.json.nodes.length;\n    html += "<div id=\\"groupNodes\\">Nodes (" + numNodes + ")</div>";\n\n    html += "<table id=\\"sectionNodes\\" class=\\"table treetable\\">";\n\n    html += "<tr>";\n    html += " <th colspan=\\"21\\">Name</th>";\n    html += " <th>Mesh</th>";\n    html += " <th>Skin</th>";\n    html += " <th>Material</th>";\n    html += " <th>Transform</th>";\n    html += " <th>Expose</th>";\n    html += " <th></th>";\n    html += "</tr>";\n\n    for (let i = 0; i < gltf.nodes.length; i++)\n    {\n        if (!gltf.nodes[i].isChild)\n            html = printNode(html, gltf.nodes[i], 1);\n    }\n    html += "</table>";\n\n    // / //////////////////\n\n    let numMaterials = 0;\n    if (gltf.json.materials)numMaterials = gltf.json.materials.length;\n    html += "<div id=\\"groupMaterials\\">Materials (" + numMaterials + ")</div>";\n\n    if (!gltf.json.materials || gltf.json.materials.length == 0)\n    {\n    }\n    else\n    {\n        html += "<table id=\\"materialtable\\"  class=\\"table treetable\\">";\n        html += "<tr>";\n        html += " <th>Index</th>";\n        html += " <th>Name</th>";\n        html += " <th>Color</th>";\n        html += " <th>Function</th>";\n        html += " <th></th>";\n        html += "</tr>";\n        for (let i = 0; i < gltf.json.materials.length; i++)\n        {\n            html += printMaterial(gltf.json.materials[i], i);\n        }\n        html += "</table>";\n    }\n\n    // / ///////////////////////\n\n    html += "<div id=\\"groupMeshes\\">Meshes (" + gltf.json.meshes.length + ")</div>";\n\n    html += "<table id=\\"meshestable\\"  class=\\"table treetable\\">";\n    html += "<tr>";\n    html += " <th>Name</th>";\n    html += " <th>Node</th>";\n    html += " <th>Material</th>";\n    html += " <th>Vertices</th>";\n    html += " <th>Attributes</th>";\n    html += "</tr>";\n\n    let sizeBufferViews = [];\n    sizes.meshes = 0;\n    sizes.meshTargets = 0;\n\n    for (let i = 0; i < gltf.json.meshes.length; i++)\n    {\n        html += "<tr>";\n        html += "<td>" + gltf.json.meshes[i].name + "</td>";\n\n        html += "<td>";\n        let count = 0;\n        let nodename = "";\n        for (let j = 0; j < gltf.json.nodes.length; j++)\n        {\n            if (gltf.json.nodes[j].mesh == i)\n            {\n                count++;\n                if (count == 1)\n                {\n                    nodename = gltf.json.nodes[j].name;\n                }\n            }\n        }\n        if (count > 1) html += (count) + " nodes (" + nodename + " ...)";\n        else html += nodename;\n        html += "</td>";\n\n        // -------\n\n        html += "<td>";\n        for (let j = 0; j < gltf.json.meshes[i].primitives.length; j++)\n        {\n            if (gltf.json.meshes[i].primitives[j].hasOwnProperty("material"))\n            {\n                if (gltf.json.materials[gltf.json.meshes[i]])\n                {\n                    html += gltf.json.materials[gltf.json.meshes[i].primitives[j].material].name + " ";\n                }\n            }\n            else html += "None";\n        }\n        html += "</td>";\n\n        html += "<td>";\n        let numVerts = 0;\n        for (let j = 0; j < gltf.json.meshes[i].primitives.length; j++)\n        {\n            if (gltf.json.meshes[i].primitives[j].attributes.POSITION != undefined)\n            {\n                let v = parseInt(gltf.json.accessors[gltf.json.meshes[i].primitives[j].attributes.POSITION].count);\n                numVerts += v;\n                html += "" + v + "<br/>";\n            }\n            else html += "-<br/>";\n        }\n\n        if (gltf.json.meshes[i].primitives.length > 1)\n            html += "=" + numVerts;\n        html += "</td>";\n\n        html += "<td>";\n        for (let j = 0; j < gltf.json.meshes[i].primitives.length; j++)\n        {\n            html += Object.keys(gltf.json.meshes[i].primitives[j].attributes);\n            html += " <a onclick=\\"gui.corePatch().getOpById(\'" + op.id + "\').exposeGeom(\'" + gltf.json.meshes[i].name + "\'," + j + ")\\" class=\\"treebutton\\">Geometry</a>";\n            html += "<br/>";\n\n            if (gltf.json.meshes[i].primitives[j].targets)\n            {\n                html += gltf.json.meshes[i].primitives[j].targets.length + " targets<br/>";\n\n                if (gltf.json.meshes[i].extras && gltf.json.meshes[i].extras.targetNames)\n                    html += "Targetnames:<br/>" + gltf.json.meshes[i].extras.targetNames.join("<br/>");\n\n                html += "<br/>";\n            }\n        }\n\n        html += "</td>";\n        html += "</tr>";\n\n        for (let j = 0; j < gltf.json.meshes[i].primitives.length; j++)\n        {\n            const accessor = gltf.json.accessors[gltf.json.meshes[i].primitives[j].indices];\n            if (accessor)\n            {\n                let bufView = accessor.bufferView;\n\n                if (sizeBufferViews.indexOf(bufView) == -1)\n                {\n                    sizeBufferViews.push(bufView);\n                    if (gltf.json.bufferViews[bufView])sizes.meshes += gltf.json.bufferViews[bufView].byteLength;\n                }\n            }\n\n            for (let k in gltf.json.meshes[i].primitives[j].attributes)\n            {\n                const attr = gltf.json.meshes[i].primitives[j].attributes[k];\n                const bufView2 = gltf.json.accessors[attr].bufferView;\n\n                if (sizeBufferViews.indexOf(bufView2) == -1)\n                {\n                    sizeBufferViews.push(bufView2);\n                    if (gltf.json.bufferViews[bufView2])sizes.meshes += gltf.json.bufferViews[bufView2].byteLength;\n                }\n            }\n\n            if (gltf.json.meshes[i].primitives[j].targets)\n                for (let k = 0; k < gltf.json.meshes[i].primitives[j].targets.length; k++)\n                {\n                    for (let l in gltf.json.meshes[i].primitives[j].targets[k])\n                    {\n                        const accessorIdx = gltf.json.meshes[i].primitives[j].targets[k][l];\n                        const accessor = gltf.json.accessors[accessorIdx];\n                        const bufView2 = accessor.bufferView;\n                        console.log("accessor", accessor);\n                        if (sizeBufferViews.indexOf(bufView2) == -1)\n                            if (gltf.json.bufferViews[bufView2])\n                            {\n                                sizeBufferViews.push(bufView2);\n                                sizes.meshTargets += gltf.json.bufferViews[bufView2].byteLength;\n                            }\n                    }\n                }\n        }\n    }\n    html += "</table>";\n\n    // / //////////////////////////////////\n\n    let numSamplers = 0;\n    let numAnims = 0;\n    let numKeyframes = 0;\n\n    if (gltf.json.animations)\n    {\n        numAnims = gltf.json.animations.length;\n        for (let i = 0; i < gltf.json.animations.length; i++)\n        {\n            numSamplers += gltf.json.animations[i].samplers.length;\n        }\n    }\n\n    html += "<div id=\\"groupAnims\\">Animations (" + numAnims + "/" + numSamplers + ")</div>";\n\n    if (gltf.json.animations)\n    {\n        html += "<table id=\\"sectionAnim\\" class=\\"table treetable\\">";\n        html += "<tr>";\n        html += "  <th>Name</th>";\n        html += "  <th>Target node</th>";\n        html += "  <th>Path</th>";\n        html += "  <th>Interpolation</th>";\n        html += "  <th>Keys</th>";\n        html += "</tr>";\n\n\n        sizes.animations = 0;\n\n        for (let i = 0; i < gltf.json.animations.length; i++)\n        {\n            for (let j = 0; j < gltf.json.animations[i].samplers.length; j++)\n            {\n                let bufView = gltf.json.accessors[gltf.json.animations[i].samplers[j].input].bufferView;\n                if (sizeBufferViews.indexOf(bufView) == -1)\n                {\n                    sizeBufferViews.push(bufView);\n                    sizes.animations += gltf.json.bufferViews[bufView].byteLength;\n                }\n\n                bufView = gltf.json.accessors[gltf.json.animations[i].samplers[j].output].bufferView;\n                if (sizeBufferViews.indexOf(bufView) == -1)\n                {\n                    sizeBufferViews.push(bufView);\n                    sizes.animations += gltf.json.bufferViews[bufView].byteLength;\n                }\n            }\n\n            for (let j = 0; j < gltf.json.animations[i].channels.length; j++)\n            {\n                html += "<tr>";\n                html += "  <td> Anim " + i + ": " + gltf.json.animations[i].name + "</td>";\n\n                html += "  <td>" + gltf.nodes[gltf.json.animations[i].channels[j].target.node].name + "</td>";\n                html += "  <td>";\n                html += gltf.json.animations[i].channels[j].target.path + " ";\n                html += "  </td>";\n\n                const smplidx = gltf.json.animations[i].channels[j].sampler;\n                const smplr = gltf.json.animations[i].samplers[smplidx];\n\n                html += "  <td>" + smplr.interpolation + "</td>";\n\n                html += "  <td>" + gltf.json.accessors[smplr.output].count;\n                numKeyframes += gltf.json.accessors[smplr.output].count;\n\n                // html += "&nbsp;&nbsp;<a onclick=\\"gui.corePatch().getOpById(\'" + op.id + "\').showAnim(\'" + i + "\',\'" + j + "\')\\" class=\\"icon icon-search\\"></a>";\n\n                html += "</td>";\n\n                html += "</tr>";\n            }\n        }\n\n        html += "<tr>";\n        html += "  <td></td>";\n        html += "  <td></td>";\n        html += "  <td></td>";\n        html += "  <td></td>";\n        html += "  <td>" + numKeyframes + " total</td>";\n        html += "</tr>";\n        html += "</table>";\n    }\n    else\n    {\n\n    }\n\n    // / ///////////////////\n\n    let numImages = 0;\n    if (gltf.json.images)numImages = gltf.json.images.length;\n    html += "<div id=\\"groupImages\\">Images (" + numImages + ")</div>";\n\n    if (gltf.json.images)\n    {\n        html += "<table id=\\"sectionImages\\" class=\\"table treetable\\">";\n\n        html += "<tr>";\n        html += "  <th>name</th>";\n        html += "  <th>type</th>";\n        html += "  <th>func</th>";\n        html += "</tr>";\n\n        sizes.images = 0;\n\n        for (let i = 0; i < gltf.json.images.length; i++)\n        {\n            if (gltf.json.images[i].hasOwnProperty("bufferView"))\n            {\n                // if (sizeBufferViews.indexOf(gltf.json.images[i].hasOwnProperty("bufferView")) == -1)console.log("image bufferview already there?!");\n                // else\n                sizes.images += gltf.json.bufferViews[gltf.json.images[i].bufferView].byteLength;\n            }\n            else console.log("image has no bufferview?!");\n\n            html += "<tr>";\n            html += "<td>" + gltf.json.images[i].name + "</td>";\n            html += "<td>" + gltf.json.images[i].mimeType + "</td>";\n            html += "<td>";\n\n            let name = gltf.json.images[i].name;\n            if (name === undefined)name = gltf.json.images[i].bufferView;\n\n            html += "<a onclick=\\"gui.corePatch().getOpById(\'" + op.id + "\').exposeTexture(\'" + name + "\')\\" class=\\"treebutton\\">Expose</a>";\n            html += "</td>";\n\n            html += "<tr>";\n        }\n        html += "</table>";\n    }\n\n    // / ///////////////////////\n\n    let numCameras = 0;\n    if (gltf.json.cameras)numCameras = gltf.json.cameras.length;\n    html += "<div id=\\"groupCameras\\">Cameras (" + numCameras + ")</div>";\n\n    if (gltf.json.cameras)\n    {\n        html += "<table id=\\"sectionCameras\\" class=\\"table treetable\\">";\n\n        html += "<tr>";\n        html += "  <th>name</th>";\n        html += "  <th>type</th>";\n        html += "  <th>info</th>";\n        html += "</tr>";\n\n        for (let i = 0; i < gltf.json.cameras.length; i++)\n        {\n            html += "<tr>";\n            html += "<td>" + gltf.json.cameras[i].name + "</td>";\n            html += "<td>" + gltf.json.cameras[i].type + "</td>";\n            html += "<td>";\n\n            if (gltf.json.cameras[i].perspective)\n            {\n                html += "yfov: " + Math.round(gltf.json.cameras[i].perspective.yfov * 100) / 100;\n                html += ", ";\n                html += "zfar: " + Math.round(gltf.json.cameras[i].perspective.zfar * 100) / 100;\n                html += ", ";\n                html += "znear: " + Math.round(gltf.json.cameras[i].perspective.znear * 100) / 100;\n            }\n            html += "</td>";\n\n            html += "<tr>";\n        }\n        html += "</table>";\n    }\n\n    // / ////////////////////////////////////\n\n    let numSkins = 0;\n    if (gltf.json.skins)numSkins = gltf.json.skins.length;\n    html += "<div id=\\"groupSkins\\">Skins (" + numSkins + ")</div>";\n\n    if (gltf.json.skins)\n    {\n        // html += "<h3>Skins (" + gltf.json.skins.length + ")</h3>";\n        html += "<table id=\\"sectionSkins\\" class=\\"table treetable\\">";\n\n        html += "<tr>";\n        html += "  <th>name</th>";\n        html += "  <th></th>";\n        html += "  <th>total joints</th>";\n        html += "</tr>";\n\n        for (let i = 0; i < gltf.json.skins.length; i++)\n        {\n            html += "<tr>";\n            html += "<td>" + gltf.json.skins[i].name + "</td>";\n            html += "<td>" + "</td>";\n            html += "<td>" + gltf.json.skins[i].joints.length + "</td>";\n            html += "<td>";\n            html += "</td>";\n            html += "<tr>";\n        }\n        html += "</table>";\n    }\n\n    // / ////////////////////////////////////\n\n    if (gltf.timing)\n    {\n        html += "<div id=\\"groupTiming\\">Debug Loading Timing </div>";\n\n        html += "<table id=\\"sectionTiming\\" class=\\"table treetable\\">";\n\n        html += "<tr>";\n        html += "  <th>task</th>";\n        html += "  <th>time used</th>";\n        html += "</tr>";\n\n        let lt = 0;\n        for (let i = 0; i < gltf.timing.length - 1; i++)\n        {\n            html += "<tr>";\n            html += "  <td>" + gltf.timing[i][0] + "</td>";\n            html += "  <td>" + (gltf.timing[i + 1][1] - gltf.timing[i][1]) + " ms</td>";\n            html += "</tr>";\n            // lt = gltf.timing[i][1];\n        }\n        html += "</table>";\n    }\n\n    // / //////////////////////////\n\n    let sizeBin = 0;\n    if (gltf.json.buffers)\n        sizeBin = gltf.json.buffers[0].byteLength;\n\n    html += "<div id=\\"groupBinary\\">File Size Allocation (" + Math.round(sizeBin / 1024) + "k )</div>";\n\n    html += "<table id=\\"sectionBinary\\" class=\\"table treetable\\">";\n    html += "<tr>";\n    html += "  <th>name</th>";\n    html += "  <th>size</th>";\n    html += "  <th>%</th>";\n    html += "</tr>";\n    let sizeUnknown = sizeBin;\n    for (let i in sizes)\n    {\n        // html+=i+\':\'+Math.round(sizes[i]/1024);\n        html += "<tr>";\n        html += "<td>" + i + "</td>";\n        html += "<td>" + readableSize(sizes[i]) + " </td>";\n        html += "<td>" + Math.round(sizes[i] / sizeBin * 100) + "% </td>";\n        html += "<tr>";\n        sizeUnknown -= sizes[i];\n    }\n\n    if (sizeUnknown != 0)\n    {\n        html += "<tr>";\n        html += "<td>unknown</td>";\n        html += "<td>" + readableSize(sizeUnknown) + " </td>";\n        html += "<td>" + Math.round(sizeUnknown / sizeBin * 100) + "% </td>";\n        html += "<tr>";\n    }\n\n    html += "</table>";\n    html += "</div>";\n\n    tab = new CABLES.UI.Tab("GLTF " + CABLES.basename(inFile.get()), { "icon": "cube", "infotext": "tab_gltf", "padding": true, "singleton": true });\n    gui.mainTabs.addTab(tab, true);\n\n    tab.addEventListener("close", closeTab);\n    tab.html(html);\n\n    CABLES.UI.Collapsable.setup(ele.byId("groupNodes"), ele.byId("sectionNodes"), false);\n    CABLES.UI.Collapsable.setup(ele.byId("groupMaterials"), ele.byId("materialtable"), true);\n    CABLES.UI.Collapsable.setup(ele.byId("groupAnims"), ele.byId("sectionAnim"), true);\n    CABLES.UI.Collapsable.setup(ele.byId("groupMeshes"), ele.byId("meshestable"), true);\n    CABLES.UI.Collapsable.setup(ele.byId("groupCameras"), ele.byId("sectionCameras"), true);\n    CABLES.UI.Collapsable.setup(ele.byId("groupImages"), ele.byId("sectionImages"), true);\n    CABLES.UI.Collapsable.setup(ele.byId("groupSkins"), ele.byId("sectionSkins"), true);\n    CABLES.UI.Collapsable.setup(ele.byId("groupBinary"), ele.byId("sectionBinary"), true);\n    CABLES.UI.Collapsable.setup(ele.byId("groupTiming"), ele.byId("sectionTiming"), true);\n\n    gui.maintabPanel.show(true);\n}\n\nfunction readableSize(n)\n{\n    if (n > 1024) return Math.round(n / 1024) + " kb";\n    if (n > 1024 * 500) return Math.round(n / 1024) + " mb";\n    else return n + " bytes";\n}\n',
    inc_skin_js:
      'const GltfSkin = class\n{\n    constructor(node)\n    {\n        this._mod = null;\n        this._node = node;\n        this._lastTime = 0;\n        this._matArr = [];\n        this._m = mat4.create();\n        this._invBindMatrix = mat4.create();\n        this.identity = true;\n    }\n\n    renderFinish(cgl)\n    {\n        cgl.popModelMatrix();\n        this._mod.unbind();\n    }\n\n    renderStart(cgl, time)\n    {\n        if (!this._mod)\n        {\n            this._mod = new CGL.ShaderModifier(cgl, op.name + this._node.name);\n\n            this._mod.addModule({\n                "priority": -2,\n                "name": "MODULE_VERTEX_POSITION",\n                "srcHeadVert": attachments.skin_head_vert || "",\n                "srcBodyVert": attachments.skin_vert || ""\n            });\n\n            this._mod.addUniformVert("m4[]", "MOD_boneMats", []);// bohnenmatze\n            const tr = vec3.create();\n        }\n\n        const skinIdx = this._node.skin;\n        const arrLength = gltf.json.skins[skinIdx].joints.length * 16;\n\n        // if (this._lastTime != time || !time)\n        {\n            // this._lastTime=inTime.get();\n            if (this._matArr.length != arrLength) this._matArr.length = arrLength;\n\n            for (let i = 0; i < gltf.json.skins[skinIdx].joints.length; i++)\n            {\n                const i16 = i * 16;\n                const jointIdx = gltf.json.skins[skinIdx].joints[i];\n                const nodeJoint = gltf.nodes[jointIdx];\n\n                for (let j = 0; j < 16; j++)\n                    this._invBindMatrix[j] = gltf.accBuffers[gltf.json.skins[skinIdx].inverseBindMatrices][i16 + j];\n\n                mat4.mul(this._m, nodeJoint.modelMatAbs(), this._invBindMatrix);\n\n                for (let j = 0; j < this._m.length; j++) this._matArr[i16 + j] = this._m[j];\n            }\n\n            this._mod.setUniformValue("MOD_boneMats", this._matArr);\n            this._lastTime = time;\n        }\n\n        this._mod.define("SKIN_NUM_BONES", gltf.json.skins[skinIdx].joints.length);\n        this._mod.bind();\n\n        // draw mesh...\n        cgl.pushModelMatrix();\n        if (this.identity)mat4.identity(cgl.mMatrix);\n    }\n};\n',
    inc_targets_js:
      'const GltfTargetsRenderer = class\n{\n    constructor(mesh)\n    {\n        this.mesh = mesh;\n        this.tex = null;\n        this.numRowsPerTarget = 0;\n\n        this.makeTex(mesh.geom);\n    }\n\n    renderFinish(cgl)\n    {\n        cgl.popModelMatrix();\n        this._mod.unbind();\n    }\n\n    renderStart(cgl, time)\n    {\n        if (!this._mod)\n        {\n            this._mod = new CGL.ShaderModifier(cgl, "gltftarget");\n\n            this._mod.addModule({\n                "priority": -2,\n                "name": "MODULE_VERTEX_POSITION",\n                "srcHeadVert": attachments.targets_head_vert || "",\n                "srcBodyVert": attachments.targets_vert || ""\n            });\n\n            this._mod.addUniformVert("4f", "MOD_targetTexInfo", [0, 0, 0, 0]);\n            this._mod.addUniformVert("t", "MOD_targetTex", 1);\n            this._mod.addUniformVert("f[]", "MOD_weights", []);\n\n            const tr = vec3.create();\n        }\n\n        this._mod.pushTexture("MOD_targetTex", this.tex);\n        if (this.tex && this.mesh.weights)\n        {\n            this._mod.setUniformValue("MOD_weights", this.mesh.weights);\n            this._mod.setUniformValue("MOD_targetTexInfo", [this.tex.width, this.tex.height, this.numRowsPerTarget, this.mesh.weights.length]);\n\n            this._mod.define("MOD_NUM_WEIGHTS", Math.max(1, this.mesh.weights.length));\n        }\n        else\n        {\n            this._mod.define("MOD_NUM_WEIGHTS", 1);\n        }\n        this._mod.bind();\n\n        // draw mesh...\n        cgl.pushModelMatrix();\n        if (this.identity)mat4.identity(cgl.mMatrix);\n    }\n\n    makeTex(geom)\n    {\n        if (!geom.morphTargets || !geom.morphTargets.length) return;\n\n        let w = geom.morphTargets[0].vertices.length / 3;\n        let h = 0;\n        this.numRowsPerTarget = 0;\n\n        if (geom.morphTargets[0].vertices && geom.morphTargets[0].vertices.length) this.numRowsPerTarget++;\n        if (geom.morphTargets[0].vertexNormals && geom.morphTargets[0].vertexNormals.length) this.numRowsPerTarget++;\n        if (geom.morphTargets[0].tangents && geom.morphTargets[0].tangents.length) this.numRowsPerTarget++;\n        if (geom.morphTargets[0].bitangents && geom.morphTargets[0].bitangents.length) this.numRowsPerTarget++;\n\n        h = geom.morphTargets.length * this.numRowsPerTarget;\n\n        // console.log("this.numRowsPerTarget", this.numRowsPerTarget);\n\n        const pixels = new Float32Array(w * h * 4);\n        let row = 0;\n\n        for (let i = 0; i < geom.morphTargets.length; i++)\n        {\n            if (geom.morphTargets[i].vertices && geom.morphTargets[i].vertices.length)\n            {\n                for (let j = 0; j < geom.morphTargets[i].vertices.length; j += 3)\n                {\n                    pixels[((row * w) + (j / 3)) * 4 + 0] = geom.morphTargets[i].vertices[j + 0];\n                    pixels[((row * w) + (j / 3)) * 4 + 1] = geom.morphTargets[i].vertices[j + 1];\n                    pixels[((row * w) + (j / 3)) * 4 + 2] = geom.morphTargets[i].vertices[j + 2];\n                    pixels[((row * w) + (j / 3)) * 4 + 3] = 1;\n                }\n                row++;\n            }\n\n            if (geom.morphTargets[i].vertexNormals && geom.morphTargets[i].vertexNormals.length)\n            {\n                for (let j = 0; j < geom.morphTargets[i].vertexNormals.length; j += 3)\n                {\n                    pixels[(row * w + j / 3) * 4 + 0] = geom.morphTargets[i].vertexNormals[j + 0];\n                    pixels[(row * w + j / 3) * 4 + 1] = geom.morphTargets[i].vertexNormals[j + 1];\n                    pixels[(row * w + j / 3) * 4 + 2] = geom.morphTargets[i].vertexNormals[j + 2];\n                    pixels[(row * w + j / 3) * 4 + 3] = 1;\n                }\n\n                row++;\n            }\n\n            if (geom.morphTargets[i].tangents && geom.morphTargets[i].tangents.length)\n            {\n                for (let j = 0; j < geom.morphTargets[i].tangents.length; j += 3)\n                {\n                    pixels[(row * w + j / 3) * 4 + 0] = geom.morphTargets[i].tangents[j + 0];\n                    pixels[(row * w + j / 3) * 4 + 1] = geom.morphTargets[i].tangents[j + 1];\n                    pixels[(row * w + j / 3) * 4 + 2] = geom.morphTargets[i].tangents[j + 2];\n                    pixels[(row * w + j / 3) * 4 + 3] = 1;\n                }\n                row++;\n            }\n\n            if (geom.morphTargets[i].bitangents && geom.morphTargets[i].bitangents.length)\n            {\n                for (let j = 0; j < geom.morphTargets[i].bitangents.length; j += 3)\n                {\n                    pixels[(row * w + j / 3) * 4 + 0] = geom.morphTargets[i].bitangents[j + 0];\n                    pixels[(row * w + j / 3) * 4 + 1] = geom.morphTargets[i].bitangents[j + 1];\n                    pixels[(row * w + j / 3) * 4 + 2] = geom.morphTargets[i].bitangents[j + 2];\n                    pixels[(row * w + j / 3) * 4 + 3] = 1;\n                }\n                row++;\n            }\n        }\n\n        this.tex = new CGL.Texture(cgl, { "isFloatingPointTexture": true, "name": "targetsTexture" });\n\n        this.tex.initFromData(pixels, w, h, CGL.Texture.FILTER_LINEAR, CGL.Texture.WRAP_REPEAT);\n\n        // console.log("morphTargets generated texture", w, h);\n    }\n};\n',
    skin_vert:
      "int index=int(attrJoints.x);\nvec4 newPos = (MOD_boneMats[index] * pos) * attrWeights.x;\nvec3 newNorm = (vec4((MOD_boneMats[index] * vec4(norm.xyz, 0.0)) * attrWeights.x).xyz);\n\nindex=int(attrJoints.y);\nnewPos += (MOD_boneMats[index] * pos) * attrWeights.y;\nnewNorm = (vec4((MOD_boneMats[index] * vec4(norm.xyz, 0.0)) * attrWeights.y).xyz)+newNorm;\n\nindex=int(attrJoints.z);\nnewPos += (MOD_boneMats[index] * pos) * attrWeights.z;\nnewNorm = (vec4((MOD_boneMats[index] * vec4(norm.xyz, 0.0)) * attrWeights.z).xyz)+newNorm;\n\nindex=int(attrJoints.w);\nnewPos += (MOD_boneMats[index] * pos) * attrWeights.w ;\nnewNorm = (vec4((MOD_boneMats[index] * vec4(norm.xyz, 0.0)) * attrWeights.w).xyz)+newNorm;\n\npos=newPos;\n\nnorm=normalize(newNorm.xyz);\n\n\n",
    skin_head_vert:
      "\nIN vec4 attrWeights;\nIN vec4 attrJoints;\nUNI mat4 MOD_boneMats[SKIN_NUM_BONES];\n",
    targets_vert:
      "\n\nfloat MOD_width=MOD_targetTexInfo.x;\nfloat MOD_height=MOD_targetTexInfo.y;\nfloat MOD_numTargets=MOD_targetTexInfo.w;\nfloat MOD_numLinesPerTarget=MOD_height/MOD_numTargets;\n\nfloat halfpix=(1.0/MOD_width)*0.5;\nfloat halfpixy=(1.0/MOD_height)*0.5;\n\nfloat x=(attrVertIndex)/MOD_width+halfpix;\n\nvec3 off=vec3(0.0);\n\nfor(float i=0.0;i<MOD_numTargets;i+=1.0)\n{\n    float y=1.0-((MOD_numLinesPerTarget*i)/MOD_height+halfpixy);\n    vec2 coord=vec2(x,y);\n    vec3 targetXYZ = texture(MOD_targetTex,coord).xyz;\n\n    off+=(targetXYZ*MOD_weights[int(i)]);\n\n\n\n    coord.y+=1.0/MOD_height; // normals are in next row\n    vec3 targetNormal = texture(MOD_targetTex,coord).xyz;\n    norm+=targetNormal*MOD_weights[int(i)];\n\n\n}\n\n// norm=normalize(norm);\npos.xyz+=off;\n",
    targets_head_vert: "\nUNI float MOD_weights[MOD_NUM_WEIGHTS];\n",
  });
  const k = class {
    constructor(e, t) {
      this.node = t;
      this.name = t.name;
      this.config = e.json.cameras[t.camera];
      this.pos = vec3.create();
      this.quat = quat.create();
      this.vCenter = vec3.create();
      this.vUp = vec3.create();
      this.vMat = mat4.create();
    }
    updateAnim(e) {
      if (this.node && this.node._animTrans) {
        vec3.set(
          this.pos,
          this.node._animTrans[0].getValue(e),
          this.node._animTrans[1].getValue(e),
          this.node._animTrans[2].getValue(e),
        );
        quat.set(
          this.quat,
          this.node._animRot[0].getValue(e),
          this.node._animRot[1].getValue(e),
          this.node._animRot[2].getValue(e),
          this.node._animRot[3].getValue(e),
        );
      }
    }
    start(e) {
      if (g.frameStore.shadowPass) return;
      this.updateAnim(e);
      const t = g.getViewPort()[2] / g.getViewPort()[3];
      g.pushPMatrix();
      g.pushViewMatrix();
      let n = mat4.create();
      mat4.invert(n, this.node.modelMatAbs());
      this.vMat = n;
      mat4.identity(g.vMatrix);
      mat4.mul(g.vMatrix, g.vMatrix, n);
    }
    end() {
      if (g.frameStore.shadowPass) return;
      g.popPMatrix();
      g.popViewMatrix();
    }
  };
  const y = true;
  const B = class {
    constructor() {
      this.json = {};
      this.accBuffers = [];
      this.meshes = [];
      this.nodes = [];
      this.shaders = [];
      this.timing = [];
      this.cams = [];
      this.startTime = performance.now();
      this.bounds = new CABLES.CG.BoundingBox();
      this.loaded = Date.now();
      this.accBuffersDelete = [];
    }
    getNode(t) {
      for (let e = 0; e < this.nodes.length; e++) {
        if (this.nodes[e].name == t) return this.nodes[e];
      }
    }
    unHideAll() {
      for (let e = 0; e < this.nodes.length; e++) {
        this.nodes[e].unHide();
      }
    }
  };
  function x(e) {
    if (window.TextDecoder) return new TextDecoder("utf-8").decode(e);
    let t, n, a, r;
    let i, s;
    t = "";
    a = e.length;
    n = 0;
    while (n < a) {
      r = e[n++];
      switch (r >> 4) {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
          t += String.fromCharCode(r);
          break;
        case 12:
        case 13:
          i = e[n++];
          t += String.fromCharCode(((r & 31) << 6) | (i & 63));
          break;
        case 14:
          i = e[n++];
          s = e[n++];
          t += String.fromCharCode(
            ((r & 15) << 12) | ((i & 63) << 6) | ((s & 63) << 0),
          );
          break;
      }
    }
    return t;
  }
  function I(e, t, n, a) {
    const r = {};
    if (a >= e.byteLength) {
      A.log("could not read chunk...");
      return;
    }
    r.size = e.getUint32(a + 0, y);
    r.type = x(t.subarray(a + 4, a + 4 + 4));
    if (r.type == "BIN\0") {
      r.dataView = new DataView(n, a + 8, r.size);
    } else if (r.type == "JSON") {
      const i = x(t.subarray(a + 8, a + 8 + r.size));
      try {
        const s = JSON.parse(i);
        r.data = s;
        se.set(s.asset.generator);
      } catch (e) {}
    } else {
      A.warn("unknown type", r.type);
    }
    return r;
  }
  function R(t) {
    const a = {};
    for (let e = 0; e < t.json.animations.length; e++) {
      const r = t.json.animations[e];
      r.name = r.name || "unknown";
      for (let e = 0; e < r.channels.length; e++) {
        const i = r.channels[e];
        const s = t.nodes[i.target.node];
        const o = r.samplers[i.sampler];
        const n = t.json.accessors[o.input];
        const l = t.accBuffers[o.input];
        const u = t.json.accessors[o.output];
        const h = t.accBuffers[o.output];
        t.accBuffersDelete.push(o.output, o.input);
        if (l && h) {
          let n = 1;
          if (u.type === "VEC2") n = 2;
          else if (u.type === "VEC3") n = 3;
          else if (u.type === "VEC4") n = 4;
          else if (u.type === "SCALAR") {
            n = h.length / l.length;
          } else A.log("[] UNKNOWN accOut.type", u.type);
          const c = [];
          a[r.name] = true;
          for (let e = 0; e < n; e++) {
            const m = new CABLES.Anim();
            c.push(m);
          }
          if (o.interpolation === "LINEAR") {
          } else if (o.interpolation === "STEP")
            for (let e = 0; e < n; e++)
              c[e].defaultEasing = CABLES.EASING_ABSOLUTE;
          else if (o.interpolation === "CUBICSPLINE")
            for (let e = 0; e < n; e++)
              c[e].defaultEasing = CABLES.EASING_CUBICSPLINE;
          else A.warn("unknown interpolation", o.interpolation);
          if (l[0] !== 0)
            for (let e = 0; e < n; e++) c[e].setValue(0, h[0 * n + e]);
          for (let t = 0; t < l.length; t++) {
            O = Math.max(l[t], O);
            for (let e = 0; e < n; e++) {
              if (c[e].defaultEasing === CABLES.EASING_CUBICSPLINE) {
                const p = t * n * 3 + e;
                const g = c[e].setValue(l[t], h[p + n]);
                g.bezTangIn = h[p];
                g.bezTangOut = h[p + n * 2];
              } else {
                c[e].setValue(l[t], h[t * n + e]);
              }
            }
          }
          s.setAnim(i.target.path, r.name, c);
        } else {
          A.warn("loadAmins bufferIn undefined ", l === undefined);
          A.warn("loadAmins bufferOut undefined ", h === undefined);
          A.warn("loadAmins ", o, u);
          A.warn("loadAmins num accBuffers", t.accBuffers.length);
          A.warn("loadAmins num accessors", t.json.accessors.length);
        }
      }
    }
    t.uniqueAnimNames = a;
    me.setRef(Object.keys(a));
  }
  function D(n) {
    if (!n || !n.json.cameras) return;
    n.cameras = n.cameras || [];
    for (let t = 0; t < n.nodes.length; t++) {
      if (n.nodes[t].hasOwnProperty("camera")) {
        const e = new k(n, n.nodes[t]);
        n.cameras.push(e);
      }
    }
  }
  function U() {
    if (!window.DracoDecoder) {
      setTimeout(() => {
        U();
      }, 100);
    }
    P();
  }
  function G(e) {
    const t = 8;
    let r = 0,
      n = 0;
    const i = new B();
    i.timing.push([
      "Start parsing",
      Math.round(performance.now() - i.startTime),
    ]);
    if (!e) return;
    const a = new Uint8Array(e);
    let s = 0;
    const o = x(a.subarray(s, 4));
    s += 4;
    if (o != "glTF") return;
    i.timing.push(["dataview", Math.round(performance.now() - i.startTime)]);
    const l = new DataView(e);
    const u = l.getUint32(s, y);
    s += 4;
    const h = l.getUint32(s, y);
    s += 4;
    oe.set(u);
    const c = [];
    i.chunks = c;
    c.push(I(l, a, e, s));
    s += c[0].size + t;
    i.json = c[0].data;
    i.cables = { fileUrl: S.get(), shortFileName: CABLES.basename(S.get()) };
    ce.setRef(i.json);
    le.setRef(i.json.extensionsUsed || []);
    let m = I(l, a, e, s);
    while (m) {
      c.push(m);
      s += m.size + t;
      m = I(l, a, e, s);
    }
    i.chunks = c;
    const p = c[0].data.bufferViews;
    const g = c[0].data.accessors;
    i.timing.push([
      "Parse buffers",
      Math.round(performance.now() - i.startTime),
    ]);
    if (
      i.json.extensionsUsed &&
      i.json.extensionsUsed.indexOf("KHR_draco_mesh_compression") > -1
    ) {
      if (!window.DracoDecoder) {
        A.setUiError(
          "gltfdraco",
          "GLTF draco compression lib not found / add draco op to your patch!",
        );
        U();
        return i;
      } else {
        i.useDraco = true;
      }
    }
    A.setUiError("gltfdraco", null);
    if (p) {
      for (n = 0; n < g.length; n++) {
        const f = g[n];
        const d = p[f.bufferView];
        let a = 0;
        if (f.type == "SCALAR") a = 1;
        else if (f.type == "VEC2") a = 2;
        else if (f.type == "VEC3") a = 3;
        else if (f.type == "VEC4") a = 4;
        else if (f.type == "MAT4") a = 16;
        else console.error("unknown accessor type", f.type);
        if (c[1].dataView) {
          if (d) {
            const b = f.count * a;
            let e = (d.byteOffset || 0) + (f.byteOffset || 0);
            let t = d.byteStride || 0;
            let n = null;
            if (f.componentType == 5126 || f.componentType == 5125) {
              t = t || 4;
              const v = f.componentType == 5125;
              if (v) n = new Uint32Array(b);
              else n = new Float32Array(b);
              for (r = 0; r < b; r++) {
                if (v) n[r] = c[1].dataView.getUint32(e, y);
                else n[r] = c[1].dataView.getFloat32(e, y);
                if (t != 4 && (r + 1) % a === 0) e += t - a * 4;
                e += 4;
              }
            } else if (f.componentType == 5123) {
              t = t || 2;
              n = new Uint16Array(b);
              for (r = 0; r < b; r++) {
                n[r] = c[1].dataView.getUint16(e, y);
                if (t != 2 && (r + 1) % a === 0) e += t - a * 2;
                e += 2;
              }
            } else if (f.componentType == 5121) {
              t = t || 1;
              n = new Uint8Array(b);
              for (r = 0; r < b; r++) {
                n[r] = c[1].dataView.getUint8(e, y);
                if (t != 1 && (r + 1) % a === 0) e += t - a * 1;
                e += 1;
              }
            } else {
              console.error("unknown component type", f.componentType);
            }
            i.accBuffers.push(n);
          } else {
          }
        }
      }
    }
    i.timing.push([
      "Parse mesh groups",
      Math.round(performance.now() - i.startTime),
    ]);
    i.json.meshes = i.json.meshes || [];
    if (i.json.meshes) {
      for (n = 0; n < i.json.meshes.length; n++) {
        const O = new z(i, i.json.meshes[n]);
        i.meshes.push(O);
      }
    }
    i.timing.push(["Parse nodes", Math.round(performance.now() - i.startTime)]);
    for (n = 0; n < i.json.nodes.length; n++) {
      if (i.json.nodes[n].children)
        for (r = 0; r < i.json.nodes[n].children.length; r++) {
          i.json.nodes[i.json.nodes[n].children[r]].isChild = true;
        }
    }
    for (n = 0; n < i.json.nodes.length; n++) {
      const _ = new X(i.json.nodes[n], i);
      i.nodes.push(_);
    }
    for (n = 0; n < i.nodes.length; n++) {
      const _ = i.nodes[n];
      if (!_.children) continue;
      for (let e = 0; e < _.children.length; e++) {
        i.nodes[_.children[e]].parent = _;
      }
    }
    for (n = 0; n < i.nodes.length; n++) {
      i.nodes[n].initSkin();
    }
    N = true;
    i.timing.push(["load anims", Math.round(performance.now() - i.startTime)]);
    if (i.json.animations) R(i);
    i.timing.push([
      "load cameras",
      Math.round(performance.now() - i.startTime),
    ]);
    if (i.json.cameras) D(i);
    i.timing.push(["finished", Math.round(performance.now() - i.startTime)]);
    return i;
  }
  let F = class {
    constructor(e, n, i, s) {
      this.POINTS = 0;
      this.LINES = 1;
      this.LINE_LOOP = 2;
      this.LINE_STRIP = 3;
      this.TRIANGLES = 4;
      this.TRIANGLE_STRIP = 5;
      this.TRIANGLE_FAN = 6;
      this.test = 0;
      this.name = e;
      this.submeshIndex = 0;
      this.material = n.material;
      this.mesh = null;
      this.geom = new CGL.Geometry("gltf_" + this.name);
      this.geom.verticesIndices = [];
      this.bounds = null;
      this.primitive = 4;
      this.morphTargetsRenderMod = null;
      this.weights = n.weights;
      if (n.hasOwnProperty("mode")) this.primitive = n.mode;
      if (n.hasOwnProperty("indices"))
        this.geom.verticesIndices = i.accBuffers[n.indices];
      i.loadingMeshes = i.loadingMeshes || 0;
      i.loadingMeshes++;
      this.materialJson =
        this._matPbrMetalness =
        this._matPbrRoughness =
        this._matDiffuseColor =
          null;
      if (i.json.materials) {
        if (this.material != -1)
          this.materialJson = i.json.materials[this.material];
        if (this.materialJson && this.materialJson.pbrMetallicRoughness) {
          if (
            !this.materialJson.pbrMetallicRoughness.hasOwnProperty(
              "baseColorFactor",
            )
          ) {
            this._matDiffuseColor = [1, 1, 1, 1];
          } else {
            this._matDiffuseColor =
              this.materialJson.pbrMetallicRoughness.baseColorFactor;
          }
          this._matDiffuseColor =
            this.materialJson.pbrMetallicRoughness.baseColorFactor;
          if (
            !this.materialJson.pbrMetallicRoughness.hasOwnProperty(
              "metallicFactor",
            )
          ) {
            this._matPbrMetalness = 1;
          } else {
            this._matPbrMetalness =
              this.materialJson.pbrMetallicRoughness.metallicFactor || null;
          }
          if (
            !this.materialJson.pbrMetallicRoughness.hasOwnProperty(
              "roughnessFactor",
            )
          ) {
            this._matPbrRoughness = 1;
          } else {
            this._matPbrRoughness =
              this.materialJson.pbrMetallicRoughness.roughnessFactor || null;
          }
        }
      }
      if (i.useDraco && n.extensions.KHR_draco_mesh_compression) {
        const a =
          i.chunks[0].data.bufferViews[
            n.extensions.KHR_draco_mesh_compression.bufferView
          ];
        const r = a.byteLength;
        const o = new Int8Array(r);
        let t = a.byteOffset || 0;
        for (let e = 0; e < r; e++) {
          o[e] = i.chunks[1].dataView.getInt8(t, y);
          t++;
        }
        const l = window.DracoDecoder;
        l.decodeGeometry(
          o.buffer,
          (t) => {
            const n = new CGL.Geometry("draco mesh " + e);
            for (let e = 0; e < t.attributes.length; e++) {
              const a = t.attributes[e];
              if (a.name === "position") n.vertices = a.array;
              else if (a.name === "normal") n.vertexNormals = a.array;
              else if (a.name === "uv") n.texCoords = a.array;
              else if (a.name === "color")
                n.vertexColors = this.calcVertexColors(a.array);
              else if (a.name === "joints")
                n.setAttribute("attrJoints", Array.from(a.array), 4);
              else if (a.name === "weights") {
                const r = new Float32Array((a.array.length / a.itemSize) * 4);
                for (let t = 0; t < a.array.length / a.itemSize; t++) {
                  r[t * 4] = r[t * 4 + 1] = r[t * 4 + 2] = r[t * 4 + 3] = 0;
                  for (let e = 0; e < a.itemSize; e++)
                    r[t * 4 + e] = a.array[t * a.itemSize + e];
                }
                n.setAttribute("attrWeights", r, 4);
              } else A.logWarn("unknown draco attrib", a);
            }
            t.attributes = null;
            n.verticesIndices = t.index.array;
            this.setGeom(n);
            this.mesh = null;
            i.loadingMeshes--;
            i.timing.push([
              "draco decode",
              Math.round(performance.now() - i.startTime),
            ]);
            if (s) s(this);
          },
          (e) => {
            A.logError(e);
          },
        );
      } else {
        i.loadingMeshes--;
        this.fillGeomAttribs(i, this.geom, n.attributes);
        if (n.targets) {
          for (let e = 0; e < n.targets.length; e++) {
            const t = new CGL.Geometry("gltf_target_" + e);
            this.fillGeomAttribs(i, t, n.targets[e], false);
            this.geom.morphTargets.push(t);
          }
        }
        if (s) s(this);
      }
    }
    _linearToSrgb(e) {
      if (e <= 0) return 0;
      else if (e >= 1) return 1;
      else if (e < 0.0031308) return e * 12.92;
      else return e ** (1 / 2.2) * 1.055 - 0.055;
    }
    calcVertexColors(n) {
      let a = null;
      if (n instanceof Float32Array) {
        let t = false;
        for (let e = 0; e < n.length; e++) {
          if (n[e] > 1) {
            t = true;
            continue;
          }
        }
        if (t) for (let e = 0; e < n.length; e++) n[e] /= 65535;
        a = n;
      } else if (n instanceof Uint16Array) {
        const t = new Float32Array(n.length);
        for (let e = 0; e < n.length; e++) t[e] = n[e] / 65535;
        a = t;
      } else a = n;
      for (let e = 0; e < a.length; e++) {
        a[e] = this._linearToSrgb(a[e]);
      }
      return a;
    }
    fillGeomAttribs(e, t, n, a) {
      if (n.hasOwnProperty("POSITION")) t.vertices = e.accBuffers[n.POSITION];
      if (n.hasOwnProperty("NORMAL")) t.vertexNormals = e.accBuffers[n.NORMAL];
      if (n.hasOwnProperty("TANGENT")) t.tangents = e.accBuffers[n.TANGENT];
      if (n.hasOwnProperty("COLOR_0"))
        t.vertexColors = this.calcVertexColors(e.accBuffers[n.COLOR_0]);
      if (n.hasOwnProperty("COLOR_1"))
        t.setAttribute(
          "attrVertColor1",
          this.calcVertexColors(e.accBuffers[n.COLOR_1]),
          4,
        );
      if (n.hasOwnProperty("COLOR_2"))
        t.setAttribute(
          "attrVertColor2",
          this.calcVertexColors(e.accBuffers[n.COLOR_2]),
          4,
        );
      if (n.hasOwnProperty("COLOR_3"))
        t.setAttribute(
          "attrVertColor3",
          this.calcVertexColors(e.accBuffers[n.COLOR_3]),
          4,
        );
      if (n.hasOwnProperty("COLOR_4"))
        t.setAttribute(
          "attrVertColor4",
          this.calcVertexColors(e.accBuffers[n.COLOR_4]),
          4,
        );
      if (n.hasOwnProperty("TEXCOORD_0"))
        t.texCoords = e.accBuffers[n.TEXCOORD_0];
      if (n.hasOwnProperty("TEXCOORD_1"))
        t.setAttribute("attrTexCoord1", e.accBuffers[n.TEXCOORD_1], 2);
      if (n.hasOwnProperty("TEXCOORD_2"))
        t.setAttribute("attrTexCoord2", e.accBuffers[n.TEXCOORD_2], 2);
      if (n.hasOwnProperty("TEXCOORD_3"))
        t.setAttribute("attrTexCoord3", e.accBuffers[n.TEXCOORD_3], 2);
      if (n.hasOwnProperty("TEXCOORD_4"))
        t.setAttribute("attrTexCoord4", e.accBuffers[n.TEXCOORD_4], 2);
      if (n.hasOwnProperty("WEIGHTS_0")) {
        t.setAttribute("attrWeights", e.accBuffers[n.WEIGHTS_0], 4);
      }
      if (n.hasOwnProperty("JOINTS_0")) {
        if (!e.accBuffers[n.JOINTS_0])
          console.log("no !gltf.accBuffers[attribs.JOINTS_0]");
        t.setAttribute("attrJoints", e.accBuffers[n.JOINTS_0], 4);
      }
      if (n.hasOwnProperty("POSITION")) e.accBuffersDelete.push(n.POSITION);
      if (n.hasOwnProperty("NORMAL")) e.accBuffersDelete.push(n.NORMAL);
      if (n.hasOwnProperty("TEXCOORD_0")) e.accBuffersDelete.push(n.TEXCOORD_0);
      if (n.hasOwnProperty("TANGENT")) e.accBuffersDelete.push(n.TANGENT);
      if (n.hasOwnProperty("COLOR_0")) e.accBuffersDelete.push(n.COLOR_0);
      if (n.hasOwnProperty("COLOR_0")) e.accBuffersDelete.push(n.COLOR_0);
      if (n.hasOwnProperty("COLOR_1")) e.accBuffersDelete.push(n.COLOR_1);
      if (n.hasOwnProperty("COLOR_2")) e.accBuffersDelete.push(n.COLOR_2);
      if (n.hasOwnProperty("COLOR_3")) e.accBuffersDelete.push(n.COLOR_3);
      if (n.hasOwnProperty("TEXCOORD_1")) e.accBuffersDelete.push(n.TEXCOORD_1);
      if (n.hasOwnProperty("TEXCOORD_2")) e.accBuffersDelete.push(n.TEXCOORD_2);
      if (n.hasOwnProperty("TEXCOORD_3")) e.accBuffersDelete.push(n.TEXCOORD_3);
      if (n.hasOwnProperty("TEXCOORD_4")) e.accBuffersDelete.push(n.TEXCOORD_4);
      if (a !== false) if (t && t.verticesIndices) this.setGeom(t);
    }
    setGeom(n) {
      if (te.get() == "X-ZY") {
        for (let t = 0; t < n.vertexNormals.length; t += 3) {
          let e = n.vertexNormals[t + 2];
          n.vertexNormals[t + 2] = n.vertexNormals[t + 1];
          n.vertexNormals[t + 1] = -e;
        }
      }
      if (ne.get() == "XZ-Y") {
        for (let t = 0; t < n.vertices.length; t += 3) {
          let e = n.vertices[t + 2];
          n.vertices[t + 2] = -n.vertices[t + 1];
          n.vertices[t + 1] = e;
        }
      }
      if (this.primitive == this.TRIANGLES) {
        if (h.get() == "Force Smooth") n.calculateNormals();
        else if (!n.vertexNormals.length && h.get() == "Auto")
          n.calculateNormals({ smooth: false });
        if ((!n.biTangents || n.biTangents.length == 0) && n.tangents) {
          const t = vec3.create();
          const e = vec3.create();
          const a = n.tangents;
          n.tangents = new Float32Array((a.length / 4) * 3);
          n.biTangents = new Float32Array((a.length / 4) * 3);
          for (let e = 0; e < a.length; e += 4) {
            const r = (e / 4) * 3;
            vec3.cross(
              t,
              [
                n.vertexNormals[r],
                n.vertexNormals[r + 1],
                n.vertexNormals[r + 2],
              ],
              [a[e], a[e + 1], a[e + 2]],
            );
            vec3.div(t, t, [a[e + 3], a[e + 3], a[e + 3]]);
            vec3.normalize(t, t);
            n.biTangents[r + 0] = t[0];
            n.biTangents[r + 1] = t[1];
            n.biTangents[r + 2] = t[2];
            n.tangents[r + 0] = a[e + 0];
            n.tangents[r + 1] = a[e + 1];
            n.tangents[r + 2] = a[e + 2];
          }
        }
        if (n.tangents.length === 0 || h.get() != "Never") {
          n.calcTangentsBitangents();
        }
      }
      this.geom = n;
      this.bounds = n.getBounds();
    }
    render(n, t, a) {
      if (!this.mesh && this.geom && this.geom.verticesIndices) {
        let e = this.geom;
        if (this.geom.vertices.length / 3 > 64e3) {
          e = this.geom.copy();
          e.unIndex(false, true);
        }
        let t;
        if (this.primitive == this.TRIANGLES) t = n.gl.TRIANGLES;
        else if (this.primitive == this.LINES) t = n.gl.LINES;
        else if (this.primitive == this.LINE_STRIP) t = n.gl.LINE_STRIP;
        else if (this.primitive == this.POINTS) t = n.gl.POINTS;
        else {
          A.logWarn("unknown primitive type", this);
        }
        this.mesh = A.patch.cg.createMesh(e, t);
      } else {
        if (
          this.geom &&
          this.geom.morphTargets.length &&
          !this.morphTargetsRenderMod
        ) {
          this.mesh.addVertexNumbers = true;
          this.morphTargetsRenderMod = new Z(this);
        }
        let e = !t && this.material != -1 && C.shaders[this.material];
        if (a) e = false;
        if (e) n.pushShader(C.shaders[this.material]);
        const r = n.getShader() || {};
        const i = r.uniformColorDiffuse;
        const s = r.uniformPbrMetalness;
        const o = r.uniformPbrRoughness;
        if (!C.shaders[this.material] && re.get()) {
          if (i && this._matDiffuseColor) {
            this._matDiffuseColorOrig = [
              i.getValue()[0],
              i.getValue()[1],
              i.getValue()[2],
              i.getValue()[3],
            ];
            i.setValue(this._matDiffuseColor);
          }
          if (s)
            if (this._matPbrMetalness != null) {
              this._matPbrMetalnessOrig = s.getValue();
              s.setValue(this._matPbrMetalness);
            } else s.setValue(0);
          if (o)
            if (this._matPbrRoughness != null) {
              this._matPbrRoughnessOrig = o.getValue();
              o.setValue(this._matPbrRoughness);
            } else {
              o.setValue(0);
            }
        }
        if (this.morphTargetsRenderMod)
          this.morphTargetsRenderMod.renderStart(n, 0);
        if (this.mesh) {
          this.mesh.render(n.getShader(), t);
        }
        if (this.morphTargetsRenderMod)
          this.morphTargetsRenderMod.renderFinish(n);
        if (re.get()) {
          if (i && this._matDiffuseColor) i.setValue(this._matDiffuseColorOrig);
          if (s && this._matPbrMetalnessOrig != undefined)
            s.setValue(this._matPbrMetalnessOrig);
          if (o && this._matPbrRoughnessOrig != undefined)
            o.setValue(this._matPbrRoughnessOrig);
        }
        if (e) n.popShader();
      }
    }
  };
  const z = class {
    constructor(t, n) {
      this.bounds = new CABLES.CG.BoundingBox();
      this.meshes = [];
      this.name = n.name;
      const a = n.primitives;
      for (let e = 0; e < a.length; e++) {
        const r = new F(this.name, a[e], t, (e) => {
          e.extras = n.extras;
          this.bounds.apply(e.bounds);
        });
        r.submeshIndex = e;
        this.meshes.push(r);
      }
    }
    render(t, n, a, r, i) {
      for (let e = 0; e < this.meshes.length; e++) {
        const s = C.shaders[this.meshes[e].material];
        if (!n && s) t.pushShader(C.shaders[this.meshes[e].material]);
        if (a) a.renderStart(t, r);
        if (i) this.meshes[e].weights = i;
        this.meshes[e].render(t, n, a, r);
        if (a) a.renderFinish(t);
        if (!n && s) t.popShader();
      }
    }
  };
  const X = class {
    constructor(e, t) {
      this.isChild = e.isChild || false;
      this.name = e.name;
      if (e.hasOwnProperty("camera")) this.camera = e.camera;
      this.hidden = false;
      this.mat = mat4.create();
      this._animActions = {};
      this.animWeights = [];
      this._animMat = mat4.create();
      this._tempMat = mat4.create();
      this._tempQuat = quat.create();
      this._tempRotmat = mat4.create();
      this.mesh = null;
      this.children = [];
      this._node = e;
      this._gltf = t;
      this.absMat = mat4.create();
      this.addTranslate = null;
      this._tempAnimScale = null;
      this.addMulMat = null;
      this.updateMatrix();
      this.skinRenderer = null;
      this.copies = [];
    }
    get skin() {
      if (this._node.hasOwnProperty("skin")) return this._node.skin;
      else return -1;
    }
    copy() {
      this.isCopy = true;
      const e = new X(this._node, this._gltf);
      e.copyOf = this;
      e._animActions = this._animActions;
      e.children = this.children;
      if (this.skin) e.skinRenderer = new W(this);
      this.updateMatrix();
      return e;
    }
    hasSkin() {
      if (this._node.hasOwnProperty("skin"))
        return this._gltf.json.skins[this._node.skin].name || "unknown";
      return false;
    }
    initSkin() {
      if (this.skin > -1) {
        this.skinRenderer = new W(this);
      }
    }
    updateMatrix() {
      mat4.identity(this.mat);
      if (this._node.translation)
        mat4.translate(this.mat, this.mat, this._node.translation);
      if (this._node.rotation) {
        const e = mat4.create();
        this._rot = this._node.rotation;
        mat4.fromQuat(e, this._node.rotation);
        mat4.mul(this.mat, this.mat, e);
      }
      if (this._node.scale) {
        this._scale = this._node.scale;
        mat4.scale(this.mat, this.mat, this._scale);
      }
      if (this._node.hasOwnProperty("mesh")) {
        this.mesh = this._gltf.meshes[this._node.mesh];
        if (this.isCopy) {
        }
      }
      if (this._node.children) {
        for (let e = 0; e < this._node.children.length; e++) {
          this._gltf.json.nodes[e].isChild = true;
          if (this._gltf.nodes[this._node.children[e]])
            this._gltf.nodes[this._node.children[e]].isChild = true;
          this.children.push(this._node.children[e]);
        }
      }
    }
    unHide() {
      this.hidden = false;
      for (let e = 0; e < this.children.length; e++)
        if (this.children[e].unHide) this.children[e].unHide();
    }
    calcBounds(t, e, n) {
      const a = mat4.create();
      if (e) mat4.copy(a, e);
      if (this.mat) mat4.mul(a, a, this.mat);
      if (this.mesh) {
        const r = this.mesh.bounds.copy();
        r.mulMat4(a);
        n.apply(r);
        if (n.changed) {
          v.push(
            r._min[0] || 0,
            r._min[1] || 0,
            r._min[2] || 0,
            r._max[0] || 0,
            r._max[1] || 0,
            r._max[2] || 0,
          );
        }
      }
      for (let e = 0; e < this.children.length; e++) {
        if (t.nodes[this.children[e]] && t.nodes[this.children[e]].calcBounds) {
          const i = t.nodes[this.children[e]].calcBounds(t, a, n);
          n.apply(i);
        }
      }
      if (n.changed) return n;
      else return null;
    }
    setAnimAction(t) {
      if (!t) return;
      this._currentAnimaction = t;
      if (t && !this._animActions[t]) {
        return null;
      }
      for (let e in this._animActions[t]) {
        if (e == "translation") this._animTrans = this._animActions[t][e];
        else if (e == "rotation") this._animRot = this._animActions[t][e];
        else if (e == "scale") this._animScale = this._animActions[t][e];
        else if (e == "weights") this.animWeights = this._animActions[t][e];
        else
          console.log(
            "[gltfNode] unknown anim path",
            e,
            this._animActions[t][e],
          );
      }
    }
    setAnim(e, t, n) {
      if (!e || !t || !n) return;
      this._animActions[t] = this._animActions[t] || {};
      if (this._animActions[t][e])
        A.log(
          "[gltfNode] animation action path already exists",
          t,
          e,
          this._animActions[t][e],
        );
      this._animActions[t][e] = n;
      if (e == "translation") this._animTrans = n;
      else if (e == "rotation") this._animRot = n;
      else if (e == "scale") this._animScale = n;
      else if (e == "weights") {
        this.animWeights = this._animActions[t][e];
      } else console.warn("unknown anim path", e, n);
    }
    modelMatLocal() {
      return this._animMat || this.mat;
    }
    modelMatAbs() {
      return this.absMat;
    }
    transform(e, n) {
      if (!n && n != 0) n = j;
      this._lastTimeTrans = n;
      ve++;
      if (!this._animTrans && !this._animRot && !this._animScale) {
        mat4.mul(e.mMatrix, e.mMatrix, this.mat);
        this._animMat = null;
      } else {
        this._animMat = this._animMat || mat4.create();
        mat4.identity(this._animMat);
        const t = true;
        if (t && this._animTrans) {
          mat4.translate(this._animMat, this._animMat, [
            this._animTrans[0].getValue(n),
            this._animTrans[1].getValue(n),
            this._animTrans[2].getValue(n),
          ]);
        } else if (this._node.translation)
          mat4.translate(this._animMat, this._animMat, this._node.translation);
        if (t && this._animRot) {
          if (this._animRot[0].defaultEasing == CABLES.EASING_LINEAR)
            CABLES.Anim.slerpQuaternion(
              n,
              this._tempQuat,
              this._animRot[0],
              this._animRot[1],
              this._animRot[2],
              this._animRot[3],
            );
          else if (this._animRot[0].defaultEasing == CABLES.EASING_ABSOLUTE) {
            this._tempQuat[0] = this._animRot[0].getValue(n);
            this._tempQuat[1] = this._animRot[1].getValue(n);
            this._tempQuat[2] = this._animRot[2].getValue(n);
            this._tempQuat[3] = this._animRot[3].getValue(n);
          } else if (
            this._animRot[0].defaultEasing == CABLES.EASING_CUBICSPLINE
          ) {
            CABLES.Anim.slerpQuaternion(
              n,
              this._tempQuat,
              this._animRot[0],
              this._animRot[1],
              this._animRot[2],
              this._animRot[3],
            );
          }
          mat4.fromQuat(this._tempMat, this._tempQuat);
          mat4.mul(this._animMat, this._animMat, this._tempMat);
        } else if (this._rot) {
          mat4.fromQuat(this._tempRotmat, this._rot);
          mat4.mul(this._animMat, this._animMat, this._tempRotmat);
        }
        if (t && this._animScale) {
          if (!this._tempAnimScale) this._tempAnimScale = [1, 1, 1];
          this._tempAnimScale[0] = this._animScale[0].getValue(n);
          this._tempAnimScale[1] = this._animScale[1].getValue(n);
          this._tempAnimScale[2] = this._animScale[2].getValue(n);
          mat4.scale(this._animMat, this._animMat, this._tempAnimScale);
        } else if (this._scale)
          mat4.scale(this._animMat, this._animMat, this._scale);
        mat4.mul(e.mMatrix, e.mMatrix, this._animMat);
      }
      if (this.animWeights) {
        this.weights = this.weights || [];
        let t = "";
        for (let e = 0; e < this.animWeights.length; e++) {
          this.weights[e] = this.animWeights[e].getValue(n);
          t += this.weights[e] + "/";
        }
      }
      if (this.addTranslate)
        mat4.translate(e.mMatrix, e.mMatrix, this.addTranslate);
      if (this.addMulMat) mat4.mul(e.mMatrix, e.mMatrix, this.addMulMat);
      mat4.copy(this.absMat, e.mMatrix);
    }
    render(t, n, a, r, i, s, o) {
      if (!n) t.pushModelMatrix();
      if (o === undefined) o = C.time;
      if (!n || this.skinRenderer) this.transform(t, o);
      if (this.hidden && !s) {
      } else {
        if (this.skinRenderer) {
          this.skinRenderer.time = o;
          if (!a) this.mesh.render(t, r, this.skinRenderer, o, this.weights);
        } else {
          if (this.mesh && !a) this.mesh.render(t, r, null, o, this.weights);
        }
      }
      if (!i && !this.hidden)
        for (let e = 0; e < this.children.length; e++)
          if (C.nodes[this.children[e]])
            C.nodes[this.children[e]].render(t, n, a, r, i, s, o);
      if (!n) t.popModelMatrix();
    }
  };
  let _ = null;
  function T() {
    if (_) gui.mainTabs.closeTab(_.id);
    _ = null;
  }
  function o(t) {
    const n = [];
    for (let e = 0; e < t.length; e++) {
      n.push(Math.round(t[e] * 1e3) / 1e3);
    }
    return n.join(",");
  }
  function q(n, a, r) {
    if (!C) return;
    n += '<tr class="row">';
    let i = "";
    let s = "";
    for (let t = 1; t < r; t++) {
      s += "&nbsp;&nbsp;&nbsp;";
      let e = "identBg";
      if (t == 1) e = "identBgLevel0";
      i += '<td class="ident ' + e + '" ><div style=""></div></td>';
    }
    let e = CABLES.uuid();
    n += i;
    n += '<td colspan="' + (21 - r) + '">';
    if (a.mesh && a.mesh.meshes.length)
      n += '<span class="icon icon-cube"></span>&nbsp;';
    else n += '<span class="icon icon-box-select"></span> &nbsp;';
    n += a.name + "</td><td></td>";
    if (a.mesh) {
      n += "<td>";
      for (let e = 0; e < a.mesh.meshes.length; e++) {
        if (e > 0) n += ", ";
        n += a.mesh.meshes[e].name;
      }
      n += "</td>";
      n += "<td>";
      n += a.hasSkin() || "-";
      n += "</td>";
      n += "<td>";
      let t = 0;
      for (let e = 0; e < a.mesh.meshes.length; e++) {
        if (t > 0) n += ", ";
        if (C.json.materials && a.mesh.meshes[e].hasOwnProperty("material")) {
          if (C.json.materials[a.mesh.meshes[e].material]) {
            n += C.json.materials[a.mesh.meshes[e].material].name;
            t++;
          }
        }
      }
      if (t == 0) n += "none";
      n += "</td>";
    } else {
      n += "<td>-</td><td>-</td><td>-</td>";
    }
    n += "<td>";
    if (a._node.translation || a._node.rotation || a._node.scale) {
      let e = "";
      if (a._node.translation)
        e += "Translate: `" + o(a._node.translation) + "` || ";
      if (a._node.rotation) e += "Rotation: `" + o(a._node.rotation) + "` || ";
      if (a._node.scale) e += "Scale: `" + o(a._node.scale) + "` || ";
      n +=
        '<span class="icon icon-gizmo info" data-info="' +
        e +
        '"></span> &nbsp;';
    }
    if (a._animRot || a._animScale || a._animTrans) {
      let e = "Animated: ";
      if (a._animRot) e += "Rot ";
      if (a._animScale) e += "Scale ";
      if (a._animTrans) e += "Trans ";
      n +=
        '<span class="icon icon-clock info" data-info="' +
        e +
        '"></span>&nbsp;';
    }
    if (
      !a._node.translation &&
      !a._node.rotation &&
      !a._node.scale &&
      !a._animRot &&
      !a._animScale &&
      !a._animTrans
    )
      n += "-";
    n += "</td>";
    n += "<td>";
    let t = "";
    if (a.hidden) t = "node-hidden";
    n +=
      "<a onclick=\"gui.corePatch().getOpById('" +
      A.id +
      "').exposeNode('" +
      a.name +
      "','transform')\" class=\"treebutton\">Transform</a>";
    n +=
      " <a onclick=\"gui.corePatch().getOpById('" +
      A.id +
      "').exposeNode('" +
      a.name +
      "','hierarchy')\" class=\"treebutton\">Hierarchy</a>";
    n +=
      " <a onclick=\"gui.corePatch().getOpById('" +
      A.id +
      "').exposeNode('" +
      a.name +
      '\')" class="treebutton">Node</a>';
    if (a.hasSkin())
      n +=
        " <a onclick=\"gui.corePatch().getOpById('" +
        A.id +
        "').exposeNode('" +
        a.name +
        '\',false,{skin:true});" class="treebutton">Skin</a>';
    n += "</td><td>";
    n +=
      '&nbsp;<span class="icon iconhover icon-eye ' +
      t +
      '" onclick="gui.corePatch().getOpById(\'' +
      A.id +
      "').toggleNodeVisibility('" +
      a.name +
      "');this.classList.toggle('node-hidden');\"></span>";
    n += "</td>";
    n += "</tr>";
    if (a.children) {
      for (let e = 0; e < a.children.length; e++)
        n = q(n, C.nodes[a.children[e]], r + 1);
    }
    return n;
  }
  function H(t, e) {
    let n = "<tr>";
    n += " <td>" + e + "</td>";
    n += " <td>" + t.name + "</td>";
    n += " <td>";
    const a = JSON.stringify(t, null, 4)
      .replaceAll('"', "")
      .replaceAll("\n", "<br/>");
    n +=
      "<span class=\"icon icon-info\" onclick=\"new CABLES.UI.ModalDialog({ 'html': '<pre>" +
      a +
      "</pre>', 'title': '" +
      t.name +
      "' });\"></span>&nbsp;";
    if (t.pbrMetallicRoughness && t.pbrMetallicRoughness.baseColorFactor) {
      let e = "";
      e += "" + Math.round(t.pbrMetallicRoughness.baseColorFactor[0] * 255);
      e += "," + Math.round(t.pbrMetallicRoughness.baseColorFactor[1] * 255);
      e += "," + Math.round(t.pbrMetallicRoughness.baseColorFactor[2] * 255);
      n +=
        '<div style="width:15px;height:15px;background-color:rgb(' +
        e +
        ');display:inline-block">&nbsp;</a>';
    }
    n +=
      ' <td style="">' +
      (C.shaders[e]
        ? "-"
        : "<a onclick=\"gui.corePatch().getOpById('" +
          A.id +
          "').assignMaterial('" +
          t.name +
          '\')" class="treebutton">Assign</a>') +
      "<td>";
    n += "<td>";
    n += "</tr>";
    return n;
  }
  function e() {
    if (!C) return;
    const e = performance.now();
    const i = {};
    let s = '<div style="overflow:scroll;width:100%;height:100%">';
    s +=
      'File: <a href="' +
      CABLES.sandbox.getCablesUrl() +
      "/asset/patches/?filename=" +
      S.get() +
      '" target="_blank">' +
      CABLES.basename(S.get()) +
      "</a><br/>";
    s += "Generator:" + C.json.asset.generator;
    let t = 0;
    if (C.json.nodes) t = C.json.nodes.length;
    s += '<div id="groupNodes">Nodes (' + t + ")</div>";
    s += '<table id="sectionNodes" class="table treetable">';
    s += "<tr>";
    s += ' <th colspan="21">Name</th>';
    s += " <th>Mesh</th>";
    s += " <th>Skin</th>";
    s += " <th>Material</th>";
    s += " <th>Transform</th>";
    s += " <th>Expose</th>";
    s += " <th></th>";
    s += "</tr>";
    for (let e = 0; e < C.nodes.length; e++) {
      if (!C.nodes[e].isChild) s = q(s, C.nodes[e], 1);
    }
    s += "</table>";
    let n = 0;
    if (C.json.materials) n = C.json.materials.length;
    s += '<div id="groupMaterials">Materials (' + n + ")</div>";
    if (!C.json.materials || C.json.materials.length == 0) {
    } else {
      s += '<table id="materialtable"  class="table treetable">';
      s += "<tr>";
      s += " <th>Index</th>";
      s += " <th>Name</th>";
      s += " <th>Color</th>";
      s += " <th>Function</th>";
      s += " <th></th>";
      s += "</tr>";
      for (let e = 0; e < C.json.materials.length; e++) {
        s += H(C.json.materials[e], e);
      }
      s += "</table>";
    }
    s += '<div id="groupMeshes">Meshes (' + C.json.meshes.length + ")</div>";
    s += '<table id="meshestable"  class="table treetable">';
    s += "<tr>";
    s += " <th>Name</th>";
    s += " <th>Node</th>";
    s += " <th>Material</th>";
    s += " <th>Vertices</th>";
    s += " <th>Attributes</th>";
    s += "</tr>";
    let o = [];
    i.meshes = 0;
    i.meshTargets = 0;
    for (let r = 0; r < C.json.meshes.length; r++) {
      s += "<tr>";
      s += "<td>" + C.json.meshes[r].name + "</td>";
      s += "<td>";
      let t = 0;
      let n = "";
      for (let e = 0; e < C.json.nodes.length; e++) {
        if (C.json.nodes[e].mesh == r) {
          t++;
          if (t == 1) {
            n = C.json.nodes[e].name;
          }
        }
      }
      if (t > 1) s += t + " nodes (" + n + " ...)";
      else s += n;
      s += "</td>";
      s += "<td>";
      for (let e = 0; e < C.json.meshes[r].primitives.length; e++) {
        if (C.json.meshes[r].primitives[e].hasOwnProperty("material")) {
          if (C.json.materials[C.json.meshes[r]]) {
            s +=
              C.json.materials[C.json.meshes[r].primitives[e].material].name +
              " ";
          }
        } else s += "None";
      }
      s += "</td>";
      s += "<td>";
      let a = 0;
      for (let t = 0; t < C.json.meshes[r].primitives.length; t++) {
        if (C.json.meshes[r].primitives[t].attributes.POSITION != undefined) {
          let e = parseInt(
            C.json.accessors[C.json.meshes[r].primitives[t].attributes.POSITION]
              .count,
          );
          a += e;
          s += "" + e + "<br/>";
        } else s += "-<br/>";
      }
      if (C.json.meshes[r].primitives.length > 1) s += "=" + a;
      s += "</td>";
      s += "<td>";
      for (let e = 0; e < C.json.meshes[r].primitives.length; e++) {
        s += Object.keys(C.json.meshes[r].primitives[e].attributes);
        s +=
          " <a onclick=\"gui.corePatch().getOpById('" +
          A.id +
          "').exposeGeom('" +
          C.json.meshes[r].name +
          "'," +
          e +
          ')" class="treebutton">Geometry</a>';
        s += "<br/>";
        if (C.json.meshes[r].primitives[e].targets) {
          s += C.json.meshes[r].primitives[e].targets.length + " targets<br/>";
          if (C.json.meshes[r].extras && C.json.meshes[r].extras.targetNames)
            s +=
              "Targetnames:<br/>" +
              C.json.meshes[r].extras.targetNames.join("<br/>");
          s += "<br/>";
        }
      }
      s += "</td>";
      s += "</tr>";
      for (let n = 0; n < C.json.meshes[r].primitives.length; n++) {
        const g = C.json.accessors[C.json.meshes[r].primitives[n].indices];
        if (g) {
          let e = g.bufferView;
          if (o.indexOf(e) == -1) {
            o.push(e);
            if (C.json.bufferViews[e])
              i.meshes += C.json.bufferViews[e].byteLength;
          }
        }
        for (let e in C.json.meshes[r].primitives[n].attributes) {
          const f = C.json.meshes[r].primitives[n].attributes[e];
          const d = C.json.accessors[f].bufferView;
          if (o.indexOf(d) == -1) {
            o.push(d);
            if (C.json.bufferViews[d])
              i.meshes += C.json.bufferViews[d].byteLength;
          }
        }
        if (C.json.meshes[r].primitives[n].targets)
          for (
            let t = 0;
            t < C.json.meshes[r].primitives[n].targets.length;
            t++
          ) {
            for (let e in C.json.meshes[r].primitives[n].targets[t]) {
              const b = C.json.meshes[r].primitives[n].targets[t][e];
              const g = C.json.accessors[b];
              const d = g.bufferView;
              console.log("accessor", g);
              if (o.indexOf(d) == -1)
                if (C.json.bufferViews[d]) {
                  o.push(d);
                  i.meshTargets += C.json.bufferViews[d].byteLength;
                }
            }
          }
      }
    }
    s += "</table>";
    let a = 0;
    let r = 0;
    let l = 0;
    if (C.json.animations) {
      r = C.json.animations.length;
      for (let e = 0; e < C.json.animations.length; e++) {
        a += C.json.animations[e].samplers.length;
      }
    }
    s += '<div id="groupAnims">Animations (' + r + "/" + a + ")</div>";
    if (C.json.animations) {
      s += '<table id="sectionAnim" class="table treetable">';
      s += "<tr>";
      s += "  <th>Name</th>";
      s += "  <th>Target node</th>";
      s += "  <th>Path</th>";
      s += "  <th>Interpolation</th>";
      s += "  <th>Keys</th>";
      s += "</tr>";
      i.animations = 0;
      for (let n = 0; n < C.json.animations.length; n++) {
        for (let t = 0; t < C.json.animations[n].samplers.length; t++) {
          let e =
            C.json.accessors[C.json.animations[n].samplers[t].input].bufferView;
          if (o.indexOf(e) == -1) {
            o.push(e);
            i.animations += C.json.bufferViews[e].byteLength;
          }
          e =
            C.json.accessors[C.json.animations[n].samplers[t].output]
              .bufferView;
          if (o.indexOf(e) == -1) {
            o.push(e);
            i.animations += C.json.bufferViews[e].byteLength;
          }
        }
        for (let e = 0; e < C.json.animations[n].channels.length; e++) {
          s += "<tr>";
          s += "  <td> Anim " + n + ": " + C.json.animations[n].name + "</td>";
          s +=
            "  <td>" +
            C.nodes[C.json.animations[n].channels[e].target.node].name +
            "</td>";
          s += "  <td>";
          s += C.json.animations[n].channels[e].target.path + " ";
          s += "  </td>";
          const v = C.json.animations[n].channels[e].sampler;
          const O = C.json.animations[n].samplers[v];
          s += "  <td>" + O.interpolation + "</td>";
          s += "  <td>" + C.json.accessors[O.output].count;
          l += C.json.accessors[O.output].count;
          s += "</td>";
          s += "</tr>";
        }
      }
      s += "<tr>";
      s += "  <td></td>";
      s += "  <td></td>";
      s += "  <td></td>";
      s += "  <td></td>";
      s += "  <td>" + l + " total</td>";
      s += "</tr>";
      s += "</table>";
    } else {
    }
    let u = 0;
    if (C.json.images) u = C.json.images.length;
    s += '<div id="groupImages">Images (' + u + ")</div>";
    if (C.json.images) {
      s += '<table id="sectionImages" class="table treetable">';
      s += "<tr>";
      s += "  <th>name</th>";
      s += "  <th>type</th>";
      s += "  <th>func</th>";
      s += "</tr>";
      i.images = 0;
      for (let t = 0; t < C.json.images.length; t++) {
        if (C.json.images[t].hasOwnProperty("bufferView")) {
          i.images +=
            C.json.bufferViews[C.json.images[t].bufferView].byteLength;
        } else console.log("image has no bufferview?!");
        s += "<tr>";
        s += "<td>" + C.json.images[t].name + "</td>";
        s += "<td>" + C.json.images[t].mimeType + "</td>";
        s += "<td>";
        let e = C.json.images[t].name;
        if (e === undefined) e = C.json.images[t].bufferView;
        s +=
          "<a onclick=\"gui.corePatch().getOpById('" +
          A.id +
          "').exposeTexture('" +
          e +
          '\')" class="treebutton">Expose</a>';
        s += "</td>";
        s += "<tr>";
      }
      s += "</table>";
    }
    let h = 0;
    if (C.json.cameras) h = C.json.cameras.length;
    s += '<div id="groupCameras">Cameras (' + h + ")</div>";
    if (C.json.cameras) {
      s += '<table id="sectionCameras" class="table treetable">';
      s += "<tr>";
      s += "  <th>name</th>";
      s += "  <th>type</th>";
      s += "  <th>info</th>";
      s += "</tr>";
      for (let e = 0; e < C.json.cameras.length; e++) {
        s += "<tr>";
        s += "<td>" + C.json.cameras[e].name + "</td>";
        s += "<td>" + C.json.cameras[e].type + "</td>";
        s += "<td>";
        if (C.json.cameras[e].perspective) {
          s +=
            "yfov: " +
            Math.round(C.json.cameras[e].perspective.yfov * 100) / 100;
          s += ", ";
          s +=
            "zfar: " +
            Math.round(C.json.cameras[e].perspective.zfar * 100) / 100;
          s += ", ";
          s +=
            "znear: " +
            Math.round(C.json.cameras[e].perspective.znear * 100) / 100;
        }
        s += "</td>";
        s += "<tr>";
      }
      s += "</table>";
    }
    let c = 0;
    if (C.json.skins) c = C.json.skins.length;
    s += '<div id="groupSkins">Skins (' + c + ")</div>";
    if (C.json.skins) {
      s += '<table id="sectionSkins" class="table treetable">';
      s += "<tr>";
      s += "  <th>name</th>";
      s += "  <th></th>";
      s += "  <th>total joints</th>";
      s += "</tr>";
      for (let e = 0; e < C.json.skins.length; e++) {
        s += "<tr>";
        s += "<td>" + C.json.skins[e].name + "</td>";
        s += "<td>" + "</td>";
        s += "<td>" + C.json.skins[e].joints.length + "</td>";
        s += "<td>";
        s += "</td>";
        s += "<tr>";
      }
      s += "</table>";
    }
    if (C.timing) {
      s += '<div id="groupTiming">Debug Loading Timing </div>';
      s += '<table id="sectionTiming" class="table treetable">';
      s += "<tr>";
      s += "  <th>task</th>";
      s += "  <th>time used</th>";
      s += "</tr>";
      let e = 0;
      for (let e = 0; e < C.timing.length - 1; e++) {
        s += "<tr>";
        s += "  <td>" + C.timing[e][0] + "</td>";
        s += "  <td>" + (C.timing[e + 1][1] - C.timing[e][1]) + " ms</td>";
        s += "</tr>";
      }
      s += "</table>";
    }
    let m = 0;
    if (C.json.buffers) m = C.json.buffers[0].byteLength;
    s +=
      '<div id="groupBinary">File Size Allocation (' +
      Math.round(m / 1024) +
      "k )</div>";
    s += '<table id="sectionBinary" class="table treetable">';
    s += "<tr>";
    s += "  <th>name</th>";
    s += "  <th>size</th>";
    s += "  <th>%</th>";
    s += "</tr>";
    let p = m;
    for (let e in i) {
      s += "<tr>";
      s += "<td>" + e + "</td>";
      s += "<td>" + Y(i[e]) + " </td>";
      s += "<td>" + Math.round((i[e] / m) * 100) + "% </td>";
      s += "<tr>";
      p -= i[e];
    }
    if (p != 0) {
      s += "<tr>";
      s += "<td>unknown</td>";
      s += "<td>" + Y(p) + " </td>";
      s += "<td>" + Math.round((p / m) * 100) + "% </td>";
      s += "<tr>";
    }
    s += "</table>";
    s += "</div>";
    _ = new CABLES.UI.Tab("GLTF " + CABLES.basename(S.get()), {
      icon: "cube",
      infotext: "tab_gltf",
      padding: true,
      singleton: true,
    });
    gui.mainTabs.addTab(_, true);
    _.addEventListener("close", T);
    _.html(s);
    CABLES.UI.Collapsable.setup(
      ele.byId("groupNodes"),
      ele.byId("sectionNodes"),
      false,
    );
    CABLES.UI.Collapsable.setup(
      ele.byId("groupMaterials"),
      ele.byId("materialtable"),
      true,
    );
    CABLES.UI.Collapsable.setup(
      ele.byId("groupAnims"),
      ele.byId("sectionAnim"),
      true,
    );
    CABLES.UI.Collapsable.setup(
      ele.byId("groupMeshes"),
      ele.byId("meshestable"),
      true,
    );
    CABLES.UI.Collapsable.setup(
      ele.byId("groupCameras"),
      ele.byId("sectionCameras"),
      true,
    );
    CABLES.UI.Collapsable.setup(
      ele.byId("groupImages"),
      ele.byId("sectionImages"),
      true,
    );
    CABLES.UI.Collapsable.setup(
      ele.byId("groupSkins"),
      ele.byId("sectionSkins"),
      true,
    );
    CABLES.UI.Collapsable.setup(
      ele.byId("groupBinary"),
      ele.byId("sectionBinary"),
      true,
    );
    CABLES.UI.Collapsable.setup(
      ele.byId("groupTiming"),
      ele.byId("sectionTiming"),
      true,
    );
    gui.maintabPanel.show(true);
  }
  function Y(e) {
    if (e > 1024) return Math.round(e / 1024) + " kb";
    if (e > 1024 * 500) return Math.round(e / 1024) + " mb";
    else return e + " bytes";
  }
  const W = class {
    constructor(e) {
      this._mod = null;
      this._node = e;
      this._lastTime = 0;
      this._matArr = [];
      this._m = mat4.create();
      this._invBindMatrix = mat4.create();
      this.identity = true;
    }
    renderFinish(e) {
      e.popModelMatrix();
      this._mod.unbind();
    }
    renderStart(e, t) {
      if (!this._mod) {
        this._mod = new CGL.ShaderModifier(e, A.name + this._node.name);
        this._mod.addModule({
          priority: -2,
          name: "MODULE_VERTEX_POSITION",
          srcHeadVert: l.skin_head_vert || "",
          srcBodyVert: l.skin_vert || "",
        });
        this._mod.addUniformVert("m4[]", "MOD_boneMats", []);
        const r = vec3.create();
      }
      const n = this._node.skin;
      const a = C.json.skins[n].joints.length * 16;
      {
        if (this._matArr.length != a) this._matArr.length = a;
        for (let e = 0; e < C.json.skins[n].joints.length; e++) {
          const i = e * 16;
          const s = C.json.skins[n].joints[e];
          const o = C.nodes[s];
          for (let e = 0; e < 16; e++)
            this._invBindMatrix[e] =
              C.accBuffers[C.json.skins[n].inverseBindMatrices][i + e];
          mat4.mul(this._m, o.modelMatAbs(), this._invBindMatrix);
          for (let e = 0; e < this._m.length; e++)
            this._matArr[i + e] = this._m[e];
        }
        this._mod.setUniformValue("MOD_boneMats", this._matArr);
        this._lastTime = t;
      }
      this._mod.define("SKIN_NUM_BONES", C.json.skins[n].joints.length);
      this._mod.bind();
      e.pushModelMatrix();
      if (this.identity) mat4.identity(e.mMatrix);
    }
  };
  const Z = class {
    constructor(e) {
      this.mesh = e;
      this.tex = null;
      this.numRowsPerTarget = 0;
      this.makeTex(e.geom);
    }
    renderFinish(e) {
      e.popModelMatrix();
      this._mod.unbind();
    }
    renderStart(e, t) {
      if (!this._mod) {
        this._mod = new CGL.ShaderModifier(e, "gltftarget");
        this._mod.addModule({
          priority: -2,
          name: "MODULE_VERTEX_POSITION",
          srcHeadVert: l.targets_head_vert || "",
          srcBodyVert: l.targets_vert || "",
        });
        this._mod.addUniformVert("4f", "MOD_targetTexInfo", [0, 0, 0, 0]);
        this._mod.addUniformVert("t", "MOD_targetTex", 1);
        this._mod.addUniformVert("f[]", "MOD_weights", []);
        const n = vec3.create();
      }
      this._mod.pushTexture("MOD_targetTex", this.tex);
      if (this.tex && this.mesh.weights) {
        this._mod.setUniformValue("MOD_weights", this.mesh.weights);
        this._mod.setUniformValue("MOD_targetTexInfo", [
          this.tex.width,
          this.tex.height,
          this.numRowsPerTarget,
          this.mesh.weights.length,
        ]);
        this._mod.define(
          "MOD_NUM_WEIGHTS",
          Math.max(1, this.mesh.weights.length),
        );
      } else {
        this._mod.define("MOD_NUM_WEIGHTS", 1);
      }
      this._mod.bind();
      e.pushModelMatrix();
      if (this.identity) mat4.identity(e.mMatrix);
    }
    makeTex(n) {
      if (!n.morphTargets || !n.morphTargets.length) return;
      let a = n.morphTargets[0].vertices.length / 3;
      let e = 0;
      this.numRowsPerTarget = 0;
      if (n.morphTargets[0].vertices && n.morphTargets[0].vertices.length)
        this.numRowsPerTarget++;
      if (
        n.morphTargets[0].vertexNormals &&
        n.morphTargets[0].vertexNormals.length
      )
        this.numRowsPerTarget++;
      if (n.morphTargets[0].tangents && n.morphTargets[0].tangents.length)
        this.numRowsPerTarget++;
      if (n.morphTargets[0].bitangents && n.morphTargets[0].bitangents.length)
        this.numRowsPerTarget++;
      e = n.morphTargets.length * this.numRowsPerTarget;
      const r = new Float32Array(a * e * 4);
      let i = 0;
      for (let t = 0; t < n.morphTargets.length; t++) {
        if (n.morphTargets[t].vertices && n.morphTargets[t].vertices.length) {
          for (let e = 0; e < n.morphTargets[t].vertices.length; e += 3) {
            r[(i * a + e / 3) * 4 + 0] = n.morphTargets[t].vertices[e + 0];
            r[(i * a + e / 3) * 4 + 1] = n.morphTargets[t].vertices[e + 1];
            r[(i * a + e / 3) * 4 + 2] = n.morphTargets[t].vertices[e + 2];
            r[(i * a + e / 3) * 4 + 3] = 1;
          }
          i++;
        }
        if (
          n.morphTargets[t].vertexNormals &&
          n.morphTargets[t].vertexNormals.length
        ) {
          for (let e = 0; e < n.morphTargets[t].vertexNormals.length; e += 3) {
            r[(i * a + e / 3) * 4 + 0] = n.morphTargets[t].vertexNormals[e + 0];
            r[(i * a + e / 3) * 4 + 1] = n.morphTargets[t].vertexNormals[e + 1];
            r[(i * a + e / 3) * 4 + 2] = n.morphTargets[t].vertexNormals[e + 2];
            r[(i * a + e / 3) * 4 + 3] = 1;
          }
          i++;
        }
        if (n.morphTargets[t].tangents && n.morphTargets[t].tangents.length) {
          for (let e = 0; e < n.morphTargets[t].tangents.length; e += 3) {
            r[(i * a + e / 3) * 4 + 0] = n.morphTargets[t].tangents[e + 0];
            r[(i * a + e / 3) * 4 + 1] = n.morphTargets[t].tangents[e + 1];
            r[(i * a + e / 3) * 4 + 2] = n.morphTargets[t].tangents[e + 2];
            r[(i * a + e / 3) * 4 + 3] = 1;
          }
          i++;
        }
        if (
          n.morphTargets[t].bitangents &&
          n.morphTargets[t].bitangents.length
        ) {
          for (let e = 0; e < n.morphTargets[t].bitangents.length; e += 3) {
            r[(i * a + e / 3) * 4 + 0] = n.morphTargets[t].bitangents[e + 0];
            r[(i * a + e / 3) * 4 + 1] = n.morphTargets[t].bitangents[e + 1];
            r[(i * a + e / 3) * 4 + 2] = n.morphTargets[t].bitangents[e + 2];
            r[(i * a + e / 3) * 4 + 3] = 1;
          }
          i++;
        }
      }
      this.tex = new CGL.Texture(g, {
        isFloatingPointTexture: true,
        name: "targetsTexture",
      });
      this.tex.initFromData(
        r,
        a,
        e,
        CGL.Texture.FILTER_LINEAR,
        CGL.Texture.WRAP_REPEAT,
      );
    }
  };
  const Q = A.inTrigger("Render"),
    t = A.inString("data"),
    S = A.inUrl("glb File", [".glb"]),
    K = A.inBool("Draw", true),
    n = A.inDropDown("Camera", ["None"], "None"),
    J = A.inString("Animation", ""),
    $ = A.inTriggerButton("Show Structure"),
    a = A.inSwitch("Center", ["None", "XYZ", "XZ"], "XYZ"),
    r = A.inBool("Rescale", true),
    i = A.inFloat("Rescale Size", 2.5),
    s = A.inFloat("Time"),
    u = A.inBool("Sync to timeline", false),
    ee = A.inBool("Loop", true),
    te = A.inSwitch("Normals Format", ["XYZ", "X-ZY"], "XYZ"),
    ne = A.inSwitch("Vertices Format", ["XYZ", "XZ-Y"], "XYZ"),
    h = A.inSwitch("Calc Normals", ["Auto", "Force Smooth", "Never"]),
    c = A.inObject("Materials"),
    ae = A.inArray("Hide Nodes"),
    re = A.inBool("Use Material Properties", true),
    m = A.inBool("Active", true),
    ie = A.outTrigger("Render Before"),
    p = A.outTrigger("Next"),
    se = A.outString("Generator"),
    oe = A.outNumber("GLTF Version"),
    le = A.outArray("GLTF Extensions Used"),
    ue = A.outNumber("Anim Length", 0),
    he = A.outNumber("Anim Time", 0),
    ce = A.outObject("Json"),
    me = A.outArray("Anims"),
    pe = A.outArray("BoundingPoints"),
    ge = A.outObject("Bounds"),
    fe = A.outTrigger("Finished"),
    de = A.outBool("Loading");
  A.setPortGroup("Timing", [s, u, ee]);
  const g = A.patch.cgl;
  let f = null;
  let be = false;
  let ve = 0;
  let d = false;
  let b = null;
  let v = [];
  let C = null;
  let O = 0;
  let j = 0;
  let N = true;
  let Oe = null;
  let E = null;
  let w = null;
  const _e = vec3.create();
  let Ae = 0;
  let ye = false;
  const M = vec3.create();
  S.onChange = ne.onChange = h.onChange = te.onChange = P;
  $.onTriggered = e;
  t.onChange = Ee;
  ae.onChange = V;
  J.onChange = Me;
  a.onChange = Ie;
  A.toWorkPortsNeedToBeLinked(Q);
  t.setUiAttribs({ hideParam: true, hidePort: true });
  A.setPortGroup("Transform", [r, i, a]);
  function xe() {
    const t = ["None"];
    if (C) {
      for (let e = 0; e < C.nodes.length; e++) {
        if (C.nodes[e].camera >= 0) {
          t.push(C.nodes[e].name);
        }
      }
    }
    n.uiAttribs.values = t;
  }
  function Ie() {
    ye = a.get() != "None";
    if (C && C.bounds) {
      M.set(C.bounds.center);
      M[0] = -M[0];
      M[1] = -M[1];
      M[2] = -M[2];
      if (a.get() == "XZ") M[1] = -C.bounds.minY;
    }
  }
  r.onChange = function () {
    i.setUiAttribs({ greyout: !r.get() });
  };
  c.onChange = function () {
    N = true;
  };
  A.onDelete = function () {
    T();
  };
  u.onChange = function () {
    s.setUiAttribs({ greyout: u.get() });
  };
  n.onChange = Te;
  function Te() {
    b = null;
    if (!C) return;
    for (let e = 0; e < C.nodes.length; e++) {
      if (C.nodes[e].name == n.get()) b = new k(C, C.nodes[e]);
    }
  }
  Q.onTriggered = function () {
    if (!d) return;
    if (!m.get()) return;
    if (be) {
      if (!f) f = CGL.MESHES.getSimpleCube(g, "ErrorCube");
      f.render(g.getShader());
    }
    ve = 0;
    if (u.get()) j = A.patch.timer.getTime();
    else j = Math.max(0, s.get());
    if (ee.get()) {
      j %= O;
      if (j < Ae) fe.trigger();
    } else {
      if (O > 0 && j >= O) fe.trigger();
    }
    Ae = j;
    g.pushModelMatrix();
    he.set(j || 0);
    if (d && C && C.bounds) {
      if (r.get()) {
        let e = i.get() / C.bounds.maxAxis;
        C.scale = e;
        vec3.set(_e, e, e, e);
        mat4.scale(g.mMatrix, g.mMatrix, _e);
      }
      if (ye) {
        mat4.translate(g.mMatrix, g.mMatrix, M);
      }
    }
    let e = g.frameStore.currentScene || null;
    g.frameStore.currentScene = C;
    ie.trigger();
    if (d) {
      if (N) je();
      if (b) b.start(j);
      if (C) {
        C.time = j;
        if (C.bounds && g.shouldDrawHelpers(A)) {
          if (CABLES.UI.renderHelper)
            g.pushShader(CABLES.GL_MARKER.getDefaultShader(g));
          else g.pushShader(CABLES.GL_MARKER.getSelectedShader(g));
          C.bounds.render(g);
          g.popShader();
        }
        if (K.get()) {
          for (let e = 0; e < C.nodes.length; e++)
            if (!C.nodes[e].isChild) C.nodes[e].render(g);
        } else {
          for (let e = 0; e < C.nodes.length; e++)
            if (!C.nodes[e].isChild) C.nodes[e].render(g, false, true);
        }
      }
    }
    p.trigger();
    g.frameStore.currentScene = e;
    g.popModelMatrix();
    if (b) b.end();
  };
  function Se() {
    if (!C) {
      d = true;
      be = true;
      g.patch.loading.finished(E);
      A.setUiError("nogltf", "GLTF File not found");
      return;
    }
    A.setUiError("nogltf", null);
    if (C.loadingMeshes > 0) {
      setTimeout(Se, 100);
      return;
    }
    C.timing.push([
      "finishLoading()",
      Math.round(performance.now() - C.startTime),
    ]);
    N = true;
    ue.set(O);
    C.bounds = new CABLES.CG.BoundingBox();
    C.timing.push([
      "start calc bounds",
      Math.round(performance.now() - C.startTime),
    ]);
    for (let e = 0; e < C.nodes.length; e++) {
      const t = C.nodes[e];
      t.updateMatrix();
      if (!t.isChild) t.calcBounds(C, null, C.bounds);
    }
    if (C.bounds) ge.set(C.bounds);
    C.timing.push([
      "calced bounds",
      Math.round(performance.now() - C.startTime),
    ]);
    V();
    C.timing.push([
      "hideNodesFromData",
      Math.round(performance.now() - C.startTime),
    ]);
    if (_) e();
    C.timing.push(["printinfo", Math.round(performance.now() - C.startTime)]);
    xe();
    Te();
    pe.set(v);
    if (C) {
      if (S.get() && !S.get().startsWith("data:")) {
        A.setUiAttrib({ extendTitle: CABLES.basename(S.get()) });
      }
      C.loaded = Date.now();
    }
    if (C) {
      for (let e = 0; e < C.nodes.length; e++) {
        if (!C.nodes[e].isChild) {
          C.nodes[e].render(g, false, true, true, false, true, 0);
        }
      }
      for (let e = 0; e < C.nodes.length; e++) {
        const t = C.nodes[e];
        t.children = Ve(t.children);
      }
    }
    Ie();
    Me();
    de.set(false);
    g.patch.loading.finished(E);
    E = null;
    if (C.accBuffersDelete) {
      for (let e = 0; e < C.accBuffersDelete.length; e++) {
        C.accBuffers[C.accBuffersDelete[e]] = null;
      }
    }
    if (!(C.json.images && C.json.images.length)) C.chunks = null;
    d = true;
  }
  function Ce(e) {
    if (!m.get()) return;
    if (!E) E = g.patch.loading.start("gltfScene", S.get(), A);
    let t = S.get();
    let n = A.patch.getFilePath(String(S.get()));
    if (S.get() && !S.get().startsWith("data:")) {
      if (e === true) n += "?rnd=" + CABLES.generateUUID();
    }
    N = true;
    de.set(true);
    fetch(n)
      .then((e) => {
        return e.arrayBuffer();
      })
      .then((e) => {
        if (S.get() != t) {
          g.patch.loading.finished(E);
          E = null;
          return;
        }
        v = [];
        O = 0;
        C = G(e);
        e = null;
        Se();
      });
    T();
    const a = new XMLHttpRequest();
    a.open("GET", n, true);
    a.responseType = "arraybuffer";
    g.patch.loading.addAssetLoadingTask(() => {});
  }
  A.onFileChanged = function (e) {
    if (S.get() && S.get().indexOf(e) > -1) {
      P(true);
    }
  };
  m.onChange = () => {
    if (m.get()) P();
    if (!m.get()) {
      C = null;
    }
  };
  function P(e) {
    clearTimeout(Oe);
    Oe = setTimeout(function () {
      Ce(e);
    }, 30);
  }
  function je() {
    if (!C) return;
    C.shaders = {};
    if (c.links.length == 1 && c.get()) {
      N = true;
      const n = c.links[0].portOut.op;
      const a = n.getPort("Shader");
      const r = n.getPort("Material Name");
      if (!a && !r) {
        const i = c.get();
        for (let t in i) {
          if (i[t] && C.json.materials)
            for (let e = 0; e < C.json.materials.length; e++) {
              if (C.json.materials[e].name == t) {
                if (C.shaders[e]) {
                  n.warn("double material assignment:", name);
                }
                C.shaders[e] = i[t];
              }
            }
        }
      }
    }
    if (c.get()) {
      for (let e = 0; e < c.links.length; e++) {
        const t = c.links[e].portOut.op;
        const a = t.getPort("Shader");
        const r = t.getPort("Material Name");
        if (a && r && a.get()) {
          const name = r.get();
          if (C.json.materials)
            for (let e = 0; e < C.json.materials.length; e++)
              if (C.json.materials[e].name == name) {
                if (C.shaders[e]) {
                  t.warn("double material assignment:", name);
                }
                C.shaders[e] = a.get();
              }
        }
      }
    }
    N = false;
    if (_) e();
  }
  function Ne() {
    const t = ae.get();
    if (!C || !w || !w.hiddenNodes) return;
    if (!t) {
      return;
    }
    for (let e = 0; e < t.length; e++) {
      const n = C.getNode(t[e]);
      if (n) n.hidden = true;
    }
  }
  function V() {
    if (!w) Ee();
    if (!C) return;
    C.unHideAll();
    if (w && w.hiddenNodes) {
      for (const e in w.hiddenNodes) {
        const t = C.getNode(e);
        if (t) t.hidden = true;
        else A.verbose("node to be hidden not found", e, t);
      }
    }
    Ne();
  }
  function Ee() {
    w = t.get();
    if (!w || w === "") w = {};
    else w = JSON.parse(w);
    if (C) V();
    return w;
  }
  function we() {
    t.set(JSON.stringify(w));
  }
  function Me() {
    if (C && C.nodes) {
      for (let e = 0; e < C.nodes.length; e++) {
        C.nodes[e].setAnimAction(J.get());
      }
    }
  }
  function Pe(t, n) {
    for (let e = 0; e < C.nodes.length; e++) {
      if (C.nodes[e].children.indexOf(n) >= 0) {
        t.push(C.nodes[e]);
        if (C.nodes[e].isChild) Pe(t, e);
      }
    }
  }
  A.exposeTexture = function (e) {
    const t = gui.corePatch().addOp("Ops.Gl.GLTF.GltfTexture");
    t.getPort("Name").set(e);
    L(t, 1);
    A.patch.link(A, p.name, t, "Render");
    gui.patchView.testCollision(t);
    gui.patchView.centerSelectOp(t.id, true);
  };
  A.exposeGeom = function (e, t) {
    const n = gui.corePatch().addOp("Ops.Gl.GLTF.GltfGeometry");
    n.getPort("Name").set(e);
    n.getPort("Submesh").set(t);
    L(n, 1);
    A.patch.link(A, p.name, n, "Update");
    gui.patchView.testCollision(n);
    gui.patchView.centerSelectOp(n.id, true);
  };
  function L(e, t) {
    t = t || 1;
    e.setUiAttrib({
      subPatch: A.uiAttribs.subPatch,
      translate: {
        x: A.uiAttribs.translate.x,
        y: A.uiAttribs.translate.y + t * CABLES.GLUI.glUiConfig.newOpDistanceY,
      },
    });
  }
  A.exposeNode = function (n, e, a) {
    let t = e == "hierarchy";
    if (t) {
      let r = [];
      for (let e = 0; e < C.nodes.length; e++) {
        if (C.nodes[e].name == n) {
          let t = [];
          const i = C.nodes[e];
          Pe(t, e);
          t = t.reverse();
          t.push(i, i);
          let n = p.name;
          let a = A;
          for (let e = 0; e < t.length; e++) {
            const s = gui.corePatch().addOp("Ops.Gl.GLTF.GltfNode_v2");
            s.getPort("Node Name").set(t[e].name);
            A.patch.link(a, n, s, "Render");
            L(s, e);
            if (e == t.length - 1) {
              s.getPort("Transformation").set(false);
            } else {
              s.getPort("Draw Mesh").set(false);
              s.getPort("Draw Childs").set(false);
            }
            n = "Next";
            a = s;
            r.push(s);
            gui.patchView.testCollision(s);
          }
        }
      }
      for (let e = 0; e < r.length; e++) {
        r[e].selectChilds();
      }
    } else {
      let t = "Ops.Gl.GLTF.GltfNode_v2";
      if (a && a.skin) t = "Ops.Gl.GLTF.GltfSkin";
      if (e == "transform") t = "Ops.Gl.GLTF.GltfNodeTransform_v2";
      gui.serverOps.loadOpLibs(t, () => {
        let e = gui.corePatch().addOp(t);
        e.getPort("Node Name").set(n);
        L(e);
        A.patch.link(A, p.name, e, "Render");
        gui.patchView.testCollision(e);
        gui.patchView.centerSelectOp(e.id, true);
      });
    }
    gui.closeModal();
  };
  A.assignMaterial = function (e) {
    const t = gui.corePatch().addOp("Ops.Gl.GLTF.GltfSetMaterial");
    t.getPort("Material Name").set(e);
    A.patch.link(A, c.name, t, "Material");
    L(t);
    gui.patchView.testCollision(t);
    gui.patchView.centerSelectOp(t.id, true);
    gui.closeModal();
  };
  A.toggleNodeVisibility = function (e) {
    const t = C.getNode(e);
    t.hidden = !t.hidden;
    w.hiddenNodes = w.hiddenNodes || {};
    if (t)
      if (t.hidden) w.hiddenNodes[e] = true;
      else delete w.hiddenNodes[e];
    we();
  };
  function Ve(n) {
    const a = {},
      r = [];
    for (let e = 0, t = n.length; e < t; ++e) {
      if (!a.hasOwnProperty(n[e])) {
        r.push(n[e]);
        a[n[e]] = 1;
      }
    }
    return r;
  }
};
Ops.Gl.GLTF.GltfScene_v4.prototype = new CABLES.Op();
CABLES.OPS["c9cbb226-46f7-4ca6-8dab-a9d0bdca4331"] = {
  f: Ops.Gl.GLTF.GltfScene_v4,
  objName: "Ops.Gl.GLTF.GltfScene_v4",
};
Ops.Math.Compare.Equals = function () {
  CABLES.Op.apply(this, arguments);
  const e = this;
  const t = (e.attachments = {});
  const n = e.inValue("number1", 1),
    a = e.inValue("number2", 1),
    r = e.outBoolNum("result");
  n.onChange = a.onChange = i;
  i();
  function i() {
    r.set(n.get() == a.get());
  }
};
Ops.Math.Compare.Equals.prototype = new CABLES.Op();
CABLES.OPS["4dd3cc55-eebc-4187-9d4e-2e053a956fab"] = {
  f: Ops.Math.Compare.Equals,
  objName: "Ops.Math.Compare.Equals",
};
Ops.Math.Multiply = function () {
  CABLES.Op.apply(this, arguments);
  const e = this;
  const t = (e.attachments = {});
  const n = e.inValueFloat("number1", 1),
    a = e.inValueFloat("number2", 2),
    r = e.outNumber("result");
  e.setTitle("*");
  n.onChange = a.onChange = i;
  i();
  function i() {
    const e = n.get();
    const t = a.get();
    r.set(e * t);
  }
};
Ops.Math.Multiply.prototype = new CABLES.Op();
CABLES.OPS["1bbdae06-fbb2-489b-9bcc-36c9d65bd441"] = {
  f: Ops.Math.Multiply,
  objName: "Ops.Math.Multiply",
};
Ops.Gl.Shader.BasicMaterial_v3 = function () {
  CABLES.Op.apply(this, arguments);
  const e = this;
  const t = (e.attachments = {
    basicmaterial_frag:
      "{{MODULES_HEAD}}\n\nIN vec2 texCoord;\n\n#ifdef VERTEX_COLORS\nIN vec4 vertCol;\n#endif\n\n#ifdef HAS_TEXTURES\n    IN vec2 texCoordOrig;\n    #ifdef HAS_TEXTURE_DIFFUSE\n        UNI sampler2D tex;\n    #endif\n    #ifdef HAS_TEXTURE_OPACITY\n        UNI sampler2D texOpacity;\n   #endif\n#endif\n\n\n\nvoid main()\n{\n    {{MODULE_BEGIN_FRAG}}\n    vec4 col=color;\n\n\n    #ifdef HAS_TEXTURES\n        vec2 uv=texCoord;\n\n        #ifdef CROP_TEXCOORDS\n            if(uv.x<0.0 || uv.x>1.0 || uv.y<0.0 || uv.y>1.0) discard;\n        #endif\n\n        #ifdef HAS_TEXTURE_DIFFUSE\n            col=texture(tex,uv);\n\n            #ifdef COLORIZE_TEXTURE\n                col.r*=color.r;\n                col.g*=color.g;\n                col.b*=color.b;\n            #endif\n        #endif\n        col.a*=color.a;\n        #ifdef HAS_TEXTURE_OPACITY\n            #ifdef TRANSFORMALPHATEXCOORDS\n                uv=texCoordOrig;\n            #endif\n            #ifdef ALPHA_MASK_IALPHA\n                col.a*=1.0-texture(texOpacity,uv).a;\n            #endif\n            #ifdef ALPHA_MASK_ALPHA\n                col.a*=texture(texOpacity,uv).a;\n            #endif\n            #ifdef ALPHA_MASK_LUMI\n                col.a*=dot(vec3(0.2126,0.7152,0.0722), texture(texOpacity,uv).rgb);\n            #endif\n            #ifdef ALPHA_MASK_R\n                col.a*=texture(texOpacity,uv).r;\n            #endif\n            #ifdef ALPHA_MASK_G\n                col.a*=texture(texOpacity,uv).g;\n            #endif\n            #ifdef ALPHA_MASK_B\n                col.a*=texture(texOpacity,uv).b;\n            #endif\n            // #endif\n        #endif\n    #endif\n\n    {{MODULE_COLOR}}\n\n    #ifdef DISCARDTRANS\n        if(col.a<0.2) discard;\n    #endif\n\n    #ifdef VERTEX_COLORS\n        col*=vertCol;\n    #endif\n\n    outColor = col;\n}\n",
    basicmaterial_vert:
      "\n{{MODULES_HEAD}}\n\nOUT vec2 texCoord;\nOUT vec2 texCoordOrig;\n\nUNI mat4 projMatrix;\nUNI mat4 modelMatrix;\nUNI mat4 viewMatrix;\n\n#ifdef HAS_TEXTURES\n    UNI float diffuseRepeatX;\n    UNI float diffuseRepeatY;\n    UNI float texOffsetX;\n    UNI float texOffsetY;\n#endif\n\n#ifdef VERTEX_COLORS\n    in vec4 attrVertColor;\n    out vec4 vertCol;\n\n#endif\n\n\nvoid main()\n{\n    mat4 mMatrix=modelMatrix;\n    mat4 mvMatrix;\n\n    norm=attrVertNormal;\n    texCoordOrig=attrTexCoord;\n    texCoord=attrTexCoord;\n    #ifdef HAS_TEXTURES\n        texCoord.x=texCoord.x*diffuseRepeatX+texOffsetX;\n        texCoord.y=(1.0-texCoord.y)*diffuseRepeatY+texOffsetY;\n    #endif\n\n    #ifdef VERTEX_COLORS\n        vertCol=attrVertColor;\n    #endif\n\n    vec4 pos = vec4(vPosition, 1.0);\n\n    #ifdef BILLBOARD\n       vec3 position=vPosition;\n       mvMatrix=viewMatrix*modelMatrix;\n\n       gl_Position = projMatrix * mvMatrix * vec4((\n           position.x * vec3(\n               mvMatrix[0][0],\n               mvMatrix[1][0],\n               mvMatrix[2][0] ) +\n           position.y * vec3(\n               mvMatrix[0][1],\n               mvMatrix[1][1],\n               mvMatrix[2][1]) ), 1.0);\n    #endif\n\n    {{MODULE_VERTEX_POSITION}}\n\n    #ifndef BILLBOARD\n        mvMatrix=viewMatrix * mMatrix;\n    #endif\n\n\n    #ifndef BILLBOARD\n        // gl_Position = projMatrix * viewMatrix * modelMatrix * pos;\n        gl_Position = projMatrix * mvMatrix * pos;\n    #endif\n}\n",
  });
  const n = e.inTrigger("render");
  const a = e.outTrigger("trigger");
  const r = e.outObject("shader", null, "shader");
  r.ignoreValueSerialize = true;
  e.toWorkPortsNeedToBeLinked(n);
  e.toWorkShouldNotBeChild(
    "Ops.Gl.TextureEffects.ImageCompose",
    CABLES.OP_PORT_TYPE_FUNCTION,
  );
  const i = e.patch.cgl;
  const s = new CGL.Shader(i, "basicmaterialnew");
  s.addAttribute({ type: "vec3", name: "vPosition" });
  s.addAttribute({ type: "vec2", name: "attrTexCoord" });
  s.addAttribute({ type: "vec3", name: "attrVertNormal", nameFrag: "norm" });
  s.addAttribute({ type: "float", name: "attrVertIndex" });
  s.setModules(["MODULE_VERTEX_POSITION", "MODULE_COLOR", "MODULE_BEGIN_FRAG"]);
  s.setSource(t.basicmaterial_vert, t.basicmaterial_frag);
  r.setRef(s);
  n.onTriggered = C;
  const o = e.inValueSlider("r", Math.random());
  const l = e.inValueSlider("g", Math.random());
  const u = e.inValueSlider("b", Math.random());
  const h = e.inValueSlider("a", 1);
  o.setUiAttribs({ colorPick: true });
  const c = s.addUniformFrag("4f", "color", o, l, u, h);
  s.uniformColorDiffuse = c;
  const m = e.inTexture("texture");
  let p = null;
  m.onChange = N;
  const g = e.inValueBool("colorizeTexture", false);
  const f = e.inValueBool("Vertex Colors", false);
  const d = e.inTexture("textureOpacity");
  let b = null;
  const v = e.inSwitch(
    "Alpha Mask Source",
    ["Luminance", "R", "G", "B", "A", "1-A"],
    "Luminance",
  );
  v.setUiAttribs({ greyout: true });
  d.onChange = j;
  const O = e.inValueBool("Opacity TexCoords Transform", false);
  const _ = e.inValueBool("Discard Transparent Pixels");
  const A = e.inValue("diffuseRepeatX", 1),
    y = e.inValue("diffuseRepeatY", 1),
    x = e.inValue("Tex Offset X", 0),
    I = e.inValue("Tex Offset Y", 0),
    T = e.inBool("Crop TexCoords", false);
  s.addUniformFrag("f", "diffuseRepeatX", A);
  s.addUniformFrag("f", "diffuseRepeatY", y);
  s.addUniformFrag("f", "texOffsetX", x);
  s.addUniformFrag("f", "texOffsetY", I);
  const S = e.inValueBool("billboard", false);
  v.onChange =
    S.onChange =
    _.onChange =
    O.onChange =
    T.onChange =
    f.onChange =
    g.onChange =
      w;
  e.setPortGroup("Color", [o, l, u, h]);
  e.setPortGroup("Color Texture", [m, f, g]);
  e.setPortGroup("Opacity", [d, v, _, O]);
  e.setPortGroup("Texture Transform", [A, y, x, I, T]);
  j();
  N();
  e.preRender = function () {
    s.bind();
    C();
  };
  function C() {
    if (!s) return;
    i.pushShader(s);
    s.popTextures();
    if (p && m.get()) s.pushTexture(p, m.get());
    if (b && d.get()) s.pushTexture(b, d.get());
    a.trigger();
    i.popShader();
  }
  function j() {
    if (d.get()) {
      if (b !== null) return;
      s.removeUniform("texOpacity");
      s.define("HAS_TEXTURE_OPACITY");
      if (!b) b = new CGL.Uniform(s, "t", "texOpacity");
    } else {
      s.removeUniform("texOpacity");
      s.removeDefine("HAS_TEXTURE_OPACITY");
      b = null;
    }
    w();
  }
  function N() {
    if (m.get()) {
      if (!s.hasDefine("HAS_TEXTURE_DIFFUSE")) s.define("HAS_TEXTURE_DIFFUSE");
      if (!p) p = new CGL.Uniform(s, "t", "texDiffuse");
    } else {
      s.removeUniform("texDiffuse");
      s.removeDefine("HAS_TEXTURE_DIFFUSE");
      p = null;
    }
    E();
  }
  function E() {
    A.setUiAttribs({ greyout: !m.get() });
    y.setUiAttribs({ greyout: !m.get() });
    x.setUiAttribs({ greyout: !m.get() });
    I.setUiAttribs({ greyout: !m.get() });
    g.setUiAttribs({ greyout: !m.get() });
    v.setUiAttribs({ greyout: !d.get() });
    O.setUiAttribs({ greyout: !d.get() });
    let e = true;
    e = m.get() && !g.get();
    o.setUiAttribs({ greyout: e });
    l.setUiAttribs({ greyout: e });
    u.setUiAttribs({ greyout: e });
  }
  function w() {
    s.toggleDefine("VERTEX_COLORS", f.get());
    s.toggleDefine("CROP_TEXCOORDS", T.get());
    s.toggleDefine("COLORIZE_TEXTURE", g.get());
    s.toggleDefine("TRANSFORMALPHATEXCOORDS", O.get());
    s.toggleDefine("DISCARDTRANS", _.get());
    s.toggleDefine("BILLBOARD", S.get());
    s.toggleDefine("ALPHA_MASK_ALPHA", v.get() == "A");
    s.toggleDefine("ALPHA_MASK_IALPHA", v.get() == "1-A");
    s.toggleDefine("ALPHA_MASK_LUMI", v.get() == "Luminance");
    s.toggleDefine("ALPHA_MASK_R", v.get() == "R");
    s.toggleDefine("ALPHA_MASK_G", v.get() == "G");
    s.toggleDefine("ALPHA_MASK_B", v.get() == "B");
    E();
  }
};
Ops.Gl.Shader.BasicMaterial_v3.prototype = new CABLES.Op();
CABLES.OPS["ec55d252-3843-41b1-b731-0482dbd9e72b"] = {
  f: Ops.Gl.Shader.BasicMaterial_v3,
  objName: "Ops.Gl.Shader.BasicMaterial_v3",
};
Ops.Anim.Timer_v2 = function () {
  CABLES.Op.apply(this, arguments);
  const e = this;
  const t = (e.attachments = {});
  const i = e.inValue("Speed", 1),
    n = e.inValueBool("Play", true),
    a = e.inTriggerButton("Reset"),
    r = e.inValueBool("Sync to timeline", false),
    s = e.outNumber("Time");
  e.setPortGroup("Controls", [n, a, i]);
  const o = new CABLES.Timer();
  let l = null;
  let u = 0;
  let h = false;
  n.onChange = c;
  c();
  function c() {
    if (n.get()) {
      o.play();
      e.patch.addOnAnimFrame(e);
    } else {
      o.pause();
      e.patch.removeOnAnimFrame(e);
    }
  }
  a.onTriggered = m;
  function m() {
    u = 0;
    l = null;
    o.setTime(0);
    s.set(0);
  }
  r.onChange = function () {
    h = r.get();
    n.setUiAttribs({ greyout: h });
    a.setUiAttribs({ greyout: h });
  };
  e.onAnimFrame = function (e, t, n) {
    if (o.isPlaying()) {
      if (CABLES.overwriteTime !== undefined) {
        s.set(CABLES.overwriteTime * i.get());
      } else if (h) {
        s.set(e * i.get());
      } else {
        o.update();
        const a = o.get();
        if (l === null) {
          l = a;
          return;
        }
        const r = Math.abs(a - l);
        l = a;
        u += r * i.get();
        if (u != u) u = 0;
        s.set(u);
      }
    }
  };
};
Ops.Anim.Timer_v2.prototype = new CABLES.Op();
CABLES.OPS["aac7f721-208f-411a-adb3-79adae2e471a"] = {
  f: Ops.Anim.Timer_v2,
  objName: "Ops.Anim.Timer_v2",
};
Ops.Math.Accumulator = function () {
  CABLES.Op.apply(this, arguments);
  const e = this;
  const t = (e.attachments = {});
  const n = e.inTrigger("Trigger in"),
    a = e.inValueFloat("Add to number", 0),
    r = e.inValueFloat("Multiplier to add number", 1),
    i = e.inValueFloat("Default Value", 1),
    s = e.inTriggerButton("Set Default Value"),
    o = e.outNumber("Current value");
  let l = performance.now();
  let u = 0;
  let h = true;
  s.onTriggered = c;
  function c() {
    u = i.get();
    o.set(u);
    h = true;
  }
  n.onTriggered = function () {
    if (!h) {
      let e = (performance.now() - l) / 100;
      u += a.get() * e * r.get();
      o.set(u);
    }
    l = performance.now();
    h = false;
  };
};
Ops.Math.Accumulator.prototype = new CABLES.Op();
CABLES.OPS["460574ca-dca2-4283-8c37-57a8c446a51f"] = {
  f: Ops.Math.Accumulator,
  objName: "Ops.Math.Accumulator",
};
Ops.String.StringEditor = function () {
  CABLES.Op.apply(this, arguments);
  const e = this;
  const t = (e.attachments = {});
  const n = e.inStringEditor("value", ""),
    a = e.inValueSelect(
      "Syntax",
      [
        "text",
        "glsl",
        "css",
        "html",
        "xml",
        "json",
        "javascript",
        "inline-css",
        "sql",
      ],
      "text",
    ),
    r = e.outString("Result");
  a.onChange = i;
  function i() {
    let e = a.get();
    if (e == "javascript") e = "js";
    n.setUiAttribs({ editorSyntax: e });
  }
  n.onChange = function () {
    r.set(n.get());
  };
};
Ops.String.StringEditor.prototype = new CABLES.Op();
CABLES.OPS["6468b7c1-f63e-4db4-b809-4b203d27ead3"] = {
  f: Ops.String.StringEditor,
  objName: "Ops.String.StringEditor",
};
Ops.Json.ParseObject_v2 = function () {
  CABLES.Op.apply(this, arguments);
  const o = this;
  const e = (o.attachments = {});
  const l = o.inStringEditor("JSON String", "{}", "json"),
    t = o.outObject("Result"),
    u = o.outBoolNum("Valid");
  l.onChange = n;
  n();
  function n() {
    if (!l.get()) {
      t.set(null);
      u.set(false);
      return;
    }
    try {
      const e = JSON.parse(l.get());
      t.setRef(e);
      u.set(true);
      o.setUiError("invalidjson", null);
    } catch (e) {
      o.logError(e);
      u.set(false);
      let t = "";
      const n = e.message.split(" ");
      for (let e = 0; e < n.length - 1; e++) {
        const a = parseFloat(n[e + 1]);
        if (a && n[e] == "position") {
          const r = l.get().substring(a - 15, a);
          const i = l.get().substring(a, a + 1);
          const s = l.get().substring(a + 1, a + 15);
          t =
            '<span style="font-family:monospace;background-color:black;">' +
            r +
            '<span style="font-weight:bold;background-color:red;">' +
            i +
            "</span>" +
            s +
            " </span>";
        }
      }
      o.setUiError(
        "invalidjson",
        "INVALID JSON<br/>can not parse string to object:<br/><b> " +
          e.message +
          "</b><br/>" +
          t,
      );
    }
  }
};
Ops.Json.ParseObject_v2.prototype = new CABLES.Op();
CABLES.OPS["2ce8a4d3-37d3-4cdc-abd1-a560fbe841ee"] = {
  f: Ops.Json.ParseObject_v2,
  objName: "Ops.Json.ParseObject_v2",
};
Ops.Json.ObjectToArray = function () {
  CABLES.Op.apply(this, arguments);
  const e = this;
  const t = (e.attachments = {});
  const n = e.inObject("Object");
  const a = e.outArray("Array");
  n.onChange = function () {
    a.set(n.get());
  };
};
Ops.Json.ObjectToArray.prototype = new CABLES.Op();
CABLES.OPS["f8ac4574-ffe3-4618-a27f-30d190308e2c"] = {
  f: Ops.Json.ObjectToArray,
  objName: "Ops.Json.ObjectToArray",
};
Ops.Vars.VarSetNumber_v2 = function () {
  CABLES.Op.apply(this, arguments);
  const e = this;
  const t = (e.attachments = {});
  const n = e.inValueFloat("Value", 0);
  e.varName = e.inDropDown("Variable", [], "", true);
  new CABLES.VarSetOpWrapper(e, "number", n, e.varName);
};
Ops.Vars.VarSetNumber_v2.prototype = new CABLES.Op();
CABLES.OPS["b5249226-6095-4828-8a1c-080654e192fa"] = {
  f: Ops.Vars.VarSetNumber_v2,
  objName: "Ops.Vars.VarSetNumber_v2",
};
Ops.Vars.VarSetString_v2 = function () {
  CABLES.Op.apply(this, arguments);
  const e = this;
  const t = (e.attachments = {});
  const n = e.inString("Value", "New String");
  e.varName = e.inDropDown("Variable", [], "", true);
  new CABLES.VarSetOpWrapper(e, "string", n, e.varName);
};
Ops.Vars.VarSetString_v2.prototype = new CABLES.Op();
CABLES.OPS["0b4d9229-8024-4a30-9cc0-f6653942c2e4"] = {
  f: Ops.Vars.VarSetString_v2,
  objName: "Ops.Vars.VarSetString_v2",
};
Ops.Cables.LoadingStatus_v2 = function () {
  CABLES.Op.apply(this, arguments);
  const a = this;
  const e = (a.attachments = {});
  const t = a.inTrigger("exe"),
    r = a.inValueBool("PreRender Ops"),
    i = a.inBool("Play Timeline", true),
    s = a.outTrigger("Next"),
    o = a.outBoolNum("Finished Initial Loading", false),
    l = a.outBoolNum("Loading"),
    u = a.outNumber("Progress"),
    h = a.outArray("Jobs"),
    c = a.outTrigger("Trigger Loading Finished ");
  const m = a.patch.cgl;
  const p = a.patch;
  let g = false;
  const n = [];
  let f = true;
  document.body.classList.add("cables-loading");
  let d = m.patch.loading.start("loadingStatusInit", "loadingStatusInit", a);
  t.onTriggered = () => {
    const e = a.patch.loading.getListJobs();
    u.set(p.loading.getProgress());
    let t = e.length === 0;
    const n = !t;
    if (n) {
      h.set(a.patch.loading.getListJobs());
    }
    if (n) {
      if (f) {
        if (r.get()) a.patch.preRenderOps();
        a.patch.timer.setTime(0);
        if (i.get()) {
          a.patch.timer.play();
        } else {
          a.patch.timer.pause();
        }
      }
      f = false;
      document.body.classList.remove("cables-loading");
      document.body.classList.add("cables-loaded");
    } else {
      g = true;
      h.set(a.patch.loading.getListJobs());
      if (p.loading.getProgress() < 1) {
        a.patch.timer.setTime(0);
        a.patch.timer.pause();
      }
    }
    o.set(g);
    if (l.get() && t) c.trigger();
    l.set(n);
    a.setUiAttribs({ loading: n });
    s.trigger();
    if (d) {
      m.patch.loading.finished(d);
      d = null;
    }
  };
};
Ops.Cables.LoadingStatus_v2.prototype = new CABLES.Op();
CABLES.OPS["e62f7f4c-7436-437e-8451-6bc3c28545f7"] = {
  f: Ops.Cables.LoadingStatus_v2,
  objName: "Ops.Cables.LoadingStatus_v2",
};
Ops.Html.WindowHasFocus = function () {
  CABLES.Op.apply(this, arguments);
  const t = this;
  const e = (t.attachments = {});
  const n = t.outBool("has focus"),
    a = t.outBool("Tab Visible", true);
  const r = true;
  n.set(t.patch.getDocument().hasFocus());
  window.addEventListener("blur", s);
  window.addEventListener("focus", i);
  t.patch.getDocument().addEventListener("visibilitychange", o);
  t.onDelete = function () {
    t.patch.getDocument().removeEventListener("visibilitychange", o);
  };
  function i() {
    n.set(true);
  }
  function s() {
    n.set(false);
  }
  function o(e) {
    a.set(!t.patch.getDocument().hidden);
  }
};
Ops.Html.WindowHasFocus.prototype = new CABLES.Op();
CABLES.OPS["6542896e-aa13-4b57-81e0-163597f4149a"] = {
  f: Ops.Html.WindowHasFocus,
  objName: "Ops.Html.WindowHasFocus",
};
Ops.Gl.ClearColor = function () {
  CABLES.Op.apply(this, arguments);
  const e = this;
  const t = (e.attachments = {});
  const n = e.inTrigger("render"),
    a = e.outTrigger("trigger"),
    r = e.inFloatSlider("r", 0.1),
    i = e.inFloatSlider("g", 0.1),
    s = e.inFloatSlider("b", 0.1),
    o = e.inFloatSlider("a", 1);
  r.setUiAttribs({ colorPick: true });
  const l = e.patch.cgl;
  n.onTriggered = function () {
    l.gl.clearColor(r.get(), i.get(), s.get(), o.get());
    l.gl.clear(l.gl.COLOR_BUFFER_BIT | l.gl.DEPTH_BUFFER_BIT);
    a.trigger();
  };
};
Ops.Gl.ClearColor.prototype = new CABLES.Op();
CABLES.OPS["19b441eb-9f63-4f35-ba08-b87841517c4d"] = {
  f: Ops.Gl.ClearColor,
  objName: "Ops.Gl.ClearColor",
};
Ops.Array.SwitchArray = function () {
  CABLES.Op.apply(this, arguments);
  const n = this;
  const e = (n.attachments = {});
  let t = n.inValueInt("Index");
  let a = [];
  let r = n.outArray("Result");
  t.onChange = i;
  for (let t = 0; t < 10; t++) {
    let e = n.inArray("Array " + t);
    a.push(e);
    e.onChange = i;
  }
  function i() {
    if (t.get() >= 0 && a[t.get()]) {
      r.setRef(a[t.get()].get());
    }
  }
};
Ops.Array.SwitchArray.prototype = new CABLES.Op();
CABLES.OPS["3fab881c-c2cf-42a0-9c42-2d8edfd93f57"] = {
  f: Ops.Array.SwitchArray,
  objName: "Ops.Array.SwitchArray",
};
Ops.Color.ColorValue = function () {
  CABLES.Op.apply(this, arguments);
  const e = this;
  const t = (e.attachments = {});
  const n = e.inValueSlider("r", Math.random());
  const a = e.inValueSlider("g", Math.random());
  const r = e.inValueSlider("b", Math.random());
  n.setUiAttribs({ colorPick: true });
  const i = e.inValueSlider("a", 1);
  const s = e.outNumber("outr");
  const o = e.outNumber("outg");
  const l = e.outNumber("outb");
  const u = e.outNumber("outa");
  const h = e.outNumber("Hex", "000000");
  const c = e.outArray("Array");
  n.onChange = a.onChange = r.onChange = i.onChange = p;
  function m(e) {
    let t = Math.round(e * 255).toString(16);
    if (t.length === 1) {
      t = "0" + t;
    }
    return t.toUpperCase();
  }
  function p() {
    s.set(n.get());
    o.set(a.get());
    l.set(r.get());
    u.set(i.get());
    let e = m(n.get()) + m(a.get()) + m(r.get());
    h.set(e);
    c.set([n.get(), a.get(), r.get(), i.get()]);
  }
  p();
};
Ops.Color.ColorValue.prototype = new CABLES.Op();
CABLES.OPS["7caa37c8-f2a7-49f2-a29c-96af362abca0"] = {
  f: Ops.Color.ColorValue,
  objName: "Ops.Color.ColorValue",
};
Ops.Vars.VarGetNumber_v2 = function () {
  CABLES.Op.apply(this, arguments);
  const e = this;
  const t = (e.attachments = {});
  const n = e.outNumber("Value");
  e.varName = e.inValueSelect("Variable", [], "", true);
  new CABLES.VarGetOpWrapper(e, "number", e.varName, n);
};
Ops.Vars.VarGetNumber_v2.prototype = new CABLES.Op();
CABLES.OPS["421f5b52-c0fa-47c4-8b7a-012b9e1c864a"] = {
  f: Ops.Vars.VarGetNumber_v2,
  objName: "Ops.Vars.VarGetNumber_v2",
};
Ops.Array.ArrayGetNumber = function () {
  CABLES.Op.apply(this, arguments);
  const e = this;
  const t = (e.attachments = {});
  const n = e.inArray("array"),
    a = e.inValueInt("index"),
    r = e.outNumber("value");
  n.ignoreValueSerialize = true;
  a.onChange = n.onChange = i;
  function i() {
    if (n.get()) {
      let e = n.get()[a.get()];
      if (isNaN(e)) {
        r.set(0);
        return;
      }
      r.set(parseFloat(e));
    }
  }
};
Ops.Array.ArrayGetNumber.prototype = new CABLES.Op();
CABLES.OPS["d1189078-70cf-437d-9a37-b2ebe89acdaf"] = {
  f: Ops.Array.ArrayGetNumber,
  objName: "Ops.Array.ArrayGetNumber",
};
Ops.Trigger.TriggerSend = function () {
  CABLES.Op.apply(this, arguments);
  const a = this;
  const e = (a.attachments = {});
  const t = a.inTriggerButton("Trigger");
  a.varName = a.inValueSelect("Named Trigger", [], "", true);
  a.varName.onChange = r;
  t.onTriggered = i;
  a.patch.addEventListener("namedTriggersChanged", n);
  n();
  function n() {
    if (CABLES.UI) {
      const e = [];
      const t = a.patch.namedTriggers;
      e.push("+ create new one");
      for (const n in t) e.push(n);
      a.varName.uiAttribs.values = e;
    }
  }
  function r() {
    if (CABLES.UI) {
      if (a.varName.get() == "+ create new one") {
        new CABLES.UI.ModalDialog({
          prompt: true,
          title: "New Trigger",
          text: "Enter a name for the new trigger",
          promptValue: "",
          promptOk: (e) => {
            a.varName.set(e);
            a.patch.namedTriggers[e] = a.patch.namedTriggers[e] || [];
            n();
          },
        });
        return;
      }
      a.refreshParams();
    }
    if (!a.patch.namedTriggers[a.varName.get()]) {
      a.patch.namedTriggers[a.varName.get()] =
        a.patch.namedTriggers[a.varName.get()] || [];
      a.patch.emitEvent("namedTriggersChanged");
    }
    a.setTitle(">" + a.varName.get());
    a.refreshParams();
    a.patch.emitEvent("opTriggerNameChanged", a, a.varName.get());
  }
  function i() {
    const t = a.patch.namedTriggers[a.varName.get()];
    a.patch.emitEvent("namedTriggerSent", a.varName.get());
    if (!t) {
      a.setUiError("unknowntrigger", "unknown trigger");
      return;
    } else a.setUiError("unknowntrigger", null);
    for (let e = 0; e < t.length; e++) {
      t[e]();
    }
  }
};
Ops.Trigger.TriggerSend.prototype = new CABLES.Op();
CABLES.OPS["ce1eaf2b-943b-4dc0-ab5e-ee11b63c9ed0"] = {
  f: Ops.Trigger.TriggerSend,
  objName: "Ops.Trigger.TriggerSend",
};
Ops.Ui.SubPatch = function () {
  CABLES.Op.apply(this, arguments);
  const u = this;
  const e = (u.attachments = {});
  u.dyn = u.addInPort(
    new CABLES.Port(u, "create port", CABLES.OP_PORT_TYPE_DYNAMIC),
  );
  u.dynOut = u.addOutPort(
    new CABLES.Port(u, "create port out", CABLES.OP_PORT_TYPE_DYNAMIC),
  );
  const t = u.addInPort(
    new CABLES.Port(u, "dataStr", CABLES.OP_PORT_TYPE_VALUE, {
      display: "readonly",
    }),
  );
  u.patchId = u.addInPort(
    new CABLES.Port(u, "patchId", CABLES.OP_PORT_TYPE_VALUE, {
      display: "readonly",
    }),
  );
  t.setUiAttribs({ hideParam: true });
  u.patchId.setUiAttribs({ hideParam: true });
  let h = { ports: [], portsOut: [] };
  let n = CABLES.generateUUID();
  u.patchId.set(n);
  g();
  p();
  let c = false;
  u.saveData = s;
  u.init = () => {
    u.setStorage({ subPatchVer: 1 });
  };
  u.patchId.onChange = function () {
    const t = u.patch.getSubPatchOps(n);
    if (t.length === 2) {
      if (u.patch.isEditorMode() && CABLES.UI.DEFAULTOPS.isInBlueprint(u))
        CABLES.UI.undo.pause();
      for (let e = 0; e < t.length; e++) {
        u.patch.deleteOp(t[e].id);
      }
      if (u.patch.isEditorMode() && CABLES.UI.DEFAULTOPS.isInBlueprint(u))
        CABLES.UI.undo.resume();
    }
  };
  u.onLoaded = function () {};
  u.onLoadedValueSet = function () {
    h = JSON.parse(t.get());
    if (!h) {
      h = { ports: [], portsOut: [] };
    }
    i();
  };
  function a() {}
  t.onChange = function () {
    if (c) return;
    if (!t.get()) return;
    try {
      a();
    } catch (e) {
      u.logError("cannot load subpatch data...");
      u.logError(e);
    }
  };
  function s() {
    try {
      t.set(JSON.stringify(h));
    } catch (e) {
      u.log(e);
    }
  }
  u.addPortListener = m;
  function m(n, e) {
    if (!n.hasSubpatchLstener) {
      n.hasSubpatchLstener = true;
      n.addEventListener("onUiAttrChange", function (t) {
        if (t.title) {
          let e = 0;
          for (e = 0; e < h.portsOut.length; e++)
            if (h.portsOut[e].name == n.name) h.portsOut[e].title = t.title;
          for (e = 0; e < h.ports.length; e++)
            if (h.ports[e].name == n.name) h.ports[e].title = t.title;
          s();
        }
      });
    }
    if (n.direction == CABLES.PORT_DIR_IN) {
      if (n.type == CABLES.OP_PORT_TYPE_FUNCTION) {
        n.onTriggered = function () {
          if (e.isLinked()) e.trigger();
        };
      } else {
        n.onChange = function () {
          e.set(n.get());
          if (!n.isLinked()) {
            for (let e = 0; e < h.ports.length; e++) {
              if (h.ports[e].name === n.name) {
                h.ports[e].value = n.get();
              }
            }
            s();
          }
        };
      }
    }
  }
  u.setupPorts = i;
  function i() {
    if (!u.patchId.get()) return;
    const e = h.ports || [];
    const t = h.portsOut || [];
    let n = 0;
    for (n = 0; n < e.length; n++) {
      if (!u.getPortByName(e[n].name)) {
        const a = u.addInPort(new CABLES.Port(u, e[n].name, e[n].type));
        const r = g();
        const i = r.addOutPort(new CABLES.Port(r, e[n].name, e[n].type));
        a.ignoreValueSerialize = true;
        a.setUiAttribs({ editableTitle: true });
        if (e[n].title) {
          a.setUiAttribs({ title: e[n].title });
          i.setUiAttribs({ title: e[n].title });
        }
        if (e[n].objType) {
          a.setUiAttribs({ objType: e[n].objType });
          i.setUiAttribs({ objType: e[n].objType });
        }
        if (e[n].value) {
          a.set(e[n].value);
          i.set(e[n].value);
        }
        m(a, i);
      }
    }
    for (n = 0; n < t.length; n++) {
      if (!u.getPortByName(t[n].name)) {
        const s = u.addOutPort(new CABLES.Port(u, t[n].name, t[n].type));
        const o = p();
        const l = o.addInPort(new CABLES.Port(o, t[n].name, t[n].type));
        s.ignoreValueSerialize = true;
        s.setUiAttribs({ editableTitle: true });
        if (t[n].title) {
          s.setUiAttribs({ title: t[n].title });
          l.setUiAttribs({ title: t[n].title });
        }
        if (t[n].objType) {
          s.setUiAttribs({ objType: t[n].objType });
          l.setUiAttribs({ objType: t[n].objType });
        }
        m(l, s);
      }
    }
    c = true;
  }
  u.addNewInPort = function (e, t, n) {
    const a = "in" + h.ports.length + " " + e.parent.name + " " + e.name;
    const r = { name: a, type: e.type };
    if (e.uiAttribs.objType) r.objType = e.uiAttribs.objType;
    h.ports.push(r);
    i();
    return a;
  };
  u.dyn.onLinkChanged = function () {
    if (u.dyn.isLinked()) {
      const e = u.dyn.links[0].getOtherPort(u.dyn);
      u.dyn.removeLinks();
      e.removeLinkTo(u.dyn);
      u.log("dyn link changed!!!");
      const t = u.addNewInPort(e);
      const n = gui.scene().link(e.parent, e.getName(), u, t);
      c = true;
      s();
    } else {
      setTimeout(function () {
        u.dyn.removeLinks();
      }, 100);
    }
  };
  u.addNewOutPort = function (e, t, n) {
    const a = "out" + h.portsOut.length + " " + e.parent.name + " " + e.name;
    const r = { name: a, type: e.type };
    if (e.uiAttribs.objType) r.objType = e.uiAttribs.objType;
    h.portsOut.push(r);
    i();
    return a;
  };
  u.dynOut.onLinkChanged = function () {
    if (u.dynOut.isLinked()) {
      const e = u.dynOut.links[0].getOtherPort(u.dynOut);
      u.dynOut.removeLinks();
      e.removeLinkTo(u.dynOut);
      const t = u.addNewOutPort(e);
      gui.scene().link(e.parent, e.getName(), u, t);
      c = true;
      s();
    } else {
      setTimeout(function () {
        u.dynOut.removeLinks();
      }, 100);
      u.log("dynOut unlinked...");
    }
  };
  function p() {
    let e = u.patch.getSubPatchOp(u.patchId.get(), "Ops.Ui.PatchOutput");
    if (!e) {
      u.patch.addOp("Ops.Ui.PatchOutput", {
        subPatch: u.patchId.get(),
        translate: { x: 0, y: 0 },
      });
      e = u.patch.getSubPatchOp(u.patchId.get(), "Ops.Ui.PatchOutput");
      if (!e) u.warn("no patchoutput!");
    }
    return e;
  }
  function g() {
    let e = u.patch.getSubPatchOp(u.patchId.get(), "Ops.Ui.PatchInput");
    if (!e) {
      u.patch.addOp("Ops.Ui.PatchInput", {
        subPatch: u.patchId.get(),
        translate: { x: 0, y: 0 },
      });
      e = u.patch.getSubPatchOp(u.patchId.get(), "Ops.Ui.PatchInput");
      if (!e) u.warn("no patchinput2!");
    }
    return e;
  }
  u.addSubLink = function (e, t) {
    const n = h.ports.length;
    const a = "in" + (n - 1) + " " + t.parent.name + " " + t.name;
    if (e.direction == CABLES.PORT_DIR_IN) {
      gui.scene().link(e.parent, e.getName(), g(), a);
    } else {
      const i = h.portsOut.length;
      gui
        .scene()
        .link(
          e.parent,
          e.getName(),
          p(),
          "out" + (i - 1) + " " + t.parent.name + " " + t.name,
        );
    }
    const r = gui.patchView.getSubPatchBounds(u.patchId.get());
    g().uiAttr({ translate: { x: r.minx, y: r.miny - 100 } });
    p().uiAttr({ translate: { x: r.minx, y: r.maxy + 100 } });
    s();
    return a;
  };
  u.onDelete = function () {
    for (let e = u.patch.ops.length - 1; e >= 0; e--) {
      if (
        u.patch.ops[e] &&
        u.patch.ops[e].uiAttribs &&
        u.patch.ops[e].uiAttribs.subPatch == u.patchId.get()
      ) {
        u.patch.deleteOp(u.patch.ops[e].id);
      }
    }
  };
  function r() {
    let e = {
      pasted: true,
      translate: {
        x: u.uiAttribs.translate.x - 150,
        y: u.uiAttribs.translate.y,
      },
    };
    if (CABLES.UI) e.subPatch = gui.patchView.getCurrentSubPatch();
    const t = u.patch.addOp(CABLES.UI.DEFAULTOPNAMES.blueprint, e);
    t.createBlueprint(gui.patchId, u.patchId.get(), true);
  }
  u.rebuildListeners = () => {
    u.log("rebuild listeners...");
    const t = p();
    for (let e = 0; e < t.portsIn.length; e++) {
      if (t.portsIn[e].isLinked()) {
        m(t.portsIn[e], this.portsOut[e]);
      }
    }
  };
};
Ops.Ui.SubPatch.prototype = new CABLES.Op();
CABLES.OPS["84d9a6f0-ed7a-466d-b386-225ed9e89c60"] = {
  f: Ops.Ui.SubPatch,
  objName: "Ops.Ui.SubPatch",
};
Ops.Math.Divide = function () {
  CABLES.Op.apply(this, arguments);
  const e = this;
  const t = (e.attachments = {});
  const n = e.inValueFloat("number1", 1),
    a = e.inValueFloat("number2", 2),
    r = e.outNumber("result");
  e.setTitle("/");
  n.onChange = a.onChange = i;
  i();
  function i() {
    r.set(n.get() / a.get());
  }
};
Ops.Math.Divide.prototype = new CABLES.Op();
CABLES.OPS["86fcfd8c-038d-4b91-9820-a08114f6b7eb"] = {
  f: Ops.Math.Divide,
  objName: "Ops.Math.Divide",
};
Ops.Gl.ShaderEffects.TextureProjection_v2 = function () {
  CABLES.Op.apply(this, arguments);
  const e = this;
  const t = (e.attachments = {
    maptexture_frag:
      "IN vec2 MOD_tc;\n\n#ifdef MOD_MAP_TRIPLANAR\n    IN vec2 MOD_tc1;\n    IN vec2 MOD_tc2;\n    IN vec3 MOD_blendingTri;\n#endif\n\n\n{{CGL.BLENDMODES3}}",
    maptexture_vert:
      "vec3 MOD_pos;\n\n#ifndef MOD_WORLDSPACE\n   MOD_pos=(vec4(vPosition,1.0)*1.0/MOD_scale).xyz;\n#endif\n#ifdef MOD_WORLDSPACE\n   MOD_pos=(mMatrix*pos).xyz*1.0/MOD_scale;\n#endif\n\nMOD_pos=(vec4(MOD_pos,1.0)*MOD_rotationX(MOD_rotX*MOD_DEG2RAD)).xyz;\nMOD_pos=(vec4(MOD_pos,1.0)*MOD_rotationY(MOD_rotY*MOD_DEG2RAD)).xyz;\nMOD_pos=(vec4(MOD_pos,1.0)*MOD_rotationZ(MOD_rotZ*MOD_DEG2RAD)).xyz;\n\n#ifdef MOD_MAP_XY\n    MOD_tc=MOD_pos.xy;\n#endif\n#ifdef MOD_MAP_XZ\n    MOD_tc=MOD_pos.xz;\n#endif\n#ifdef MOD_MAP_YZ\n    MOD_tc=MOD_pos.yz;\n#endif\n\nMOD_tc.xy+=vec2(0.5,0.5);\nMOD_tc.xy+=MOD_offset;\n\n\n#ifdef MOD_TARGET_POINTSIZE\n\n    gl_PointSize+=(texture(MOD_tex,MOD_tc).x*MOD_amount);\n\n#endif\n\n\n#ifdef MOD_MAP_TRIPLANAR\n    mapTriplanar((mMatrix*vec4(attrVertNormal,1.0)).xyz,MOD_pos);\n#endif\n\n",
    maptexture_body_frag:
      "#ifndef MOD_TARGET_POINTSIZE\n\n\n    vec4 MOD_color;\n\n    #ifdef MOD_MAP_TRIPLANAR\n        vec4 xaxis = texture( MOD_tex, MOD_tc);\n        vec4 yaxis = texture( MOD_tex, MOD_tc1);\n        vec4 zaxis = texture( MOD_tex, MOD_tc2);\n        MOD_color = xaxis *MOD_blendingTri.x + yaxis *MOD_blendingTri.y + zaxis *MOD_blendingTri.z;\n        MOD_color.a=1.0;\n    #endif\n\n\n    vec2 MOD_ntc=MOD_tc;\n\n    #ifdef MOD_MAP_SCREEN\n        MOD_ntc=(vec2(gl_FragCoord.x,gl_FragCoord.y)/vec2(MOD_viewPortW,MOD_viewPortH));\n\n        MOD_ntc-=vec2(0.5,0.5);\n        MOD_ntc*=1.0/MOD_scale;\n        MOD_ntc+=vec2(0.5,0.5);\n        MOD_ntc-=MOD_offset;\n    #endif\n\n    #ifdef MOD_MAP_TEXCOORD\n        MOD_ntc=texCoord*1.0/MOD_scale-MOD_offset;\n    #endif\n\n    #ifdef MOD_MAP_TEXCOORD1\n        MOD_ntc=texCoord1*1.0/MOD_scale-MOD_offset;\n    #endif\n\n    #ifdef MOD_MAP_TEXCOORD2\n        MOD_ntc=texCoord2*1.0/MOD_scale-MOD_offset;\n    #endif\n\n\n    #ifdef MOD_DISCARD\n    if(MOD_ntc.x>0.0 && MOD_ntc.x<1.0 && MOD_ntc.y>0.0 && MOD_ntc.y<1.0)\n    {\n    #endif\n\n        #ifndef MOD_MAP_TRIPLANAR\n            MOD_color=texture(MOD_tex,MOD_ntc);\n        #endif\n\n        #ifdef MOD_USE_IMGALPHA\n            col.a=MOD_color.a;\n        #endif\n\n        #ifdef MOD_TARGET_COLOR\n        col=cgl_blendPixel(col,MOD_color,MOD_amount*col.a);\n        #endif\n        #ifdef MOD_TARGET_ALPHA\n        col.a=1.0-MOD_color.r*MOD_amount;\n        #endif\n\n    #ifdef MOD_DISCARD\n    }\n\n    #endif\n#endif\n",
    maptexture_body_vert:
      "OUT vec2 MOD_tc;\n\nconst float MOD_DEG2RAD = 0.017453292519943;\n\n#ifdef MOD_MAP_TRIPLANAR\n\n    OUT vec2 MOD_tc1;\n    OUT vec2 MOD_tc2;\n    OUT vec3 MOD_blendingTri;\n\n    void mapTriplanar(vec3 wNorm,vec3 pos)\n    {\n        vec3 blending = abs( wNorm );\n        blending = normalize(max(blending, 0.1));\n        float b = (blending.x + blending.y + blending.z);\n        blending /= vec3(b);\n        MOD_blendingTri=blending;\n\n        MOD_tc = pos.yz;\n        MOD_tc1 = pos.xz;\n        MOD_tc2 = pos.xy;\n    }\n\n#endif\n\nmat4 MOD_rotationX( in float angle ) {\n\treturn mat4(\t1.0,\t\t0,\t\t\t0,\t\t\t0,\n\t\t\t \t\t0, \tcos(angle),\t-sin(angle),\t\t0,\n\t\t\t\t\t0, \tsin(angle),\t cos(angle),\t\t0,\n\t\t\t\t\t0, \t\t\t0,\t\t\t  0, \t\t1);\n}\n\nmat4 MOD_rotationY( in float angle ) {\n\treturn mat4(\tcos(angle),\t\t0,\t\tsin(angle),\t0,\n\t\t\t \t\t\t\t0,\t\t1.0,\t\t\t 0,\t0,\n\t\t\t\t\t-sin(angle),\t0,\t\tcos(angle),\t0,\n\t\t\t\t\t\t\t0, \t\t0,\t\t\t\t0,\t1);\n}\n\nmat4 MOD_rotationZ( in float angle ) {\n\treturn mat4(\tcos(angle),\t\t-sin(angle),\t0,\t0,\n\t\t\t \t\tsin(angle),\t\tcos(angle),\t\t0,\t0,\n\t\t\t\t\t\t\t0,\t\t\t\t0,\t\t1,\t0,\n\t\t\t\t\t\t\t0,\t\t\t\t0,\t\t0,\t1);\n}\n",
  });
  const n = e.inTrigger("render"),
    a = e.outTrigger("trigger"),
    r = e.inTexture("Texture"),
    i = CGL.TextureEffect.AddBlendSelect(e, "blendMode"),
    s = e.inValueSlider("Amount", 0.3),
    o = e.inSwitch("Target", ["Color", "Pointsize", "Alpha"], "Color"),
    l = e.inValue("Scale", 10),
    u = e.inBool("Use Texture Alpha", false),
    h = e.inFloat("Pos X", 0),
    c = e.inFloat("Pos Y", 0),
    m = e.inFloat("Rot X", 0),
    p = e.inFloat("Rot Y", 0),
    g = e.inFloat("Rot Z", 0),
    f = e.inValueSelect(
      "Mapping",
      [
        "Triplanar",
        "XY",
        "XZ",
        "YZ",
        "Screen",
        "TexCoords 1",
        "TexCoords 2",
        "TexCoords 3",
      ],
      "XY",
    ),
    d = e.inValueBool("Discard"),
    b = e.inValueBool("WorldSpace");
  const v = e.patch.cgl;
  u.onChange =
    o.onChange =
    i.onChange =
    d.onChange =
    b.onChange =
    f.onChange =
      x;
  e.setPortGroup("Rotation", [m, p, g]);
  e.setPortGroup("Position", [h, c]);
  const O = new CGL.ShaderModifier(v, e.name);
  O.addModule({
    title: e.name,
    name: "MODULE_VERTEX_POSITION",
    srcHeadVert: t.maptexture_body_vert,
    srcBodyVert: t.maptexture_vert,
    attributes: [
      { type: "vec2", name: "attrTexCoord1", nameFrag: "texCoord1" },
      { type: "vec2", name: "attrTexCoord2", nameFrag: "texCoord2" },
    ],
  });
  let _ = t.maptexture_frag;
  O.addModule({
    title: e.name,
    name: "MODULE_COLOR",
    srcHeadFrag: _,
    srcBodyFrag: t.maptexture_body_frag,
  });
  O.addUniformBoth("f", "MOD_rotX", m);
  O.addUniformBoth("f", "MOD_rotY", p);
  O.addUniformBoth("f", "MOD_rotZ", g);
  O.addUniformBoth("t", "MOD_tex");
  O.addUniformBoth("f", "MOD_scale", l);
  O.addUniformBoth("f", "MOD_amount", s);
  O.addUniformBoth("2f", "MOD_offset", h, c);
  const A = O.addUniformFrag("f", "MOD_viewPortW");
  const y = O.addUniformFrag("f", "MOD_viewPortH");
  CGL.TextureEffect.setupBlending(e, O, i, s);
  x();
  function x() {
    O.toggleDefine("MOD_USE_IMGALPHA", u.get());
    O.toggleDefine("MOD_WORLDSPACE", b.get());
    O.toggleDefine("MOD_MAP_XY", f.get() == "XY");
    O.toggleDefine("MOD_MAP_XZ", f.get() == "XZ");
    O.toggleDefine("MOD_MAP_YZ", f.get() == "YZ");
    O.toggleDefine("MOD_MAP_TEXCOORD", f.get() == "TexCoords 1");
    O.toggleDefine("MOD_MAP_TEXCOORD1", f.get() == "TexCoords 2");
    O.toggleDefine("MOD_MAP_TEXCOORD2", f.get() == "TexCoords 3");
    O.toggleDefine("MOD_MAP_SCREEN", f.get() == "Screen");
    O.toggleDefine("MOD_MAP_TRIPLANAR", f.get() == "Triplanar");
    O.toggleDefine("MOD_DISCARD", d.get());
    O.toggleDefine("MOD_BLEND_NORMAL", i.get() == "Normal");
    O.toggleDefine("MOD_BLEND_ADD", i.get() == "Add");
    O.toggleDefine("MOD_BLEND_MUL", i.get() == "Mul");
    O.toggleDefine("MOD_BLEND_MUL", i.get() == "Mul");
    O.toggleDefine("MOD_TARGET_ALPHA", o.get() == "Alpha");
    O.toggleDefine("MOD_TARGET_COLOR", o.get() == "Color");
    O.toggleDefine("MOD_TARGET_POINTSIZE", o.get() == "Pointsize");
    if (o.get() == "Pointsize" && f.get() == "Screen")
      e.setUiError(
        "pointscreen",
        "This combination of Mapping and Target is not possible",
        1,
      );
    else e.setUiError("pointscreen", null);
  }
  n.onTriggered = function () {
    const e = v.getViewPort();
    O.setUniformValue("MOD_viewPortW", e[2]);
    O.setUniformValue("MOD_viewPortH", e[3]);
    O.bind();
    let t = r.get();
    if (!t) t = CGL.Texture.getEmptyTexture(v).tex;
    else t = t.tex;
    O.pushTexture("MOD_tex", t);
    a.trigger();
    O.unbind();
  };
};
Ops.Gl.ShaderEffects.TextureProjection_v2.prototype = new CABLES.Op();
CABLES.OPS["9be647c2-7afd-40ed-b669-9826ea6a50ca"] = {
  f: Ops.Gl.ShaderEffects.TextureProjection_v2,
  objName: "Ops.Gl.ShaderEffects.TextureProjection_v2",
};
Ops.Vars.VarSetTexture_v2 = function () {
  CABLES.Op.apply(this, arguments);
  const e = this;
  const t = (e.attachments = {});
  const n = e.inTexture("Value", null);
  e.varName = e.inDropDown("Variable", [], "", true);
  new CABLES.VarSetOpWrapper(e, "object", n, e.varName);
};
Ops.Vars.VarSetTexture_v2.prototype = new CABLES.Op();
CABLES.OPS["4fbfc71e-1429-439f-8591-ad35961252ed"] = {
  f: Ops.Vars.VarSetTexture_v2,
  objName: "Ops.Vars.VarSetTexture_v2",
};
Ops.Vars.VarGetTexture_v2 = function () {
  CABLES.Op.apply(this, arguments);
  const e = this;
  const t = (e.attachments = {});
  const n = e.outTexture("Value");
  e.varName = e.inValueSelect("Variable", [], "", true);
  new CABLES.VarGetOpWrapper(e, "object", e.varName, n);
};
Ops.Vars.VarGetTexture_v2.prototype = new CABLES.Op();
CABLES.OPS["5f8ce5fc-9787-45c9-9a83-0eebd2c6de15"] = {
  f: Ops.Vars.VarGetTexture_v2,
  objName: "Ops.Vars.VarGetTexture_v2",
};
Ops.Gl.Performance = function () {
  CABLES.Op.apply(this, arguments);
  const s = this;
  const k = (s.attachments = {});
  const e = s.inTrigger("exe"),
    o = s.inValueBool("Visible", true),
    B = s.inValueBool("Measure GPU", true),
    l = s.outTrigger("childs"),
    t = s.inSwitch("Position", ["top", "bottom"], "top"),
    n = s.inBool("Open", false),
    R = s.inBool("Smooth Graph", true),
    D = s.inFloat("Scale", 3),
    u = s.inFloat("Size", 128),
    U = s.outObject("Canvas"),
    G = s.outNumber("FPS");
  const a = s.patch.cgl;
  const r = document.createElement("div");
  let i = null;
  let h = null;
  let c = false;
  let m = 0;
  let p = 0;
  let g = 0;
  let f = 0;
  let d = 0;
  const b = [];
  const v = [];
  const O = [];
  const _ = [];
  let A = 0;
  let y = 0;
  let x = null;
  let F = 0;
  let z = 0;
  const I = ["|", "/", "-", "\\"];
  let T = true;
  const X = "#007f9c";
  const q = "#aaaaaa";
  const H = "#222222";
  const S = "#003f5c";
  const C = "#7a5195";
  const j = "#ef5675";
  const N = "#ffa600";
  let Y = false;
  let E = 0;
  let w = 0;
  let M = 0;
  s.toWorkPortsNeedToBeLinked(e, l);
  const W = s.patch.cgl.gl;
  const Z = W.getExtension("EXT_disjoint_timer_query_webgl2");
  e.onLinkChanged = o.onChange = () => {
    L();
    K();
  };
  t.onChange = Q;
  u.onChange = V;
  r.id = "performance";
  r.style.position = "absolute";
  r.style.left = "0px";
  r.style.opacity = "0.8";
  r.style.padding = "10px";
  r.style.cursor = "pointer";
  r.style.background = "#222";
  r.style.color = "white";
  r.style["font-family"] = "monospace";
  r.style["font-size"] = "12px";
  r.style["z-index"] = "99999";
  r.innerHTML = "&nbsp;";
  r.addEventListener("click", J);
  const P = s.patch.cgl.canvas.parentElement;
  P.appendChild(r);
  V();
  L();
  Q();
  K();
  s.onDelete = function () {
    if (x) x.remove();
    if (r) r.remove();
  };
  function Q() {
    x.style["pointer-events"] = "none";
    if (t.get() == "top") {
      x.style.top = r.style.top = "0px";
      x.style.bottom = r.style.bottom = "initial";
    } else {
      x.style.bottom = r.style.bottom = "0px";
      x.style.top = r.style.top = "initial";
    }
  }
  function K() {
    if (!o.get() || !e.isLinked()) {
      r.style.display = "none";
      r.style.opacity = 0;
      x.style.display = "none";
    } else {
      r.style.display = "block";
      r.style.opacity = 1;
      x.style.display = "block";
    }
  }
  function V() {
    if (!x) return;
    const t = Math.max(0, parseInt(u.get()));
    x.width = t;
    x.height = t;
    r.style.left = t + "px";
    b.length = 0;
    v.length = 0;
    O.length = 0;
    _.length = 0;
    for (let e = 0; e < t; e++) {
      b[e] = -1;
      v[e] = -1;
      O[e] = -1;
      _[e] = -1;
    }
  }
  n.onChange = function () {
    c = n.get();
    L();
  };
  function J() {
    if (!o.get()) return;
    r.style.opacity = 1;
    c = !c;
    L();
  }
  function L() {
    te();
    if (!x) ee();
    if (c) {
      x.style.display = "block";
      r.style.left = u.get() + "px";
      r.style["min-height"] = "56px";
    } else {
      x.style.display = "none";
      r.style.left = "0px";
      r.style["min-height"] = "auto";
    }
  }
  function $() {
    const t = x.height;
    const n = D.get();
    h.fillStyle = H;
    h.fillRect(0, 0, x.width, t);
    h.fillStyle = S;
    let a = 0;
    const r = Math.max(0, parseInt(u.get()));
    for (a = r; a >= 0; a--) {
      if (b[a] > 30) h.fillStyle = X;
      if (b[a] > 60) h.fillStyle = q;
      h.fillRect(r - a, t - b[a] * n, 1, b[a] * n);
      if (b[a] > 30) h.fillStyle = S;
    }
    for (a = r; a >= 0; a--) {
      let e = 0;
      h.fillStyle = C;
      e = v[a];
      h.fillRect(r - a, t - e * n, 1, v[a] * n);
      h.fillStyle = j;
      e += O[a];
      h.fillRect(r - a, t - e * n, 1, O[a] * n);
      h.fillStyle = N;
      e += _[a];
      h.fillRect(r - a, t - e * n, 1, _[a] * n);
    }
    for (let e = 10; e < t; e += 10) {
      h.fillStyle = "#888";
      const i = t - e * n;
      h.fillRect(x.width - 5, i, 5, 1);
      h.font = "8px arial";
      h.fillText(e + "ms", x.width - 27, i + 3);
    }
    h.fillStyle = "#fff";
    h.fillRect(x.width - 5, t - (1e3 / p) * n, 5, 1);
    h.fillText(Math.round(1e3 / p) + "ms", x.width - 27, t - (1e3 / p) * n);
  }
  function ee() {
    x = document.createElement("canvas");
    x.id = "performance_" + s.patch.config.glCanvasId;
    x.width = u.get();
    x.height = u.get();
    x.style.display = "block";
    x.style.opacity = 0.9;
    x.style.position = "absolute";
    x.style.left = "0px";
    x.style.cursor = "pointer";
    x.style.top = "-64px";
    x.style["z-index"] = "99998";
    P.appendChild(x);
    h = x.getContext("2d");
    x.addEventListener("click", J);
    V();
  }
  function te() {
    if (!o.get()) return;
    let e = "";
    if (s.patch.cgl.profileData.profileShaderCompiles > 0)
      e +=
        "Shader compile (" +
        s.patch.cgl.profileData.profileShaderCompileName +
        ") ";
    if (s.patch.cgl.profileData.profileShaderGetUniform > 0)
      e +=
        "Shader get uni loc! (" +
        s.patch.cgl.profileData.profileShaderGetUniformName +
        ")";
    if (s.patch.cgl.profileData.profileTextureResize > 0)
      e += "Texture resize! ";
    if (s.patch.cgl.profileData.profileFrameBuffercreate > 0)
      e += "Framebuffer create! ";
    if (s.patch.cgl.profileData.profileEffectBuffercreate > 0)
      e += "Effectbuffer create! ";
    if (s.patch.cgl.profileData.profileTextureDelete > 0)
      e += "Texture delete! ";
    if (s.patch.cgl.profileData.profileNonTypedAttrib > 0)
      e +=
        "Not-Typed Buffer Attrib! " +
        s.patch.cgl.profileData.profileNonTypedAttribNames;
    if (s.patch.cgl.profileData.profileTextureNew > 0)
      e += "new texture created! ";
    if (s.patch.cgl.profileData.profileGenMipMap > 0)
      e += "generating mip maps!";
    if (e.length > 0) {
      e = '| <span style="color:#f80;">WARNING: ' + e + "<span>";
    }
    let t = "";
    if (c) {
      t += '<span style="color:' + S + '">■</span> ' + p + " fps ";
      t +=
        '<span style="color:' +
        C +
        '">■</span> ' +
        Math.round(w * 100) / 100 +
        "ms mainloop ";
      t +=
        '<span style="color:' +
        j +
        '">■</span> ' +
        Math.round(M * 100) / 100 +
        "ms onframe ";
      if (E)
        t +=
          '<span style="color:' +
          N +
          '">■</span> ' +
          Math.round(E * 100) / 100 +
          "ms GPU";
      t += e;
      r.innerHTML = t;
    } else {
      t += p + " fps / ";
      t +=
        "CPU: " +
        Math.round(s.patch.cgl.profileData.profileOnAnimFrameOps * 100) / 100 +
        "ms / ";
      if (E) t += "GPU: " + Math.round(E * 100) / 100 + "ms  ";
      r.innerHTML = t;
    }
    if (s.patch.loading.getProgress() != 1) {
      r.innerHTML +=
        "<br/>loading " +
        Math.round(s.patch.loading.getProgress() * 100) +
        "% " +
        I[++z % I.length];
    }
    if (c) {
      let t = 0;
      A = 0;
      d = 0;
      for (let e = b.length; e > b.length - b.length / 3; e--) {
        if (b[e] > -1) {
          A += b[e];
          t++;
        }
        if (v[e] > -1) d += v[e];
      }
      A /= t;
      d /= t;
      r.innerHTML +=
        "<br/> " +
        a.canvasWidth +
        " x " +
        a.canvasHeight +
        " (x" +
        a.pixelDensity +
        ") ";
      r.innerHTML +=
        "<br/>frame avg: " +
        Math.round(d * 100) / 100 +
        " ms (" +
        Math.round((d / A) * 100) +
        "%) / " +
        Math.round(A * 100) / 100 +
        " ms";
      r.innerHTML += " (self: " + Math.round(y * 100) / 100 + " ms) ";
      r.innerHTML +=
        "<br/>shader binds: " +
        Math.ceil(s.patch.cgl.profileData.profileShaderBinds / p) +
        " uniforms: " +
        Math.ceil(s.patch.cgl.profileData.profileUniformCount / p) +
        " mvp_uni_mat4: " +
        Math.ceil(s.patch.cgl.profileData.profileMVPMatrixCount / p) +
        " num glPrimitives: " +
        Math.ceil(s.patch.cgl.profileData.profileMeshNumElements / p) +
        " fenced pixelread: " +
        Math.ceil(s.patch.cgl.profileData.profileFencedPixelRead) +
        " mesh.setGeom: " +
        s.patch.cgl.profileData.profileMeshSetGeom +
        " videos: " +
        s.patch.cgl.profileData.profileVideosPlaying +
        " tex preview: " +
        s.patch.cgl.profileData.profileTexPreviews;
      r.innerHTML +=
        " draw meshes: " +
        Math.ceil(s.patch.cgl.profileData.profileMeshDraw / p) +
        " framebuffer blit: " +
        Math.ceil(s.patch.cgl.profileData.profileFramebuffer / p) +
        " texeffect blit: " +
        Math.ceil(s.patch.cgl.profileData.profileTextureEffect / p);
      r.innerHTML +=
        " all shader compiletime: " +
        Math.round(s.patch.cgl.profileData.shaderCompileTime * 100) / 100;
    }
    s.patch.cgl.profileData.clear();
  }
  function ne(e) {
    e.style.padding = "0px";
    e.style.margin = "0px";
  }
  function ae(t, e, n, a) {
    const r = 20;
    t.usedAvg = t.usedAvg || t.used;
    if (!t.ele || T) {
      const s = document.createElement("div");
      t.ele = s;
      if (t.childs && t.childs.length > 0) s.style.height = "500px";
      else s.style.height = r + "px";
      s.style.overflow = "hidden";
      s.style.display = "inline-block";
      if (!t.isRoot) {
        s.innerHTML =
          '<div style="min-height:' +
          r +
          'px;width:100%;overflow:hidden;color:black;position:relative">&nbsp;' +
          t.name +
          "</div>";
        s.style["background-color"] =
          "rgb(" + t.colR + "," + t.colG + "," + t.colB + ")";
        s.style["border-left"] = "1px solid black";
      }
      e.appendChild(s);
    }
    if (!t.isRoot) {
      if (performance.now() - t.lastTime > 200) {
        t.ele.style.display = "none";
        t.hidden = true;
      } else {
        if (t.hidden) {
          t.ele.style.display = "inline-block";
          t.hidden = false;
        }
      }
      t.ele.style.float = "left";
      t.ele.style.width = Math.floor((t.usedAvg / n) * 98) + "%";
    } else {
      t.ele.style.width = "100%";
      t.ele.style.clear = "both";
      t.ele.style.float = "none";
    }
    if (t && t.childs && t.childs.length > 0) {
      let e = 0;
      for (var i = 0; i < t.childs.length; i++) {
        t.childs[i].usedAvg =
          (t.childs[i].usedAvg || t.childs[i].used) * 0.95 +
          t.childs[i].used * 0.05;
        e += t.childs[i].usedAvg;
      }
      for (var i = 0; i < t.childs.length; i++) {
        ae(t.childs[i], t.ele, e, a + 1);
      }
    }
  }
  function re(t) {
    for (let e = 0; e < t.childs.length; e++) re(t.childs[e]);
    t.childs.length = 0;
  }
  function ie() {
    if (!CGL.performanceMeasures) return;
    if (!i) {
      s.log("create measure ele");
      i = document.createElement("div");
      i.style.width = "100%";
      i.style["background-color"] = "#444";
      i.style.bottom = "10px";
      i.style.height = "100px";
      i.style.opacity = "1";
      i.style.position = "absolute";
      i.style["z-index"] = "99999";
      i.innerHTML = "";
      P.appendChild(i);
    }
    let t = 0;
    const n = CGL.performanceMeasures[0];
    for (let e = 0; e < n.childs.length; e++) t += n.childs[e].used;
    ae(CGL.performanceMeasures[0], i, t, 0);
    n.childs.length = 0;
    re(CGL.performanceMeasures[0]);
    CGL.performanceMeasures.length = 0;
    T = false;
  }
  e.onTriggered = se;
  function se() {
    const e = performance.now();
    m++;
    if (Z && B.get() && o.get())
      s.patch.cgl.profileData.doProfileGlQuery = true;
    else s.patch.cgl.profileData.doProfileGlQuery = false;
    if (g === 0) g = Date.now();
    if (Date.now() - g >= 1e3) {
      p = m;
      m = 0;
      G.set(p);
      if (o.get()) te();
      g = Date.now();
    }
    const n = s.patch.cgl.profileData.glQueryData;
    E = 0;
    if (n) {
      let t = 0;
      for (let e in n) {
        t++;
        if (n[e].time) E += n[e].time;
      }
    }
    if (o.get()) {
      ie();
      if (c && !s.patch.cgl.profileData.pause) {
        b.push(s.patch.cgl.profileData.profileFrameDelta);
        b.shift();
        v.push(f);
        v.shift();
        O.push(
          s.patch.cgl.profileData.profileOnAnimFrameOps -
            s.patch.cgl.profileData.profileMainloopMs,
        );
        O.shift();
        _.push(E);
        _.shift();
        $();
      }
    }
    F = performance.now();
    y = performance.now() - e;
    const t = performance.now();
    U.setRef(x);
    l.trigger();
    const a = performance.now() - t;
    const r = s.patch.cgl.profileData.profileMainloopMs;
    const i =
      s.patch.cgl.profileData.profileOnAnimFrameOps -
      s.patch.cgl.profileData.profileMainloopMs;
    if (R.get()) {
      f = f * 0.9 + a * 0.1;
      w = w * 0.5 + r * 0.5;
      M = M * 0.5 + i * 0.5;
    } else {
      f = a;
      w = r;
      M = i;
    }
    s.patch.cgl.profileData.clearGlQuery();
  }
};
Ops.Gl.Performance.prototype = new CABLES.Op();
CABLES.OPS["9cd2d9de-000f-4a14-bd13-e7d5f057583c"] = {
  f: Ops.Gl.Performance,
  objName: "Ops.Gl.Performance",
};
Ops.String.String_v2 = function () {
  CABLES.Op.apply(this, arguments);
  const e = this;
  const t = (e.attachments = {});
  const n = e.inString("value", ""),
    a = e.outString("String");
  n.onChange = function () {
    a.set(n.get());
  };
};
Ops.String.String_v2.prototype = new CABLES.Op();
CABLES.OPS["d697ff82-74fd-4f31-8f54-295bc64e713d"] = {
  f: Ops.String.String_v2,
  objName: "Ops.String.String_v2",
};
Ops.Ui.VizArrayTable = function () {
  CABLES.Op.apply(this, arguments);
  const g = this;
  const e = (g.attachments = {});
  const f = g.inArray("Array"),
    d = g.inInt("Start Row", 0);
  g.setUiAttrib({
    height: 200,
    width: 400,
    resizable: true,
    vizLayerMaxZoom: 2500,
  });
  function b(t) {
    let n = "";
    if (typeof t == "string") {
      n = '"' + t + '"';
    } else if (CABLES.UTILS.isNumeric(t)) n = String(Math.round(t * 1e4) / 1e4);
    else if (Array.isArray(t)) {
      let e = "...";
      if (t.length == 0) e = "";
      n = "[" + e + "] (" + t.length + ")";
    } else if (typeof t == "object") {
      try {
        n = JSON.stringify(t, true, 1);
      } catch (e) {
        n = "{???}";
      }
    } else if (t != t || t === undefined) {
      n += String(t);
    } else {
      n += String(t);
    }
    return n;
  }
  g.renderVizLayer = (a, r) => {
    a.fillStyle = "#222";
    a.fillRect(r.x, r.y, r.width, r.height);
    a.save();
    a.scale(r.scale, r.scale);
    a.font = "normal 10px sourceCodePro";
    a.fillStyle = "#ccc";
    const i = f.get() || [];
    let s = 1;
    if (f.get() === null) g.setUiAttrib({ extendTitle: "null" });
    else if (f.get() === undefined) g.setUiAttrib({ extendTitle: "undefined" });
    else g.setUiAttrib({ extendTitle: "length: " + i.length });
    if (f.links.length > 0 && f.links[0].getOtherPort(f))
      s = f.links[0].getOtherPort(f).uiAttribs.stride || 1;
    let e = Math.floor(r.height / r.scale / 10 - 1);
    let o = 4;
    let l = d.get() * s;
    let n = [];
    for (let e = 0; e < s; e++) n[e] = 0;
    for (let t = l; t < l + e * s; t += s) {
      for (let e = 0; e < s; e++) {
        const c = i[t + e];
        n[e] = Math.max(n[e], b(c).length);
      }
    }
    let u = [];
    let t = 30;
    for (let e = 0; e < s; e++) {
      u[e] = t;
      t += (n[e] + 1) * 7;
    }
    for (let n = l; n < l + e * s; n += s) {
      if (n < 0) continue;
      if (n + s > i.length) continue;
      a.fillStyle = "#666";
      const m = n / s;
      if (m >= 0)
        a.fillText(
          m,
          r.x / r.scale + o,
          r.y / r.scale + 10 + ((n - l) / s) * 10 + o,
        );
      for (let t = 0; t < s; t++) {
        const c = i[n + t];
        let e = b(c);
        a.fillStyle = "#ccc";
        if (typeof c == "string") {
        } else if (CABLES.UTILS.isNumeric(c))
          e = String(Math.round(c * 1e4) / 1e4);
        else if (Array.isArray(c)) {
        } else if (typeof c == "object") {
        } else if (c != c || c === undefined) {
          a.fillStyle = "#f00";
        }
        a.fillText(
          e,
          r.x / r.scale + u[t],
          r.y / r.scale + 10 + ((n - l) / s) * 10 + o,
        );
      }
    }
    if (f.get() === null)
      a.fillText("null", r.x / r.scale + 10, r.y / r.scale + 10 + o);
    else if (f.get() === undefined)
      a.fillText("undefined", r.x / r.scale + 10, r.y / r.scale + 10 + o);
    const h = 30;
    if (r.scale <= 0) return;
    if (l > 0) {
      const p = a.createLinearGradient(
        0,
        r.y / r.scale + 5,
        0,
        r.y / r.scale + h,
      );
      p.addColorStop(0, "#222");
      p.addColorStop(1, "rgba(34,34,34,0.0)");
      a.fillStyle = p;
      a.fillRect(r.x / r.scale, r.y / r.scale, 2e5, h);
    }
    if (l + e * s < i.length) {
      const p = a.createLinearGradient(
        0,
        r.y / r.scale + r.height / r.scale - h + 5,
        0,
        r.y / r.scale + r.height / r.scale - h + h,
      );
      p.addColorStop(1, "#222");
      p.addColorStop(0, "rgba(34,34,34,0.0)");
      a.fillStyle = p;
      a.fillRect(r.x / r.scale, r.y / r.scale + r.height / r.scale - h, 2e5, h);
    }
    a.restore();
  };
};
Ops.Ui.VizArrayTable.prototype = new CABLES.Op();
CABLES.OPS["af2eeaaf-ff86-4bfb-9a27-42f05160a5d8"] = {
  f: Ops.Ui.VizArrayTable,
  objName: "Ops.Ui.VizArrayTable",
};
Ops.Html.DivElement_v3 = function () {
  CABLES.Op.apply(this, arguments);
  const e = this;
  const t = (e.attachments = {});
  const n = e.inString("Text", "Hello Div"),
    a = e.inString("Id"),
    r = e.inString("Class"),
    i = e.inStringEditor(
      "Style",
      "position:absolute;\nz-index:100;",
      "inline-css",
    ),
    s = e.inValueBool("Interactive", false),
    o = e.inValueBool("Visible", true),
    l = e.inValueBool("Convert Line Breaks", false),
    u = e.inValueBool("Propagate Click-Events", true),
    h = e.outObject("DOM Element", null, "element"),
    c = e.outBoolNum("Hover"),
    m = e.outTrigger("Clicked");
  let p = null;
  let g = null;
  let f = "block";
  let d = null;
  const b = e.patch.cgl.canvas.parentElement;
  v();
  r.onChange = S;
  l.onChange = n.onChange = y;
  i.onChange = x;
  s.onChange = E;
  o.onChange = A;
  y();
  x();
  P();
  E();
  e.onDelete = O;
  h.onLinkChanged = x;
  function v() {
    d = e.patch.getDocument().createElement("div");
    d.dataset.op = e.id;
    d.classList.add("cablesEle");
    if (a.get()) d.id = a.get();
    b.appendChild(d);
    h.set(d);
  }
  function O() {
    if (d) T();
    if (d && d.parentNode) d.parentNode.removeChild(d);
    g = null;
    d = null;
  }
  function _(e) {
    if (!e) {
      d.style.visibility = "hidden";
      f = d.style.display || "block";
      d.style.display = "none";
    } else {
      if (f == "none") f = "block";
      d.style.visibility = "visible";
      d.style.display = f;
    }
  }
  function A() {
    _(o.get());
  }
  function y() {
    let e = n.get();
    if (g === e) return;
    g = e;
    if (e && l.get()) e = e.replace(/(?:\r\n|\r|\n)/g, "<br>");
    if (d.innerHTML != e) d.innerHTML = e;
    h.set(null);
    h.set(d);
  }
  function x() {
    if (!d) return;
    d.setAttribute("style", i.get());
    A();
    h.set(null);
    h.set(d);
    if (!d.parentElement) {
      b.appendChild(d);
    }
    P();
  }
  let I = "";
  function T() {
    if (!d) return;
    const t = (r.get() || "").split(" ");
    for (let e = 0; e < t.length; e++) {
      if (t[e]) d.classList.remove(t[e]);
    }
    I = "";
  }
  function S() {
    const t = (r.get() || "").split(" ");
    const n = (I || "").split(" ");
    let a = false;
    for (let e = 0; e < n.length; e++) {
      if (n[e] && t.indexOf(n[e].trim()) == -1) {
        a = true;
        d.classList.remove(n[e]);
      }
    }
    for (let e = 0; e < t.length; e++) {
      if (t[e]) {
        d.classList.add(t[e].trim());
      }
    }
    I = r.get();
    P();
  }
  function C(e) {
    c.set(true);
  }
  function j(e) {
    c.set(false);
  }
  function N(e) {
    if (!u.get()) {
      e.stopPropagation();
    }
    m.trigger();
  }
  function E() {
    w();
    if (s.get()) M();
  }
  a.onChange = function () {
    d.id = a.get();
  };
  function w() {
    if (p) {
      p.removeEventListener("pointerdown", N);
      p.removeEventListener("pointerleave", j);
      p.removeEventListener("pointerenter", C);
      p = null;
    }
  }
  function M() {
    if (p) w();
    p = d;
    if (p) {
      p.addEventListener("pointerdown", N);
      p.addEventListener("pointerleave", j);
      p.addEventListener("pointerenter", C);
    }
  }
  e.addEventListener("onEnabledChange", function (e) {
    O();
    if (e) {
      v();
      x();
      S();
      y();
      E();
    }
  });
  function P() {
    if (r.get() && i.get()) {
      e.setUiError("error", "Element uses external and inline CSS", 1);
    } else {
      e.setUiError("error", null);
    }
  }
};
Ops.Html.DivElement_v3.prototype = new CABLES.Op();
CABLES.OPS["d55d398c-e68e-486b-b0ce-d9c4bdf7df05"] = {
  f: Ops.Html.DivElement_v3,
  objName: "Ops.Html.DivElement_v3",
};
Ops.Html.AppendChild_v2 = function () {
  CABLES.Op.apply(this, arguments);
  const e = this;
  const t = (e.attachments = {});
  let n = e.patch.cgl.canvas.parentElement;
  let a = null;
  let r = null;
  let i = e.inObject("Parent", null, "element");
  let s = e.inObject("Child", null, "element");
  let o = e.outObject("Parent Out", null, "element");
  let l = e.outObject("Child Out", null, "element");
  i.onChange = u;
  s.onChange = u;
  function u() {
    let e = i.get();
    let t = s.get();
    if (e !== a) {
      if (e) {
        h(e, t);
      } else {
        c(e, t);
      }
      a = e;
    }
    if (t !== r) {
      if (t) {
        m(e, t);
      } else {
        p(e, t);
      }
      r = t;
    }
    o.set(e);
    l.set(t);
  }
  function h(e, t) {
    if (t) {
      e.appendChild(t);
    }
  }
  function c(e, t) {
    if (t) {
      n.appendChild(t);
    }
  }
  function m(e, t) {
    if (e) {
      e.appendChild(t);
    }
  }
  function p(e, t) {
    if (r) {
      n.appendChild(r);
    }
  }
};
Ops.Html.AppendChild_v2.prototype = new CABLES.Op();
CABLES.OPS["e15cfbc7-d2fa-4348-8964-66d02aec77aa"] = {
  f: Ops.Html.AppendChild_v2,
  objName: "Ops.Html.AppendChild_v2",
};
Ops.Boolean.ToggleBool_v2 = function () {
  CABLES.Op.apply(this, arguments);
  const e = this;
  const t = (e.attachments = {});
  const n = e.inTriggerButton("trigger"),
    a = e.inTriggerButton("reset"),
    r = e.inBool("Default", false),
    i = e.outBoolNum("result");
  let s = false;
  e.onLoadedValueSet = () => {
    i.set(r.get());
  };
  n.onTriggered = function () {
    s = !s;
    i.set(s);
  };
  a.onTriggered = function () {
    s = r.get();
    i.set(s);
  };
};
Ops.Boolean.ToggleBool_v2.prototype = new CABLES.Op();
CABLES.OPS["4313d9bb-96b6-43bc-9190-6068cfb2593c"] = {
  f: Ops.Boolean.ToggleBool_v2,
  objName: "Ops.Boolean.ToggleBool_v2",
};
Ops.Trigger.TriggerReceive = function () {
  CABLES.Op.apply(this, arguments);
  const a = this;
  const e = (a.attachments = {});
  const t = a.outTrigger("Triggered");
  a.varName = a.inValueSelect("Named Trigger", [], "", true);
  i();
  a.patch.addEventListener("namedTriggersChanged", i);
  let n = null;
  function r() {
    t.trigger();
  }
  function i() {
    if (CABLES.UI) {
      let t = [];
      let n = a.patch.namedTriggers;
      for (let e in n) t.push(e);
      a.varName.uiAttribs.values = t;
    }
  }
  a.varName.onChange = function () {
    if (n) {
      let e = a.patch.namedTriggers[n];
      let t = e.indexOf(r);
      if (t != -1) e.splice(t, 1);
    }
    a.setTitle(">" + a.varName.get());
    a.patch.namedTriggers[a.varName.get()] =
      a.patch.namedTriggers[a.varName.get()] || [];
    let e = a.patch.namedTriggers[a.varName.get()];
    e.push(r);
    n = a.varName.get();
    s();
    a.patch.emitEvent("opTriggerNameChanged", a, a.varName.get());
  };
  a.on("uiParamPanel", s);
  function s() {
    if (!a.varName.get()) {
      a.setUiError("unknowntrigger", "unknown trigger");
    } else a.setUiError("unknowntrigger", null);
  }
};
Ops.Trigger.TriggerReceive.prototype = new CABLES.Op();
CABLES.OPS["0816c999-f2db-466b-9777-2814573574c5"] = {
  f: Ops.Trigger.TriggerReceive,
  objName: "Ops.Trigger.TriggerReceive",
};
Ops.Number.SwitchNumber = function () {
  CABLES.Op.apply(this, arguments);
  const n = this;
  const e = (n.attachments = {});
  const t = n.inValueInt("Index");
  const a = [];
  const r = n.outNumber("Result");
  t.onChange = i;
  for (let t = 0; t < 16; t++) {
    let e = n.inValue("Value " + t);
    a.push(e);
    e.onChange = i;
  }
  function i() {
    if (t.get() >= 0 && a[t.get()]) {
      r.set(a[t.get()].get());
    }
  }
};
Ops.Number.SwitchNumber.prototype = new CABLES.Op();
CABLES.OPS["fbb89f72-f2e3-4d34-ad01-7d884a1bcdc0"] = {
  f: Ops.Number.SwitchNumber,
  objName: "Ops.Number.SwitchNumber",
};
Ops.Html.ElementClientRect = function () {
  CABLES.Op.apply(this, arguments);
  const a = this;
  const e = (a.attachments = {});
  const t = a.inTriggerButton("Update"),
    r = a.inObject("Element", null, "element"),
    i = a.outNumber("Width"),
    s = a.outNumber("Height"),
    o = a.outNumber("X"),
    l = a.outNumber("Y");
  t.onTriggered = () => {
    let e = r.get();
    if (!e) {
      o.set(0);
      l.set(0);
      i.set(0);
      s.set(0);
      return;
    }
    const t = e.getBoundingClientRect();
    const n = a.patch.cgl.canvas.getBoundingClientRect();
    o.set(t.left - n.left);
    l.set(t.top - n.top);
    i.set(t.width);
    s.set(t.height);
  };
};
Ops.Html.ElementClientRect.prototype = new CABLES.Op();
CABLES.OPS["7a046f98-2adc-4f8e-ad47-c600e3ef5bca"] = {
  f: Ops.Html.ElementClientRect,
  objName: "Ops.Html.ElementClientRect",
};
Ops.Html.QuerySelector_v2 = function () {
  CABLES.Op.apply(this, arguments);
  const i = this;
  const e = (i.attachments = {});
  const t = i.inTriggerButton("Update"),
    s = i.inString("Query"),
    o = i.inValueSelect("Mode", ["document", "string input"], "document"),
    l = i.inValueSelect("Type", ["text/html", "text/xml"], "text/html"),
    u = i.inStringEditor("Document", "xml"),
    h = i.outObject("Element");
  if (o.get() === "document") {
    u.setUiAttribs({ greyout: true });
    l.set("text/html");
    l.setUiAttribs({ greyout: true });
  }
  t.onTriggered = s.onChange = l.onChange = u.onChange = n;
  o.onChange = a;
  function n() {
    const n = s.get();
    const a = u.get();
    const e = o.get();
    if (e === "string input" && a) {
      let e = new DOMParser();
      let t = null;
      try {
        t = e.parseFromString(a, l.get());
        const r = t.querySelector(n);
        h.set(r);
      } catch (e) {
        i.logError(e);
      }
    } else {
      try {
        const r = document.querySelector(n);
        h.set(r);
      } catch (e) {
        i.logError(e);
      }
    }
  }
  function a() {
    if (o.get() === "document") {
      u.setUiAttribs({ greyout: true });
      l.set("text/html");
      l.setUiAttribs({ greyout: true });
    } else {
      u.setUiAttribs({ greyout: false });
      l.setUiAttribs({ greyout: false });
    }
  }
};
Ops.Html.QuerySelector_v2.prototype = new CABLES.Op();
CABLES.OPS["a1a2189b-564c-4dd7-b3d9-a6cebc0cd94e"] = {
  f: Ops.Html.QuerySelector_v2,
  objName: "Ops.Html.QuerySelector_v2",
};
Ops.Gl.CanvasInfo_v2 = function () {
  CABLES.Op.apply(this, arguments);
  const t = this;
  const e = (t.attachments = {});
  const n = t.outNumber("width"),
    a = t.outNumber("height"),
    r = t.outNumber("Pixel Ratio"),
    i = t.outNumber("Pixel Width"),
    s = t.outNumber("Pixel Height"),
    o = t.inSwitch("Pixel Unit", ["Display", "CSS"], "Display"),
    l = t.outNumber("Aspect Ratio"),
    u = t.outBool("Landscape"),
    h = t.outObject("Canvas", "element"),
    c = t.outObject("Canvas Parent", "element");
  let m = t.patch.cgl;
  h.set(t.patch.cgl.canvas);
  c.set(t.patch.cgl.canvas.parentElement);
  m.on("resize", p);
  o.onChange = p;
  p();
  function p() {
    let e = 1;
    if (o.get() == "CSS") e = t.patch.cgl.pixelDensity;
    a.set(m.canvasHeight);
    n.set(m.canvasWidth);
    s.set(m.canvasHeight * t.patch.cgl.pixelDensity);
    i.set(m.canvasWidth * t.patch.cgl.pixelDensity);
    r.set(t.patch.cgl.pixelDensity);
    l.set(m.canvasWidth / m.canvasHeight);
    u.set(m.canvasWidth > m.canvasHeight ? 1 : 0);
  }
};
Ops.Gl.CanvasInfo_v2.prototype = new CABLES.Op();
CABLES.OPS["a249e025-ae2c-4fb1-99f1-f86bfe7d5fc4"] = {
  f: Ops.Gl.CanvasInfo_v2,
  objName: "Ops.Gl.CanvasInfo_v2",
};
Ops.Vars.VarSetArray_v2 = function () {
  CABLES.Op.apply(this, arguments);
  const e = this;
  const t = (e.attachments = {});
  const n = e.inArray("Value", null);
  e.varName = e.inDropDown("Variable", [], "", true);
  new CABLES.VarSetOpWrapper(e, "array", n, e.varName);
};
Ops.Vars.VarSetArray_v2.prototype = new CABLES.Op();
CABLES.OPS["8088290f-45d4-4312-b4ca-184d34ca4667"] = {
  f: Ops.Vars.VarSetArray_v2,
  objName: "Ops.Vars.VarSetArray_v2",
};
Ops.Vars.VarGetArray_v2 = function () {
  CABLES.Op.apply(this, arguments);
  const e = this;
  const t = (e.attachments = {});
  const n = e.outArray("Value");
  e.varName = e.inValueSelect("Variable", [], "", true);
  new CABLES.VarGetOpWrapper(e, "array", e.varName, n);
};
Ops.Vars.VarGetArray_v2.prototype = new CABLES.Op();
CABLES.OPS["afa79294-aa9c-43bc-a49a-cade000a1de5"] = {
  f: Ops.Vars.VarGetArray_v2,
  objName: "Ops.Vars.VarGetArray_v2",
};
Ops.Array.Array3GetNumbers = function () {
  CABLES.Op.apply(this, arguments);
  const e = this;
  const t = (e.attachments = {});
  const n = e.inArray("Array", 3),
    a = e.inValueInt("Index"),
    r = e.outNumber("X"),
    i = e.outNumber("Y"),
    s = e.outNumber("Z");
  n.onChange = a.onChange = o;
  function o() {
    let e = n.get();
    if (!e) {
      r.set(0);
      i.set(0);
      s.set(0);
      return;
    }
    let t = Math.min(e.length - 3, a.get() * 3);
    if (e) {
      r.set(e[t + 0]);
      i.set(e[t + 1]);
      s.set(e[t + 2]);
    }
  }
};
Ops.Array.Array3GetNumbers.prototype = new CABLES.Op();
CABLES.OPS["56882cc4-c40d-4dc0-bf7c-db1b5a7acad0"] = {
  f: Ops.Array.Array3GetNumbers,
  objName: "Ops.Array.Array3GetNumbers",
};
Ops.Gl.Matrix.ScreenPosTo3d_v3 = function () {
  CABLES.Op.apply(this, arguments);
  const e = this;
  const t = (e.attachments = {});
  const n = e.inTrigger("Exec"),
    r = e.inValue("X"),
    i = e.inValue("Y"),
    a = e.inSwitch("Input Type", ["Pixel", "-1 to 1"], "Pixel"),
    s = e.outTrigger("Trigger out"),
    o = e.outNumber("Result X"),
    l = e.outNumber("Result Y");
  const u = mat4.create();
  const h = e.patch.cgl;
  n.onTriggered = m;
  let c = 0;
  a.onChange = () => {
    if (a.get() == "Pixel") c = 0;
    else if (a.get() == "-1 to 1") c = 1;
  };
  function m() {
    let e = 0;
    let t = 0;
    let n = h.canvas.clientWidth / h.canvas.clientHeight;
    if (c === 0) {
      e = (2 * r.get()) / h.canvas.clientWidth - 1;
      t = (-2 * i.get()) / h.canvas.clientHeight + 1;
    } else if (c === 1) {
      e = r.get();
      t = i.get();
    }
    let a = vec3.fromValues(e, t, 0);
    mat4.mul(u, h.pMatrix, h.vMatrix);
    mat4.invert(u, u);
    vec3.transformMat4(a, a, u);
    o.set(a[0] * 10);
    l.set(a[1] * 10);
    s.trigger();
  }
};
Ops.Gl.Matrix.ScreenPosTo3d_v3.prototype = new CABLES.Op();
CABLES.OPS["48d72532-afa6-40c9-a895-00a43635a94b"] = {
  f: Ops.Gl.Matrix.ScreenPosTo3d_v3,
  objName: "Ops.Gl.Matrix.ScreenPosTo3d_v3",
};
Ops.Trigger.RouteTriggerString_v2 = function () {
  CABLES.Op.apply(this, arguments);
  const t = this;
  const e = (t.attachments = {});
  const n = 24,
    a = t.inTriggerButton("Execute"),
    r = t.inString("Switch Value"),
    i = t.outTrigger("Next Trigger"),
    s = t.outNumber("Switched Index");
  let o = -1;
  const l = [];
  const u = [];
  for (let e = 0; e < n; e++) {
    l[e] = t.outTrigger("Trigger " + e);
    u[e] = t.inString("String " + e);
    u[e].onChange = h;
  }
  t.onLoad = t.onInit = r.onChange = h;
  function h() {
    o = -1;
    for (let e = 0; e < u.length; e++) {
      if (u[e].get() == r.get()) {
        o = e;
        break;
      }
    }
  }
  a.onTriggered = () => {
    if (o >= 0) l[o].trigger();
    s.set(o);
    i.trigger();
  };
};
Ops.Trigger.RouteTriggerString_v2.prototype = new CABLES.Op();
CABLES.OPS["13bdac27-5da7-4311-890b-6a7e49d72040"] = {
  f: Ops.Trigger.RouteTriggerString_v2,
  objName: "Ops.Trigger.RouteTriggerString_v2",
};
Ops.Gl.ImageCompose.ColorMap_v2 = function () {
  CABLES.Op.apply(this, arguments);
  const e = this;
  const t = (e.attachments = {
    colormap_frag:
      "IN vec2 texCoord;\nUNI sampler2D tex;\nUNI sampler2D gradient;\nUNI float pos;\nUNI float amount;\nUNI float vmin;\nUNI float vmax;\n\n{{CGL.BLENDMODES3}}\n\n\nfloat lumi(vec3 color)\n{\n   return vec3(dot(vec3(0.2126,0.7152,0.0722), color)).r;\n}\n\nvoid main()\n{\n    vec4 base=texture(tex,texCoord);\n    float a=base.a;\n\n    base=clamp(base,vmin,vmax);\n\n    #ifdef METH_LUMI\n        vec4 color=texture(gradient,vec2(lumi(base.rgb),pos));\n    #endif\n\n    #ifdef METH_CHANNELS\n        vec4 color=vec4(1.0);\n        color.r=texture(gradient,vec2(base.r,pos)).r;\n        color.g=texture(gradient,vec2(base.g,pos)).g;\n        color.b=texture(gradient,vec2(base.b,pos)).b;\n    #endif\n\n    base.a=color.a=a;\n\n\n    outColor=cgl_blendPixel(base,color,amount);\n\n}\n",
  });
  let n = e.inTrigger("render");
  let a = e.outTrigger("trigger");
  const r = CGL.TextureEffect.AddBlendSelect(e, "Blend Mode", "normal");
  const i = e.inValueSlider("Amount", 1);
  let s = e.inTexture("Gradient");
  let o = e.inSwitch("Method", ["Luminance", "Channels"], "Luminance");
  let l = e.inFloatSlider("Min", 0);
  let u = e.inFloatSlider("Max", 1);
  let h = e.inValueSlider("Position", 0.5);
  e.setPortGroup("Vertical Position", [l, u, h]);
  let c = e.patch.cgl;
  let m = new CGL.Shader(c, e.name);
  m.define("METH_LUMI");
  m.setSource(m.getDefaultVertexShader(), t.colormap_frag);
  let p = new CGL.Uniform(m, "t", "tex", 0);
  let g = new CGL.Uniform(m, "t", "gradient", 1);
  let f = new CGL.Uniform(m, "f", "pos", h);
  let d = new CGL.Uniform(m, "f", "vmin", l);
  let b = new CGL.Uniform(m, "f", "vmax", u);
  let v = new CGL.Uniform(m, "f", "amount", i);
  CGL.TextureEffect.setupBlending(e, m, r, i);
  o.onChange = () => {
    m.toggleDefine("METH_LUMI", o.get() == "Luminance");
    m.toggleDefine("METH_CHANNELS", o.get() == "Channels");
  };
  n.onTriggered = function () {
    if (!CGL.TextureEffect.checkOpInEffect(e, 3)) return;
    if (!s.get()) return;
    c.pushShader(m);
    c.currentTextureEffect.bind();
    c.setTexture(0, c.currentTextureEffect.getCurrentSourceTexture().tex);
    c.setTexture(1, s.get().tex);
    c.currentTextureEffect.finish();
    c.popShader();
    a.trigger();
  };
};
Ops.Gl.ImageCompose.ColorMap_v2.prototype = new CABLES.Op();
CABLES.OPS["440c1675-122d-411f-b848-16c60b677120"] = {
  f: Ops.Gl.ImageCompose.ColorMap_v2,
  objName: "Ops.Gl.ImageCompose.ColorMap_v2",
};
Ops.Gl.ImageCompose.ImageCompose_v4 = function () {
  CABLES.Op.apply(this, arguments);
  const n = this;
  const e = (n.attachments = {
    imgcomp_frag:
      "IN vec2 texCoord;\nUNI vec4 bgColor;\nUNI sampler2D tex;\n#ifdef USE_UVTEX\nUNI sampler2D UVTex;\n#endif\n\nvoid main()\n{\n\n    #ifndef USE_TEX\n        outColor=bgColor;\n    #endif\n    #ifdef USE_TEX\n        #ifndef USE_UVTEX\n        outColor=texture(tex,texCoord);\n        #else\n        outColor=texture(tex,texture(UVTex,texCoord).xy);\n        #endif\n    #endif\n\n\n\n}\n",
  });
  const t = n.patch.cgl,
    a = n.inTrigger("Render"),
    r = n.inTexture("Base Texture"),
    i = n.inTexture("UV Texture"),
    s = n.inSwitch("Size", ["Auto", "Canvas", "Manual"], "Auto"),
    o = n.inValueInt("Width", 640),
    l = n.inValueInt("Height", 480),
    u = n.inSwitch("Filter", ["nearest", "linear", "mipmap"], "linear"),
    h = n.inValueSelect(
      "Wrap",
      ["clamp to edge", "repeat", "mirrored repeat"],
      "repeat",
    ),
    c = n.inDropDown(
      "Pixel Format",
      CGL.Texture.PIXELFORMATS,
      CGL.Texture.PFORMATSTR_RGBA8UB,
    ),
    m = n.inValueSlider("R", 0),
    p = n.inValueSlider("G", 0),
    g = n.inValueSlider("B", 0),
    f = n.inValueSlider("A", 0),
    d = n.outTrigger("Next"),
    b = n.outTexture("texture_out", CGL.Texture.getEmptyTexture(t)),
    v = n.outNumber("Aspect Ratio"),
    O = n.outNumber("Texture Width"),
    _ = n.outNumber("Texture Height");
  n.setPortGroup("Texture Size", [s, o, l]);
  n.setPortGroup("Texture Parameters", [h, u, c]);
  m.setUiAttribs({ colorPick: true });
  n.setPortGroup("Color", [m, p, g, f]);
  n.toWorkPortsNeedToBeLinked(a);
  const L = [0, 0, 0, 0];
  let A = null;
  let y = null;
  let x = true;
  let k = false;
  let I = null;
  let B = null;
  let R = null;
  let D = null;
  h.onChange = u.onChange = c.onChange = U;
  r.onLinkChanged = s.onChange = i.onChange = M;
  a.onTriggered = n.preRender = V;
  M();
  function T() {
    if (A) A.delete();
    if (y) y.delete();
    y = null;
    A = new CGL.TextureEffect(t, {
      isFloatingPointTexture: CGL.Texture.isPixelFormatFloat(c.get()),
    });
    y = new CGL.Texture(t, {
      name: "image_compose_v2_" + n.id,
      pixelFormat: c.get(),
      filter: S(),
      wrap: C(),
      width: j(),
      height: N(),
    });
    A.setSourceTexture(y);
    O.set(j());
    _.set(N());
    v.set(j() / N());
    b.set(CGL.Texture.getEmptyTexture(t));
    x = false;
    M();
  }
  function S() {
    if (u.get() == "nearest") return CGL.Texture.FILTER_NEAREST;
    else if (u.get() == "linear") return CGL.Texture.FILTER_LINEAR;
    else if (u.get() == "mipmap") return CGL.Texture.FILTER_MIPMAP;
  }
  function C() {
    if (h.get() == "repeat") return CGL.Texture.WRAP_REPEAT;
    else if (h.get() == "mirrored repeat")
      return CGL.Texture.WRAP_MIRRORED_REPEAT;
    else if (h.get() == "clamp to edge") return CGL.Texture.WRAP_CLAMP_TO_EDGE;
  }
  function j() {
    if (r.get() && s.get() == "Auto") return r.get().width;
    else if (s.get() == "Auto" || s.get() == "Canvas") return t.canvasWidth;
    else if (s.get() == "ViewPort") return t.getViewPort()[2];
    return Math.ceil(o.get());
  }
  function N() {
    if (r.get() && s.get() == "Auto") return r.get().height;
    else if (s.get() == "Auto" || s.get() == "Canvas") return t.canvasHeight;
    else if (s.get() == "ViewPort") return t.getViewPort()[3];
    else return Math.ceil(l.get());
  }
  function U() {
    x = true;
  }
  function G() {
    if (
      (j() != y.width ||
        N() != y.height ||
        y.pixelFormat != c.get() ||
        y.filter != S() ||
        y.wrap != C()) &&
      j() !== 0 &&
      N() !== 0
    ) {
      T();
      A.setSourceTexture(y);
      b.set(CGL.Texture.getEmptyTexture(t));
      b.set(y);
      E();
      P();
    }
  }
  function E() {
    let e = null;
    if (s.get() == "Manual") {
      e = null;
    } else if (s.get() == "Auto") {
      if (r.get()) e = "Input Texture";
      else e = "Canvas Size";
      e += ": " + j() + " x " + N();
    }
    let t = false;
    t = s.uiAttribs.info != e;
    s.setUiAttribs({ info: e });
    if (t) n.refreshParams();
  }
  function w() {
    if (I) I.toggleDefine("USE_TEX", r.isLinked());
    if (I) I.toggleDefine("USE_UVTEX", i.isLinked());
  }
  function M() {
    m.setUiAttribs({ greyout: r.isLinked() });
    g.setUiAttribs({ greyout: r.isLinked() });
    p.setUiAttribs({ greyout: r.isLinked() });
    f.setUiAttribs({ greyout: r.isLinked() });
    o.setUiAttribs({ greyout: s.get() == "Auto" });
    l.setUiAttribs({ greyout: s.get() == "Auto" });
    o.setUiAttribs({ hideParam: s.get() != "Manual" });
    l.setUiAttribs({ hideParam: s.get() != "Manual" });
    if (y)
      if (
        CGL.Texture.isPixelFormatFloat(c.get()) &&
        S() == CGL.Texture.FILTER_MIPMAP
      )
        n.setUiError(
          "fpmipmap",
          "Don't use mipmap and 32bit at the same time, many systems do not support this.",
        );
      else n.setUiError("fpmipmap", null);
    E();
    w();
    P();
  }
  function P() {
    if (y)
      if (
        r.isLinked() &&
        r.get() &&
        y.textureType != r.get().textureType &&
        (y.textureType != CGL.Texture.TYPE_FLOAT ||
          r.get().textureType == CGL.Texture.TYPE_FLOAT)
      )
        n.setUiError(
          "textypediff",
          "Drawing 32bit texture into an 8 bit can result in data/precision loss",
          1,
        );
      else n.setUiError("textypediff", null);
  }
  n.preRender = () => {
    V();
  };
  function F() {
    if (!I) {
      I = new CGL.Shader(t, "copytextureshader");
      I.setSource(I.getDefaultVertexShader(), e.imgcomp_frag);
      B = new CGL.Uniform(I, "t", "tex", 0);
      R = new CGL.Uniform(I, "t", "UVTex", 1);
      D = new CGL.Uniform(I, "4f", "bgColor", m, p, g, f);
      w();
    }
    t.pushShader(I);
    t.currentTextureEffect.bind();
    if (r.get()) t.setTexture(0, r.get().tex);
    if (i.get()) t.setTexture(1, i.get().tex);
    t.currentTextureEffect.finish();
    t.popShader();
  }
  function V() {
    if (!A || x) T();
    t.pushBlend(false);
    G();
    const e = t.currentTextureEffect;
    t.currentTextureEffect = A;
    t.currentTextureEffect.imgCompVer = 3;
    t.currentTextureEffect.width = o.get();
    t.currentTextureEffect.height = l.get();
    A.setSourceTexture(y);
    A.startEffect(r.get() || CGL.Texture.getEmptyTexture(t, k), true);
    F();
    d.trigger();
    t.pushViewPort(0, 0, o.get(), l.get());
    b.setRef(A.getCurrentSourceTexture());
    A.endEffect();
    t.popViewPort();
    t.popBlend(false);
    t.currentTextureEffect = e;
  }
};
Ops.Gl.ImageCompose.ImageCompose_v4.prototype = new CABLES.Op();
CABLES.OPS["17212e2b-d692-464c-8f8d-2d511dd3410a"] = {
  f: Ops.Gl.ImageCompose.ImageCompose_v4,
  objName: "Ops.Gl.ImageCompose.ImageCompose_v4",
};
Ops.Gl.ImageCompose.Noise.PerlinNoise_v2 = function () {
  CABLES.Op.apply(this, arguments);
  const e = this;
  const t = (e.attachments = {
    perlinnoise3d_frag:
      'UNI float z;\nUNI float x;\nUNI float y;\nUNI float scale;\nUNI float rangeMul;\nUNI float harmonics;\nUNI float aspect;\n\nIN vec2 texCoord;\nUNI sampler2D tex;\n\n#ifdef HAS_TEX_OFFSETMAP\n    UNI sampler2D texOffsetZ;\n    UNI float offMul;\n#endif\n\n#ifdef HAS_TEX_MASK\n    UNI sampler2D texMask;\n#endif\n\nUNI float amount;\n\n{{CGL.BLENDMODES3}}\n\n\nfloat Interpolation_C2( float x ) { return x * x * x * (x * (x * 6.0 - 15.0) + 10.0); }   //  6x^5-15x^4+10x^3\t( Quintic Curve.  As used by Perlin in Improved Noise.  http://mrl.nyu.edu/~perlin/paper445.pdf )\nvec2 Interpolation_C2( vec2 x ) { return x * x * x * (x * (x * 6.0 - 15.0) + 10.0); }\nvec3 Interpolation_C2( vec3 x ) { return x * x * x * (x * (x * 6.0 - 15.0) + 10.0); }\nvec4 Interpolation_C2( vec4 x ) { return x * x * x * (x * (x * 6.0 - 15.0) + 10.0); }\nvec4 Interpolation_C2_InterpAndDeriv( vec2 x ) { return x.xyxy * x.xyxy * ( x.xyxy * ( x.xyxy * ( x.xyxy * vec2( 6.0, 0.0 ).xxyy + vec2( -15.0, 30.0 ).xxyy ) + vec2( 10.0, -60.0 ).xxyy ) + vec2( 0.0, 30.0 ).xxyy ); }\nvec3 Interpolation_C2_Deriv( vec3 x ) { return x * x * (x * (x * 30.0 - 60.0) + 30.0); }\n\n\nvoid FAST32_hash_3D( vec3 gridcell, out vec4 lowz_hash, out vec4 highz_hash )\t//\tgenerates a random number for each of the 8 cell corners\n{\n    //    gridcell is assumed to be an integer coordinate\n\n    //\tTODO: \tthese constants need tweaked to find the best possible noise.\n    //\t\t\tprobably requires some kind of brute force computational searching or something....\n    const vec2 OFFSET = vec2( 50.0, 161.0 );\n    const float DOMAIN = 69.0;\n    const float SOMELARGEFLOAT = 635.298681;\n    const float ZINC = 48.500388;\n\n    //\ttruncate the domain\n    gridcell.xyz = gridcell.xyz - floor(gridcell.xyz * ( 1.0 / DOMAIN )) * DOMAIN;\n    vec3 gridcell_inc1 = step( gridcell, vec3( DOMAIN - 1.5 ) ) * ( gridcell + 1.0 );\n\n    //\tcalculate the noise\n    vec4 P = vec4( gridcell.xy, gridcell_inc1.xy ) + OFFSET.xyxy;\n    P *= P;\n    P = P.xzxz * P.yyww;\n    highz_hash.xy = vec2( 1.0 / ( SOMELARGEFLOAT + vec2( gridcell.z, gridcell_inc1.z ) * ZINC ) );\n    lowz_hash = fract( P * highz_hash.xxxx );\n    highz_hash = fract( P * highz_hash.yyyy );\n}\n\n\n\n\nvoid FAST32_hash_3D( \tvec3 gridcell,\n                        out vec4 lowz_hash_0,\n                        out vec4 lowz_hash_1,\n                        out vec4 lowz_hash_2,\n                        out vec4 highz_hash_0,\n                        out vec4 highz_hash_1,\n                        out vec4 highz_hash_2\t)\t\t//\tgenerates 3 random numbers for each of the 8 cell corners\n{\n    //    gridcell is assumed to be an integer coordinate\n\n    //\tTODO: \tthese constants need tweaked to find the best possible noise.\n    //\t\t\tprobably requires some kind of brute force computational searching or something....\n    const vec2 OFFSET = vec2( 50.0, 161.0 );\n    const float DOMAIN = 69.0;\n    const vec3 SOMELARGEFLOATS = vec3( 635.298681, 682.357502, 668.926525 );\n    const vec3 ZINC = vec3( 48.500388, 65.294118, 63.934599 );\n\n    //\ttruncate the domain\n    gridcell.xyz = gridcell.xyz - floor(gridcell.xyz * ( 1.0 / DOMAIN )) * DOMAIN;\n    vec3 gridcell_inc1 = step( gridcell, vec3( DOMAIN - 1.5 ) ) * ( gridcell + 1.0 );\n\n    //\tcalculate the noise\n    vec4 P = vec4( gridcell.xy, gridcell_inc1.xy ) + OFFSET.xyxy;\n    P *= P;\n    P = P.xzxz * P.yyww;\n    vec3 lowz_mod = vec3( 1.0 / ( SOMELARGEFLOATS.xyz + gridcell.zzz * ZINC.xyz ) );\n    vec3 highz_mod = vec3( 1.0 / ( SOMELARGEFLOATS.xyz + gridcell_inc1.zzz * ZINC.xyz ) );\n    lowz_hash_0 = fract( P * lowz_mod.xxxx );\n    highz_hash_0 = fract( P * highz_mod.xxxx );\n    lowz_hash_1 = fract( P * lowz_mod.yyyy );\n    highz_hash_1 = fract( P * highz_mod.yyyy );\n    lowz_hash_2 = fract( P * lowz_mod.zzzz );\n    highz_hash_2 = fract( P * highz_mod.zzzz );\n}\nfloat Falloff_Xsq_C1( float xsq ) { xsq = 1.0 - xsq; return xsq*xsq; }\t// ( 1.0 - x*x )^2   ( Used by Humus for lighting falloff in Just Cause 2.  GPUPro 1 )\nfloat Falloff_Xsq_C2( float xsq ) { xsq = 1.0 - xsq; return xsq*xsq*xsq; }\t// ( 1.0 - x*x )^3.   NOTE: 2nd derivative is 0.0 at x=1.0, but non-zero at x=0.0\nvec4 Falloff_Xsq_C2( vec4 xsq ) { xsq = 1.0 - xsq; return xsq*xsq*xsq; }\n\n\n//\n//\tPerlin Noise 3D  ( gradient noise )\n//\tReturn value range of -1.0->1.0\n//\thttp://briansharpe.files.wordpress.com/2011/11/perlinsample.jpg\n//\nfloat Perlin3D( vec3 P )\n{\n    //\testablish our grid cell and unit position\n    vec3 Pi = floor(P);\n    vec3 Pf = P - Pi;\n    vec3 Pf_min1 = Pf - 1.0;\n\n#if 1\n    //\n    //\tclassic noise.\n    //\trequires 3 random values per point.  with an efficent hash function will run faster than improved noise\n    //\n\n    //\tcalculate the hash.\n    //\t( various hashing methods listed in order of speed )\n    vec4 hashx0, hashy0, hashz0, hashx1, hashy1, hashz1;\n    FAST32_hash_3D( Pi, hashx0, hashy0, hashz0, hashx1, hashy1, hashz1 );\n    //SGPP_hash_3D( Pi, hashx0, hashy0, hashz0, hashx1, hashy1, hashz1 );\n\n    //\tcalculate the gradients\n    vec4 grad_x0 = hashx0 - 0.49999;\n    vec4 grad_y0 = hashy0 - 0.49999;\n    vec4 grad_z0 = hashz0 - 0.49999;\n    vec4 grad_x1 = hashx1 - 0.49999;\n    vec4 grad_y1 = hashy1 - 0.49999;\n    vec4 grad_z1 = hashz1 - 0.49999;\n    vec4 grad_results_0 = inversesqrt( grad_x0 * grad_x0 + grad_y0 * grad_y0 + grad_z0 * grad_z0 ) * ( vec2( Pf.x, Pf_min1.x ).xyxy * grad_x0 + vec2( Pf.y, Pf_min1.y ).xxyy * grad_y0 + Pf.zzzz * grad_z0 );\n    vec4 grad_results_1 = inversesqrt( grad_x1 * grad_x1 + grad_y1 * grad_y1 + grad_z1 * grad_z1 ) * ( vec2( Pf.x, Pf_min1.x ).xyxy * grad_x1 + vec2( Pf.y, Pf_min1.y ).xxyy * grad_y1 + Pf_min1.zzzz * grad_z1 );\n\n#if 1\n    //\tClassic Perlin Interpolation\n    vec3 blend = Interpolation_C2( Pf );\n    vec4 res0 = mix( grad_results_0, grad_results_1, blend.z );\n    vec4 blend2 = vec4( blend.xy, vec2( 1.0 - blend.xy ) );\n    float final = dot( res0, blend2.zxzx * blend2.wwyy );\n    final *= 1.1547005383792515290182975610039;\t\t//\t(optionally) scale things to a strict -1.0->1.0 range    *= 1.0/sqrt(0.75)\n    return final;\n#else\n    //\tClassic Perlin Surflet\n    //\thttp://briansharpe.wordpress.com/2012/03/09/modifications-to-classic-perlin-noise/\n    Pf *= Pf;\n    Pf_min1 *= Pf_min1;\n    vec4 vecs_len_sq = vec4( Pf.x, Pf_min1.x, Pf.x, Pf_min1.x ) + vec4( Pf.yy, Pf_min1.yy );\n    float final = dot( Falloff_Xsq_C2( min( vec4( 1.0 ), vecs_len_sq + Pf.zzzz ) ), grad_results_0 ) + dot( Falloff_Xsq_C2( min( vec4( 1.0 ), vecs_len_sq + Pf_min1.zzzz ) ), grad_results_1 );\n    final *= 2.3703703703703703703703703703704;\t\t//\t(optionally) scale things to a strict -1.0->1.0 range    *= 1.0/cube(0.75)\n    return final;\n#endif\n\n#else\n    //\n    //\timproved noise.\n    //\trequires 1 random value per point.  Will run faster than classic noise if a slow hashing function is used\n    //\n\n    //\tcalculate the hash.\n    //\t( various hashing methods listed in order of speed )\n    vec4 hash_lowz, hash_highz;\n    FAST32_hash_3D( Pi, hash_lowz, hash_highz );\n    //BBS_hash_3D( Pi, hash_lowz, hash_highz );\n    //SGPP_hash_3D( Pi, hash_lowz, hash_highz );\n\n    //\n    //\t"improved" noise using 8 corner gradients.  Faster than the 12 mid-edge point method.\n    //\tKen mentions using diagonals like this can cause "clumping", but we\'ll live with that.\n    //\t[1,1,1]  [-1,1,1]  [1,-1,1]  [-1,-1,1]\n    //\t[1,1,-1] [-1,1,-1] [1,-1,-1] [-1,-1,-1]\n    //\n    hash_lowz -= 0.5;\n    vec4 grad_results_0_0 = vec2( Pf.x, Pf_min1.x ).xyxy * sign( hash_lowz );\n    hash_lowz = abs( hash_lowz ) - 0.25;\n    vec4 grad_results_0_1 = vec2( Pf.y, Pf_min1.y ).xxyy * sign( hash_lowz );\n    vec4 grad_results_0_2 = Pf.zzzz * sign( abs( hash_lowz ) - 0.125 );\n    vec4 grad_results_0 = grad_results_0_0 + grad_results_0_1 + grad_results_0_2;\n\n    hash_highz -= 0.5;\n    vec4 grad_results_1_0 = vec2( Pf.x, Pf_min1.x ).xyxy * sign( hash_highz );\n    hash_highz = abs( hash_highz ) - 0.25;\n    vec4 grad_results_1_1 = vec2( Pf.y, Pf_min1.y ).xxyy * sign( hash_highz );\n    vec4 grad_results_1_2 = Pf_min1.zzzz * sign( abs( hash_highz ) - 0.125 );\n    vec4 grad_results_1 = grad_results_1_0 + grad_results_1_1 + grad_results_1_2;\n\n    //\tblend the gradients and return\n    vec3 blend = Interpolation_C2( Pf );\n    vec4 res0 = mix( grad_results_0, grad_results_1, blend.z );\n    vec4 blend2 = vec4( blend.xy, vec2( 1.0 - blend.xy ) );\n    return dot( res0, blend2.zxzx * blend2.wwyy ) * (2.0 / 3.0);\t//\t(optionally) mult by (2.0/3.0) to scale to a strict -1.0->1.0 range\n#endif\n}\n\nvoid main()\n{\n    vec4 base=texture(tex,texCoord);\n    vec2 p=vec2(texCoord.x-0.5,texCoord.y-0.5);\n\n    p=p*scale;\n    p=vec2(p.x+0.5-x,p.y+0.5-y);\n\n\n\n    vec3 offset;\n    #ifdef HAS_TEX_OFFSETMAP\n        vec4 offMap=texture(texOffsetZ,texCoord);\n\n        #ifdef OFFSET_X_R\n            offset.x=offMap.r;\n        #endif\n        #ifdef OFFSET_X_G\n            offset.x=offMap.g;\n        #endif\n        #ifdef OFFSET_X_B\n            offset.x=offMap.b;\n        #endif\n\n        #ifdef OFFSET_Y_R\n            offset.y=offMap.r;\n        #endif\n        #ifdef OFFSET_Y_G\n            offset.y=offMap.g;\n        #endif\n        #ifdef OFFSET_Y_B\n            offset.y=offMap.b;\n        #endif\n\n        #ifdef OFFSET_Z_R\n            offset.z=offMap.r;\n        #endif\n        #ifdef OFFSET_Z_G\n            offset.z=offMap.g;\n        #endif\n        #ifdef OFFSET_Z_B\n            offset.z=offMap.b;\n        #endif\n        offset*=offMul;\n    #endif\n\n    float aa=texture(tex,texCoord).r;\n\n    float v = 0.0;\n    p.x*=aspect;\n\n    v+=Perlin3D(vec3(p.x,p.y,z)+offset);\n\n    #ifdef HARMONICS\n        if (harmonics >= 2.0) v += Perlin3D(vec3(p.x,p.y,z)*2.2+offset) * 0.5;\n        if (harmonics >= 3.0) v += Perlin3D(vec3(p.x,p.y,z)*4.3+offset) * 0.25;\n        if (harmonics >= 4.0) v += Perlin3D(vec3(p.x,p.y,z)*8.4+offset) * 0.125;\n        if (harmonics >= 5.0) v += Perlin3D(vec3(p.x,p.y,z)*16.5+offset) * 0.0625;\n    #endif\n\n\n    v*=rangeMul;\n    v=v*0.5+0.5;\n    float v2=v;\n    float v3=v;\n\n    #ifdef RGB\n        v2=Perlin3D(vec3(p.x+2.0,p.y+2.0,z))*0.5+0.5;\n\n        #ifdef HARMONICS\n            if (harmonics >= 2.0) v2 += Perlin3D(vec3(p.x,p.y,z)*2.2+offset) * 0.5;\n            if (harmonics >= 3.0) v2 += Perlin3D(vec3(p.x,p.y,z)*4.3+offset) * 0.25;\n            if (harmonics >= 4.0) v2 += Perlin3D(vec3(p.x,p.y,z)*8.4+offset) * 0.125;\n            if (harmonics >= 5.0) v2 += Perlin3D(vec3(p.x,p.y,z)*16.5+offset) * 0.0625;\n        #endif\n\n        v3=Perlin3D(vec3(p.x+3.0,p.y+3.0,z))*0.5+0.5;\n\n        #ifdef HARMONICS\n            if (harmonics >= 2.0) v3 += Perlin3D(vec3(p.x,p.y,z)*2.2+offset) * 0.5;\n            if (harmonics >= 3.0) v3 += Perlin3D(vec3(p.x,p.y,z)*4.3+offset) * 0.25;\n            if (harmonics >= 4.0) v3 += Perlin3D(vec3(p.x,p.y,z)*8.4+offset) * 0.125;\n            if (harmonics >= 5.0) v3 += Perlin3D(vec3(p.x,p.y,z)*16.5+offset) * 0.0625;\n        #endif\n\n    #endif\n\n    vec4 col=vec4(v,v2,v3,1.0);\n\n    float str=1.0;\n    #ifdef HAS_TEX_MASK\n        str=texture(texMask,texCoord).r;\n    #endif\n\n    #ifdef RANGE_MIN1\n        col=col*2.0-1.0;\n    #endif\n\n    col=cgl_blendPixel(base,col,amount*str);\n\n\n    #ifdef NO_CHANNEL_R\n        col.r=base.r;\n    #endif\n    #ifdef NO_CHANNEL_G\n        col.g=base.g;\n    #endif\n    #ifdef NO_CHANNEL_B\n        col.b=base.b;\n    #endif\n\n\n\n    outColor=col;\n}\n',
  });
  const n = e.inTrigger("render"),
    a = e.inTexture("Mask"),
    r = CGL.TextureEffect.AddBlendSelect(e),
    i = CGL.TextureEffect.AddBlendAlphaMask(e),
    s = e.inValueSlider("Amount", 1),
    o = e.inSwitch("Color", ["Mono", "RGB", "R", "G", "B"], "Mono"),
    l = e.inValue("Scale", 8),
    u = e.inValue("Multiply", 1),
    h = e.inSwitch("Value", ["0-1", "-1-1"], "0-1"),
    c = e.inSwitch("Harmonics", ["1", "2", "3", "4", "5"], "1"),
    m = e.inValue("X", 0),
    p = e.inValue("Y", 0),
    g = e.inValue("Z", 0),
    f = e.outTrigger("trigger");
  const d = e.patch.cgl;
  const b = new CGL.Shader(d, "perlinnoise");
  e.setPortGroup("Position", [m, p, g]);
  b.setSource(b.getDefaultVertexShader(), t.perlinnoise3d_frag);
  const v = new CGL.Uniform(b, "t", "tex", 0),
    O = new CGL.Uniform(b, "t", "texOffsetZ", 1),
    _ = new CGL.Uniform(b, "t", "texMask", 2),
    A = new CGL.Uniform(b, "f", "z", g),
    y = new CGL.Uniform(b, "f", "x", m),
    x = new CGL.Uniform(b, "f", "y", p),
    I = new CGL.Uniform(b, "f", "scale", l),
    T = new CGL.Uniform(b, "f", "amount", s),
    S = new CGL.Uniform(b, "f", "rangeMul", u);
  CGL.TextureEffect.setupBlending(e, b, r, s, i);
  const C = e.inTexture("Offset"),
    j = e.inFloat("Offset Multiply", 1),
    N = e.inSwitch("Offset X", ["None", "R", "G", "B"], "None"),
    E = e.inSwitch("Offset Y", ["None", "R", "G", "B"], "None"),
    w = e.inSwitch("Offset Z", ["None", "R", "G", "B"], "R");
  e.setPortGroup("Offset Map", [C, w, E, N, j]);
  const L = new CGL.Uniform(b, "f", "offMul", j);
  const M = new CGL.Uniform(b, "f", "aspect", 1);
  const P = new CGL.Uniform(b, "f", "harmonics", 0);
  c.onChange = () => {
    P.setValue(parseFloat(c.get()));
    b.toggleDefine("HARMONICS", c.get() > 1);
  };
  h.onChange =
    N.onChange =
    E.onChange =
    w.onChange =
    a.onChange =
    o.onChange =
    C.onChange =
      V;
  V();
  function V() {
    b.toggleDefine("NO_CHANNEL_R", o.get() == "G" || o.get() == "B");
    b.toggleDefine("NO_CHANNEL_G", o.get() == "R" || o.get() == "B");
    b.toggleDefine("NO_CHANNEL_B", o.get() == "R" || o.get() == "G");
    b.toggleDefine("HAS_TEX_OFFSETMAP", C.get());
    b.toggleDefine("HAS_TEX_MASK", a.get());
    b.toggleDefine("OFFSET_X_R", N.get() == "R");
    b.toggleDefine("OFFSET_X_G", N.get() == "G");
    b.toggleDefine("OFFSET_X_B", N.get() == "B");
    b.toggleDefine("OFFSET_Y_R", E.get() == "R");
    b.toggleDefine("OFFSET_Y_G", E.get() == "G");
    b.toggleDefine("OFFSET_Y_B", E.get() == "B");
    b.toggleDefine("OFFSET_Z_R", w.get() == "R");
    b.toggleDefine("OFFSET_Z_G", w.get() == "G");
    b.toggleDefine("OFFSET_Z_B", w.get() == "B");
    b.toggleDefine("RANGE_MIN1", h.get() == "-1-1");
    N.setUiAttribs({ greyout: !C.isLinked() });
    E.setUiAttribs({ greyout: !C.isLinked() });
    w.setUiAttribs({ greyout: !C.isLinked() });
    j.setUiAttribs({ greyout: !C.isLinked() });
    b.toggleDefine("RGB", o.get() == "RGB");
  }
  n.onTriggered = function () {
    if (!CGL.TextureEffect.checkOpInEffect(e, 3)) return;
    d.pushShader(b);
    d.currentTextureEffect.bind();
    M.setValue(d.currentTextureEffect.aspectRatio);
    d.setTexture(0, d.currentTextureEffect.getCurrentSourceTexture().tex);
    if (C.get()) d.setTexture(1, C.get().tex);
    if (a.get()) d.setTexture(2, a.get().tex);
    d.currentTextureEffect.finish();
    d.popShader();
    f.trigger();
  };
};
Ops.Gl.ImageCompose.Noise.PerlinNoise_v2.prototype = new CABLES.Op();
CABLES.OPS["b4b238d3-db68-4206-8dc7-4b52433fc932"] = {
  f: Ops.Gl.ImageCompose.Noise.PerlinNoise_v2,
  objName: "Ops.Gl.ImageCompose.Noise.PerlinNoise_v2",
};
Ops.Gl.GradientTexture = function () {
  CABLES.Op.apply(this, arguments);
  const n = this;
  const e = (n.attachments = {});
  const j = n.inGradient("Gradient"),
    N = n.inValueSelect("Direction", ["X", "Y", "Radial"], "X"),
    E = n.inValueBool("Smoothstep", false),
    w = n.inBool("Step", false),
    M = n.inBool("Flip", false),
    P = n.inBool("sRGB", false),
    V = n.inBool("Oklab", false),
    L = n.inValueInt("Size", 256),
    k = n.inSwitch("filter", ["nearest", "linear", "mipmap"], "linear"),
    B = n.inValueSelect(
      "wrap",
      ["clamp to edge", "repeat", "mirrored repeat"],
      "clamp to edge",
    ),
    a = n.inArray("Gradient Array"),
    t = n.inTriggerButton("Randomize Colors"),
    R = n.outTexture("Texture"),
    D = n.outArray("Colors", null, 3),
    U = n.outArray("Colors Pos", null, 1);
  const G = n.patch.cgl;
  j.setUiAttribs({ editShortcut: true });
  B.onChange =
    k.onChange =
    w.onChange =
    M.onChange =
    P.onChange =
    V.onChange =
    L.onChange =
    j.onChange =
    E.onChange =
    N.onChange =
    a.onChange =
      r;
  j.set('{"keys" : [{"pos":0,"r":0,"g":0,"b":0},{"pos":1,"r":1,"g":1,"b":1}]}');
  n.onLoaded = r;
  t.onTriggered = () => {
    const e = i();
    if (e) {
      e.forEach((e) => {
        e.r = Math.random();
        e.g = Math.random();
        e.b = Math.random();
      });
      const t = JSON.stringify({ keys: e });
      j.set(t);
    }
  };
  function F(e, t, n) {
    let a = 0.4122214708 * e + 0.5363325363 * t + 0.0514459929 * n;
    let r = 0.2119034982 * e + 0.6806995451 * t + 0.1073969566 * n;
    let i = 0.0883024619 * e + 0.2817188376 * t + 0.6299787005 * n;
    a = Math.cbrt(a);
    r = Math.cbrt(r);
    i = Math.cbrt(i);
    return [
      a * +0.2104542553 + r * +0.793617785 + i * -0.0040720468,
      a * +1.9779984951 + r * -2.428592205 + i * +0.4505937099,
      a * +0.0259040371 + r * +0.7827717662 + i * -0.808675766,
    ];
  }
  function z(e, t, n) {
    let a = e + t * +0.3963377774 + n * +0.2158037573;
    let r = e + t * -0.1055613458 + n * -0.0638541728;
    let i = e + t * -0.0894841775 + n * -1.291485548;
    a **= 3;
    r **= 3;
    i **= 3;
    let s = a * +4.0767416621 + r * -3.3077115913 + i * +0.2309699292;
    let o = a * -1.2684380046 + r * +2.6097574011 + i * -0.3413193965;
    let l = a * -0.0041960863 + r * -0.7034186147 + i * +1.707614701;
    s = CABLES.clamp(s, 0, 1);
    o = CABLES.clamp(o, 0, 1);
    l = CABLES.clamp(l, 0, 1);
    return [s, o, l];
  }
  function X(e, t, n) {
    e /= 255;
    const a = 0.0031308;
    let r = 12.92 * e;
    let i = 1.055 * Math.pow(e, 0.41666) - 0.055;
    return (e < a ? r : i) * 255;
  }
  function r() {
    const e = i();
    if (e) s(e);
  }
  function i() {
    let t = null;
    n.setUiError("nodata", null);
    n.setUiError("parse", null);
    if (Array.isArray(a.get())) {
      t = a.get();
    } else {
      let e = null;
      if (!j.get() || j.get() === "") {
        n.setUiError("nodata", "gradient no data");
        return null;
      }
      try {
        e = JSON.parse(j.get());
      } catch (e) {
        n.setUiError("parse", "could not parse gradient data");
      }
      if (!e || !e.keys) {
        n.setUiError("nodata", "gradient no data");
        return null;
      }
      t = e.keys;
    }
    return t;
  }
  function s(t) {
    let a = Math.round(L.get());
    if (a < 4) a = 4;
    j.setUiAttribs({
      editShortcut: true,
      gradEditSmoothstep: E.get(),
      gradEditStep: w.get(),
      gradOklab: V.get(),
    });
    let e = 0;
    let n = 0;
    if (B.get() == "repeat") e = CGL.Texture.WRAP_REPEAT;
    else if (B.get() == "mirrored repeat") e = CGL.Texture.WRAP_MIRRORED_REPEAT;
    else if (B.get() == "clamp to edge") e = CGL.Texture.WRAP_CLAMP_TO_EDGE;
    if (k.get() == "nearest") n = CGL.Texture.FILTER_NEAREST;
    else if (k.get() == "linear") n = CGL.Texture.FILTER_LINEAR;
    else if (k.get() == "mipmap") n = CGL.Texture.FILTER_MIPMAP;
    const r = new CGL.Texture(G);
    if (N.get() == "X" || N.get() == "Y") {
      const o = new Uint8Array(a * 4);
      for (let e = 0; e < t.length - 1; e++) {
        const l = t[e];
        const u = t[e + 1];
        for (let n = l.pos * a; n < u.pos * a; n++) {
          let e = CABLES.map(n, l.pos * a, u.pos * a, 0, 1);
          if (w.get()) e = Math.round(e);
          if (E.get()) e = CABLES.smoothStep(e);
          n = Math.round(n);
          let t = n;
          if (M.get()) t = a - n - 1;
          if (V.get()) {
            const h = F(l.r, l.g, l.b);
            const c = h[0];
            const m = h[1];
            const p = h[2];
            const g = F(u.r, u.g, u.b);
            const f = g[0];
            const d = g[1];
            const b = g[2];
            const v = e * f + (1 - e) * c;
            const O = e * d + (1 - e) * m;
            const _ = e * b + (1 - e) * p;
            const A = z(v, O, _);
            o[t * 4 + 0] = Math.round(A[0] * 255);
            o[t * 4 + 1] = Math.round(A[1] * 255);
            o[t * 4 + 2] = Math.round(A[2] * 255);
          } else {
            o[t * 4 + 0] = Math.round((e * u.r + (1 - e) * l.r) * 255);
            o[t * 4 + 1] = Math.round((e * u.g + (1 - e) * l.g) * 255);
            o[t * 4 + 2] = Math.round((e * u.b + (1 - e) * l.b) * 255);
          }
          if (typeof l.a !== "undefined" && typeof u.a !== "undefined") {
            const y = Math.round((e * u.a + (1 - e) * l.a) * 255);
            o[t * 4 + 3] = y;
          } else {
            o[t * 4 + 3] = Math.round(255);
          }
        }
      }
      if (P.get())
        for (let e = 0; e < o.length; e += 4) {
          o[e + 0] = X(o[e + 0]);
          o[e + 1] = X(o[e + 1]);
          o[e + 2] = X(o[e + 2]);
        }
      if (N.get() == "X") r.initFromData(o, a, 1, n, e);
      if (N.get() == "Y") r.initFromData(o, 1, a, n, e);
    }
    if (N.get() == "Radial") {
      const o = new Uint8Array(a * a * 4);
      const x = new CABLES.Anim();
      const I = new CABLES.Anim();
      const T = new CABLES.Anim();
      for (let e = 0; e < t.length - 1; e++) {
        x.setValue(t[e].pos, t[e].r);
        I.setValue(t[e].pos, t[e].g);
        T.setValue(t[e].pos, t[e].b);
      }
      for (let n = 0; n < a; n++) {
        for (let t = 0; t < a; t++) {
          const S = n - (a - 1) / 2;
          const C = t - (a - 1) / 2;
          let e = (Math.sqrt(S * S + C * C) / a) * 2;
          if (E.get()) e = CABLES.smoothStep(e);
          o[n * 4 + t * 4 * a + 0] = x.getValue(e) * 255;
          o[n * 4 + t * 4 * a + 1] = I.getValue(e) * 255;
          o[n * 4 + t * 4 * a + 2] = T.getValue(e) * 255;
          o[n * 4 + t * 4 * a + 3] = Math.round(255);
        }
      }
      if (P.get())
        for (let e = 0; e < o.length; e += 4) {
          o[e + 0] = X(o[e + 0]);
          o[e + 1] = X(o[e + 1]);
          o[e + 2] = X(o[e + 2]);
        }
      r.initFromData(o, a, a, n, e);
    }
    const i = [];
    for (let e = 0; e < t.length - 1; e++) {
      i.push(t[e].r, t[e].g, t[e].b);
    }
    const s = [];
    for (let e = 0; e < t.length - 1; e++) {
      s.push(t[e].pos);
    }
    D.set(i);
    U.set(s);
    R.setRef(r);
  }
};
Ops.Gl.GradientTexture.prototype = new CABLES.Op();
CABLES.OPS["01380a50-2dbb-4465-ae80-86349b0b717a"] = {
  f: Ops.Gl.GradientTexture,
  objName: "Ops.Gl.GradientTexture",
};
Ops.Array.ArrayPack2 = function () {
  CABLES.Op.apply(this, arguments);
  const e = this;
  const t = (e.attachments = {});
  const n = e.inTriggerButton("Trigger in"),
    r = e.inArray("Array 1"),
    i = e.inArray("Array 2"),
    s = e.outTrigger("Trigger out"),
    o = e.outArray("Array out", null, 2),
    l = e.outNumber("Array length");
  let u = false;
  let h = [];
  let c = [];
  let m = true;
  n.onTriggered = p;
  r.onChange = i.onChange = a;
  function a() {
    m = true;
  }
  function p() {
    let n = r.get();
    let a = i.get();
    if (!n && !a) {
      o.set(null);
      return;
    }
    if (m) {
      let t = 0;
      if (!n || !a) {
        if (n) t = n.length;
        else if (a) t = a.length;
        if (c.length != t) for (let e = 0; e < t; e++) c[e] = 0;
        if (!n) n = c;
        if (!a) a = c;
      }
      if (n.length !== a.length) {
        if (!u) {
          e.uiAttr({ error: "Arrays do not have the same length !" });
          u = true;
        }
        return;
      }
      if (u) {
        u = false;
        e.uiAttr({ error: null });
      }
      h.length = n.length;
      for (let e = 0; e < n.length; e++) {
        h[e * 2 + 0] = n[e];
        h[e * 2 + 1] = a[e];
      }
      m = false;
      o.setRef(h);
      l.set(h.length);
    }
    s.trigger();
  }
};
Ops.Array.ArrayPack2.prototype = new CABLES.Op();
CABLES.OPS["0db296db-e4a7-4356-9593-858f7e1bc7f3"] = {
  f: Ops.Array.ArrayPack2,
  objName: "Ops.Array.ArrayPack2",
};
Ops.Number.TriggerOnChangeNumber = function () {
  CABLES.Op.apply(this, arguments);
  const e = this;
  const t = (e.attachments = {});
  const n = e.inFloat("Value"),
    a = e.outTrigger("Next"),
    r = e.outNumber("Number");
  n.onChange = function () {
    r.set(n.get());
    a.trigger();
  };
};
Ops.Number.TriggerOnChangeNumber.prototype = new CABLES.Op();
CABLES.OPS["f5c8c433-ce13-49c4-9a33-74e98f110ed0"] = {
  f: Ops.Number.TriggerOnChangeNumber,
  objName: "Ops.Number.TriggerOnChangeNumber",
};
Ops.Gl.Meshes.TextMesh_v2 = function () {
  CABLES.Op.apply(this, arguments);
  const t = this;
  const e = (t.attachments = {
    textmesh_frag:
      "UNI sampler2D tex;\n#ifdef DO_MULTEX\n    UNI sampler2D texMul;\n#endif\n#ifdef DO_MULTEX_MASK\n    UNI sampler2D texMulMask;\n#endif\nIN vec2 texCoord;\nIN vec2 texPos;\nUNI float r;\nUNI float g;\nUNI float b;\nUNI float a;\n\nvoid main()\n{\n    vec4 col=texture(tex,texCoord);\n    col.a=col.r;\n    col.r*=r;\n    col.g*=g;\n    col.b*=b;\n    col*=a;\n\n    if(col.a==0.0)discard;\n\n    #ifdef DO_MULTEX\n        col*=texture(texMul,texPos);\n    #endif\n\n    #ifdef DO_MULTEX_MASK\n        col*=texture(texMulMask,texPos).r;\n    #endif\n\n    outColor=col;\n}",
    textmesh_vert:
      "UNI sampler2D tex;\nUNI mat4 projMatrix;\nUNI mat4 modelMatrix;\nUNI mat4 viewMatrix;\nUNI float scale;\nIN vec3 vPosition;\nIN vec2 attrTexCoord;\nIN mat4 instMat;\nIN vec2 attrTexOffsets;\nIN vec2 attrTexSize;\nIN vec2 attrTexPos;\nOUT vec2 texPos;\n\nOUT vec2 texCoord;\n\nvoid main()\n{\n    texCoord=(attrTexCoord*(attrTexSize)) + attrTexOffsets;\n    mat4 instMVMat=instMat;\n    instMVMat[3][0]*=scale;\n\n    texPos=attrTexPos;\n\n    vec4 vert=vec4( vPosition.x*(attrTexSize.x/attrTexSize.y)*scale,vPosition.y*scale,vPosition.z*scale, 1. );\n\n    mat4 mvMatrix=viewMatrix * modelMatrix * instMVMat;\n\n    gl_Position = projMatrix * mvMatrix * vert;\n}\n",
  });
  const n = t.inTrigger("Render"),
    v = t.inString("Text", "cables"),
    a = t.inValueFloat("Scale", 1),
    h = t.inString("Font", "Arial"),
    O = t.inValueSelect("align", ["left", "center", "right"], "center"),
    r = t.inValueSelect(
      "vertical align",
      ["Top", "Middle", "Bottom"],
      "Middle",
    ),
    _ = t.inValueFloat("Line Height", 1),
    A = t.inValueFloat("Letter Spacing"),
    o = t.inSwitch("filter", ["nearest", "linear", "mipmap"], "mipmap"),
    l = t.inSwitch("Anisotropic", [0, 1, 2, 4, 8, 16], 0),
    i = t.inTexture("Texture Color"),
    s = t.inTexture("Texture Mask"),
    k = t.outTrigger("Next"),
    y = t.outTexture("texture"),
    B = t.outNumber("Total Lines", 0),
    R = t.outNumber("Width", 0),
    D = t.outBoolNum("Font Available", 0);
  const x = t.patch.cgl;
  t.toWorkPortsNeedToBeLinked(n);
  t.setPortGroup("Masking", [i, s]);
  const c = 1024;
  let u = false;
  let m = true;
  O.onChange = v.onChange = _.onChange = U;
  function U() {
    m = true;
  }
  let p = null;
  CABLES.OpTextureMeshCanvas = {};
  let g = 0;
  const G = null;
  let I = null;
  let T = true;
  let S = true;
  l.onChange = o.onChange = () => {
    C().texture = null;
    S = true;
  };
  s.onChange = i.onChange = function () {
    d.toggleDefine("DO_MULTEX", i.get());
    d.toggleDefine("DO_MULTEX_MASK", s.get());
  };
  y.set(null);
  h.onChange = function () {
    S = true;
    T = true;
    f();
  };
  t.patch.on("fontLoaded", (e) => {
    if (e == h.get()) {
      S = true;
      T = true;
    }
  });
  function f() {
    const e = u;
    try {
      u = document.fonts.check('20px "' + h.get() + '"');
    } catch (e) {
      t.logError(e);
    }
    if (!e && u) {
      D.set(true);
      S = true;
      T = true;
    }
    if (!u) setTimeout(f, 250);
  }
  r.onChange = function () {
    if (r.get() == "Middle") g = 0;
    else if (r.get() == "Top") g = 1;
    else if (r.get() == "Bottom") g = 2;
  };
  function C() {
    p = "" + h.get();
    if (CABLES.OpTextureMeshCanvas.hasOwnProperty(p))
      return CABLES.OpTextureMeshCanvas[p];
    const e = document.createElement("canvas");
    e.dataset.font = h.get();
    e.id = "texturetext_" + CABLES.generateUUID();
    e.style.display = "none";
    const t = document.getElementsByTagName("body")[0];
    t.appendChild(e);
    const n = e.getContext("2d");
    CABLES.OpTextureMeshCanvas[p] = {
      ctx: n,
      canvas: e,
      chars: {},
      characters: "",
      fontSize: 320,
    };
    return CABLES.OpTextureMeshCanvas[p];
  }
  t.onDelete = function () {
    if (p && CABLES.OpTextureMeshCanvas[p])
      CABLES.OpTextureMeshCanvas[p].canvas.remove();
  };
  const d = new CGL.Shader(x, "TextMesh");
  d.setSource(e.textmesh_vert, e.textmesh_frag);
  const F = new CGL.Uniform(d, "t", "tex", 0);
  const z = new CGL.Uniform(d, "t", "texMul", 1);
  const X = new CGL.Uniform(d, "t", "texMulMask", 2);
  const q = new CGL.Uniform(d, "f", "scale", a);
  const b = t.inValueSlider("r", 1),
    j = t.inValueSlider("g", 1),
    N = t.inValueSlider("b", 1),
    E = t.inValueSlider("a", 1),
    H = new CGL.Uniform(d, "f", "r", b),
    Y = new CGL.Uniform(d, "f", "g", j),
    W = new CGL.Uniform(d, "f", "b", N),
    Z = new CGL.Uniform(d, "f", "a", E);
  b.setUiAttribs({ colorPick: true });
  t.setPortGroup("Display", [a, h]);
  t.setPortGroup("Alignment", [O, r]);
  t.setPortGroup("Color", [b, j, N, E]);
  let w = 0;
  const M = vec3.create();
  let P = -1;
  let V = false;
  n.onTriggered = function () {
    if (m) {
      Q();
      m = false;
    }
    const e = C();
    if (e.lastChange != P) {
      T = true;
      P = e.lastChange;
    }
    if (S) K();
    if (T) Q();
    if (I && I.numInstances > 0) {
      x.pushBlendMode(CGL.BLEND_NORMAL, true);
      x.pushShader(d);
      x.setTexture(0, y.get().tex);
      const t = i.get();
      if (t) x.setTexture(1, t.tex);
      const n = s.get();
      if (n) x.setTexture(2, n.tex);
      if (g === 2) vec3.set(M, 0, w, 0);
      else if (g === 1) vec3.set(M, 0, 0, 0);
      else if (g === 0) vec3.set(M, 0, w / 2, 0);
      M[1] -= _.get();
      x.pushModelMatrix();
      mat4.translate(x.mMatrix, x.mMatrix, M);
      if (!V) I.render(x.getShader());
      x.popModelMatrix();
      x.setTexture(0, null);
      x.popShader();
      x.popBlendMode();
    }
    k.trigger();
  };
  A.onChange = function () {
    T = true;
  };
  function Q() {
    const e = String(v.get() + "");
    if (!y.get()) return;
    const i = C();
    if (!i.geom) {
      i.geom = new CGL.Geometry("textmesh");
      i.geom.vertices = [1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0];
      i.geom.texCoords = new Float32Array([1, 1, 0, 1, 1, 0, 0, 0]);
      i.geom.verticesIndices = [0, 1, 2, 2, 1, 3];
    }
    if (!I) I = new CGL.Mesh(x, i.geom);
    const s = e.split("\n");
    B.set(s.length);
    const o = [];
    const l = [];
    const u = [];
    const h = [];
    let c = 0;
    S = false;
    const m = mat4.create();
    let p = 0;
    for (let r = 0; r < s.length; r++) {
      const g = s[r];
      const f = g.length;
      let t = 0;
      let n = 0;
      let a = 0;
      for (let e = 0; e < f; e++) {
        const d = g.substring(e, e + 1);
        const b = i.chars[String(d)];
        if (b) {
          a += b.texCoordWidth / b.texCoordHeight;
          a += A.get();
        }
      }
      a -= A.get();
      w = 0;
      if (O.get() == "left") n = 0;
      else if (O.get() == "right") n = a;
      else if (O.get() == "center") n = a / 2;
      w = (r + 1) * _.get();
      for (let e = 0; e < f; e++) {
        const d = g.substring(e, e + 1);
        const b = i.chars[String(d)];
        if (!b) {
          S = true;
          return;
        } else {
          h.push(
            (t / a) * 0.99 + 0.005,
            (1 - r / (s.length - 1)) * 0.99 + 0.005,
          );
          l.push(b.texCoordX, 1 - b.texCoordY - b.texCoordHeight);
          u.push(b.texCoordWidth, b.texCoordHeight);
          mat4.identity(m);
          mat4.translate(m, m, [t - n, 0 - r * _.get(), 0]);
          t += b.texCoordWidth / b.texCoordHeight + A.get();
          p = Math.max(p, t - n);
          o.push(Array.prototype.slice.call(m));
          c++;
        }
      }
    }
    const t = [].concat.apply([], o);
    V = false;
    if (t.length == 0) V = true;
    I.numInstances = t.length / 16;
    if (I.numInstances == 0) {
      V = true;
      return;
    }
    R.set(p * a.get());
    I.setAttribute("instMat", new Float32Array(t), 16, { instanced: true });
    I.setAttribute("attrTexOffsets", new Float32Array(l), 2, {
      instanced: true,
    });
    I.setAttribute("attrTexSize", new Float32Array(u), 2, { instanced: true });
    I.setAttribute("attrTexPos", new Float32Array(h), 2, { instanced: true });
    T = false;
    if (S) K();
  }
  function L(t, n) {
    const a = C();
    if (!n) a.chars = {};
    const r = a.ctx;
    r.font = t + "px " + h.get();
    r.textAlign = "left";
    let i = 0;
    let s = 0;
    const o = t * 1.4;
    const e = { fits: true };
    for (let e = 0; e < a.characters.length; e++) {
      const l = String(a.characters.substring(e, e + 1));
      const u = r.measureText(l).width;
      if (s + u >= c) {
        i += o + 2;
        s = 0;
      }
      if (!n) {
        a.chars[l] = {
          str: l,
          texCoordX: s / c,
          texCoordY: i / c,
          texCoordWidth: u / c,
          texCoordHeight: o / c,
        };
        r.fillText(l, s, i + t);
      }
      s += u + 12;
    }
    if (i > c - o) {
      e.fits = false;
    }
    e.spaceLeft = c - i;
    return e;
  }
  function K() {
    let e = CGL.Texture.FILTER_LINEAR;
    if (o.get() == "nearest") e = CGL.Texture.FILTER_NEAREST;
    if (o.get() == "mipmap") e = CGL.Texture.FILTER_MIPMAP;
    const t = C();
    let n = String(v.get());
    if (n == null || n == undefined) n = "";
    for (let e = 0; e < n.length; e++) {
      const s = n.substring(e, e + 1);
      if (t.characters.indexOf(s) == -1) {
        t.characters += s;
        S = true;
      }
    }
    const a = t.ctx;
    t.canvas.width = t.canvas.height = c;
    if (!t.texture)
      t.texture = CGL.Texture.createFromImage(x, t.canvas, {
        filter: e,
        anisotropic: parseFloat(l.get()),
      });
    t.texture.setSize(c, c);
    a.fillStyle = "transparent";
    a.clearRect(0, 0, c, c);
    a.fillStyle = "rgba(255,255,255,255)";
    let r = t.fontSize + 40;
    let i = L(r, true);
    while (!i.fits) {
      r -= 5;
      i = L(r, true);
    }
    L(r, false);
    a.restore();
    t.texture.initTexture(t.canvas, e);
    t.texture.unpackAlpha = true;
    y.set(t.texture);
    t.lastChange = CABLES.now();
    T = true;
    S = false;
  }
};
Ops.Gl.Meshes.TextMesh_v2.prototype = new CABLES.Op();
CABLES.OPS["2390f6b3-2122-412e-8c8d-5c2f574e8bd1"] = {
  f: Ops.Gl.Meshes.TextMesh_v2,
  objName: "Ops.Gl.Meshes.TextMesh_v2",
};
Ops.Gl.Meshes.Rectangle_v4 = function () {
  CABLES.Op.apply(this, arguments);
  const t = this;
  const e = (t.attachments = {});
  const n = t.inTrigger("render"),
    a = t.inValueBool("Render Mesh", true),
    C = t.inValue("width", 1),
    j = t.inValue("height", 1),
    N = t.inSwitch("pivot x", ["left", "center", "right"], "center"),
    E = t.inSwitch("pivot y", ["top", "center", "bottom"], "center"),
    w = t.inSwitch("axis", ["xy", "xz"], "xy"),
    M = t.inBool("Flip TexCoord X", false),
    P = t.inBool("Flip TexCoord Y", true),
    V = t.inValueInt("num columns", 1),
    L = t.inValueInt("num rows", 1),
    r = t.outTrigger("trigger"),
    k = t.outObject("geometry", null, "geometry");
  k.ignoreValueSerialize = true;
  const i = t.patch.cgl;
  const B = new CGL.Geometry("rectangle");
  a.setUiAttribs({ title: "Render" });
  n.setUiAttribs({ title: "Trigger" });
  r.setUiAttribs({ title: "Next" });
  t.setPortGroup("Pivot", [N, E, w]);
  t.setPortGroup("Size", [C, j]);
  t.setPortGroup("Structure", [V, L]);
  t.toWorkPortsNeedToBeLinked(n);
  t.toWorkShouldNotBeChild(
    "Ops.Gl.TextureEffects.ImageCompose",
    CABLES.OP_PORT_TYPE_TRIGGER,
  );
  const R = 0;
  const D = 1;
  let U = R;
  let G = null;
  let F = true;
  let z = true;
  const s = vec3.create();
  vec3.set(s, 1, 1, 1);
  w.onChange =
    N.onChange =
    E.onChange =
    M.onChange =
    P.onChange =
    L.onChange =
    V.onChange =
      o;
  X();
  C.onChange = j.onChange = () => {
    if (z) X();
    else F = true;
  };
  function X() {
    if (U === R) vec3.set(s, C.get(), j.get(), 1);
    if (U === D) vec3.set(s, C.get(), 1, j.get());
  }
  k.onLinkChanged = () => {
    z = !k.isLinked();
    X();
    F = true;
  };
  function o() {
    F = true;
  }
  n.onTriggered = () => {
    if (F) l();
    const e = t.patch.cg;
    if (G && a.get()) {
      if (z) {
        e.pushModelMatrix();
        mat4.scale(e.mMatrix, e.mMatrix, s);
      }
      G.render(e.getShader());
      if (z) e.popModelMatrix();
    }
    r.trigger();
  };
  t.onDelete = () => {
    if (G) G.dispose();
    o();
  };
  function l() {
    if (w.get() == "xy") U = R;
    if (w.get() == "xz") U = D;
    X();
    let n = C.get();
    let a = j.get();
    if (z) n = a = 1;
    let r = 0;
    let i = 0;
    if (N.get() == "center") r = 0;
    else if (N.get() == "right") r = -n / 2;
    else if (N.get() == "left") r = +n / 2;
    if (E.get() == "center") i = 0;
    else if (E.get() == "top") i = -a / 2;
    else if (E.get() == "bottom") i = +a / 2;
    const s = Math.max(1, Math.round(L.get()));
    const o = Math.max(1, Math.round(V.get()));
    const l = n / o;
    const u = a / s;
    const h = [];
    const c = new Float32Array((o + 1) * (s + 1) * 2);
    const m = new Float32Array((o + 1) * (s + 1) * 3);
    const p = new Float32Array((o + 1) * (s + 1) * 3);
    const g = new Float32Array((o + 1) * (s + 1) * 3);
    const f = new Float32Array((o + 1) * (s + 1) * 3);
    let d = 0;
    let b = 0;
    let v = 0;
    let O = 0;
    let _ = 0;
    for (let t = 0; t <= s; t++) {
      for (let e = 0; e <= o; e++) {
        m[b++] = e * l - n / 2 + r;
        if (U == D) m[b++] = 0;
        m[b++] = t * u - a / 2 + i;
        if (U == R) m[b++] = 0;
        c[d++] = e / o;
        c[d++] = t / s;
        if (U == R) {
          p[v++] = 0;
          p[v++] = 0;
          p[v++] = 1;
          g[O++] = 1;
          g[O++] = 0;
          g[O++] = 0;
          f[_++] = 0;
          f[_++] = 1;
          f[_++] = 0;
        } else if (U == D) {
          p[v++] = 0;
          p[v++] = 1;
          p[v++] = 0;
          f[_++] = 0;
          f[_++] = 0;
          f[_++] = 1;
        }
      }
    }
    h.length = o * s * 6;
    let A = 0;
    for (let t = 0; t < o; t++) {
      for (let e = 0; e < s; e++) {
        const y = t + (o + 1) * e;
        const x = y;
        const I = y + 1;
        const T = y + o + 1;
        const S = y + 1 + o + 1;
        if (U == R) {
          h[A++] = x;
          h[A++] = I;
          h[A++] = T;
          h[A++] = T;
          h[A++] = I;
          h[A++] = S;
        } else if (U == D) {
          h[A++] = x;
          h[A++] = T;
          h[A++] = I;
          h[A++] = I;
          h[A++] = T;
          h[A++] = S;
        }
      }
    }
    if (P.get()) for (let e = 0; e < c.length; e += 2) c[e + 1] = 1 - c[e + 1];
    if (M.get()) for (let e = 0; e < c.length; e += 2) c[e] = 1 - c[e];
    B.clear();
    B.vertices = m;
    B.texCoords = c;
    B.verticesIndices = h;
    B.vertexNormals = p;
    B.tangents = g;
    B.biTangents = f;
    if (!G) G = t.patch.cg.createMesh(B);
    else G.setGeom(B);
    k.setRef(B);
    F = false;
  }
};
Ops.Gl.Meshes.Rectangle_v4.prototype = new CABLES.Op();
CABLES.OPS["cc8c3ede-7103-410b-849f-a645793cab39"] = {
  f: Ops.Gl.Meshes.Rectangle_v4,
  objName: "Ops.Gl.Meshes.Rectangle_v4",
};
Ops.Gl.RenderToTexture_v3 = function () {
  CABLES.Op.apply(this, arguments);
  const r = this;
  const e = (r.attachments = {});
  const t = r.inTrigger("render"),
    n = r.inSwitch("Size", ["Canvas", "Manual"], "Canvas"),
    a = r.inValueInt("texture width", 512),
    i = r.inValueInt("texture height", 512),
    s = r.inBool("Auto Aspect", true),
    o = r.inSwitch("filter", ["nearest", "linear", "mipmap"], "linear"),
    l = r.inSwitch("Wrap", ["Clamp", "Repeat", "Mirror"], "Repeat"),
    u = r.inSwitch("MSAA", ["none", "2x", "4x", "8x"], "none"),
    h = r.outTrigger("trigger"),
    c = r.outTexture("texture"),
    m = r.outTexture("textureDepth"),
    p = r.inDropDown(
      "Pixel Format",
      CGL.Texture.PIXELFORMATS,
      CGL.Texture.PFORMATSTR_RGBA8UB,
    ),
    g = r.inValueBool("Depth", true),
    f = r.inValueBool("Clear", true);
  const d = r.patch.cgl;
  let b = null;
  let v = true;
  r.setPortGroup("Size", [n, a, i, s]);
  p.onChange =
    g.onChange =
    f.onChange =
    o.onChange =
    l.onChange =
    u.onChange =
      _;
  n.onChange = O;
  t.onTriggered = r.preRender = A;
  O();
  function O() {
    a.setUiAttribs({ greyout: n.get() != "Manual" });
    i.setUiAttribs({ greyout: n.get() != "Manual" });
    s.setUiAttribs({ greyout: n.get() != "Manual" });
  }
  function _() {
    v = true;
  }
  function A() {
    CGL.TextureEffect.checkOpNotInTextureEffect(r);
    if (!b || v) {
      if (b) b.delete();
      let n = CGL.Texture.WRAP_REPEAT;
      if (l.get() == "Clamp") n = CGL.Texture.WRAP_CLAMP_TO_EDGE;
      else if (l.get() == "Mirror") n = CGL.Texture.WRAP_MIRRORED_REPEAT;
      let a = CGL.Texture.FILTER_NEAREST;
      if (o.get() == "nearest") a = CGL.Texture.FILTER_NEAREST;
      else if (o.get() == "linear") a = CGL.Texture.FILTER_LINEAR;
      else if (o.get() == "mipmap") a = CGL.Texture.FILTER_MIPMAP;
      if (p.get().indexOf("loat") && o.get() == "mipmap")
        r.setUiError(
          "fpmipmap",
          "Can't use mipmap and float texture at the same time",
        );
      else r.setUiError("fpmipmap", null);
      if (d.glVersion >= 2) {
        let e = true;
        let t = 4;
        if (u.get() == "none") {
          t = 0;
          e = false;
        }
        if (u.get() == "2x") t = 2;
        if (u.get() == "4x") t = 4;
        if (u.get() == "8x") t = 8;
        b = new CGL.Framebuffer2(d, 8, 8, {
          name: "render2texture " + r.id,
          pixelFormat: p.get(),
          multisampling: e,
          wrap: n,
          filter: a,
          depth: g.get(),
          multisamplingSamples: t,
          clear: f.get(),
        });
      } else {
        b = new CGL.Framebuffer(d, 8, 8, {
          isFloatingPointTexture: false,
          clear: f.get(),
        });
      }
      if (b && b.valid) {
        m.set(b.getTextureDepth());
        v = false;
      } else {
        b = null;
        v = true;
      }
    }
    let e = s.get();
    if (n.get() == "Canvas") {
      e = true;
      a.set(d.canvasWidth);
      i.set(d.canvasHeight);
    }
    if (
      b.getWidth() != Math.ceil(a.get()) ||
      b.getHeight() != Math.ceil(i.get())
    ) {
      b.setSize(
        Math.max(1, Math.ceil(a.get())),
        Math.max(1, Math.ceil(i.get())),
      );
    }
    b.renderStart(d);
    d.pushViewPort(0, 0, a.get(), i.get());
    if (e) mat4.perspective(d.pMatrix, 45, a.get() / i.get(), 0.1, 1e3);
    h.trigger();
    b.renderEnd(d);
    d.popViewPort();
    m.setRef(b.getTextureDepth());
    c.setRef(b.getTextureColor());
  }
};
Ops.Gl.RenderToTexture_v3.prototype = new CABLES.Op();
CABLES.OPS["41eec5c7-c480-477a-be81-04c3efac8357"] = {
  f: Ops.Gl.RenderToTexture_v3,
  objName: "Ops.Gl.RenderToTexture_v3",
};
Ops.Array.StringToArray_v2 = function () {
  CABLES.Op.apply(this, arguments);
  const a = this;
  const e = (a.attachments = {});
  const r = a.inStringEditor("text", "1,2,3"),
    i = a.inString("separator", ","),
    s = a.inValueBool("Numbers", true),
    o = a.inValueBool("Trim", true),
    l = a.inBool("Split Lines", false),
    u = a.outArray("array"),
    h = a.outTrigger("Parsed"),
    c = a.outNumber("length");
  r.setUiAttribs({ ignoreBigPort: true });
  r.onChange = i.onChange = s.onChange = o.onChange = t;
  l.onChange = () => {
    i.setUiAttribs({ greyout: l.get() });
    t();
  };
  t();
  function t() {
    if (!r.get()) {
      u.set(null);
      u.set([]);
      c.set(0);
      return;
    }
    let e = r.get();
    if (o.get() && e) {
      e = e.replace(/^\s+|\s+$/g, "");
      e = e.trim();
    }
    let n;
    let t = i.get();
    if (i.get() === "\\n") t = "\n";
    if (l.get()) n = e.split("\n");
    else n = e.split(t);
    if (n[n.length - 1] === "") n.length -= 1;
    c.set(n.length);
    if (o.get()) {
      for (let e = 0; e < n.length; e++) {
        n[e] = n[e].replace(/^\s+|\s+$/g, "");
        n[e] = n[e].trim();
      }
    }
    a.setUiError("notnum", null);
    if (s.get()) {
      let t = false;
      for (let e = 0; e < n.length; e++) {
        n[e] = Number(n[e]);
        if (!CABLES.UTILS.isNumeric(n[e])) {
          t = true;
        }
      }
      if (t) {
        a.setUiError("notnum", "Parse Error / Not all values numerical!");
      }
    }
    u.setRef(n);
    h.trigger();
  }
};
Ops.Array.StringToArray_v2.prototype = new CABLES.Op();
CABLES.OPS["c974de41-4ce4-4432-b94d-724741109c71"] = {
  f: Ops.Array.StringToArray_v2,
  objName: "Ops.Array.StringToArray_v2",
};
Ops.Array.ArrayGetString = function () {
  CABLES.Op.apply(this, arguments);
  const e = this;
  const t = (e.attachments = {});
  const n = e.inArray("array"),
    a = e.inValueInt("index"),
    r = e.outString("result");
  n.ignoreValueSerialize = true;
  a.onChange = i;
  n.onChange = function () {
    i();
  };
  function i() {
    const e = n.get();
    if (e) r.set(e[a.get()]);
  }
};
Ops.Array.ArrayGetString.prototype = new CABLES.Op();
CABLES.OPS["be8f16c0-0c8a-48a2-a92b-45dbf88c76c1"] = {
  f: Ops.Array.ArrayGetString,
  objName: "Ops.Array.ArrayGetString",
};
Ops.Html.FontFile_v2 = function () {
  CABLES.Op.apply(this, arguments);
  const r = this;
  const e = (r.attachments = {});
  const i = r.inUrl("file", [".otf", ".ttf", ".woff", ".woff2"]),
    s = r.inString("family"),
    o = r.outBoolNum("Loaded"),
    l = r.outTrigger("Loaded Trigger");
  let u = null;
  let h;
  let c = null;
  i.onChange = function () {
    o.set(false);
    t(null);
  };
  s.onChange = () => {
    t(null);
  };
  r.patch.on("windowChanged", (e) => {
    h = null;
    t(e.document);
  });
  function t(e) {
    c = e || c || r.patch.cgl.canvas.ownerDocument || document;
    if (i.get() && s.get()) {
      if (c.fonts) {
        let e = "url(" + r.patch.getFilePath(String(i.get())) + ")";
        h = new FontFace(s.get(), e);
        u = r.patch.cgl.patch.loading.start("FontFile", i.get(), r);
        c.fonts.add(h);
        h.loaded
          .then(
            (e) => {
              o.set(true);
              l.trigger();
              r.patch.cgl.patch.loading.finished(u);
              r.patch.emitEvent("fontLoaded", s.get());
            },
            (e) => {
              r.setUiError("loadingerror", "Font loading error!" + h.status);
              r.patch.cgl.patch.loading.finished(u);
              o.set(true);
            },
          )
          .catch((e) => {
            console.error("catch ", e);
          });
        h.load();
      } else {
        const t = r.patch.getFilePath(String(i.get()));
        const n =
          "".endl() +
          "@font-face".endl() +
          "{".endl() +
          '  font-family: "' +
          s.get() +
          '";'.endl() +
          '  src: url("' +
          t +
          '") format("truetype");'.endl() +
          "}";
        const a = document.createElement("style");
        a.classList.add("cablesEle");
        a.type = "text/css";
        a.innerHTML = n;
        document
          .getElementsByTagName("head")
          [document.getElementsByTagName("head").length - 1].appendChild(a);
      }
    }
  }
};
Ops.Html.FontFile_v2.prototype = new CABLES.Op();
CABLES.OPS["68177370-116e-4c76-aef3-3b10d68e7227"] = {
  f: Ops.Html.FontFile_v2,
  objName: "Ops.Html.FontFile_v2",
};
Ops.Gl.Textures.VideoTexture_v3 = function () {
  CABLES.Op.apply(this, arguments);
  const n = this;
  const L = (n.attachments = {});
  const k = n.inTrigger("Update"),
    a = n.inUrl("file", "video"),
    t = n.inValueBool("play"),
    e = n.inValueBool("loop", true),
    r = n.inValueSlider("Volume", 1),
    i = n.inValueBool("mute", true),
    s = n.inValueFloat("Update FPS", 30),
    o = n.inSwitch("Filter", ["nearest", "linear"], "linear"),
    l = n.inValueSelect(
      "Wrap",
      ["repeat", "mirrored repeat", "clamp to edge"],
      "clamp to edge",
    ),
    u = n.inValueBool("flip", true),
    h = n.inValueFloat("speed", 1),
    c = n.inValueFloat("set time"),
    m = n.inTriggerButton("Rewind"),
    B = n.inValueBool("Preload", true),
    R = n.inBool("Show Interaction needed Button", true),
    D = n.outTrigger("Next"),
    p = n.outTexture("texture", null, "texture"),
    U = n.outNumber("duration"),
    G = n.outNumber("progress"),
    F = n.outBoolNum("Interaction Needed"),
    z = n.outNumber("CurrentTime"),
    g = n.outBoolNum("Loading"),
    X = n.outBoolNum("Playing"),
    f = n.outBoolNum("Can Play Through", false),
    q = n.outNumber("Width"),
    H = n.outNumber("Height"),
    Y = n.outNumber("Aspect Ratio"),
    d = n.outBoolNum("Has Error"),
    b = n.outString("Error Message");
  n.setPortGroup("Texture", [o, l, u, s]);
  n.setPortGroup("Audio", [i, r]);
  n.setPortGroup("Timing", [c, m, h]);
  let v = false;
  let O = false;
  let _ = false;
  let A = false;
  let y = 0;
  let x = 0;
  let I = null;
  let W = null;
  let T = true;
  let S = true;
  let C = 0;
  const j = n.patch.cgl;
  const N = document.createElement("video");
  N.setAttribute("playsinline", "");
  N.setAttribute("webkit-playsinline", "");
  N.setAttribute("autoplay", "autoplay");
  const E = CGL.Texture.getEmptyTexture(j);
  n.toWorkPortsNeedToBeLinked(p);
  p.set(I);
  p.set(CGL.Texture.getEmptyTexture(j));
  t.onChange = M;
  a.onChange = ee;
  r.onChange = P;
  n.onMasterVolumeChanged = P;
  o.onChange = l.onChange = () => {
    I = null;
  };
  n.onDelete = () => {
    if (I) I.delete();
    N.remove();
  };
  k.onTriggered = () => {
    if (performance.now() - C > 1e3 / s.get()) S = true;
    if (S) {
      C = performance.now();
      Q();
    }
    X.set(!N.paused);
    if (_ && !N.paused && t.get()) {
      n.log("weirdness...");
      _ = false;
      CABLES.interActionNeededButton.remove("videoplayer");
    }
    F.set(_);
    D.trigger();
  };
  function Z() {
    if (I) I.delete();
    if (o.get() == "nearest") y = CGL.Texture.FILTER_NEAREST;
    if (o.get() == "linear") y = CGL.Texture.FILTER_LINEAR;
    if (l.get() == "repeat") x = CGL.Texture.WRAP_REPEAT;
    if (l.get() == "mirrored repeat") x = CGL.Texture.WRAP_MIRRORED_REPEAT;
    if (l.get() == "clamp to edge") x = CGL.Texture.WRAP_CLAMP_TO_EDGE;
    I = new CGL.Texture(j, { wrap: x, filter: y });
  }
  m.onTriggered = function () {
    N.currentTime = 0;
    p.setRef(E);
    S = true;
  };
  c.onChange = function () {
    N.currentTime = c.get() || 0;
    S = true;
  };
  s.onChange = function () {
    S = true;
  };
  function w() {
    N.playbackRate = h.get();
  }
  function M() {
    if (!O) {
      V(true);
    }
    if (t.get()) {
      N.currentTime = c.get() || 0;
      const e = N.play();
      if (e)
        e.then(function () {
          w();
        }).catch(function (e) {
          n.warn("exc", e);
          n.log(e);
          n.log(N);
          if (N.paused && R.get()) {
            _ = true;
            CABLES.interActionNeededButton.add(n.patch, "videoplayer", () => {
              _ = false;
              N.play();
              w();
              CABLES.interActionNeededButton.remove("videoplayer");
            });
          }
        });
    } else N.pause();
  }
  h.onChange = function () {
    N.playbackRate = h.get();
  };
  e.onChange = function () {
    N.loop = e.get();
  };
  i.onChange = function () {
    N.muted = i.get();
  };
  function Q() {
    const e = S;
    if (!a.get()) {
      p.set(E);
      return;
    }
    if (!v) return;
    if (!I) Z();
    if (I.width != N.videoWidth || I.height != N.videoHeight) {
      n.log("video size", N.videoWidth, N.videoHeight);
      I.setSize(N.videoWidth, N.videoHeight);
    }
    q.set(I.width);
    H.set(I.height);
    Y.set(I.width / I.height);
    if (!f.get()) return;
    if (!v) return;
    if (!N) return;
    if (N.videoHeight <= 0) {
      n.setUiError("videosize", "video width is 0!");
      n.log(N);
      return;
    }
    if (N.videoWidth <= 0) {
      n.setUiError("videosize", "video height is 0!");
      n.log(N);
      return;
    }
    const t = N.currentTime / N.duration;
    if (!isNaN(t)) G.set(t);
    z.set(N.currentTime);
    j.gl.bindTexture(j.gl.TEXTURE_2D, I.tex);
    if (T) {
      j.gl.pixelStorei(j.gl.UNPACK_FLIP_Y_WEBGL, u.get());
      j.gl.texImage2D(
        j.gl.TEXTURE_2D,
        0,
        j.gl.RGBA,
        j.gl.RGBA,
        j.gl.UNSIGNED_BYTE,
        N,
      );
      I._setFilter();
    } else {
      j.gl.pixelStorei(j.gl.UNPACK_FLIP_Y_WEBGL, u.get());
      j.gl.texSubImage2D(
        j.gl.TEXTURE_2D,
        0,
        0,
        0,
        j.gl.RGBA,
        j.gl.UNSIGNED_BYTE,
        N,
      );
    }
    if (u.get()) j.gl.pixelStorei(j.gl.UNPACK_FLIP_Y_WEBGL, false);
    T = false;
    p.setRef(I);
    S = false;
    n.patch.cgl.profileData.profileVideosPlaying++;
    if (N.readyState == 4) g.set(false);
    else g.set(false);
  }
  function K() {
    N.controls = false;
    N.muted = i.get();
    N.loop = e.get();
    S = true;
    f.set(true);
  }
  function P() {
    N.volume = Math.min(
      1,
      Math.max(0, (r.get() || 0) * n.patch.config.masterVolume),
    );
  }
  function J() {
    U.set(N.duration);
    M();
  }
  function V(e) {
    d.set(false);
    b.set("");
    f.set(false);
    if (a.get() && String(a.get()).length > 1) T = true;
    if (!a.get()) {
      b.set(true);
    }
    if (B.get() || e) {
      clearTimeout(W);
      g.set(true);
      N.preload = "true";
      let e = n.patch.getFilePath(a.get());
      if (String(a.get()).indexOf("data:") == 0) e = a.get();
      if (!e) return;
      n.setUiError("onerror", null);
      N.style.display = "none";
      N.setAttribute("src", e);
      N.setAttribute("crossOrigin", "anonymous");
      N.playbackRate = h.get();
      if (!A) {
        A = true;
        N.addEventListener("canplaythrough", K, true);
        N.addEventListener("loadedmetadata", J);
        N.addEventListener(
          "playing",
          function () {
            v = true;
          },
          true,
        );
        N.onerror = function () {
          d.set(true);
          if (N) {
            b.set("Error " + N.error.code + "/" + N.error.message);
            n.setUiError(
              "onerror",
              "Could not load video / " + N.error.message,
              2,
            );
          }
        };
      }
      O = true;
    }
  }
  function $() {
    setTimeout(V, 100);
  }
  function ee() {
    if (!a.get()) return;
    $();
  }
};
Ops.Gl.Textures.VideoTexture_v3.prototype = new CABLES.Op();
CABLES.OPS["9d66516f-d234-4114-b1d3-67b8e60f5dc6"] = {
  f: Ops.Gl.Textures.VideoTexture_v3,
  objName: "Ops.Gl.Textures.VideoTexture_v3",
};
Ops.Gl.Texture_v2 = function () {
  CABLES.Op.apply(this, arguments);
  const r = this;
  const e = (r.attachments = {});
  const i = r.inUrl("File", [".jpg", ".png", ".webp", ".jpeg", ".avif"]),
    t = r.inSwitch("Filter", ["nearest", "linear", "mipmap"]),
    n = r.inValueSelect(
      "Wrap",
      ["repeat", "mirrored repeat", "clamp to edge"],
      "clamp to edge",
    ),
    a = r.inSwitch("Anisotropic", ["0", "1", "2", "4", "8", "16"], "0"),
    s = r.inSwitch("Data Format", ["R", "RG", "RGB", "RGBA"], "RGBA"),
    o = r.inValueBool("Flip", false),
    l = r.inValueBool("Pre Multiplied Alpha", false),
    u = r.inValueBool("Active", true),
    h = r.inBool("Save Memory", true),
    c = r.outTexture("Texture"),
    m = r.outNumber("Width"),
    p = r.outNumber("Height"),
    g = r.outNumber("Aspect Ratio"),
    f = r.outNumber("Loaded", false),
    d = r.outNumber("Loading", false);
  const b = r.patch.cgl;
  r.toWorkPortsNeedToBeLinked(c);
  r.setPortGroup("Size", [m, p]);
  let v = null;
  let O = null;
  let _ = null;
  let A = CGL.Texture.FILTER_MIPMAP;
  let y = CGL.Texture.WRAP_REPEAT;
  let x = 0;
  let I = 0;
  l.setUiAttribs({ hidePort: true });
  l.onChange = i.onChange = s.onChange = o.onChange = S;
  a.onChange = t.onChange = N;
  n.onChange = E;
  t.set("mipmap");
  n.set("repeat");
  c.set(CGL.Texture.getEmptyTexture(b));
  u.onChange = function () {
    if (u.get()) {
      if (v != i.get() || !_) S();
      else c.set(_);
    } else {
      c.set(CGL.Texture.getEmptyTexture(b));
      m.set(CGL.Texture.getEmptyTexture(b).width);
      p.set(CGL.Texture.getEmptyTexture(b).height);
      if (_) _.delete();
      r.setUiAttrib({ extendTitle: "" });
      _ = null;
    }
  };
  const T = function () {
    const e = CGL.Texture.getTempTexture(b);
    c.set(e);
  };
  function S(e) {
    clearTimeout(I);
    I = setTimeout(function () {
      j(e);
    }, 30);
  }
  function C() {
    if (s.get() == "R") return CGL.Texture.PFORMATSTR_R8UB;
    if (s.get() == "RG") return CGL.Texture.PFORMATSTR_RG8UB;
    if (s.get() == "RGB") return CGL.Texture.PFORMATSTR_RGB8UB;
    return CGL.Texture.PFORMATSTR_RGBA8UB;
  }
  function j(e) {
    if (!u.get()) return;
    if (O) O = b.patch.loading.finished(O);
    O = b.patch.loading.start("textureOp", i.get(), r);
    let t = r.patch.getFilePath(String(i.get()));
    if (e) t += "?rnd=" + CABLES.uuid();
    if (String(i.get()).indexOf("data:") == 0) t = i.get();
    let n = false;
    if (v != i.get()) n = true;
    v = i.get();
    if (i.get() && i.get().length > 1) {
      f.set(false);
      d.set(true);
      const a = i.get();
      r.setUiAttrib({ extendTitle: CABLES.basename(t) });
      if (n) r.refreshParams();
      b.patch.loading.addAssetLoadingTask(() => {
        r.setUiError("urlerror", null);
        CGL.Texture.load(
          b,
          t,
          function (e, t) {
            b.checkFrameStarted("texture inittexture");
            if (i.get() != a) {
              b.patch.loading.finished(O);
              O = null;
              return;
            }
            if (_) _.delete();
            if (e) {
              const n = CGL.Texture.getErrorTexture(b);
              c.setRef(n);
              r.setUiError(
                "urlerror",
                'could not load texture: "' + i.get() + '"',
                2,
              );
              b.patch.loading.finished(O);
              O = null;
              return;
            }
            m.set(t.width);
            p.set(t.height);
            g.set(t.width / t.height);
            _ = t;
            c.setRef(_);
            d.set(false);
            f.set(true);
            if (h.get()) _.image = null;
            if (O) {
              b.patch.loading.finished(O);
              O = null;
            }
          },
          {
            anisotropic: x,
            wrap: y,
            flip: o.get(),
            unpackAlpha: l.get(),
            pixelFormat: C(),
            filter: A,
          },
        );
      });
    } else {
      b.patch.loading.finished(O);
      O = null;
      T();
    }
  }
  function N() {
    if (t.get() == "nearest") A = CGL.Texture.FILTER_NEAREST;
    else if (t.get() == "linear") A = CGL.Texture.FILTER_LINEAR;
    else if (t.get() == "mipmap") A = CGL.Texture.FILTER_MIPMAP;
    else if (t.get() == "Anisotropic") A = CGL.Texture.FILTER_ANISOTROPIC;
    a.setUiAttribs({ greyout: A != CGL.Texture.FILTER_MIPMAP });
    x = parseFloat(a.get());
    S();
  }
  function E() {
    if (n.get() == "repeat") y = CGL.Texture.WRAP_REPEAT;
    if (n.get() == "mirrored repeat") y = CGL.Texture.WRAP_MIRRORED_REPEAT;
    if (n.get() == "clamp to edge") y = CGL.Texture.WRAP_CLAMP_TO_EDGE;
    S();
  }
  r.onFileChanged = function (e) {
    if (i.get() && i.get().indexOf(e) > -1) {
      c.set(CGL.Texture.getEmptyTexture(r.patch.cgl));
      c.set(CGL.Texture.getTempTexture(b));
      j(true);
    }
  };
};
Ops.Gl.Texture_v2.prototype = new CABLES.Op();
CABLES.OPS["790f3702-9833-464e-8e37-6f0f813f7e16"] = {
  f: Ops.Gl.Texture_v2,
  objName: "Ops.Gl.Texture_v2",
};
Ops.Gl.Textures.SwitchTextures_v2 = function () {
  CABLES.Op.apply(this, arguments);
  const t = this;
  const e = (t.attachments = {});
  const n = t.inTrigger("exec"),
    a = this.inValueInt("num"),
    r = t.inValueBool("Default Texture Transparent", true),
    i = t.outTrigger("Next"),
    s = this.outTexture("texture");
  const o = t.patch.cgl;
  const l = [];
  let u = 0;
  let h = -1;
  let c = CGL.Texture.getEmptyTexture(o);
  t.toWorkPortsNeedToBeLinked(n);
  n.onTriggered = function () {
    p();
    i.trigger();
  };
  r.onChange = function () {
    if (r.get()) c = CGL.Texture.getEmptyTexture(o);
    else c = CGL.Texture.getTempTexture(o);
    p(true);
  };
  for (let e = 0; e < 16; e++) {
    const g = t.inTexture("texture" + e);
    l.push(g);
    g.onChange = m;
  }
  function m() {
    p(true);
  }
  function p(e) {
    u = parseInt(a.get(), 10);
    if (!e) {
      if (u == h) return;
      if (u != u) return;
    }
    if (isNaN(u) || u < 0 || u > l.length - 1) u = 0;
    if (l[u].get()) s.set(l[u].get());
    else s.set(c);
    h = u;
  }
};
Ops.Gl.Textures.SwitchTextures_v2.prototype = new CABLES.Op();
CABLES.OPS["a82ae429-ac07-4760-882b-595a857c7ae0"] = {
  f: Ops.Gl.Textures.SwitchTextures_v2,
  objName: "Ops.Gl.Textures.SwitchTextures_v2",
};
Ops.Number.Number = function () {
  CABLES.Op.apply(this, arguments);
  const e = this;
  const t = (e.attachments = {});
  const n = e.inValueFloat("value"),
    a = e.outNumber("result");
  n.onChange = r;
  function r() {
    a.set(Number(n.get()));
  }
};
Ops.Number.Number.prototype = new CABLES.Op();
CABLES.OPS["8fb2bb5d-665a-4d0a-8079-12710ae453be"] = {
  f: Ops.Number.Number,
  objName: "Ops.Number.Number",
};
Ops.Trigger.GateTrigger = function () {
  CABLES.Op.apply(this, arguments);
  const e = this;
  const t = (e.attachments = {});
  const n = e.inTrigger("Execute"),
    a = e.inValueBool("Pass Through", true),
    r = e.outTrigger("Trigger out");
  n.onTriggered = function () {
    if (a.get()) r.trigger();
  };
};
Ops.Trigger.GateTrigger.prototype = new CABLES.Op();
CABLES.OPS["65e8b8a2-ba13-485f-883a-2bcf377989da"] = {
  f: Ops.Trigger.GateTrigger,
  objName: "Ops.Trigger.GateTrigger",
};
Ops.String.StringContains_v2 = function () {
  CABLES.Op.apply(this, arguments);
  const e = this;
  const t = (e.attachments = {});
  const n = e.inString("String"),
    a = e.inString("SearchValue"),
    r = e.outBoolNum("Found", false),
    i = e.outNumber("Index", -1);
  a.onChange = n.onChange = s;
  s();
  function s() {
    if (n.get() && a.get() && a.get().length > 0) {
      const e = n.get().indexOf(a.get());
      i.set(e);
      r.set(e > -1);
    } else {
      i.set(-1);
      r.set(false);
    }
  }
};
Ops.String.StringContains_v2.prototype = new CABLES.Op();
CABLES.OPS["2ca3e5d7-e6b4-46a7-8381-3fe1ad8b6879"] = {
  f: Ops.String.StringContains_v2,
  objName: "Ops.String.StringContains_v2",
};
Ops.Boolean.Or = function () {
  CABLES.Op.apply(this, arguments);
  const e = this;
  const t = (e.attachments = {});
  const n = e.inValueBool("bool 1"),
    a = e.inValueBool("bool 2"),
    r = e.inValueBool("bool 3"),
    i = e.inValueBool("bool 4"),
    s = e.inValueBool("bool 5"),
    o = e.inValueBool("bool 6"),
    l = e.inValueBool("bool 7"),
    u = e.inValueBool("bool 8"),
    h = e.inValueBool("bool 9"),
    c = e.inValueBool("bool 10"),
    m = e.outBoolNum("result");
  n.onChange =
    a.onChange =
    r.onChange =
    i.onChange =
    s.onChange =
    o.onChange =
    l.onChange =
    u.onChange =
    h.onChange =
    c.onChange =
      p;
  function p() {
    m.set(
      n.get() ||
        a.get() ||
        r.get() ||
        i.get() ||
        s.get() ||
        o.get() ||
        l.get() ||
        u.get() ||
        h.get() ||
        c.get(),
    );
  }
};
Ops.Boolean.Or.prototype = new CABLES.Op();
CABLES.OPS["b3b36238-4592-4e11-afe3-8361c4fd6be5"] = {
  f: Ops.Boolean.Or,
  objName: "Ops.Boolean.Or",
};
Ops.Boolean.ToggleBoolValue = function () {
  CABLES.Op.apply(this, arguments);
  const e = this;
  const t = (e.attachments = {});
  const n = e.inValueBool("in bool"),
    a = e.outBoolNum("out bool");
  n.changeAlways = true;
  n.onChange = function () {
    a.set(!(n.get() == true));
  };
};
Ops.Boolean.ToggleBoolValue.prototype = new CABLES.Op();
CABLES.OPS["7b1abd02-3aad-4106-9848-7f4c3cfab6a9"] = {
  f: Ops.Boolean.ToggleBoolValue,
  objName: "Ops.Boolean.ToggleBoolValue",
};
Ops.Boolean.TriggerChangedFalse = function () {
  CABLES.Op.apply(this, arguments);
  const e = this;
  const t = (e.attachments = {});
  let n = e.inValueBool("Value", false);
  let a = e.outTrigger("Next");
  let r = 0;
  n.onChange = function () {
    let e = n.get();
    if (r && !e) {
      r = false;
      a.trigger();
    } else {
      r = true;
    }
  };
};
Ops.Boolean.TriggerChangedFalse.prototype = new CABLES.Op();
CABLES.OPS["6387bcb0-6091-4199-8ab7-f96ad4aa3c7d"] = {
  f: Ops.Boolean.TriggerChangedFalse,
  objName: "Ops.Boolean.TriggerChangedFalse",
};
Ops.Boolean.TriggerChangedTrue = function () {
  CABLES.Op.apply(this, arguments);
  const e = this;
  const t = (e.attachments = {});
  let n = e.inValueBool("Value", false);
  let a = e.outTrigger("Next");
  let r = 0;
  n.onChange = function () {
    let e = n.get();
    if (!r && e) {
      r = true;
      a.trigger();
    } else {
      r = false;
    }
  };
};
Ops.Boolean.TriggerChangedTrue.prototype = new CABLES.Op();
CABLES.OPS["385197e1-8b34-4d1c-897f-d1386d99e3b3"] = {
  f: Ops.Boolean.TriggerChangedTrue,
  objName: "Ops.Boolean.TriggerChangedTrue",
};
Ops.Trigger.DelayedTrigger = function () {
  CABLES.Op.apply(this, arguments);
  const e = this;
  const t = (e.attachments = {});
  const n = e.inTrigger("exe"),
    a = e.inValueFloat("delay", 1),
    r = e.inTriggerButton("Cancel"),
    i = e.outTrigger("next"),
    s = e.outBool("Delaying");
  let o = null;
  r.onTriggered = function () {
    if (o) clearTimeout(o);
    o = null;
  };
  n.onTriggered = function () {
    s.set(true);
    if (o) clearTimeout(o);
    o = setTimeout(function () {
      s.set(false);
      o = null;
      i.trigger();
    }, a.get() * 1e3);
  };
};
Ops.Trigger.DelayedTrigger.prototype = new CABLES.Op();
CABLES.OPS["f4ff66b0-8500-46f7-9117-832aea0c2750"] = {
  f: Ops.Trigger.DelayedTrigger,
  objName: "Ops.Trigger.DelayedTrigger",
};
Ops.Math.Subtract = function () {
  CABLES.Op.apply(this, arguments);
  const e = this;
  const t = (e.attachments = {});
  const n = e.inValue("number1", 1),
    a = e.inValue("number2", 1),
    r = e.outNumber("result");
  e.setTitle("-");
  n.onChange = a.onChange = i;
  i();
  function i() {
    let e = n.get() - a.get();
    if (!isNaN(e)) r.set(e);
  }
};
Ops.Math.Subtract.prototype = new CABLES.Op();
CABLES.OPS["a4ffe852-d200-4b96-9347-68feb01122ca"] = {
  f: Ops.Math.Subtract,
  objName: "Ops.Math.Subtract",
};
Ops.Trigger.NumberByTrigger = function () {
  CABLES.Op.apply(this, arguments);
  const e = this;
  const t = (e.attachments = {});
  const n = e.inTriggerButton("0"),
    a = e.inTriggerButton("1"),
    r = e.inTriggerButton("2"),
    i = e.inTriggerButton("3"),
    s = e.inTriggerButton("4"),
    o = e.inTriggerButton("5"),
    l = e.inTriggerButton("6"),
    u = e.inTriggerButton("7"),
    h = e.outNumber("number");
  h.changeAlways = true;
  const c = e.outTrigger("Triggered");
  n.onTriggered = function () {
    h.set(0);
    c.trigger();
  };
  a.onTriggered = function () {
    h.set(1);
    c.trigger();
  };
  r.onTriggered = function () {
    h.set(2);
    c.trigger();
  };
  i.onTriggered = function () {
    h.set(3);
    c.trigger();
  };
  s.onTriggered = function () {
    h.set(4);
    c.trigger();
  };
  o.onTriggered = function () {
    h.set(5);
    c.trigger();
  };
  l.onTriggered = function () {
    h.set(6);
    c.trigger();
  };
  u.onTriggered = function () {
    h.set(7);
    c.trigger();
  };
};
Ops.Trigger.NumberByTrigger.prototype = new CABLES.Op();
CABLES.OPS["43ed1123-1312-4383-b843-27b8ec540c09"] = {
  f: Ops.Trigger.NumberByTrigger,
  objName: "Ops.Trigger.NumberByTrigger",
};
Ops.Gl.Shader.ShaderToTexture = function () {
  CABLES.Op.apply(this, arguments);
  const e = this;
  const t = (e.attachments = {});
  const n = e.inTrigger("Render"),
    a = e.inObject("Shader", null, "shader"),
    i = e.inValueBool("Use Viewport Size", true),
    s = e.inValueInt("Width", 512),
    o = e.inValueInt("Height", 512),
    l = e.inValueSelect("filter", ["nearest", "linear", "mipmap"]),
    u = e.inValueSelect(
      "wrap",
      ["clamp to edge", "repeat", "mirrored repeat"],
      "clamp to edge",
    ),
    h = e.inValueBool("Floating Point", false),
    c = e.inSwitch("Num Textures", ["1", "4"], "1"),
    r = e.outTrigger("Next"),
    m = e.outTexture("Texture"),
    p = e.outTexture("Texture 2"),
    g = e.outTexture("Texture 3"),
    f = e.outTexture("Texture 4");
  e.setPortGroup("Texture Size", [i, s, o]);
  e.setPortGroup("Texture settings", [l, u, h]);
  let d = 1;
  const b = e.patch.cgl;
  const v = [0, 0, 0, 0];
  const O = null;
  const _ = [];
  let A = null;
  let y = null;
  s.onChange =
    o.onChange =
    h.onChange =
    l.onChange =
    c.onChange =
    u.onChange =
      E;
  i.onChange = N;
  const x = false;
  let I = null;
  const T = null;
  let S = true;
  const C = CGL.MESHES.getSimpleRect(b, "shader2texture rect");
  e.toWorkPortsNeedToBeLinked(a);
  l.set("nearest");
  N();
  function j() {
    if (l.get() == "mipmap" && h.get()) {
      e.setUiError(
        "warning",
        "HDR and mipmap filtering at the same time is not possible",
      );
    } else {
      e.setUiError("warning", null);
    }
  }
  function N() {
    s.setUiAttribs({ greyout: i.get() });
    o.setUiAttribs({ greyout: i.get() });
    s.set(b.getViewPort()[2]);
    o.set(b.getViewPort()[3]);
  }
  function E() {
    S = true;
    j();
  }
  function w() {
    if (y) y.dispose();
    A = null;
    y = null;
  }
  function M() {
    S = false;
    if (I) I.delete();
    const e = _.length;
    d = parseInt(c.get());
    _.length = 0;
    for (let e = 0; e < d; e++) _[e] = true;
    if (e != _.length) {
      w();
    }
    I = null;
    let t = s.get();
    let n = o.get();
    if (i.get()) {
      t = b.getViewPort()[2];
      n = b.getViewPort()[3];
    }
    let a = CGL.Texture.FILTER_NEAREST;
    if (l.get() == "linear") a = CGL.Texture.FILTER_LINEAR;
    else if (l.get() == "mipmap") a = CGL.Texture.FILTER_MIPMAP;
    let r = CGL.Texture.WRAP_CLAMP_TO_EDGE;
    if (u.get() == "repeat") r = CGL.Texture.WRAP_REPEAT;
    if (u.get() == "mirrored repeat") r = CGL.Texture.WRAP_MIRRORED_REPEAT;
    if (b.glVersion >= 2) {
      I = new CGL.Framebuffer2(b, t, n, {
        isFloatingPointTexture: h.get(),
        multisampling: false,
        numRenderBuffers: d,
        wrap: r,
        filter: a,
        depth: true,
        multisamplingSamples: 0,
        clear: true,
      });
    } else {
      I = new CGL.Framebuffer(b, s.get(), o.get(), {
        isFloatingPointTexture: h.get(),
        filter: a,
        wrap: r,
      });
    }
  }
  n.onTriggered = function () {
    const e = b.getViewPort();
    if (!I || S) M();
    if (
      i.get() &&
      I &&
      (e[2] != I.getTextureColor().width || e[3] != I.getTextureColor().height)
    )
      M();
    if (!a.get() || !a.get().setDrawBuffers) return;
    if (a.get() != A) {
      A = a.get();
      y = a.get().copy();
      y.setDrawBuffers(_);
    }
    if (!y) {
      m.set(null);
      return;
    }
    v[0] = e[0];
    v[1] = e[1];
    v[2] = e[2];
    v[3] = e[3];
    I.renderStart(b);
    b.pushPMatrix();
    mat4.identity(b.pMatrix);
    b.pushViewMatrix();
    mat4.identity(b.vMatrix);
    b.pushModelMatrix();
    mat4.identity(b.mMatrix);
    b.pushShader(a.get());
    if (y.bindTextures) y.bindTextures();
    b.pushBlend(false);
    C.render(a.get());
    b.popBlend();
    b.popPMatrix();
    b.popModelMatrix();
    b.popViewMatrix();
    I.renderEnd(b);
    if (d >= 2) {
      m.set(I.getTextureColorNum(0));
      p.set(I.getTextureColorNum(1));
      g.set(I.getTextureColorNum(2));
      f.set(I.getTextureColorNum(3));
    } else m.set(I.getTextureColor());
    b.popShader();
    b.gl.viewport(v[0], v[1], v[2], v[3]);
    r.trigger();
  };
};
Ops.Gl.Shader.ShaderToTexture.prototype = new CABLES.Op();
CABLES.OPS["a3debb76-7d84-4548-9e7b-24891423dcce"] = {
  f: Ops.Gl.Shader.ShaderToTexture,
  objName: "Ops.Gl.Shader.ShaderToTexture",
};
Ops.Gl.Shader.CustomShader_v2 = function () {
  CABLES.Op.apply(this, arguments);
  const b = this;
  const e = (b.attachments = {});
  const t = b.inTrigger("render"),
    n = b.inStringEditor("Fragment Code"),
    a = b.inStringEditor("Vertex Code"),
    r = b.inValueBool("Use As Material", true),
    i = b.outTrigger("trigger"),
    s = b.outObject("Shader", null, "shader"),
    o = b.outBool("Has Errors");
  const v = b.patch.cgl;
  const O = [];
  const _ = [];
  const A = [];
  b.toWorkPortsNeedToBeLinked(t);
  n.setUiAttribs({ editorSyntax: "glsl" });
  a.setUiAttribs({ editorSyntax: "glsl" });
  const y = new CGL.Shader(v, b.name);
  y.setModules(["MODULE_VERTEX_POSITION", "MODULE_COLOR", "MODULE_BEGIN_FRAG"]);
  b.setPortGroup("Source Code", [n, a]);
  b.setPortGroup("Options", [r]);
  n.set(CGL.Shader.getDefaultFragmentShader());
  a.set(CGL.Shader.getDefaultVertexShader());
  n.onChange = a.onChange = function () {
    if (n.isLinked() && !n.get()) return;
    l = true;
  };
  t.onTriggered = h;
  let l = true;
  b.onLoadedValueSet = u;
  function u(n) {
    f();
    if (!n) return;
    for (let t = 0; t < O.length; t++)
      for (let e = 0; e < n.portsIn.length; e++)
        if (O[t] && O[t].name == n.portsIn[e].name) {
          O[t].set(n.portsIn[e].value);
          O[t].deSerializeSettings(n.portsIn[e]);
        }
  }
  b.init = function () {
    f();
  };
  function h() {
    d();
    if (l) f();
    if (r.get()) v.pushShader(y);
    c();
    i.trigger();
    y.popTextures();
    if (r.get()) v.popShader();
  }
  function c() {
    for (let e = 0; e < _.length; e++)
      if (_[e] && _[e].get() && _[e].get().tex)
        y.pushTexture(_[e].uniform, _[e].get().tex);
      else y.pushTexture(_[e], CGL.Texture.getEmptyTexture(v));
  }
  function m() {
    for (let e = 0; e < _.length; e++)
      if (_[e] && _[e].get() && _[e].get().tex)
        v.setTexture(0 + e + 3, _[e].get().tex);
  }
  function x(t) {
    for (let e = 0; e < O.length; e++) if (O[e] && O[e].name == t) return true;
    for (let e = 0; e < _.length; e++) if (_[e] && _[e].name == t) return true;
    return false;
  }
  const p = mat4.create();
  const I = [
    "modelMatrix",
    "viewMatrix",
    "normalMatrix",
    "mvMatrix",
    "projMatrix",
    "inverseViewMatrix",
    "camPos",
  ];
  let T = 0;
  const S = [];
  function g(e) {
    const t = e.split("\n");
    const r = [];
    for (let e = 0; e < t.length; e++) {
      const n = t[e].split(";");
      for (let e = 0; e < n.length; e++) {
        let a = n[e].split(" ");
        for (let e = 0; e < a.length; e++) a[e] = (a[e] + "").trim();
        if (a[0] === "UNI" || a[0] === "uniform") {
          let t = a[2];
          if (a.length > 4) for (let e = 3; e < a.length; e++) t += a[e];
          a = a.filter(function (e) {
            return e !== "";
          });
          const i = a[1];
          let n = [t];
          if (t.indexOf(",") > -1) n = t.split(",");
          for (let e = 0; e < n.length; e++) {
            if (I.indexOf(n[e]) > -1) continue;
            const s = n[e].trim().replace(/\[\d+\]$/, "");
            if (i === "float") {
              S.push(s);
              if (!x(s)) {
                const o = n[e].trim().match(/\[\d+\]$/);
                if (o) {
                  const l = parseInt(o[0].trim().slice(1, -1));
                  const u = b.inArray(s, []);
                  u.uniform = new CGL.Uniform(y, "f[]", s, new Float32Array(l));
                  O.push(u);
                  r.push(u);
                  const h = {
                    name: s,
                    num: l,
                    port: u,
                    uni: u.uniform,
                    changed: false,
                  };
                  u.onChange = function () {
                    this.changed = true;
                  }.bind(h);
                  A.push(h);
                } else {
                  const u = b.inFloat(s, 0);
                  u.uniform = new CGL.Uniform(y, "f", s, u);
                  O.push(u);
                  r.push(u);
                }
              }
            } else if (i === "int") {
              S.push(s);
              if (!x(s)) {
                const u = b.inInt(s, 0);
                u.uniform = new CGL.Uniform(y, "i", s, u);
                O.push(u);
                r.push(u);
              }
            } else if (i === "bool") {
              S.push(s);
              if (!x(s)) {
                const u = b.inBool(s, false);
                u.uniform = new CGL.Uniform(y, "b", s, u);
                O.push(u);
                r.push(u);
              }
            } else if (i === "mat4") {
              S.push(s);
              if (!x(s)) {
                const u = b.inArray(s, 0);
                u.uniform = new CGL.Uniform(y, "m4", s, u);
                O.push(u);
                r.push(u);
                const h = {
                  name: s,
                  num: 16,
                  port: u,
                  uni: u.uniform,
                  changed: false,
                };
                u.onChange = function () {
                  this.changed = true;
                }.bind(h);
                A.push(h);
              }
            } else if (i === "sampler2D" || i === "samplerCube") {
              S.push(s);
              if (!x(s)) {
                const c = b.inObject(s);
                let e = "t";
                if (i === "samplerCube") e = "tc";
                c.uniform = new CGL.Uniform(y, e, s, 3 + _.length);
                _.push(c);
                r.push(c);
                c.set(CGL.Texture.getTempTexture(v));
                c.on("change", (e, t) => {
                  if (!e) t.set(CGL.Texture.getTempTexture(v));
                });
                T++;
              }
            } else if (i === "vec3" || i === "vec2" || i === "vec4") {
              let e = 2;
              if (i === "vec4") e = 4;
              if (i === "vec3") e = 3;
              S.push(s + " X");
              S.push(s + " Y");
              if (e > 2) S.push(s + " Z");
              if (e > 3) S.push(s + " W");
              if (!x(s + " X")) {
                const m = [];
                const h = { name: s, num: e, changed: false };
                A.push(h);
                C(h);
                const p = b.inFloat(s + " X", 0);
                p.onChange = function () {
                  this.changed = true;
                }.bind(h);
                O.push(p);
                m.push(p);
                h.x = p;
                const g = b.inFloat(s + " Y", 0);
                g.onChange = function () {
                  this.changed = true;
                }.bind(h);
                O.push(g);
                m.push(g);
                h.y = g;
                if (e > 2) {
                  const f = b.inFloat(s + " Z", 0);
                  f.onChange = function () {
                    this.changed = true;
                  }.bind(h);
                  O.push(f);
                  m.push(f);
                  h.z = f;
                }
                if (e > 3) {
                  const d = b.inFloat(s + " W", 0);
                  d.onChange = function () {
                    this.changed = true;
                  }.bind(h);
                  O.push(d);
                  m.push(d);
                  h.w = d;
                }
                b.setPortGroup(s, m);
              }
            }
          }
        }
      }
    }
    b.setPortGroup("uniforms", r);
  }
  function f() {
    if (!y) return;
    y.bindTextures = m.bind(this);
    y.setSource(a.get(), n.get());
    if (v.glVersion == 1) {
      v.enableExtension("OES_standard_derivatives");
      y.enableExtension("GL_OES_standard_derivatives");
    }
    T = 0;
    S.length = 0;
    g(a.get());
    g(n.get());
    for (let t = 0; t < _.length; t++)
      for (let e = 0; e < S.length; e++)
        if (_[t] && S.indexOf(_[t].name) == -1) {
          _[t].remove();
          _[t] = null;
        }
    for (let t = 0; t < O.length; t++)
      for (let e = 0; e < S.length; e++)
        if (O[t] && S.indexOf(O[t].name) == -1) {
          O[t].remove();
          O[t] = null;
        }
    for (let e = 0; e < A.length; e++) {
      C(A[e]);
      A[e].changed = true;
    }
    for (let e = 0; e < O.length; e++)
      if (O[e] && O[e].uniform) O[e].uniform.needsUpdate = true;
    y.compile();
    b.refreshParams();
    s.set(null);
    s.set(y);
    l = false;
    if (y.hasErrors()) b.setUiError("compile", "Shader has errors");
    else b.setUiError("compile", null);
    o.set(y.hasErrors());
  }
  function C(e) {
    if (e.num == 2) e.uni = new CGL.Uniform(y, "2f", e.name, [0, 0]);
    else if (e.num == 3) e.uni = new CGL.Uniform(y, "3f", e.name, [0, 0, 0]);
    else if (e.num == 4) e.uni = new CGL.Uniform(y, "4f", e.name, [0, 0, 0, 0]);
  }
  function d() {
    for (let e = 0; e < A.length; e++) {
      const t = A[e];
      if (t.changed) {
        if (t.num === 2) t.uni.setValue([t.x.get(), t.y.get()]);
        else if (t.num === 3) t.uni.setValue([t.x.get(), t.y.get(), t.z.get()]);
        else if (t.num === 4)
          t.uni.setValue([t.x.get(), t.y.get(), t.z.get(), t.w.get()]);
        else if (t.num > 4) {
          t.uni.setValue(t.port.get());
        }
        t.changed = false;
      }
    }
  }
};
Ops.Gl.Shader.CustomShader_v2.prototype = new CABLES.Op();
CABLES.OPS["a165fc89-a35b-4d39-8930-7345b098bd9d"] = {
  f: Ops.Gl.Shader.CustomShader_v2,
  objName: "Ops.Gl.Shader.CustomShader_v2",
};
Ops.Math.Compare.GreaterThan = function () {
  CABLES.Op.apply(this, arguments);
  const e = this;
  const t = (e.attachments = {});
  const n = e.inValueFloat("number1"),
    a = e.inValueFloat("number2"),
    r = e.outBoolNum("result");
  e.setTitle(">");
  n.onChange = a.onChange = i;
  function i() {
    r.set(n.get() > a.get());
  }
};
Ops.Math.Compare.GreaterThan.prototype = new CABLES.Op();
CABLES.OPS["b250d606-f7f8-44d3-b099-c29efff2608a"] = {
  f: Ops.Math.Compare.GreaterThan,
  objName: "Ops.Math.Compare.GreaterThan",
};
Ops.Array.InterpolateArrays = function () {
  CABLES.Op.apply(this, arguments);
  const e = this;
  const t = (e.attachments = {});
  const n = e.inTrigger("Exe"),
    o = e.inArray("Array 1"),
    l = e.inArray("Array 2"),
    u = e.inValueSlider("perc"),
    h = e.outTrigger("Next"),
    c = e.outArray("Result");
  let m = true;
  let p = [];
  function a() {
    m = true;
  }
  o.onChange = l.onChange = u.onChange = a;
  n.onTriggered = r;
  function r() {
    let n = o.get();
    let a = l.get();
    let r;
    let i;
    let s;
    if (!n || !a || n.length < a.length) {
      c.set(null);
      return;
    }
    if (m) {
      if (p.length != n.length) p.length = n.length;
      let t = u.get();
      for (let e = 0; e < n.length; e++) {
        r = n[e];
        i = a[e];
        s = (i - r) * t + r;
        p[e] = s;
      }
      m = false;
      c.setRef(p);
    }
    h.trigger();
  }
  o.onLinkChanged = l.onLinkChanged = function () {
    let e = o.get();
    let t = l.get();
    if (!e || !t) {
      c.set(null);
      return;
    }
    let n = e[0];
    let a = t[0];
    if (typeof n === "string" || typeof a === "string") {
      c.set(null);
    }
  };
};
Ops.Array.InterpolateArrays.prototype = new CABLES.Op();
CABLES.OPS["09296117-7312-4f80-982b-7b4a81d22cf8"] = {
  f: Ops.Array.InterpolateArrays,
  objName: "Ops.Array.InterpolateArrays",
};
Ops.Array.Array3 = function () {
  CABLES.Op.apply(this, arguments);
  const e = this;
  const t = (e.attachments = {});
  const i = e.inValueInt("Num Triplets", 100),
    s = e.inValueFloat("X", 0),
    o = e.inValueFloat("Y", 0),
    l = e.inValueFloat("Z", 0),
    u = e.outArray("Array", null, 3),
    h = e.outNumber("Total points"),
    c = e.outNumber("Array length");
  i.onChange = s.onChange = o.onChange = l.onChange = n;
  let m = [];
  n();
  function n() {
    let t = Math.floor(i.get() * 3);
    if (t < 0) t = 0;
    if (m.length != t) m.length = t;
    const n = s.get();
    const a = o.get();
    const r = l.get();
    for (let e = 0; e < t; e += 3) {
      m[e] = n;
      m[e + 1] = a;
      m[e + 2] = r;
    }
    u.setRef(m);
    h.set(t / 3);
    c.set(t);
  }
};
Ops.Array.Array3.prototype = new CABLES.Op();
CABLES.OPS["2766606a-3ea0-4204-8613-b8950a124435"] = {
  f: Ops.Array.Array3,
  objName: "Ops.Array.Array3",
};
Ops.Array.ArrayMerge_v3 = function () {
  CABLES.Op.apply(this, arguments);
  const t = this;
  const e = (t.attachments = {});
  const n = 8;
  const a = [];
  for (let e = 0; e < n; e++) {
    a[e] = t.inArray("Array " + e);
    a[e].onChange = function () {
      o();
    };
  }
  const r = t.outArray("Result"),
    i = t.outNumber("Array length");
  let s = [];
  function o() {
    s.length = 0;
    for (let e = 0; e < n; e++) {
      const t = a[e].get();
      if (t) s = s.concat(t);
    }
    r.setRef(s);
    i.set(s.length);
  }
};
Ops.Array.ArrayMerge_v3.prototype = new CABLES.Op();
CABLES.OPS["753d053a-04a3-44c7-abf0-ae2676ced13e"] = {
  f: Ops.Array.ArrayMerge_v3,
  objName: "Ops.Array.ArrayMerge_v3",
};
Ops.Array.SmoothArray = function () {
  CABLES.Op.apply(this, arguments);
  const e = this;
  const t = (e.attachments = {});
  const n = e.inTrigger("Execute"),
    r = e.inArray("Array In"),
    a = e.inBool("Separate inc/dec", false),
    i = e.inValue("Inc factor", 4),
    s = e.inValue("Dec factor", 4),
    o = e.outTrigger("Next"),
    l = e.outArray("Array Out");
  let u = [];
  let h = false;
  let c = 0;
  let m = [];
  l.set(m);
  let p;
  let g;
  let f = false;
  d();
  b();
  function d() {
    f = a.get();
    if (!f) {
      s.setUiAttribs({ greyout: true });
      i.setUiAttribs({ title: "Inc/Dec factor" });
    } else {
      s.setUiAttribs({ greyout: false });
      i.setUiAttribs({ title: "Inc factor" });
    }
    b();
    O();
  }
  function b() {
    p = i.get();
    if (f == false) g = i.get();
    else g = s.get();
    if (p <= 0 || p != p) p = 1e-4;
    if (g <= 0 || g != g) g = 1e-4;
    if (p <= 1) p = 1;
    if (g <= 1) g = 1;
  }
  r.onLinkChanged = () => {
    if (r) r.copyLinkedUiAttrib("stride", l);
  };
  r.onChange = function () {
    let t = r.get();
    if (!t) return;
    for (let e = 0; e < t.length; e++) {
      u[e] = t[e] || 0;
    }
  };
  let v = 0;
  function O() {
    let e = r.get();
    if (!e) return;
    if (m.length != e.length) {
      m.length = e.length || 0;
      h = true;
    }
    let n = 1;
    if (CABLES.now() - c > 500 || c === 0) h = true;
    else n = (CABLES.now() - c) / 17;
    c = CABLES.now();
    if (h) {
      for (var a = 0; a < e.length; a++) {
        m[a] = e[a];
      }
      h = false;
    }
    for (var a = 0; a < e.length; a++) {
      let e = m[a];
      let t = u[a] - e;
      if (t >= 0) e += t / (g * n);
      else e += t / (p * n);
      if (e > 0 && e < 1e-9) e = 0;
      if (!e) e = 0;
      if (m[a] != e) {
        m[a] = e;
        v = e;
      }
    }
    l.setRef(m);
    o.trigger();
  }
  n.onTriggered = function () {
    O();
  };
  i.onChange = s.onChange = b;
  a.onChange = d;
  O();
};
Ops.Array.SmoothArray.prototype = new CABLES.Op();
CABLES.OPS["8fd2ed9b-02e5-4349-b7bc-6665ca240ffa"] = {
  f: Ops.Array.SmoothArray,
  objName: "Ops.Array.SmoothArray",
};
Ops.Array.Array_v3 = function () {
  CABLES.Op.apply(this, arguments);
  const t = this;
  const e = (t.attachments = {});
  const a = t.inValueInt("Array length", 10),
    n = t.inSwitch("Mode select", ["Number", "1,2,3,4", "0-1"], "Number"),
    r = t.inValueFloat("Default Value"),
    i = t.inBool("Reverse", false),
    s = t.outArray("Array"),
    o = t.outNumber("Array length out");
  let l = [];
  let u = 0;
  const h = 0;
  const c = 1;
  const m = 2;
  n.onChange = p;
  i.onChange = r.onChange = a.onChange = g;
  p();
  g();
  function p() {
    let e = n.get();
    if (e === "Number") u = h;
    else if (e === "1,2,3,4") u = c;
    else if (e === "0-1") u = m;
    r.setUiAttribs({ greyout: u !== h });
    t.setUiAttrib({ extendTitle: n.get() });
    g();
  }
  function g() {
    l.length = 0;
    let e = a.get();
    let t = r.get();
    let n;
    if (u === h) {
      for (n = 0; n < e; n++) {
        l[n] = t;
      }
    } else if (u === c) {
      for (n = 0; n < e; n++) {
        l[n] = n;
      }
    } else if (u === m) {
      for (n = 0; n < e; n++) {
        l[n] = n / (e - 1);
      }
    }
    if (i.get()) l = l.reverse();
    s.setRef(l);
    o.set(l.length);
  }
};
Ops.Array.Array_v3.prototype = new CABLES.Op();
CABLES.OPS["e4d31a46-bf64-42a8-be34-4cbb2bbc2600"] = {
  f: Ops.Array.Array_v3,
  objName: "Ops.Array.Array_v3",
};
Ops.Trigger.Sequence = function () {
  CABLES.Op.apply(this, arguments);
  const i = this;
  const e = (i.attachments = {});
  const t = i.inTrigger("exe"),
    n = i.inTriggerButton("Clean up connections");
  const a = [],
    s = [],
    r = 16;
  let o = null,
    l = [];
  t.onTriggered = c;
  n.onTriggered = m;
  n.setUiAttribs({ hideParam: true, hidePort: true });
  for (let t = 0; t < r; t++) {
    const p = i.outTrigger("trigger " + t);
    s.push(p);
    p.onLinkChanged = h;
    if (t < r - 1) {
      let e = i.inTrigger("exe " + t);
      e.onTriggered = c;
      a.push(e);
    }
  }
  u();
  function u() {
    l.length = 0;
    for (let e = 0; e < s.length; e++) if (s[e].links.length > 0) l.push(s[e]);
  }
  function h() {
    u();
    clearTimeout(o);
    o = setTimeout(() => {
      let t = false;
      for (let e = 0; e < s.length; e++) if (s[e].links.length > 1) t = true;
      n.setUiAttribs({ hideParam: !t });
      if (i.isCurrentUiOp()) i.refreshParams();
    }, 60);
  }
  function c() {
    for (let e = 0; e < l.length; e++) l[e].trigger();
  }
  function m() {
    let a = 0;
    for (let n = 0; n < s.length; n++) {
      let t = [];
      if (s[n].links.length > 1)
        for (let e = 1; e < s[n].links.length; e++) {
          while (s[a].links.length > 0) a++;
          t.push(s[n].links[e]);
          const r = s[n].links[e].getOtherPort(s[n]);
          i.patch.link(i, "trigger " + a, r.op, r.name);
          a++;
        }
      for (let e = 0; e < t.length; e++) t[e].remove();
    }
    h();
    u();
  }
};
Ops.Trigger.Sequence.prototype = new CABLES.Op();
CABLES.OPS["a466bc1f-06e9-4595-8849-bffb9fe22f99"] = {
  f: Ops.Trigger.Sequence,
  objName: "Ops.Trigger.Sequence",
};
window.addEventListener("load", function (e) {
  CABLES.jsLoaded = new Event("CABLES.jsLoaded");
  document.dispatchEvent(CABLES.jsLoaded);
});
(() => {
  "use strict";
  const s = 0,
    o = 2,
    l = 2,
    u = 3,
    h = 5;
  (CABLES.VarSetOpWrapper = class {
    constructor(t, e, n, a, r, i) {
      (this._valuePort = n),
        (this._varNamePort = a),
        (this._op = t),
        (this._type = e),
        (this._typeId = -1),
        (this._triggerPort = r),
        (this._nextPort = i),
        (this._btnCreate = t.inTriggerButton("Create new variable")),
        this._btnCreate.setUiAttribs({ hidePort: !0 }),
        (this._btnCreate.onTriggered = this._createVar.bind(this)),
        (this._helper = t.inUiTriggerButtons("", ["Rename"])),
        this._helper.setUiAttribs({ hidePort: !0 }),
        (this._helper.onTriggered = (e) => {
          "Rename" == e && CABLES.CMD.PATCH.renameVariable(t.varName.get());
        }),
        this._op.setPortGroup("Variable", [
          this._helper,
          this._varNamePort,
          this._btnCreate,
        ]),
        this._op.on("uiParamPanel", this._updateVarNamesDropdown.bind(this)),
        this._op.patch.addEventListener(
          "variablesChanged",
          this._updateName.bind(this),
        ),
        this._op.patch.addEventListener(
          "variableRename",
          this._renameVar.bind(this),
        ),
        (this._varNamePort.onChange = this._updateName.bind(this)),
        (this._isTexture = "texture" === this._valuePort.uiAttribs.objType),
        (this._valuePort.changeAlways = !0),
        this._triggerPort
          ? (this._triggerPort.onTriggered = () => {
              this._setVarValue(!0);
            })
          : (this._valuePort.onChange = this._setVarValue.bind(this)),
        (this._op.init = () => {
          this._updateName(),
            this._triggerPort || this._setVarValue(),
            this._updateErrorUi();
        }),
        (this._typeId =
          "array" == e
            ? u
            : "object" == e
              ? o
              : "string" == e
                ? h
                : "texture" == e
                  ? l
                  : s);
    }
    _updateErrorUi() {
      CABLES.UI &&
        (this._varNamePort.get()
          ? this._op.hasUiErrors && this._op.setUiError("novarname", null)
          : this._op.setUiError("novarname", "no variable selected"));
    }
    _updateName() {
      const e = this._varNamePort.get();
      this._op.setTitle("var set"),
        this._op.setUiAttrib({ extendTitle: "#" + e }),
        this._updateErrorUi();
      const t = this._op.patch.getVar(e);
      t && !t.type && (t.type = this._type),
        this._op.patch.hasVar(e) ||
          0 == e ||
          this._triggerPort ||
          this._setVarValue(),
        !this._op.patch.hasVar(e) &&
          0 != e &&
          this._triggerPort &&
          ("string" == this._type || "number" == this._type
            ? this._op.patch.setVarValue(e, "")
            : this._op.patch.setVarValue(e, null)),
        this._op.isCurrentUiOp() &&
          (this._updateVarNamesDropdown(), this._op.refreshParams()),
        this._updateDisplay(),
        this._op.patch.emitEvent(
          "opVariableNameChanged",
          this._op,
          this._varNamePort.get(),
        );
    }
    _createVar() {
      CABLES.CMD.PATCH.createVariable(this._op, this._type, () => {
        this._updateName();
      });
    }
    _updateDisplay() {
      this._valuePort.setUiAttribs({ greyout: !this._varNamePort.get() });
    }
    _updateVarNamesDropdown() {
      if (CABLES.UI && CABLES.UI.loaded && CABLES.UI.loaded) {
        const t = [],
          n = this._op.patch.getVars();
        for (const e in n) n[e].type == this._type && "0" != e && t.push(e);
        this._varNamePort.uiAttribs.values = t;
      }
    }
    _renameVar(e, t) {
      e == this._varNamePort.get() &&
        (this._varNamePort.set(t), this._updateName());
    }
    _setVarValue(e) {
      const t = this._varNamePort.get();
      if (!t) return;
      const n = this._valuePort.get();
      this._typeId == s || this._typeId == h
        ? this._op.patch.setVarValue(t, n)
        : this._typeId == u
          ? ((this._arr = []),
            CABLES.copyArray(n, this._arr),
            this._op.patch.setVarValue(t, this._arr))
          : (this._typeId == o &&
              (this._isTexture
                ? this._op.patch.setVarValue(
                    t,
                    CGL.Texture.getEmptyTexture(this._op.patch.cgl),
                  )
                : this._op.patch.setVarValue(t, null),
              n && n.tex && n._cgl && !this._isTexture
                ? this._op.setUiError(
                    "texobj",
                    "Dont use object variables for textures, use varSetTexture",
                  )
                : this._op.setUiError("texobj", null)),
            this._op.patch.setVarValue(t, n)),
        e && this._nextPort && this._nextPort.trigger();
    }
  }),
    (CABLES.VarGetOpWrapper = class {
      constructor(e, t, n, a) {
        (this._op = e),
          (this._type = t),
          (this._varnamePort = n),
          (this._variable = null),
          (this._valueOutPort = a),
          (this._listenerId = null),
          this._op.on("uiParamPanel", this._updateVarNamesDropdown.bind(this)),
          this._op.on("uiErrorChange", this._updateTitle.bind(this)),
          this._op.patch.on("variableRename", this._renameVar.bind(this)),
          this._op.patch.on("variableDeleted", (e) => {
            this._op.isCurrentUiOp() && this._op.refreshParams();
          }),
          (this._varnamePort.onChange = this._changeVar.bind(this)),
          this._op.patch.addEventListener(
            "variablesChanged",
            this._init.bind(this),
          ),
          (this._op.onDelete = () => {
            this._variable &&
              this._listenerId &&
              this._variable.off(this._listenerId);
          }),
          (this._op.init = () => {
            this._init();
          });
      }
      get variable() {
        return this._variable;
      }
      _changeVar() {
        this._variable &&
          this._listenerId &&
          this._variable.off(this._listenerId),
          this._init();
      }
      _renameVar(e, t) {
        e == this._varnamePort.get() &&
          (this._varnamePort.set(t),
          this._updateVarNamesDropdown(),
          this._updateTitle(),
          (this._listenerId = this._variable.on(
            "change",
            this._setValueOut.bind(this),
          )));
      }
      _updateVarNamesDropdown() {
        if (CABLES.UI && CABLES.UI.loaded) {
          const t = [],
            n = this._op.patch.getVars();
          for (const e in n) n[e].type == this._type && "0" != e && t.push(e);
          this._op.varName.uiAttribs.values = t;
        }
      }
      _setValueOut(e) {
        this._valueOutPort && this._valueOutPort.set(e);
      }
      _updateTitle() {
        this._variable
          ? (this._op.setUiError("unknownvar", null),
            this._op.setTitle("var get"),
            this._op.setUiAttrib({
              extendTitle: "#" + this._varnamePort.get(),
            }),
            this._valueOutPort &&
              this._valueOutPort.set(this._variable.getValue()))
          : (this._op.setUiError(
              "unknownvar",
              "unknown variable! - there is no setVariable with this name (" +
                this._varnamePort.get() +
                ")",
            ),
            this._op.setUiAttrib({ extendTitle: "#invalid" }),
            this._valueOutPort && this._valueOutPort.set(0));
      }
      _init() {
        this._updateVarNamesDropdown(),
          this._variable &&
            this._listenerId &&
            this._variable.off(this._listenerId),
          (this._variable = this._op.patch.getVar(this._op.varName.get())),
          this._variable &&
            (this._listenerId = this._variable.on(
              "change",
              this._setValueOut.bind(this),
            )),
          this._updateTitle(),
          this._op.patch.emitEvent(
            "opVariableNameChanged",
            this._op,
            this._varnamePort.get(),
          );
      }
    }),
    (((this.CABLES = this.CABLES || {}).COREMODULES =
      this.CABLES.COREMODULES || {}).Vargetset = {}.Cables);
})();
(() => {
  "use strict";
  (CGL.ShaderModifier = class {
    constructor(e, t, n) {
      (this._cgl = e),
        (this._name = t),
        (this._origShaders = {}),
        (this._uniforms = []),
        (this._structUniforms = []),
        (this._definesToggled = {}),
        (this._defines = {}),
        (this._mods = []),
        (this._textures = []),
        (this._boundShader = null),
        (this._changedDefines = !0),
        (this._changedUniforms = !0),
        (this._modulesChanged = !1),
        (this.needsTexturePush = !1),
        (this._lastShader = null),
        (this._attributes = []),
        1 == this._cgl.glVersion &&
          (this._cgl.enableExtension("OES_texture_float"),
          this._cgl.enableExtension("OES_texture_float_linear"),
          this._cgl.enableExtension("OES_texture_half_float"),
          this._cgl.enableExtension("OES_texture_half_float_linear"));
    }
    bind(t, n) {
      const a = t || this._cgl.getShader();
      if (!a) return;
      this._boundShader = this._origShaders[a.id];
      let r = !1;
      if (
        (this._boundShader &&
          this._lastShader != this._boundShader.shader &&
          (this._boundShader.shader.hasModule(this._mods[0].id) || (r = !0)),
        (r ||
          !this._boundShader ||
          a.lastCompile != this._boundShader.lastCompile ||
          this._modulesChanged ||
          a._needsRecompile) &&
          (this._boundShader && this._boundShader.shader.dispose(),
          a._needsRecompile && a.compile(),
          (this._boundShader = this._origShaders[a.id] =
            { lastCompile: a.lastCompile, orig: a, shader: a.copy() }),
          this._addModulesToShader(this._boundShader.shader),
          this._updateDefinesShader(this._boundShader.shader),
          this._updateUniformsShader(this._boundShader.shader)),
        (this._boundShader.wireframe = a.wireframe),
        this._changedDefines && this._updateDefines(),
        this._changedUniforms && this._updateUniforms(),
        !1 !== n && this._cgl.pushShader(this._boundShader.shader),
        this._boundShader.shader.copyUniformValues(this._boundShader.orig),
        this.needsTexturePush)
      ) {
        for (let e = 0; e < this._textures.length; e += 1) {
          const n = this._textures[e][0],
            a = this._textures[e][1],
            r = this._textures[e][2];
          if (this._getUniform(n)) {
            const t = this.getPrefixedName(n),
              i = this._boundShader.shader.getUniform(t);
            i && this._boundShader.shader.pushTexture(i, a, r);
          }
        }
        (this.needsTexturePush = !1), (this._textures.length = 0);
      }
      return (
        (this._modulesChanged = !1),
        (this._boundShader.shader.fromMod = this),
        this.onBind && this.onBind(this._boundShader.shader),
        this._boundShader.shader
      );
    }
    unbind(e) {
      this._boundShader && !1 !== e && this._cgl.popShader(),
        (this._boundShader = null);
    }
    _addModulesToShader(t) {
      let n;
      this._mods.length > 1 && (n = this._mods[0]);
      for (let e = 0; e < this._mods.length; e++) t.addModule(this._mods[e], n);
    }
    _removeModulesFromShader(e) {
      for (const t in this._origShaders)
        this._origShaders[t].shader.removeModule(e);
    }
    addModule(e) {
      this._mods.push(e), (this._modulesChanged = !0);
    }
    removeModule(t) {
      const n = [];
      let a = !1;
      for (let e = 0; e < this._mods.length; e++)
        this._mods[e].title == t &&
          ((a = !0), this._removeModulesFromShader(this._mods[e]), n.push(e));
      for (let e = n.length - 1; e >= 0; e -= 1) this._mods.splice(n[e], 1);
      this._modulesChanged = !0;
    }
    _updateUniformsShader(a) {
      for (let e = 0; e < this._uniforms.length; e++) {
        const r = this._uniforms[e],
          t = this.getPrefixedName(r.name);
        if (!a.hasUniform(t) && !r.structName) {
          let e = null;
          "both" === r.shaderType
            ? ((e = a.addUniformBoth(r.type, t, r.v1, r.v2, r.v3, r.v4)),
              (e.comment = "mod: " + this._name))
            : "frag" === r.shaderType
              ? ((e = a.addUniformFrag(r.type, t, r.v1, r.v2, r.v3, r.v4)),
                (e.comment = "mod: " + this._name))
              : "vert" === r.shaderType &&
                ((e = a.addUniformVert(r.type, t, r.v1, r.v2, r.v3, r.v4)),
                (e.comment = "mod: " + this._name));
        }
      }
      for (let n = 0; n < this._structUniforms.length; n += 1) {
        const r = this._structUniforms[n];
        let e = r.uniformName,
          t = r.structName;
        const i = r.members;
        (e = this.getPrefixedName(r.uniformName)),
          (t = this.getPrefixedName(r.structName)),
          "frag" === r.shaderType && a.addUniformStructFrag(t, e, i),
          "vert" === r.shaderType && a.addUniformStructVert(t, e, i),
          "both" === r.shaderType && a.addUniformStructBoth(t, e, i);
      }
    }
    _updateUniforms() {
      for (const e in this._origShaders)
        this._updateUniformsShader(this._origShaders[e].shader);
      this._changedUniforms = !1;
    }
    _setUniformValue(e, t, n) {
      const a = e.getUniform(t);
      a && a.setValue(n);
    }
    setUniformValue(e, t) {
      if (!this._getUniform(e)) return;
      const n = this.getPrefixedName(e);
      for (const e in this._origShaders)
        this._setUniformValue(this._origShaders[e].shader, n, t);
    }
    hasUniform(e) {
      return this._getUniform(e);
    }
    _getUniform(t) {
      for (let e = 0; e < this._uniforms.length; e++) {
        if (this._uniforms[e].name == t) return this._uniforms[e];
        if (this._uniforms[e].structName && this._uniforms[e].propertyName == t)
          return this._uniforms[e];
      }
      return !1;
    }
    _getStructUniform(t) {
      for (let e = 0; e < this._structUniforms.length; e += 1)
        if (this._structUniforms[e].uniformName === t)
          return this._structUniforms[e];
      return null;
    }
    _isStructUniform(t) {
      for (let e = 0; e < this._uniforms.length; e++) {
        if (this._uniforms[e].name == t) return !1;
        if (this._uniforms[e].structName && this._uniforms[e].propertyName == t)
          return !0;
      }
      return !1;
    }
    addUniform(t, n, a, r, i, s, o, l, u, h) {
      if (!this._getUniform(n)) {
        let e = "both";
        h && (e = h),
          this._uniforms.push({
            type: t,
            name: n,
            v1: a,
            v2: r,
            v3: i,
            v4: s,
            structUniformName: o,
            structName: l,
            propertyName: u,
            shaderType: e,
          }),
          (this._changedUniforms = !0);
      }
    }
    addUniformFrag(e, t, n, a, r, i) {
      this.addUniform(e, t, n, a, r, i, null, null, null, "frag"),
        (this._changedUniforms = !0);
    }
    addUniformVert(e, t, n, a, r, i) {
      this.addUniform(e, t, n, a, r, i, null, null, null, "vert"),
        (this._changedUniforms = !0);
    }
    addUniformBoth(e, t, n, a, r, i) {
      this.addUniform(e, t, n, a, r, i, null, null, null, "both"),
        (this._changedUniforms = !0);
    }
    addUniformStruct(t, n, a, r) {
      for (let e = 0; e < a.length; e += 1) {
        const i = a[e];
        ("2i" !== i.type && "i" !== i.type && "3i" !== i.type) ||
          "both" !== r ||
          console.error(
            "Adding an integer struct member to both shaders can potentially error. Please use different structs for each shader. Error occured in struct:",
            t,
            " with member:",
            i.name,
            " of type:",
            i.type,
            ".",
          ),
          this._getUniform(n + "." + i.name) ||
            this.addUniform(
              i.type,
              n + "." + i.name,
              i.v1,
              i.v2,
              i.v3,
              i.v4,
              n,
              t,
              i.name,
              r,
            );
      }
      this._getStructUniform(n) ||
        this._structUniforms.push({
          structName: t,
          uniformName: n,
          members: a,
          shaderType: r,
        });
    }
    addUniformStructVert(e, t, n) {
      this.addUniformStruct(e, t, n, "vert");
    }
    addUniformStructFrag(e, t, n) {
      this.addUniformStruct(e, t, n, "frag");
    }
    addUniformStructBoth(e, t, n) {
      this.addUniformStruct(e, t, n, "both");
    }
    addAttribute(t) {
      for (let e = 0; e < this._attributes.length; e++)
        if (
          this._attributes[e].name == t.name &&
          this._attributes[e].nameFrag == t.nameFrag
        )
          return;
      this._attributes.push(t);
    }
    pushTexture(e, t, n) {
      if (!t) throw new Error("no texture given to texturestack");
      this._textures.push([e, t, n]), (this.needsTexturePush = !0);
    }
    _removeUniformFromShader(e, t) {
      t.hasUniform(e) && t.removeUniform(e);
    }
    removeUniform(t) {
      if (this._getUniform(t)) {
        for (let e = this._uniforms.length - 1; e >= 0; e -= 1) {
          const n = t;
          if (this._uniforms[e].name == t && !this._uniforms[e].structName) {
            for (const t in this._origShaders)
              this._removeUniformFromShader(
                this.getPrefixedName(n),
                this._origShaders[t].shader,
              );
            this._uniforms.splice(e, 1);
          }
        }
        this._changedUniforms = !0;
      }
    }
    removeUniformStruct(t) {
      if (this._getStructUniform(t)) {
        for (let e = this._structUniforms.length - 1; e >= 0; e -= 1) {
          const n = this._structUniforms[e];
          if (n.uniformName === t) {
            for (const t in this._origShaders)
              for (let e = 0; e < n.members.length; e += 1) {
                const a = n.members[e];
                this._removeUniformFromShader(
                  this.getPrefixedName(a.name),
                  this._origShaders[t].shader,
                );
              }
            this._structUniforms.splice(e, 1);
          }
        }
        this._changedUniforms = !0;
      }
    }
    getPrefixedName(e) {
      const t = this._mods[0].group;
      if (void 0 !== t)
        return (
          0 == e.indexOf("MOD_") &&
            (e = "mod" + t + "_" + (e = e.substr("MOD_".length))),
          e
        );
    }
    _updateDefinesShader(e) {
      for (const t in this._defines) {
        const n = this.getPrefixedName(t);
        null !== this._defines[t] && void 0 !== this._defines[t]
          ? e.define(n, this._defines[t])
          : e.removeDefine(n);
      }
      for (const t in this._definesToggled) {
        const n = this.getPrefixedName(t);
        e.toggleDefine(n, this._definesToggled[t]);
      }
    }
    _updateDefines() {
      for (const e in this._origShaders)
        this._updateDefinesShader(this._origShaders[e].shader);
      this._changedDefines = !1;
    }
    define(e, t) {
      void 0 === t && (t = !0),
        (this._defines[e] = t),
        (this._changedDefines = !0);
    }
    removeDefine(e) {
      (this._defines[e] = null), (this._changedDefines = !0);
    }
    hasDefine(e) {
      return null !== this._defines[e] && void 0 !== this._defines[e];
    }
    toggleDefine(e, t) {
      (this._changedDefines = !0), (this._definesToggled[e] = t);
    }
    currentShader() {
      return this._boundShader ? this._boundShader.shader : null;
    }
    dispose() {}
  }),
    (((this.CGL = this.CGL || {}).COREMODULES =
      this.CGL.COREMODULES || {}).Shadermodifier = {}.Shadermodifier);
})();
(() => {
  "use strict";
  const r = {
      EASINGS: [
        "linear",
        "absolute",
        "smoothstep",
        "smootherstep",
        "Cubic In",
        "Cubic Out",
        "Cubic In Out",
        "Expo In",
        "Expo Out",
        "Expo In Out",
        "Sin In",
        "Sin Out",
        "Sin In Out",
        "Quart In",
        "Quart Out",
        "Quart In Out",
        "Quint In",
        "Quint Out",
        "Quint In Out",
        "Back In",
        "Back Out",
        "Back In Out",
        "Elastic In",
        "Elastic Out",
        "Bounce In",
        "Bounce Out",
      ],
      EASING_LINEAR: 0,
      EASING_ABSOLUTE: 1,
      EASING_SMOOTHSTEP: 2,
      EASING_SMOOTHERSTEP: 3,
      EASING_CUBICSPLINE: 4,
      EASING_CUBIC_IN: 5,
      EASING_CUBIC_OUT: 6,
      EASING_CUBIC_INOUT: 7,
      EASING_EXPO_IN: 8,
      EASING_EXPO_OUT: 9,
      EASING_EXPO_INOUT: 10,
      EASING_SIN_IN: 11,
      EASING_SIN_OUT: 12,
      EASING_SIN_INOUT: 13,
      EASING_BACK_IN: 14,
      EASING_BACK_OUT: 15,
      EASING_BACK_INOUT: 16,
      EASING_ELASTIC_IN: 17,
      EASING_ELASTIC_OUT: 18,
      EASING_BOUNCE_IN: 19,
      EASING_BOUNCE_OUT: 21,
      EASING_QUART_IN: 22,
      EASING_QUART_OUT: 23,
      EASING_QUART_INOUT: 24,
      EASING_QUINT_IN: 25,
      EASING_QUINT_OUT: 26,
      EASING_QUINT_INOUT: 27,
    },
    i = 0,
    n = 1,
    a = 2,
    t = 2,
    s = 3,
    o = 4,
    l = 5,
    u = 0,
    h = 1,
    e = {
      float32Concat: function (e, t) {
        e instanceof Float32Array || (e = new Float32Array(e)),
          t instanceof Float32Array || (t = new Float32Array(t));
        const n = new Float32Array(e.length + t.length);
        return n.set(e), n.set(t, e.length), n;
      },
    };
  function c(t) {
    for (const e in t)
      t[e] &&
        "object" == typeof objValue &&
        t[e].constructor === Object &&
        (t[e] = c(t[e])),
        (null === t[e] ||
          void 0 === t[e] ||
          (Array.isArray(t[e]) && 0 == t[e].length)) &&
          delete t[e];
    return t;
  }
  (Math.randomSeed = 1),
    (Math.seededRandom = function (e, t) {
      return (
        0 === Math.randomSeed && (Math.randomSeed = 999 * Math.random()),
        (e = e || 1),
        (t = t || 0),
        (Math.randomSeed = (9301 * Math.randomSeed + 49297) % 233280),
        t + (Math.randomSeed / 233280) * (e - t)
      );
    }),
    (e.arrayWriteToEnd = function (t, e) {
      for (let e = 1; e < t.length; e++) t[e - 1] = t[e];
      t[t.length - 1] = e;
    }),
    (e.isNumeric = function (e) {
      return !isNaN(parseFloat(e)) && isFinite(e);
    }),
    (e.isArray = function (e) {
      return "[object Array]" === Object.prototype.toString.call(e);
    }),
    (String.prototype.endl = function () {
      return this + "\n";
    }),
    (String.prototype.startsWith = function (e) {
      return 0 === this.indexOf(e);
    }),
    (String.prototype.endsWith =
      String.prototype.endsWith ||
      function (e) {
        return this.match(e + "$") == e;
      }),
    (window.performance = window.performance || {
      offset: Date.now(),
      now: function () {
        return Date.now() - this.offset;
      },
    });
  const m = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
    p = new Uint8Array(256);
  for (let e = 0; e < m.length; e++) p[m.charCodeAt(e)] = e;
  const g = p,
    f = function (e) {
      let t,
        n,
        a,
        r,
        i,
        s = 0.75 * e.length,
        o = e.length,
        l = 0;
      "=" === e[e.length - 1] && (s--, "=" === e[e.length - 2] && s--);
      let u = new ArrayBuffer(s),
        h = new Uint8Array(u);
      for (t = 0; t < o; t += 4)
        (n = g[e.charCodeAt(t)]),
          (a = g[e.charCodeAt(t + 1)]),
          (r = g[e.charCodeAt(t + 2)]),
          (i = g[e.charCodeAt(t + 3)]),
          (h[l++] = (n << 2) | (a >> 4)),
          (h[l++] = ((15 & a) << 4) | (r >> 2)),
          (h[l++] = ((3 & r) << 6) | (63 & i));
      return u;
    };
  class d {
    constructor(e) {
      this._init(),
        (this._first = !0),
        (this._wireMesh = null),
        e && this.apply(e);
    }
    _init() {
      (this._max = [-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE]),
        (this._min = [Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE]),
        (this._center = [0, 0, 0]),
        (this._size = [0, 0, 0]),
        (this._maxAxis = 0),
        (this._first = !0);
    }
    get maxAxis() {
      return this._maxAxis || 1;
    }
    get size() {
      return this._size;
    }
    get center() {
      return this._center;
    }
    get x() {
      return this._center[0];
    }
    get y() {
      return this._center[1];
    }
    get z() {
      return this._center[2];
    }
    get minX() {
      return this._min[0];
    }
    get minY() {
      return this._min[1];
    }
    get minZ() {
      return this._min[2];
    }
    get maxX() {
      return this._max[0];
    }
    get maxY() {
      return this._max[1];
    }
    get maxZ() {
      return this._max[2];
    }
    apply(t, e) {
      if (t) {
        if (t instanceof d) {
          const e = t;
          this.applyPos(e.maxX, e.maxY, e.maxZ),
            this.applyPos(e.minX, e.minY, e.minZ);
        } else
          for (let e = 0; e < t.vertices.length; e += 3)
            this.applyPos(t.vertices[e], t.vertices[e + 1], t.vertices[e + 2]);
        this.calcCenterSize();
      }
    }
    copy() {
      return new d(this);
    }
    get changed() {
      return !(
        this._max[0] == -Number.MAX_VALUE &&
        this._max[1] == -Number.MAX_VALUE &&
        this._max[2] == -Number.MAX_VALUE
      );
    }
    applyPos(e, t, n) {
      if (
        e != Number.MAX_VALUE &&
        e != -Number.MAX_VALUE &&
        t != Number.MAX_VALUE &&
        t != -Number.MAX_VALUE &&
        n != Number.MAX_VALUE &&
        n != -Number.MAX_VALUE &&
        CABLES.UTILS.isNumeric(e) &&
        CABLES.UTILS.isNumeric(t) &&
        CABLES.UTILS.isNumeric(n)
      ) {
        if (this._first)
          return (
            (this._max[0] = e),
            (this._max[1] = t),
            (this._max[2] = n),
            (this._min[0] = e),
            (this._min[1] = t),
            (this._min[2] = n),
            void (this._first = !1)
          );
        (this._max[0] = Math.max(this._max[0], e)),
          (this._max[1] = Math.max(this._max[1], t)),
          (this._max[2] = Math.max(this._max[2], n)),
          (this._min[0] = Math.min(this._min[0], e)),
          (this._min[1] = Math.min(this._min[1], t)),
          (this._min[2] = Math.min(this._min[2], n));
      }
    }
    calcCenterSize() {
      this._first ||
        ((this._size[0] = this._max[0] - this._min[0]),
        (this._size[1] = this._max[1] - this._min[1]),
        (this._size[2] = this._max[2] - this._min[2]),
        (this._center[0] = (this._min[0] + this._max[0]) / 2),
        (this._center[1] = (this._min[1] + this._max[1]) / 2),
        (this._center[2] = (this._min[2] + this._max[2]) / 2),
        (this._maxAxis = Math.max(
          this._size[2],
          Math.max(this._size[0], this._size[1]),
        )));
    }
    mulMat4(e) {
      this._first &&
        ((this._max[0] = 0),
        (this._max[1] = 0),
        (this._max[2] = 0),
        (this._min[0] = 0),
        (this._min[1] = 0),
        (this._min[2] = 0),
        (this._first = !1)),
        vec3.transformMat4(this._max, this._max, e),
        vec3.transformMat4(this._min, this._min, e),
        this.calcCenterSize();
    }
    render(e, t) {
      this._wireMesh || (this._wireMesh = new CGL.WireCube(e)),
        e.pushModelMatrix(),
        mat4.translate(e.mMatrix, e.mMatrix, this._center),
        this._wireMesh.render(
          e,
          this._size[0] / 2,
          this._size[1] / 2,
          this._size[2] / 2,
        ),
        e.popModelMatrix();
    }
  }
  class b {
    constructor(e) {
      (this._logs = []), (this.initiator = e);
    }
    stack(e) {
      console.info("[" + this.initiator + "] ", e),
        console.log(new Error().stack);
    }
    groupCollapsed(e) {
      console.groupCollapsed("[" + this.initiator + "] " + e);
    }
    table(e) {
      console.table(e);
    }
    groupEnd() {
      console.groupEnd();
    }
    error(e) {
      console.error("[" + this.initiator + "]", ...arguments),
        window.gui &&
          window.gui.emitEvent(
            "coreLogEvent",
            this.initiator,
            "error",
            arguments,
          );
    }
    info(e) {
      console.error("[" + this.initiator + "]", ...arguments),
        window.gui &&
          window.gui.emitEvent(
            "coreLogEvent",
            this.initiator,
            "info",
            arguments,
          );
    }
    warn(e) {
      console.warn("[" + this.initiator + "]", ...arguments),
        window.gui &&
          window.gui.emitEvent(
            "coreLogEvent",
            this.initiator,
            "warn",
            arguments,
          );
    }
    verbose() {
      ((CABLES.UI &&
        CABLES.UI.logFilter.shouldPrint(this.initiator, ...arguments)) ||
        !CABLES.logSilent) &&
        console.log("[" + this.initiator + "]", ...arguments),
        window.gui &&
          window.gui.emitEvent(
            "coreLogEvent",
            this.initiator,
            "verbose",
            arguments,
          );
    }
    log(e) {
      ((CABLES.UI &&
        CABLES.UI.logFilter.shouldPrint(this.initiator, ...arguments)) ||
        !CABLES.logSilent) &&
        console.log("[" + this.initiator + "]", ...arguments),
        window.gui &&
          window.gui.emitEvent(
            "coreLogEvent",
            this.initiator,
            "log",
            arguments,
          );
    }
    userInteraction(e) {}
  }
  const v = function (e) {
    (this.name = e || "unknown"),
      (this._log = new b("cgl_geometry")),
      (this.faceVertCount = 3),
      (this.glPrimitive = null),
      (this._attributes = {}),
      (this._vertices = []),
      (this.verticesIndices = []),
      (this.isGeometry = !0),
      (this.morphTargets = []),
      Object.defineProperty(this, "vertices", {
        get() {
          return this._vertices;
        },
        set(e) {
          this.setVertices(e);
        },
      }),
      Object.defineProperty(this, "texCoords", {
        get() {
          const e = this.getAttribute("texCoords");
          return e ? e.data : [];
        },
        set(e) {
          this.setAttribute("texCoords", e, 2);
        },
      }),
      Object.defineProperty(this, "vertexNormals", {
        get() {
          const e = this.getAttribute("vertexNormals");
          return e ? e.data : [];
        },
        set(e) {
          this.setAttribute("vertexNormals", e, 3);
        },
      }),
      Object.defineProperty(this, "tangents", {
        get() {
          const e = this.getAttribute("tangents");
          return e ? e.data : [];
        },
        set(e) {
          this.setAttribute("tangents", e, 3);
        },
      }),
      Object.defineProperty(this, "biTangents", {
        get() {
          const e = this.getAttribute("biTangents");
          return e ? e.data : [];
        },
        set(e) {
          this.setAttribute("biTangents", e, 3);
        },
      }),
      Object.defineProperty(this, "vertexColors", {
        get() {
          const e = this.getAttribute("vertexColors");
          return e ? e.data : [];
        },
        set(e) {
          this.setAttribute("vertexColors", e, 4);
        },
      });
  };
  (v.prototype.clear = function () {
    (this._vertices = new Float32Array([])),
      (this.verticesIndices = []),
      (this.texCoords = new Float32Array([])),
      (this.vertexNormals = new Float32Array([])),
      (this.tangents = []),
      (this.biTangents = []),
      (this._attributes = {});
  }),
    (v.prototype.getAttributes = function () {
      return this._attributes;
    }),
    (v.prototype.getAttribute = function (t) {
      for (const e in this._attributes)
        if (this._attributes[e].name == t) return this._attributes[e];
      return null;
    }),
    (v.prototype.setAttribute = function (e, t, n) {
      let a = "";
      (!n || n > 4) &&
        (console.log("itemsize wrong?", n, e),
        this._log.stack("itemsize"),
        (n = 3)),
        1 == n
          ? (a = "float")
          : 2 == n
            ? (a = "vec2")
            : 3 == n
              ? (a = "vec3")
              : 4 == n && (a = "vec4");
      const r = { name: e, data: t, itemSize: n, type: a };
      this._attributes[e] = r;
    }),
    (v.prototype.copyAttribute = function (e, t) {
      const n = this.getAttribute(e);
      t.setAttribute(e, new Float32Array(n.data), n.itemSize);
    }),
    (v.prototype.setVertices = function (e) {
      e instanceof Float32Array
        ? (this._vertices = e)
        : (this._vertices = new Float32Array(e));
    }),
    (v.prototype.setTexCoords = function (e) {
      e instanceof Float32Array
        ? (this.texCoords = e)
        : (this.texCoords = new Float32Array(e));
    }),
    (v.prototype.calcNormals = function (e) {
      const t = { smooth: e };
      this.calculateNormals(t);
    }),
    (v.prototype.flipNormals = function (t, n, a) {
      let r = vec3.create();
      null == t && (t = 1), null == n && (n = 1), null == a && (a = 1);
      for (let e = 0; e < this.vertexNormals.length; e += 3)
        vec3.set(
          r,
          this.vertexNormals[e + 0],
          this.vertexNormals[e + 1],
          this.vertexNormals[e + 2],
        ),
          (r[0] *= -t),
          (r[1] *= -n),
          (r[2] *= -a),
          vec3.normalize(r, r),
          (this.vertexNormals[e + 0] = r[0]),
          (this.vertexNormals[e + 1] = r[1]),
          (this.vertexNormals[e + 2] = r[2]);
    }),
    (v.prototype.getNumTriangles = function () {
      return this.verticesIndices && this.verticesIndices.length
        ? this.verticesIndices.length / 3
        : this.vertices.length / 3;
    }),
    (v.prototype.flipVertDir = function () {
      const t = [];
      t.length = this.verticesIndices.length;
      for (let e = 0; e < this.verticesIndices.length; e += 3)
        (t[e] = this.verticesIndices[e + 2]),
          (t[e + 1] = this.verticesIndices[e + 1]),
          (t[e + 2] = this.verticesIndices[e]);
      this.verticesIndices = t;
    }),
    (v.prototype.setPointVertices = function (t) {
      if (t.length % 3 == 0) {
        t instanceof Float32Array
          ? (this.vertices = t)
          : (this.vertices = new Float32Array(t)),
          this.texCoords instanceof Float32Array ||
            (this.texCoords = new Float32Array((t.length / 3) * 2)),
          (this.verticesIndices.length = t.length / 3);
        for (let e = 0; e < t.length / 3; e++)
          (this.verticesIndices[e] = e),
            (this.texCoords[2 * e] = 0),
            (this.texCoords[2 * e + 1] = 0);
      } else
        this._log.error("SetPointVertices: Array must be multiple of three.");
    }),
    (v.prototype.merge = function (t) {
      if (!t) return;
      if (
        this.isIndexed() != t.isIndexed() &&
        (this.isIndexed() && this.unIndex(!1, !0), t.isIndexed())
      ) {
        const n = t.copy();
        n.unIndex(!1, !0), (t = n);
      }
      const n = this.verticesIndices.length,
        a = this._vertices.length / 3;
      this.verticesIndices.length =
        this.verticesIndices.length + t.verticesIndices.length;
      for (let e = 0; e < t.verticesIndices.length; e++)
        this.verticesIndices[n + e] = t.verticesIndices[e] + a;
      (this.vertices = e.float32Concat(this._vertices, t.vertices)),
        (this.texCoords = e.float32Concat(this.texCoords, t.texCoords)),
        (this.vertexNormals = e.float32Concat(
          this.vertexNormals,
          t.vertexNormals,
        )),
        (this.tangents = e.float32Concat(this.tangents, t.tangents)),
        (this.biTangents = e.float32Concat(this.biTangents, t.biTangents));
    }),
    (v.prototype.copy = function () {
      const t = new v(this.name + " copy");
      if (
        ((t.faceVertCount = this.faceVertCount),
        (t.glPrimitive = this.glPrimitive),
        t.setVertices(this._vertices.slice(0)),
        this.verticesIndices)
      ) {
        t.verticesIndices.length = this.verticesIndices.length;
        for (let e = 0; e < this.verticesIndices.length; e++)
          t.verticesIndices[e] = this.verticesIndices[e];
      }
      for (let e in this._attributes) this.copyAttribute(e, t);
      t.morphTargets.length = this.morphTargets.length;
      for (let e = 0; e < this.morphTargets.length; e++)
        t.morphTargets[e] = this.morphTargets[e];
      return t;
    }),
    (v.prototype.calculateNormals = function (t) {
      !1 === (t = t || {}).smooth && this.unIndex();
      const n = vec3.create(),
        a = vec3.create(),
        r = vec3.create();
      function i(e) {
        return (
          vec3.subtract(n, e[0], e[1]),
          vec3.subtract(a, e[0], e[2]),
          vec3.cross(r, n, a),
          vec3.normalize(r, r),
          t &&
            t.forceZUp &&
            r[2] < 0 &&
            ((r[0] *= -1), (r[1] *= -1), (r[2] *= -1)),
          r
        );
      }
      (this.getVertexVec = function (e) {
        const t = [0, 0, 0];
        return (
          (t[0] = this.vertices[3 * e + 0]),
          (t[1] = this.vertices[3 * e + 1]),
          (t[2] = this.vertices[3 * e + 2]),
          t
        );
      }),
        (this.vertexNormals instanceof Float32Array &&
          this.vertexNormals.length == this.vertices.length) ||
          (this.vertexNormals = new Float32Array(this.vertices.length));
      for (let e = 0; e < this.vertices.length; e++) this.vertexNormals[e] = 0;
      if (this.isIndexed()) {
        const t = [];
        t.length = Math.floor(this.verticesIndices.length / 3);
        for (let e = 0; e < this.verticesIndices.length; e += 3) {
          const a = [
            this.getVertexVec(this.verticesIndices[e + 0]),
            this.getVertexVec(this.verticesIndices[e + 1]),
            this.getVertexVec(this.verticesIndices[e + 2]),
          ];
          (t[e / 3] = i(a)),
            (this.vertexNormals[3 * this.verticesIndices[e + 0] + 0] +=
              t[e / 3][0]),
            (this.vertexNormals[3 * this.verticesIndices[e + 0] + 1] +=
              t[e / 3][1]),
            (this.vertexNormals[3 * this.verticesIndices[e + 0] + 2] +=
              t[e / 3][2]),
            (this.vertexNormals[3 * this.verticesIndices[e + 1] + 0] +=
              t[e / 3][0]),
            (this.vertexNormals[3 * this.verticesIndices[e + 1] + 1] +=
              t[e / 3][1]),
            (this.vertexNormals[3 * this.verticesIndices[e + 1] + 2] +=
              t[e / 3][2]),
            (this.vertexNormals[3 * this.verticesIndices[e + 2] + 0] +=
              t[e / 3][0]),
            (this.vertexNormals[3 * this.verticesIndices[e + 2] + 1] +=
              t[e / 3][1]),
            (this.vertexNormals[3 * this.verticesIndices[e + 2] + 2] +=
              t[e / 3][2]);
        }
        for (let t = 0; t < this.verticesIndices.length; t += 3)
          for (let e = 0; e < 3; e++) {
            const a = [
              this.vertexNormals[3 * this.verticesIndices[t + e] + 0],
              this.vertexNormals[3 * this.verticesIndices[t + e] + 1],
              this.vertexNormals[3 * this.verticesIndices[t + e] + 2],
            ];
            vec3.normalize(a, a),
              (this.vertexNormals[3 * this.verticesIndices[t + e] + 0] = a[0]),
              (this.vertexNormals[3 * this.verticesIndices[t + e] + 1] = a[1]),
              (this.vertexNormals[3 * this.verticesIndices[t + e] + 2] = a[2]);
          }
      } else {
        const t = [];
        for (let e = 0; e < this.vertices.length; e += 9) {
          const a = i([
            [this.vertices[e + 0], this.vertices[e + 1], this.vertices[e + 2]],
            [this.vertices[e + 3], this.vertices[e + 4], this.vertices[e + 5]],
            [this.vertices[e + 6], this.vertices[e + 7], this.vertices[e + 8]],
          ]);
          t.push(a[0], a[1], a[2], a[0], a[1], a[2], a[0], a[1], a[2]);
        }
        this.vertexNormals = t;
      }
    }),
    (v.prototype.calcTangentsBitangents = function () {
      if (!this.vertices.length) return;
      if (!this.vertexNormals.length) return;
      if (!this.texCoords.length) {
        const o = (this.vertices.length / 3) * 2;
        this.texCoords = new Float32Array(o);
        for (let e = 0; e < o; e += 1) this.texCoords[e] = 0;
      }
      if (!this.verticesIndices || !this.verticesIndices.length) return;
      if (this.verticesIndices.length % 3 != 0)
        return void this._log.error("Vertex indices mismatch!");
      const o = this.verticesIndices.length / 3,
        l = this.vertices.length / 3;
      (this.tangents = new Float32Array(this.vertexNormals.length)),
        (this.biTangents = new Float32Array(this.vertexNormals.length));
      const u = [];
      u.length = 2 * l;
      const h = vec3.create(),
        c = vec3.create(),
        m = vec3.create(),
        p = vec2.create(),
        g = vec2.create(),
        f = vec2.create(),
        d = vec3.create(),
        b = vec3.create();
      for (let s = 0; s < o; s += 1) {
        const o = this.verticesIndices[3 * s],
          v = this.verticesIndices[3 * s + 1],
          O = this.verticesIndices[3 * s + 2];
        vec3.set(
          h,
          this.vertices[3 * o],
          this.vertices[3 * o + 1],
          this.vertices[3 * o + 2],
        ),
          vec3.set(
            c,
            this.vertices[3 * v],
            this.vertices[3 * v + 1],
            this.vertices[3 * v + 2],
          ),
          vec3.set(
            m,
            this.vertices[3 * O],
            this.vertices[3 * O + 1],
            this.vertices[3 * O + 2],
          ),
          vec2.set(p, this.texCoords[2 * o], this.texCoords[2 * o + 1]),
          vec2.set(g, this.texCoords[2 * v], this.texCoords[2 * v + 1]),
          vec2.set(f, this.texCoords[2 * O], this.texCoords[2 * O + 1]);
        const _ = c[0] - h[0],
          A = m[0] - h[0],
          y = c[1] - h[1],
          x = m[1] - h[1],
          I = c[2] - h[2],
          e = m[2] - h[2],
          t = g[0] - p[0],
          n = f[0] - p[0],
          a = g[1] - p[1],
          r = f[1] - p[1],
          i = 1 / (t * r - n * a);
        vec3.set(
          d,
          (r * _ - a * A) * i,
          (r * y - a * x) * i,
          (r * I - a * e) * i,
        ),
          vec3.set(
            b,
            (t * A - n * _) * i,
            (t * x - n * y) * i,
            (t * e - n * I) * i,
          ),
          (u[o] = d),
          (u[v] = d),
          (u[O] = d),
          (u[o + l] = b),
          (u[v + l] = b),
          (u[O + l] = b);
      }
      const t = vec3.create(),
        v = vec3.create(),
        O = vec3.create(),
        _ = vec3.create(),
        A = vec3.create(),
        y = vec3.create(),
        x = vec3.create(),
        I = vec3.create();
      for (let e = 0; e < l; e += 1) {
        if (!u[e]) continue;
        vec3.set(
          t,
          this.vertexNormals[3 * e],
          this.vertexNormals[3 * e + 1],
          this.vertexNormals[3 * e + 2],
        ),
          vec3.set(v, u[e][0], u[e][1], u[e][2]);
        const h = vec3.dot(t, v);
        vec3.scale(A, t, h),
          vec3.subtract(y, v, A),
          vec3.normalize(I, y),
          vec3.cross(x, t, v),
          vec3.dot(x, u[e + l]);
        const c = 1;
        vec3.scale(O, I, 1 / c),
          vec3.cross(_, t, O),
          (this.tangents[3 * e + 0] = O[0]),
          (this.tangents[3 * e + 1] = O[1]),
          (this.tangents[3 * e + 2] = O[2]),
          (this.biTangents[3 * e + 0] = _[0]),
          (this.biTangents[3 * e + 1] = _[1]),
          (this.biTangents[3 * e + 2] = _[2]);
      }
    }),
    (v.prototype.isIndexed = function () {
      return 0 == this._vertices.length || 0 != this.verticesIndices.length;
    }),
    (v.prototype.unIndex = function (e, a) {
      const t = [],
        n = [];
      let r = 0;
      for (let e in this._attributes) {
        const a = this._attributes[e];
        let n = [];
        for (let t = 0; t < this.verticesIndices.length; t += 3)
          for (let e = 0; e < 3; e++)
            3 == a.itemSize
              ? n.push(
                  a.data[3 * this.verticesIndices[t + e] + 0],
                  a.data[3 * this.verticesIndices[t + e] + 1],
                  a.data[3 * this.verticesIndices[t + e] + 2],
                )
              : 4 == a.itemSize
                ? n.push(
                    a.data[4 * this.verticesIndices[t + e] + 0],
                    a.data[4 * this.verticesIndices[t + e] + 1],
                    a.data[4 * this.verticesIndices[t + e] + 2],
                    a.data[4 * this.verticesIndices[t + e] + 3],
                  )
                : 2 == a.itemSize
                  ? n.push(
                      a.data[2 * this.verticesIndices[t + e] + 0],
                      a.data[2 * this.verticesIndices[t + e] + 1],
                    )
                  : 1 == a.itemSize
                    ? n.push(a.data[this.verticesIndices[t + e]])
                    : console.log("unknown attr", a);
        this.setAttribute(a.name, n, a.itemSize);
      }
      for (let e = 0; e < this.verticesIndices.length; e += 3)
        t.push(
          this.vertices[3 * this.verticesIndices[e + 0] + 0],
          this.vertices[3 * this.verticesIndices[e + 0] + 1],
          this.vertices[3 * this.verticesIndices[e + 0] + 2],
        ),
          n.push(r),
          r++,
          t.push(
            this.vertices[3 * this.verticesIndices[e + 1] + 0],
            this.vertices[3 * this.verticesIndices[e + 1] + 1],
            this.vertices[3 * this.verticesIndices[e + 1] + 2],
          ),
          n.push(r),
          r++,
          t.push(
            this.vertices[3 * this.verticesIndices[e + 2] + 0],
            this.vertices[3 * this.verticesIndices[e + 2] + 1],
            this.vertices[3 * this.verticesIndices[e + 2] + 2],
          ),
          n.push(r),
          r++;
      (this.vertices = t),
        (this.verticesIndices = []),
        e && (this.verticesIndices = n),
        a || this.calculateNormals();
    }),
    (v.prototype.calcBarycentric = function () {
      let t = [];
      t.length = this.vertices.length;
      for (let e = 0; e < this.vertices.length; e++) t[e] = 0;
      let n = 0;
      for (let e = 0; e < this.vertices.length; e += 3)
        (t[e + n] = 1), n++, 3 == n && (n = 0);
      this.setAttribute("attrBarycentric", t, 3);
    }),
    (v.prototype.getBounds = function () {
      return new d(this);
    }),
    (v.prototype.center = function (e, t, n) {
      void 0 === e && ((e = !0), (t = !0), (n = !0));
      let a = 0;
      const r = this.getBounds(),
        i = [
          r.minX + (r.maxX - r.minX) / 2,
          r.minY + (r.maxY - r.minY) / 2,
          r.minZ + (r.maxZ - r.minZ) / 2,
        ];
      for (a = 0; a < this.vertices.length; a += 3)
        this.vertices[a + 0] == this.vertices[a + 0] &&
          (e && (this.vertices[a + 0] -= i[0]),
          t && (this.vertices[a + 1] -= i[1]),
          n && (this.vertices[a + 2] -= i[2]));
      return i;
    }),
    (v.prototype.mapTexCoords2d = function () {
      const n = this.getBounds(),
        a = this.vertices.length / 3;
      this.texCoords = new Float32Array(2 * a);
      for (let t = 0; t < a; t++) {
        const a = this.vertices[3 * t + 0],
          e = this.vertices[3 * t + 1];
        (this.texCoords[2 * t + 0] = a / (n.maxX - n.minX) + 0.5),
          (this.texCoords[2 * t + 1] = 1 - e / (n.maxY - n.minY) + 0.5);
      }
    }),
    (v.prototype.getInfoOneLine = function () {
      let e = "";
      return (
        3 == this.faceVertCount && this.verticesIndices
          ? (e += this.verticesIndices.length / 3)
          : (e += 0),
        (e += " tris "),
        this.vertices ? (e += this.vertices.length / 3) : (e += 0),
        (e += " verts"),
        e
      );
    }),
    (v.prototype.getInfo = function () {
      const e = {};
      return (
        3 == this.faceVertCount && this.verticesIndices
          ? (e.numFaces = this.verticesIndices.length / 3)
          : (e.numFaces = 0),
        this.verticesIndices &&
          this.verticesIndices.length &&
          (e.indices = this.verticesIndices.length),
        this.vertices
          ? (e.numVerts = this.vertices.length / 3)
          : (e.numVerts = 0),
        this.vertexNormals
          ? (e.numNormals = this.vertexNormals.length / 3)
          : (e.numNormals = 0),
        this.texCoords
          ? (e.numTexCoords = this.texCoords.length / 2)
          : (e.numTexCoords = 0),
        this.tangents
          ? (e.numTangents = this.tangents.length / 3)
          : (e.numTangents = 0),
        this.biTangents
          ? (e.numBiTangents = this.biTangents.length / 3)
          : (e.numBiTangents = 0),
        this.biTangents
          ? (e.numBiTangents = this.biTangents.length / 3)
          : (e.numBiTangents = 0),
        this.vertexColors
          ? (e.numVertexColors = this.vertexColors.length / 4)
          : (e.numVertexColors = 0),
        this.getAttributes()
          ? (e.numAttribs = Object.keys(this.getAttributes()).length)
          : (e.numAttribs = 0),
        (e.isIndexed = this.isIndexed()),
        e
      );
    }),
    (v.buildFromFaces = function (r, e, i) {
      const s = [],
        o = [];
      for (let e = 0; e < r.length; e += 3) {
        const l = r[e + 0],
          t = r[e + 1],
          n = r[e + 2],
          a = [-1, -1, -1];
        if (i)
          for (let e = 0; e < s.length; e += 3)
            s[e + 0] == l[0] &&
              s[e + 1] == l[1] &&
              s[e + 2] == l[2] &&
              (a[0] = e / 3),
              s[e + 0] == t[0] &&
                s[e + 1] == t[1] &&
                s[e + 2] == t[2] &&
                (a[1] = e / 3),
              s[e + 0] == n[0] &&
                s[e + 1] == n[1] &&
                s[e + 2] == n[2] &&
                (a[2] = e / 3);
        -1 == a[0] && (s.push(l[0], l[1], l[2]), (a[0] = (s.length - 1) / 3)),
          -1 == a[1] && (s.push(t[0], t[1], t[2]), (a[1] = (s.length - 1) / 3)),
          -1 == a[2] && (s.push(n[0], n[1], n[2]), (a[2] = (s.length - 1) / 3)),
          o.push(parseInt(a[0], 10)),
          o.push(parseInt(a[1], 10)),
          o.push(parseInt(a[2], 10));
      }
      const l = new v(e);
      return (l.name = e), (l.vertices = s), (l.verticesIndices = o), l;
    }),
    (v.json2geom = function (t) {
      const n = new v("jsonMeshGeom");
      if (
        ((n.verticesIndices = []),
        (n.vertices = t.vertices || []),
        (n.vertexNormals = t.normals || []),
        (n.vertexColors = t.colors || []),
        (n.tangents = t.tangents || []),
        (n.biTangents = t.bitangents || []),
        t.texturecoords && n.setTexCoords(t.texturecoords[0]),
        t.vertices_b64 && (n.vertices = new Float32Array(f(t.vertices_b64))),
        t.normals_b64 && (n.vertexNormals = new Float32Array(f(t.normals_b64))),
        t.tangents_b64 && (n.tangents = new Float32Array(f(t.tangents_b64))),
        t.bitangents_b64 &&
          (n.biTangents = new Float32Array(f(t.bitangents_b64))),
        t.texturecoords_b64 &&
          n.setTexCoords(new Float32Array(f(t.texturecoords_b64[0]))),
        t.faces_b64)
      )
        n.verticesIndices = new Uint32Array(f(t.faces_b64));
      else {
        n.verticesIndices.length = 3 * t.faces.length;
        for (let e = 0; e < t.faces.length; e++)
          (n.verticesIndices[3 * e] = t.faces[e][0]),
            (n.verticesIndices[3 * e + 1] = t.faces[e][1]),
            (n.verticesIndices[3 * e + 2] = t.faces[e][2]);
      }
      return n;
    });
  const O = function () {
      (this._log = new b("eventtaget")),
        (this._eventCallbacks = {}),
        (this._logName = ""),
        (this._logEvents = !1),
        (this._listeners = {}),
        (CABLES.eventTargetProfile = CABLES.eventTargetProfile || {}),
        (this.addEventListener = this.on =
          function (e, t, n) {
            const a = { id: (n || "") + CABLES.simpleId(), name: e, cb: t };
            return (
              this._eventCallbacks[e]
                ? this._eventCallbacks[e].push(a)
                : (this._eventCallbacks[e] = [a]),
              (this._listeners[a.id] = a),
              a.id
            );
          }),
        (this.hasEventListener = function (e, t) {
          return e && !t
            ? !!this._listeners[e]
            : (this._log.warn("old eventtarget function haseventlistener!"),
              e && t && this._eventCallbacks[e]
                ? -1 != this._eventCallbacks[e].indexOf(t)
                : void 0);
        }),
        (this.removeEventListener = this.off =
          function (a, r) {
            if (null == a) return;
            if (!r) {
              const r = this._listeners[a];
              if (!r) return void console.log("could not find event...");
              let n = !0;
              for (; n; ) {
                n = !1;
                let t = -1;
                for (let e = 0; e < this._eventCallbacks[r.name].length; e++)
                  0 === this._eventCallbacks[r.name][e].id.indexOf(a) &&
                    ((n = !0), (t = e));
                -1 !== t &&
                  (this._eventCallbacks[r.name].splice(t, 1),
                  delete this._listeners[a]);
              }
              return;
            }
            this._log.stack(
              " old function signature: removeEventListener! use listener id",
            );
            let t = null;
            for (let e = 0; e < this._eventCallbacks[a].length; e++)
              this._eventCallbacks[a][e].cb == r && (t = e);
            null !== t
              ? delete this._eventCallbacks[t]
              : this._log.warn("removeEventListener not found " + a);
          }),
        (this.logEvents = function (e, t) {
          (this._logEvents = e), (this._logName = t);
        }),
        (this.emitEvent = function (a, r, i, s, o, l, u) {
          if (
            (this._logEvents &&
              console.log("[event] ", this._logName, a, this._eventCallbacks),
            this._eventCallbacks[a])
          ) {
            const n = [];
            for (let e = 0; e < this._eventCallbacks[a].length; e++)
              n[a] || (n[a] = []), n[a].push(this._eventCallbacks[a][e]);
            if (n[a])
              for (let t = 0; t < n[a].length; t++)
                if (n[a][t]) {
                  const e = this.constructor.name + " " + a;
                  (CABLES.eventTargetProfile[e] = CABLES.eventTargetProfile[
                    e
                  ] || { name: this.constructor.name, event: a, count: 0 }),
                    (CABLES.eventTargetProfile[e].active =
                      this._eventCallbacks[a].length),
                    CABLES.eventTargetProfile[e].count++,
                    n[a][t].cb(r, i, s, o, l, u);
                }
          } else
            this._logEvents &&
              console.log(
                "[event] has no event callback",
                a,
                this._eventCallbacks,
              );
        });
    },
    _ = function (e) {
      (this.time = 0),
        (this.value = 0),
        (this.onChange = null),
        (this._easing = 0),
        (this.cb = null),
        (this.cbTriggered = !1),
        this.setEasing(r.EASING_LINEAR),
        this.set(e);
    };
  (_.cubicSpline = function (e, t, n) {
    let a = e * e,
      r = a * e;
    return (
      (2 * r - 3 * a + 1) * t.value +
      (r - 2 * a + e) * t.bezTangOut +
      (-2 * r + 3 * a) * n.value +
      (r - a) * n.bezTangIn
    );
  }),
    (_.easeCubicSpline = function (e, t) {
      return _.cubicSpline(e, this, t);
    }),
    (_.linear = function (e, t, n) {
      return parseFloat(t.value) + parseFloat(n.value - t.value) * e;
    }),
    (_.easeLinear = function (e, t) {
      return _.linear(e, this, t);
    }),
    (_.easeAbsolute = function (e, t) {
      return this.value;
    }),
    (_.easeExpoIn = function (e, t) {
      return (
        (e = (function (e) {
          return 2 ** (10 * (e - 1));
        })(e)),
        _.linear(e, this, t)
      );
    }),
    (_.easeExpoOut = function (e, t) {
      return (
        (e = (function (e) {
          return 1 - 2 ** (-10 * e);
        })(e)),
        _.linear(e, this, t)
      );
    }),
    (_.easeExpoInOut = function (e, t) {
      return (
        (e = (function (e) {
          return (e *= 2) < 1
            ? 0.5 * 2 ** (10 * (e - 1))
            : 0.5 * (2 - 2 ** (-10 * --e));
        })(e)),
        _.linear(e, this, t)
      );
    }),
    (_.easeSinIn = function (e, t) {
      return (e = -1 * Math.cos((e * Math.PI) / 2) + 1), _.linear(e, this, t);
    }),
    (_.easeSinOut = function (e, t) {
      return (e = Math.sin((e * Math.PI) / 2)), _.linear(e, this, t);
    }),
    (_.easeSinInOut = function (e, t) {
      return (e = -0.5 * (Math.cos(Math.PI * e) - 1)), _.linear(e, this, t);
    }),
    (_.easeCubicIn = function (e, t) {
      return (
        (e = (function (e) {
          return e * (e * e);
        })(e)),
        _.linear(e, this, t)
      );
    }),
    (_.easeInQuint = function (e, t) {
      return _.linear((e *= e * e * e * e), this, t);
    }),
    (_.easeOutQuint = function (e, t) {
      return (e = (e -= 1) * e * e * e * e + 1), _.linear(e, this, t);
    }),
    (_.easeInOutQuint = function (e, t) {
      return (
        (e /= 0.5) < 1
          ? (e *= 0.5 * e * e * e * e)
          : (e = 0.5 * ((e -= 2) * e * e * e * e + 2)),
        _.linear(e, this, t)
      );
    }),
    (_.easeInQuart = function (e, t) {
      return _.linear((e *= e * e * e), this, t);
    }),
    (_.easeOutQuart = function (e, t) {
      return (e = -1 * ((e -= 1) * e * e * e - 1)), _.linear(e, this, t);
    }),
    (_.easeInOutQuart = function (e, t) {
      return (
        (e /= 0.5) < 1
          ? (e *= 0.5 * e * e * e)
          : (e = -0.5 * ((e -= 2) * e * e * e - 2)),
        _.linear(e, this, t)
      );
    }),
    (_.bounce = function (e) {
      return (
        (e /= 1) < 1 / 2.75
          ? (e *= 7.5625 * e)
          : (e =
              e < 2 / 2.75
                ? 7.5625 * (e -= 1.5 / 2.75) * e + 0.75
                : e < 2.5 / 2.75
                  ? 7.5625 * (e -= 2.25 / 2.75) * e + 0.9375
                  : 7.5625 * (e -= 2.625 / 2.75) * e + 0.984375),
        e
      );
    }),
    (_.easeInBounce = function (e, t) {
      return _.linear(_.bounce(e), this, t);
    }),
    (_.easeOutBounce = function (e, t) {
      return _.linear(_.bounce(e), this, t);
    }),
    (_.easeInElastic = function (e, t) {
      let n = 1.70158,
        a = 0,
        r = 1;
      return (
        0 === e
          ? (e = 0)
          : 1 == (e /= 1)
            ? (e = 1)
            : (a || (a = 0.3),
              r < Math.abs(1)
                ? ((r = 1), (n = a / 4))
                : (n = (a / (2 * Math.PI)) * Math.asin(1 / r)),
              (e =
                -r *
                  2 ** (10 * (e -= 1)) *
                  Math.sin(((1 * e - n) * (2 * Math.PI)) / a) +
                0)),
        _.linear(e, this, t)
      );
    }),
    (_.easeOutElastic = function (e, t) {
      let n = 1.70158,
        a = 0,
        r = 1;
      return (
        0 === e
          ? (e = 0)
          : 1 == (e /= 1)
            ? (e = 1)
            : (a || (a = 0.3),
              r < Math.abs(1)
                ? ((r = 1), (n = a / 4))
                : (n = (a / (2 * Math.PI)) * Math.asin(1 / r)),
              (e =
                r *
                  2 ** (-10 * e) *
                  Math.sin(((1 * e - n) * (2 * Math.PI)) / a) +
                1 +
                0)),
        _.linear(e, this, t)
      );
    }),
    (_.easeInBack = function (e, t) {
      const n = 1.70158;
      return _.linear((e = e * e * ((n + 1) * e - n)), this, t);
    }),
    (_.easeOutBack = function (e, t) {
      const n = 1.70158;
      return (
        (e = (e = e / 1 - 1) * e * ((n + 1) * e + n) + 1), _.linear(e, this, t)
      );
    }),
    (_.easeInOutBack = function (e, t) {
      let n = 1.70158;
      return (
        (e =
          (e /= 0.5) < 1
            ? e * e * ((1 + (n *= 1.525)) * e - n) * 0.5
            : 0.5 * ((e -= 2) * e * ((1 + (n *= 1.525)) * e + n) + 2)),
        _.linear(e, this, t)
      );
    }),
    (_.easeCubicOut = function (e, t) {
      return (
        (e = (function (e) {
          return --e * e * e + 1;
        })(e)),
        _.linear(e, this, t)
      );
    }),
    (_.easeCubicInOut = function (e, t) {
      return (
        (e = (function (e) {
          return (
            (e *= 2) < 1
              ? (e *= 0.5 * e * e)
              : (e = 0.5 * ((e -= 2) * e * e + 2)),
            e
          );
        })(e)),
        _.linear(e, this, t)
      );
    }),
    (_.easeSmoothStep = function (e, t) {
      const n = Math.max(0, Math.min(1, e));
      return _.linear((e = n * n * (3 - 2 * n)), this, t);
    }),
    (_.easeSmootherStep = function (e, t) {
      const n = Math.max(0, Math.min(1, (e - 0) / 1));
      return _.linear((e = n * n * n * (n * (6 * n - 15) + 10)), this, t);
    }),
    (_.prototype.setEasing = function (e) {
      (this._easing = e),
        this._easing == r.EASING_LINEAR
          ? (this.ease = _.easeLinear)
          : this._easing == r.EASING_ABSOLUTE
            ? (this.ease = _.easeAbsolute)
            : this._easing == r.EASING_SMOOTHSTEP
              ? (this.ease = _.easeSmoothStep)
              : this._easing == r.EASING_SMOOTHERSTEP
                ? (this.ease = _.easeSmootherStep)
                : this._easing == r.EASING_CUBIC_IN
                  ? (this.ease = _.easeCubicIn)
                  : this._easing == r.EASING_CUBIC_OUT
                    ? (this.ease = _.easeCubicOut)
                    : this._easing == r.EASING_CUBIC_INOUT
                      ? (this.ease = _.easeCubicInOut)
                      : this._easing == r.EASING_EXPO_IN
                        ? (this.ease = _.easeExpoIn)
                        : this._easing == r.EASING_EXPO_OUT
                          ? (this.ease = _.easeExpoOut)
                          : this._easing == r.EASING_EXPO_INOUT
                            ? (this.ease = _.easeExpoInOut)
                            : this._easing == r.EASING_SIN_IN
                              ? (this.ease = _.easeSinIn)
                              : this._easing == r.EASING_SIN_OUT
                                ? (this.ease = _.easeSinOut)
                                : this._easing == r.EASING_SIN_INOUT
                                  ? (this.ease = _.easeSinInOut)
                                  : this._easing == r.EASING_BACK_OUT
                                    ? (this.ease = _.easeOutBack)
                                    : this._easing == r.EASING_BACK_IN
                                      ? (this.ease = _.easeInBack)
                                      : this._easing == r.EASING_BACK_INOUT
                                        ? (this.ease = _.easeInOutBack)
                                        : this._easing == r.EASING_ELASTIC_IN
                                          ? (this.ease = _.easeInElastic)
                                          : this._easing == r.EASING_ELASTIC_OUT
                                            ? (this.ease = _.easeOutElastic)
                                            : this._easing ==
                                                r.EASING_ELASTIC_INOUT
                                              ? (this.ease = _.easeElasticInOut)
                                              : this._easing ==
                                                  r.EASING_BOUNCE_IN
                                                ? (this.ease = _.easeInBounce)
                                                : this._easing ==
                                                    r.EASING_BOUNCE_OUT
                                                  ? (this.ease =
                                                      _.easeOutBounce)
                                                  : this._easing ==
                                                      r.EASING_QUART_OUT
                                                    ? (this.ease =
                                                        _.easeOutQuart)
                                                    : this._easing ==
                                                        r.EASING_QUART_IN
                                                      ? (this.ease =
                                                          _.easeInQuart)
                                                      : this._easing ==
                                                          r.EASING_QUART_INOUT
                                                        ? (this.ease =
                                                            _.easeInOutQuart)
                                                        : this._easing ==
                                                            r.EASING_QUINT_OUT
                                                          ? (this.ease =
                                                              _.easeOutQuint)
                                                          : this._easing ==
                                                              r.EASING_QUINT_IN
                                                            ? (this.ease =
                                                                _.easeInQuint)
                                                            : this._easing ==
                                                                r.EASING_QUINT_INOUT
                                                              ? (this.ease =
                                                                  _.easeInOutQuint)
                                                              : this._easing ==
                                                                  r.EASING_CUBICSPLINE
                                                                ? (this.ease =
                                                                    _.easeCubicSpline)
                                                                : ((this._easing =
                                                                    r.EASING_LINEAR),
                                                                  (this.ease =
                                                                    _.easeLinear));
    }),
    (_.prototype.trigger = function () {
      this.cb(), (this.cbTriggered = !0);
    }),
    (_.prototype.setValue = function (e) {
      (this.value = e), null !== this.onChange && this.onChange();
    }),
    (_.prototype.set = function (e) {
      e &&
        (e.e && this.setEasing(e.e),
        e.cb && ((this.cb = e.cb), (this.cbTriggered = !1)),
        e.b,
        e.hasOwnProperty("t") && (this.time = e.t),
        e.hasOwnProperty("time") && (this.time = e.time),
        e.hasOwnProperty("v")
          ? (this.value = e.v)
          : e.hasOwnProperty("value") && (this.value = e.value)),
        null !== this.onChange && this.onChange();
    }),
    (_.prototype.getSerialized = function () {
      const e = {};
      return (e.t = this.time), (e.v = this.value), (e.e = this._easing), e;
    }),
    (_.prototype.getEasing = function () {
      return this._easing;
    });
  const A = function (e) {
    O.apply(this),
      (e = e || {}),
      (this.keys = []),
      (this.onChange = null),
      (this.stayInTimeline = !1),
      (this.loop = !1),
      (this._log = new b("Anim")),
      (this._lastKeyIndex = 0),
      (this._cachedIndex = 0),
      (this.name = e.name || null),
      (this.defaultEasing = e.defaultEasing || r.EASING_LINEAR),
      (this.onLooped = null),
      (this._timesLooped = 0),
      (this._needsSort = !1);
  };
  (A.prototype.forceChangeCallback = function () {
    null !== this.onChange && this.onChange(), this.emitEvent("onChange", this);
  }),
    (A.prototype.getLoop = function () {
      return this.loop;
    }),
    (A.prototype.setLoop = function (e) {
      (this.loop = e), this.emitEvent("onChange", this);
    }),
    (A.prototype.hasEnded = function (e) {
      return 0 === this.keys.length || this.keys[this._lastKeyIndex].time <= e;
    }),
    (A.prototype.isRising = function (e) {
      if (this.hasEnded(e)) return !1;
      const t = this.getKeyIndex(e);
      return this.keys[t].value < this.keys[t + 1].value;
    }),
    (A.prototype.clearBefore = function (e) {
      const t = this.getValue(e),
        n = this.getKeyIndex(e);
      this.setValue(e, t),
        n > 1 && this.keys.splice(0, n),
        this._updateLastIndex();
    }),
    (A.prototype.clear = function (e) {
      let t = 0;
      e && (t = this.getValue(e)),
        (this.keys.length = 0),
        this._updateLastIndex(),
        e && this.setValue(e, t),
        null !== this.onChange && this.onChange(),
        this.emitEvent("onChange", this);
    }),
    (A.prototype.sortKeys = function () {
      this.keys.sort((e, t) => parseFloat(e.time) - parseFloat(t.time)),
        this._updateLastIndex(),
        (this._needsSort = !1),
        this.keys.length % 1e3 == 0 && console.log(this.name, this.keys.length);
    }),
    (A.prototype.getLength = function () {
      return 0 === this.keys.length ? 0 : this.keys[this.keys.length - 1].time;
    }),
    (A.prototype.getKeyIndex = function (t) {
      let n = 0,
        a = 0;
      this._cachedIndex &&
        this.keys.length > this._cachedIndex &&
        t >= this.keys[this._cachedIndex].time &&
        (a = this._cachedIndex);
      for (let e = a; e < this.keys.length; e++)
        if ((t >= this.keys[e].time && (n = e), this.keys[e].time > t))
          return 0 != t && (this._cachedIndex = n), n;
      return n;
    }),
    (A.prototype.setValue = function (t, n, a) {
      let r = null;
      if (0 == this.keys.length || t <= this.keys[this.keys.length - 1].time)
        for (let e = 0; e < this.keys.length; e++)
          if (this.keys[e].time == t) {
            (r = this.keys[e]), this.keys[e].setValue(n), (this.keys[e].cb = a);
            break;
          }
      return (
        r ||
          ((r = new _({ time: t, value: n, e: this.defaultEasing, cb: a })),
          this.keys.push(r),
          this.keys.length % 1e3 == 0 &&
            console.log(this.name, this.keys.length),
          this._updateLastIndex()),
        this.onChange && this.onChange(),
        this.emitEvent("onChange", this),
        (this._needsSort = !0),
        r
      );
    }),
    (A.prototype.setKeyEasing = function (e, t) {
      this.keys[e] &&
        (this.keys[e].setEasing(t), this.emitEvent("onChange", this));
    }),
    (A.prototype.getSerialized = function () {
      const t = { keys: [] };
      t.loop = this.loop;
      for (let e = 0; e < this.keys.length; e++)
        t.keys.push(this.keys[e].getSerialized());
      return t;
    }),
    (A.prototype.getKey = function (e) {
      const t = this.getKeyIndex(e);
      return this.keys[t];
    }),
    (A.prototype.getNextKey = function (e) {
      let t = this.getKeyIndex(e) + 1;
      return t >= this.keys.length && (t = this.keys.length - 1), this.keys[t];
    }),
    (A.prototype.isFinished = function (e) {
      return this.keys.length <= 0 || e > this.keys[this.keys.length - 1].time;
    }),
    (A.prototype.isStarted = function (e) {
      return !(this.keys.length <= 0) && e >= this.keys[0].time;
    }),
    (A.prototype.getValue = function (e) {
      if (0 === this.keys.length) return 0;
      if (
        (this._needsSort && this.sortKeys(),
        !this.loop && e > this.keys[this._lastKeyIndex].time)
      )
        return this.keys[this._lastKeyIndex].value;
      if (e < this.keys[0].time) return this.keys[0].value;
      this.loop &&
        e > this.keys[this._lastKeyIndex].time &&
        (e / this.keys[this._lastKeyIndex].time > this._timesLooped &&
          (this._timesLooped++, this.onLooped && this.onLooped()),
        (e =
          (e - this.keys[0].time) %
          (this.keys[this._lastKeyIndex].time - this.keys[0].time)),
        (e += this.keys[0].time));
      const t = this.getKeyIndex(e);
      if (t >= this._lastKeyIndex)
        return (
          this.keys[this._lastKeyIndex].cb &&
            !this.keys[this._lastKeyIndex].cbTriggered &&
            this.keys[this._lastKeyIndex].trigger(),
          this.keys[this._lastKeyIndex].value
        );
      const n = t + 1,
        a = this.keys[t],
        r = this.keys[n];
      if ((a.cb && !a.cbTriggered && a.trigger(), !r)) return -1;
      const i = (e - a.time) / (r.time - a.time);
      return a.ease || this.log._warn("has no ease", a, r), a.ease(i, r);
    }),
    (A.prototype._updateLastIndex = function () {
      this._lastKeyIndex = this.keys.length - 1;
    }),
    (A.prototype.addKey = function (e) {
      void 0 === e.time
        ? this.log.warn("key time undefined, ignoring!")
        : (this.keys.push(e),
          null !== this.onChange && this.onChange(),
          this.emitEvent("onChange", this)),
        this._updateLastIndex();
    }),
    (A.prototype.easingFromString = function (e) {
      return "linear" == e
        ? r.EASING_LINEAR
        : "absolute" == e
          ? r.EASING_ABSOLUTE
          : "smoothstep" == e
            ? r.EASING_SMOOTHSTEP
            : "smootherstep" == e
              ? r.EASING_SMOOTHERSTEP
              : "Cubic In" == e
                ? r.EASING_CUBIC_IN
                : "Cubic Out" == e
                  ? r.EASING_CUBIC_OUT
                  : "Cubic In Out" == e
                    ? r.EASING_CUBIC_INOUT
                    : "Expo In" == e
                      ? r.EASING_EXPO_IN
                      : "Expo Out" == e
                        ? r.EASING_EXPO_OUT
                        : "Expo In Out" == e
                          ? r.EASING_EXPO_INOUT
                          : "Sin In" == e
                            ? r.EASING_SIN_IN
                            : "Sin Out" == e
                              ? r.EASING_SIN_OUT
                              : "Sin In Out" == e
                                ? r.EASING_SIN_INOUT
                                : "Back In" == e
                                  ? r.EASING_BACK_IN
                                  : "Back Out" == e
                                    ? r.EASING_BACK_OUT
                                    : "Back In Out" == e
                                      ? r.EASING_BACK_INOUT
                                      : "Elastic In" == e
                                        ? r.EASING_ELASTIC_IN
                                        : "Elastic Out" == e
                                          ? r.EASING_ELASTIC_OUT
                                          : "Bounce In" == e
                                            ? r.EASING_BOUNCE_IN
                                            : "Bounce Out" == e
                                              ? r.EASING_BOUNCE_OUT
                                              : "Quart Out" == e
                                                ? r.EASING_QUART_OUT
                                                : "Quart In" == e
                                                  ? r.EASING_QUART_IN
                                                  : "Quart In Out" == e
                                                    ? r.EASING_QUART_INOUT
                                                    : "Quint Out" == e
                                                      ? r.EASING_QUINT_OUT
                                                      : "Quint In" == e
                                                        ? r.EASING_QUINT_IN
                                                        : "Quint In Out" == e
                                                          ? r.EASING_QUINT_INOUT
                                                          : void 0;
    }),
    (A.prototype.createPort = function (e, t, n) {
      const a = e.inDropDown(t, r.EASINGS);
      return (
        a.set("linear"),
        (a.defaultValue = "linear"),
        (a.onChange = function () {
          (this.defaultEasing = this.easingFromString(a.get())),
            this.emitEvent("onChangeDefaultEasing", this),
            n && n();
        }.bind(this)),
        a
      );
    }),
    (A.slerpQuaternion = function (n, a, r, i, s, o) {
      A.slerpQuaternion.q1 ||
        ((A.slerpQuaternion.q1 = quat.create()),
        (A.slerpQuaternion.q2 = quat.create()));
      const l = r.getKeyIndex(n);
      let u = l + 1;
      if ((u >= r.keys.length && (u = r.keys.length - 1), l == u))
        quat.set(
          a,
          r.keys[l].value,
          i.keys[l].value,
          s.keys[l].value,
          o.keys[l].value,
        );
      else {
        const e = r.keys[l].time,
          t = (n - e) / (r.keys[u].time - e);
        quat.set(
          A.slerpQuaternion.q1,
          r.keys[l].value,
          i.keys[l].value,
          s.keys[l].value,
          o.keys[l].value,
        ),
          quat.set(
            A.slerpQuaternion.q2,
            r.keys[u].value,
            i.keys[u].value,
            s.keys[u].value,
            o.keys[u].value,
          ),
          quat.slerp(a, A.slerpQuaternion.q1, A.slerpQuaternion.q2, t);
      }
      return a;
    });
  const y = _,
    x = function (e, t, n, a) {
      O.apply(this),
        (this.data = {}),
        (this._log = new b("core_port")),
        (this.direction = u),
        (this.id = String(CABLES.simpleId())),
        (this._op = e),
        (this.links = []),
        (this.value = 0),
        (this.name = t),
        (this.type = n || i),
        (this.uiAttribs = a || {}),
        (this.anim = null),
        (this._oldAnimVal = -5711),
        (this.defaultValue = null),
        (this._uiActiveState = !0),
        (this.ignoreValueSerialize = !1),
        (this.onLinkChanged = null),
        (this.crashed = !1),
        (this._valueBeforeLink = null),
        (this._lastAnimFrame = -1),
        (this._animated = !1),
        (this.onValueChanged = null),
        (this.onTriggered = null),
        (this.onUiActiveStateChange = null),
        (this.changeAlways = !1),
        (this.forceRefChange = !1),
        (this._useVariableName = null),
        (this.activityCounter = 0),
        (this.apf = 0),
        (this.activityCounterStartFrame = 0),
        (this._tempLastUiValue = null),
        Object.defineProperty(this, "title", {
          get() {
            return this.uiAttribs.title || this.name;
          },
        }),
        Object.defineProperty(this, "parent", {
          get() {
            return this._log.stack("use port.op, not .parent"), this._op;
          },
        }),
        Object.defineProperty(this, "op", {
          get() {
            return this._op;
          },
        }),
        Object.defineProperty(this, "val", {
          get() {
            return (
              this._log.warn("val getter deprecated!", this),
              this._log.stack("val getter deprecated"),
              this.get()
            );
          },
          set(e) {
            this._log.warn("val setter deprecated!", this),
              this._log.stack("val setter deprecated"),
              this.setValue(e);
          },
        });
    };
  (x.prototype.copyLinkedUiAttrib = function (e, t) {
    if (!CABLES.UI) return;
    if (!this.isLinked()) return;
    const n = {};
    (n[e] = this.links[0].getOtherPort(this).getUiAttrib(e)), t.setUiAttribs(n);
  }),
    (x.prototype.getValueForDisplay = function () {
      let e = this.value;
      return (
        "string" == typeof this.value || this.value instanceof String
          ? (e.length > 1e3 && ((e = e.substring(0, 999)), (e += "...")),
            this.uiAttribs &&
              "boolnum" == this.uiAttribs.display &&
              ((e += " - "), this.value ? (e += "true") : (e += "false")),
            (e = e.replace(/[\u00A0-\u9999<>\&]/g, function (e) {
              return "&#" + e.charCodeAt(0) + ";";
            })),
            e.length > 100 && (e = e.substring(0, 100)))
          : (e = this.value),
        e
      );
    }),
    (x.prototype.onAnimToggle = function () {}),
    (x.prototype._onAnimToggle = function () {
      this.onAnimToggle();
    }),
    (x.prototype.remove = function () {
      this.removeLinks(), this._op.removePort(this);
    }),
    (x.prototype.setUiAttribs = function (t) {
      let n = !1;
      this.uiAttribs || (this.uiAttribs = {});
      for (const e in t)
        this.uiAttribs[e] != t[e] && (n = !0),
          (this.uiAttribs[e] = t[e]),
          "group" == e &&
            this.indexPort &&
            this.indexPort.setUiAttribs({ group: t[e] });
      t.hasOwnProperty("expose") &&
        this._op.patch.emitEvent("subpatchExpose", this._op.uiAttribs.subPatch),
        n && this.emitEvent("onUiAttrChange", t, this);
    }),
    (x.prototype.getUiAttribs = function () {
      return this.uiAttribs;
    }),
    (x.prototype.getUiAttrib = function (e) {
      return this.uiAttribs && this.uiAttribs.hasOwnProperty(e)
        ? this.uiAttribs[e]
        : null;
    }),
    (x.prototype.get = function () {
      return (
        this._animated &&
          this._lastAnimFrame != this._op.patch.getFrameNum() &&
          ((this._lastAnimFrame = this._op.patch.getFrameNum()),
          (this.value = this.anim.getValue(this._op.patch.timer.getTime())),
          (this._oldAnimVal = this.value),
          this.forceChange()),
        this.value
      );
    }),
    (x.prototype.setRef = function (e) {
      (this.forceRefChange = !0), this.set(e);
    }),
    (x.prototype.set = x.prototype.setValue =
      function (e) {
        if (
          (void 0 === e && (e = null),
          this._op.enabled &&
            !this.crashed &&
            (e !== this.value ||
              this.changeAlways ||
              this.type == t ||
              this.type == s))
        ) {
          if (this._animated)
            this.anim.setValue(this._op.patch.timer.getTime(), e);
          else {
            try {
              (this.value = e), this.forceChange();
            } catch (e) {
              (this.crashed = !0),
                (this.setValue = function (e) {}),
                (this.onTriggered = function () {}),
                this._log.error("onvaluechanged exception cought", e),
                this._log.error(e.stack),
                this._log.warn("exception in: " + this._op.name),
                this._op.patch.isEditorMode() && gui.showOpCrash(this._op),
                this._op.patch.emitEvent("exception", e, this._op),
                this._op.onError && this._op.onError(e);
            }
            this._op &&
              this._op.patch &&
              this._op.patch.isEditorMode() &&
              this.type == t &&
              gui.texturePreview().updateTexturePort(this);
          }
          if (this.direction == h)
            for (let e = 0; e < this.links.length; ++e)
              this.links[e].setValue();
        }
      }),
    (x.prototype.updateAnim = function () {
      this._animated &&
        ((this.value = this.get()),
        (this._oldAnimVal != this.value || this.changeAlways) &&
          ((this._oldAnimVal = this.value), this.forceChange()),
        (this._oldAnimVal = this.value));
    }),
    (x.args = function (e) {
      return (e + "")
        .replace(/[/][/].*$/gm, "")
        .replace(/\s+/g, "")
        .replace(/[/][*][^/*]*[*][/]/g, "")
        .split("){", 1)[0]
        .replace(/^[^(]*[(]/, "")
        .replace(/=[^,]+/g, "")
        .split(",")
        .filter(Boolean);
    }),
    (x.prototype.forceChange = function () {
      this.onValueChanged || this.onChange,
        this._activity(),
        this.emitEvent("change", this.value, this),
        this.onChange
          ? this.onChange(this, this.value)
          : this.onValueChanged && this.onValueChanged(this, this.value);
    }),
    (x.prototype.getTypeString = function () {
      return this.type == i
        ? "Number"
        : this.type == n
          ? "Trigger"
          : this.type == a
            ? "Object"
            : this.type == o
              ? "Dynamic"
              : this.type == s
                ? "Array"
                : this.type == l
                  ? "String"
                  : "Unknown";
    }),
    (x.prototype.deSerializeSettings = function (t) {
      if (
        t &&
        (t.animated && this.setAnimated(t.animated),
        t.useVariable && this.setVariableName(t.useVariable),
        t.title && this.setUiAttribs({ title: t.title }),
        t.expose && this.setUiAttribs({ expose: !0 }),
        t.order && this.setUiAttribs({ order: t.order }),
        t.anim)
      ) {
        this.anim || (this.anim = new A({ name: "port " + this.name })),
          (this._op._hasAnimPort = !0),
          this.anim.addEventListener("onChange", () => {
            this._op.patch.emitEvent(
              "portAnimUpdated",
              this._op,
              this,
              this.anim,
            );
          }),
          t.anim.loop && (this.anim.loop = t.anim.loop);
        for (const e in t.anim.keys) this.anim.keys.push(new y(t.anim.keys[e]));
        this.anim.sortKeys();
      }
    }),
    (x.prototype.getSerialized = function () {
      let t = {};
      if (
        ((t.name = this.getName()),
        this.ignoreValueSerialize ||
          0 !== this.links.length ||
          (this.type == a && this.value && this.value.tex) ||
          (t.value = this.value),
        this._useVariableName && (t.useVariable = this._useVariableName),
        this._animated && (t.animated = !0),
        this.anim && (t.anim = this.anim.getSerialized()),
        "file" == this.uiAttribs.display &&
          (t.display = this.uiAttribs.display),
        this.uiAttribs.expose &&
          ((t.expose = !0),
          this.uiAttribs.hasOwnProperty("order") &&
            (t.order = this.uiAttribs.order)),
        this.uiAttribs.title && (t.title = this.uiAttribs.title),
        this.direction == h && this.links.length > 0)
      ) {
        t.links = [];
        for (const e in this.links)
          !this.links[e].ignoreInSerialize &&
            this.links[e].portIn &&
            this.links[e].portOut &&
            t.links.push(this.links[e].getSerialized());
      }
      if (this.direction == u && this.links.length > 0)
        for (const e in this.links)
          this.links[e].portIn &&
            this.links[e].portOut &&
            this.links[e].getOtherPort(this).op.isInBlueprint2() &&
            !this.op.isInBlueprint2() &&
            ((t.links = t.links || []),
            t.links.push(this.links[e].getSerialized()));
      return (
        t.links && 0 == t.links.length && delete t.links,
        this.type === n && delete t.value,
        this.type === n && 0 == this.links.length && (t = null),
        t && 1 == Object.keys(t).length && t.name && (t = null),
        c(t),
        t
      );
    }),
    (x.prototype.shouldLink = function () {
      return !0;
    }),
    (x.prototype.removeLinks = function () {
      let e = 0;
      for (; this.links.length > 0; ) {
        if ((e++, e > 5e3)) {
          this._log.warn("could not delete links... / infinite loop"),
            (this.links.length = 0);
          break;
        }
        this.links[0].remove();
      }
    }),
    (x.prototype.removeLink = function (e) {
      for (const i in this.links) this.links[i] == e && this.links.splice(i, 1);
      this.direction == u &&
        (this.type == i
          ? this.setValue(this._valueBeforeLink || 0)
          : this.setValue(this._valueBeforeLink || null)),
        CABLES.UI &&
          this._op.checkLinkTimeWarnings &&
          this._op.checkLinkTimeWarnings(),
        this.onLinkChanged && this.onLinkChanged(),
        this.emitEvent("onLinkChanged"),
        this._op.emitEvent("onLinkChanged");
    }),
    (x.prototype.getName = function () {
      return this.name;
    }),
    (x.prototype.getTitle = function () {
      return this.uiAttribs.title ? this.uiAttribs.title : this.name;
    }),
    (x.prototype.addLink = function (e) {
      (this._valueBeforeLink = this.value),
        this.links.push(e),
        CABLES.UI &&
          this._op.checkLinkTimeWarnings &&
          this._op.checkLinkTimeWarnings(),
        this.onLinkChanged && this.onLinkChanged(),
        this.emitEvent("onLinkChanged"),
        this._op.emitEvent("onLinkChanged");
    }),
    (x.prototype.getLinkTo = function (t) {
      for (const e in this.links)
        if (this.links[e].portIn == t || this.links[e].portOut == t)
          return this.links[e];
    }),
    (x.prototype.removeLinkTo = function (t) {
      for (const e in this.links)
        if (this.links[e].portIn == t || this.links[e].portOut == t)
          return (
            this.links[e].remove(),
            CABLES.UI &&
              this._op.checkLinkTimeWarnings &&
              this._op.checkLinkTimeWarnings(),
            this.onLinkChanged && this.onLinkChanged(),
            void this.emitEvent("onLinkChanged")
          );
    }),
    (x.prototype.isLinkedTo = function (t) {
      for (const e in this.links)
        if (this.links[e].portIn == t || this.links[e].portOut == t) return !0;
      return !1;
    }),
    (x.prototype._activity = function () {
      this.activityCounter++;
    }),
    (x.prototype.trigger = function () {
      const t = this.links.length;
      if ((this._activity(), 0 === t)) return;
      if (!this._op.enabled) return;
      let n = null;
      try {
        for (let e = 0; e < t; ++e)
          this.links[e].portIn &&
            ((n = this.links[e].portIn),
            n.op.patch.pushTriggerStack(n),
            n._onTriggered(),
            n.op.patch.popTriggerStack()),
            this.links[e] && this.links[e].activity();
      } catch (t) {
        (this._op.enabled = !1),
          this._op.patch.isEditorMode() &&
            (this._op.patch.emitEvent("exception", t, n.op),
            this._op.patch.emitEvent("opcrash", n),
            n.op.onError && n.op.onError(t)),
          this._log.warn("exception!"),
          this._log.error("ontriggered exception caught", t),
          this._log.error(t.stack),
          this._log.warn("exception in: " + n.op.name);
      }
    }),
    (x.prototype.call = function () {
      this._log.warn("call deprecated - use trigger() "), this.trigger();
    }),
    (x.prototype.execute = function () {
      this._log.warn("### execute port: " + this.getName(), this.goals.length);
    }),
    (x.prototype.setVariableName = function (e) {
      (this._useVariableName = e),
        this._op.patch.on("variableRename", (e, t) => {
          e == this._useVariableName && (this._useVariableName = t);
        });
    }),
    (x.prototype.getVariableName = function () {
      return this._useVariableName;
    }),
    (x.prototype.setVariable = function (e) {
      this.setAnimated(!1);
      const t = { useVariable: !1 };
      this._variableIn &&
        this._varChangeListenerId &&
        (this._variableIn.off(this._varChangeListenerId),
        (this._variableIn = null)),
        e
          ? ((this._variableIn = this._op.patch.getVar(e)),
            this._variableIn
              ? (this.type == a
                  ? (this._varChangeListenerId = this._variableIn.on(
                      "change",
                      () => {
                        this.set(null), this.set(this._variableIn.getValue());
                      },
                    ))
                  : (this._varChangeListenerId = this._variableIn.on(
                      "change",
                      this.set.bind(this),
                    )),
                this.set(this._variableIn.getValue()))
              : this._log.warn("PORT VAR NOT FOUND!!!", e),
            (this._useVariableName = e),
            (t.useVariable = !0),
            (t.variableName = this._useVariableName))
          : ((t.variableName = this._useVariableName = null),
            (t.useVariable = !1)),
        this.setUiAttribs(t),
        this._op.patch.emitEvent("portSetVariable", this._op, this, e);
    }),
    (x.prototype._handleNoTriggerOpAnimUpdates = function (e) {
      let t = !1;
      for (let e = 0; e < this._op.portsIn.length; e++)
        if (this._op.portsIn.type == n) {
          t = !0;
          break;
        }
      t ||
        (e
          ? (this._notriggerAnimUpdate = this._op.patch.on(
              "onRenderFrame",
              () => {
                this.updateAnim();
              },
            ))
          : this._op.patch.removeEventListener(this._notriggerAnimUpdate));
    }),
    (x.prototype.setAnimated = function (e) {
      this._animated != e &&
        ((this._animated = e),
        (this._op._hasAnimPort = !0),
        this._animated &&
          !this.anim &&
          ((this.anim = new A({ name: "port " + this.name })),
          this.anim.addEventListener("onChange", () => {
            this._op.patch.emitEvent(
              "portAnimUpdated",
              this._op,
              this,
              this.anim,
            );
          })),
        this._onAnimToggle()),
        this._handleNoTriggerOpAnimUpdates(e),
        e || (this.anim = null),
        this.setUiAttribs({ isAnimated: this._animated });
    }),
    (x.prototype.toggleAnim = function () {
      (this._animated = !this._animated),
        this._animated &&
          !this.anim &&
          ((this.anim = new A({ name: "port " + this.name })),
          this.anim.addEventListener("onChange", () => {
            this._op.patch.emitEvent(
              "portAnimUpdated",
              this._op,
              this,
              this.anim,
            );
          })),
        this.setAnimated(this._animated),
        this._onAnimToggle(),
        this.setUiAttribs({ isAnimated: this._animated });
    }),
    (x.prototype.getType = function () {
      return this.type;
    }),
    (x.prototype.isLinked = function () {
      return (
        this.links.length > 0 || this._animated || null != this._useVariableName
      );
    }),
    (x.prototype.isBoundToVar = function () {
      const e = null != this._useVariableName;
      return (this.uiAttribs.boundToVar = e), e;
    }),
    (x.prototype.isAnimated = function () {
      return this._animated;
    }),
    (x.prototype.isHidden = function () {
      return this.uiAttribs.hidePort;
    }),
    (x.prototype._onTriggered = function (e) {
      this._activity(),
        this._op.updateAnims(),
        this._op.enabled && this.onTriggered && this.onTriggered(e);
    }),
    (x.prototype._onSetProfiling = function (e) {
      this._op.patch.profiler.add("port", this),
        this.setValue(e),
        this._op.patch.profiler.add("port", null);
    }),
    (x.prototype._onTriggeredProfiling = function () {
      this._op.enabled &&
        this.onTriggered &&
        (this._op.patch.profiler.add("port", this),
        this.onTriggered(),
        this._op.patch.profiler.add("port", null));
    }),
    (x.prototype.onValueChange = function (e) {
      this.onChange = e;
    }),
    (x.prototype.getUiActiveState = function () {
      return this._uiActiveState;
    }),
    (x.prototype.setUiActiveState = function (e) {
      (this._uiActiveState = e),
        this.onUiActiveStateChange && this.onUiActiveStateChange();
    }),
    (x.prototype.hidePort = function () {
      this._log.warn("op.hideport() is deprecated, do not use it!");
    }),
    (x.portTypeNumberToString = function (e) {
      return e == i
        ? "value"
        : e == n
          ? "function"
          : e == a
            ? "object"
            : e == s
              ? "array"
              : e == l
                ? "string"
                : e == o
                  ? "dynamic"
                  : "unknown";
    });
  const I = class {
    constructor(e, t, n, a, r, i, s, o, l, u) {
      if (
        ((this._log = new b("cg_uniform")),
        (this._type = t),
        (this._name = n),
        (this._shader = e),
        (this._value = 1e-5),
        (this._oldValue = null),
        (this._port = null),
        (this._structName = l),
        (this._structUniformName = o),
        (this._propertyName = u),
        this._shader._addUniform(this),
        (this.needsUpdate = !0),
        (this.shaderType = null),
        (this.comment = null),
        "f" == t)
      )
        (this.set = this.setValue = this.setValueF.bind(this)),
          (this.updateValue = this.updateValueF.bind(this));
      else if ("f[]" == t)
        (this.set = this.setValue = this.setValueArrayF.bind(this)),
          (this.updateValue = this.updateValueArrayF.bind(this));
      else if ("2f[]" == t)
        (this.set = this.setValue = this.setValueArray2F.bind(this)),
          (this.updateValue = this.updateValueArray2F.bind(this));
      else if ("3f[]" == t)
        (this.set = this.setValue = this.setValueArray3F.bind(this)),
          (this.updateValue = this.updateValueArray3F.bind(this));
      else if ("4f[]" == t)
        (this.set = this.setValue = this.setValueArray4F.bind(this)),
          (this.updateValue = this.updateValueArray4F.bind(this));
      else if ("i" == t)
        (this.set = this.setValue = this.setValueI.bind(this)),
          (this.updateValue = this.updateValueI.bind(this));
      else if ("2i" == t)
        (this.set = this.setValue = this.setValue2I.bind(this)),
          (this.updateValue = this.updateValue2I.bind(this));
      else if ("3i" == t)
        (this.set = this.setValue = this.setValue3I.bind(this)),
          (this.updateValue = this.updateValue3I.bind(this));
      else if ("4i" == t)
        (this.set = this.setValue = this.setValue4I.bind(this)),
          (this.updateValue = this.updateValue4I.bind(this));
      else if ("b" == t)
        (this.set = this.setValue = this.setValueBool.bind(this)),
          (this.updateValue = this.updateValueBool.bind(this));
      else if ("4f" == t)
        (this.set = this.setValue = this.setValue4F.bind(this)),
          (this.updateValue = this.updateValue4F.bind(this));
      else if ("3f" == t)
        (this.set = this.setValue = this.setValue3F.bind(this)),
          (this.updateValue = this.updateValue3F.bind(this));
      else if ("2f" == t)
        (this.set = this.setValue = this.setValue2F.bind(this)),
          (this.updateValue = this.updateValue2F.bind(this));
      else if ("t" == t)
        (this.set = this.setValue = this.setValueT.bind(this)),
          (this.updateValue = this.updateValueT.bind(this));
      else if ("tc" == t)
        (this.set = this.setValue = this.setValueT.bind(this)),
          (this.updateValue = this.updateValueT.bind(this));
      else if ("t[]" == t)
        (this.set = this.setValue = this.setValueArrayT.bind(this)),
          (this.updateValue = this.updateValueArrayT.bind(this));
      else {
        if ("m4" != t && "m4[]" != t) throw new Error("Unknown uniform type");
        (this.set = this.setValue = this.setValueM4.bind(this)),
          (this.updateValue = this.updateValueM4.bind(this));
      }
      "object" == typeof a && a instanceof x
        ? ((this._port = a),
          (this._value = this._port.get()),
          r && i && s
            ? ((r instanceof x && i instanceof x && s instanceof x) ||
                this._log.error(
                  "[cgl_uniform] mixed port/value parameter for vec4 ",
                  this._name,
                ),
              (this._value = [0, 0, 0, 0]),
              (this._port2 = r),
              (this._port3 = i),
              (this._port4 = s),
              this._port.on("change", this.updateFromPort4f.bind(this)),
              this._port2.on("change", this.updateFromPort4f.bind(this)),
              this._port3.on("change", this.updateFromPort4f.bind(this)),
              this._port4.on("change", this.updateFromPort4f.bind(this)),
              this.updateFromPort4f())
            : r && i
              ? ((r instanceof x && i instanceof x) ||
                  this._log.error(
                    "[cgl_uniform] mixed port/value parameter for vec4 ",
                    this._name,
                  ),
                (this._value = [0, 0, 0]),
                (this._port2 = r),
                (this._port3 = i),
                this._port.on("change", this.updateFromPort3f.bind(this)),
                this._port2.on("change", this.updateFromPort3f.bind(this)),
                this._port3.on("change", this.updateFromPort3f.bind(this)),
                this.updateFromPort3f())
              : r
                ? (r instanceof x ||
                    this._log.error(
                      "[cgl_uniform] mixed port/value parameter for vec4 ",
                      this._name,
                    ),
                  (this._value = [0, 0]),
                  (this._port2 = r),
                  this._port.on("change", this.updateFromPort2f.bind(this)),
                  this._port2.on("change", this.updateFromPort2f.bind(this)),
                  this.updateFromPort2f())
                : this._port.on("change", this.updateFromPort.bind(this)))
        : (this._value = a),
        this.setValue(this._value),
        (this.needsUpdate = !0);
    }
    getType() {
      return this._type;
    }
    getName() {
      return this._name;
    }
    getValue() {
      return this._value;
    }
    getShaderType() {
      return this.shaderType;
    }
    isStructMember() {
      return !!this._structName;
    }
    updateFromPort4f() {
      (this._value[0] = this._port.get()),
        (this._value[1] = this._port2.get()),
        (this._value[2] = this._port3.get()),
        (this._value[3] = this._port4.get()),
        this.setValue(this._value);
    }
    updateFromPort3f() {
      (this._value[0] = this._port.get()),
        (this._value[1] = this._port2.get()),
        (this._value[2] = this._port3.get()),
        this.setValue(this._value);
    }
    updateFromPort2f() {
      (this._value[0] = this._port.get()),
        (this._value[1] = this._port2.get()),
        this.setValue(this._value);
    }
    updateFromPort() {
      this.setValue(this._port.get());
    }
  };
  class T extends I {
    constructor(e, t, n, a, r, i, s, o, l, u) {
      super(e, t, n, a, r, i, s, o, l, u),
        (this._loc = -1),
        (this._cgl = e._cgl);
    }
    get name() {
      return this._name;
    }
    copy(e) {
      const t = new T(
        e,
        this._type,
        this._name,
        this._value,
        this._port2,
        this._port3,
        this._port4,
        this._structUniformName,
        this._structName,
        this._propertyName,
      );
      return (t.shaderType = this.shaderType), t;
    }
    getGlslTypeString() {
      return T.glslTypeString(this._type);
    }
    _isValidLoc() {
      return -1 != this._loc;
    }
    resetLoc() {
      (this._loc = -1), (this.needsUpdate = !0);
    }
    bindTextures() {}
    getLoc() {
      return this._loc;
    }
    updateFromPort4f() {
      (this._value[0] = this._port.get()),
        (this._value[1] = this._port2.get()),
        (this._value[2] = this._port3.get()),
        (this._value[3] = this._port4.get()),
        this.setValue(this._value);
    }
    updateFromPort3f() {
      (this._value[0] = this._port.get()),
        (this._value[1] = this._port2.get()),
        (this._value[2] = this._port3.get()),
        this.setValue(this._value);
    }
    updateFromPort2f() {
      (this._value[0] = this._port.get()),
        (this._value[1] = this._port2.get()),
        this.setValue(this._value);
    }
    updateFromPort() {
      this.setValue(this._port.get());
    }
    updateValueF() {
      this._isValidLoc()
        ? (this.needsUpdate = !1)
        : (this._loc = this._shader
            .getCgl()
            .gl.getUniformLocation(this._shader.getProgram(), this._name)),
        this._shader.getCgl().gl.uniform1f(this._loc, this._value),
        this._cgl.profileData.profileUniformCount++;
    }
    setValueF(e) {
      e != this._value && ((this.needsUpdate = !0), (this._value = e));
    }
    updateValueI() {
      this._isValidLoc()
        ? (this.needsUpdate = !1)
        : (this._loc = this._shader
            .getCgl()
            .gl.getUniformLocation(this._shader.getProgram(), this._name)),
        this._shader.getCgl().gl.uniform1i(this._loc, this._value),
        this._cgl.profileData.profileUniformCount++;
    }
    updateValue2I() {
      this._value &&
        (this._isValidLoc() ||
          ((this._loc = this._shader
            .getCgl()
            .gl.getUniformLocation(this._shader.getProgram(), this._name)),
          this._cgl.profileData.profileShaderGetUniform++,
          (this._cgl.profileData.profileShaderGetUniformName = this._name)),
        this._shader
          .getCgl()
          .gl.uniform2i(this._loc, this._value[0], this._value[1]),
        (this.needsUpdate = !1),
        this._cgl.profileData.profileUniformCount++);
    }
    updateValue3I() {
      this._value &&
        (this._isValidLoc() ||
          ((this._loc = this._shader
            .getCgl()
            .gl.getUniformLocation(this._shader.getProgram(), this._name)),
          this._cgl.profileData.profileShaderGetUniform++,
          (this._cgl.profileData.profileShaderGetUniformName = this._name)),
        this._shader
          .getCgl()
          .gl.uniform3i(
            this._loc,
            this._value[0],
            this._value[1],
            this._value[2],
          ),
        (this.needsUpdate = !1),
        this._cgl.profileData.profileUniformCount++);
    }
    updateValue4I() {
      this._isValidLoc() ||
        ((this._loc = this._shader
          .getCgl()
          .gl.getUniformLocation(this._shader.getProgram(), this._name)),
        this._cgl.profileData.profileShaderGetUniform++,
        (this._cgl.profileData.profileShaderGetUniformName = this._name)),
        this._shader
          .getCgl()
          .gl.uniform4i(
            this._loc,
            this._value[0],
            this._value[1],
            this._value[2],
            this._value[3],
          ),
        this._cgl.profileData.profileUniformCount++;
    }
    setValueI(e) {
      e != this._value && ((this.needsUpdate = !0), (this._value = e));
    }
    setValue2I(e) {
      e &&
        (this._oldValue
          ? (e[0] == this._oldValue[0] && e[1] == this._oldValue[1]) ||
            ((this._oldValue[0] = e[0]),
            (this._oldValue[1] = e[1]),
            (this.needsUpdate = !0))
          : ((this._oldValue = [e[0] - 1, 1]), (this.needsUpdate = !0)),
        (this._value = e));
    }
    setValue3I(e) {
      e &&
        (this._oldValue
          ? (e[0] == this._oldValue[0] &&
              e[1] == this._oldValue[1] &&
              e[2] == this._oldValue[2]) ||
            ((this._oldValue[0] = e[0]),
            (this._oldValue[1] = e[1]),
            (this._oldValue[2] = e[2]),
            (this.needsUpdate = !0))
          : ((this._oldValue = [e[0] - 1, 1, 2]), (this.needsUpdate = !0)),
        (this._value = e));
    }
    setValue4I(e) {
      (this.needsUpdate = !0), (this._value = e || vec4.create());
    }
    updateValueBool() {
      this._isValidLoc()
        ? (this.needsUpdate = !1)
        : (this._loc = this._shader
            .getCgl()
            .gl.getUniformLocation(this._shader.getProgram(), this._name)),
        this._shader.getCgl().gl.uniform1i(this._loc, this._value ? 1 : 0),
        this._cgl.profileData.profileUniformCount++;
    }
    setValueBool(e) {
      e != this._value && ((this.needsUpdate = !0), (this._value = e));
    }
    setValueArray4F(e) {
      (this.needsUpdate = !0), (this._value = e);
    }
    updateValueArray4F() {
      this._isValidLoc()
        ? (this.needsUpdate = !1)
        : (this._loc = this._shader
            .getCgl()
            .gl.getUniformLocation(this._shader.getProgram(), this._name)),
        this._value &&
          (this._shader.getCgl().gl.uniform4fv(this._loc, this._value),
          this._cgl.profileData.profileUniformCount++);
    }
    setValueArray3F(e) {
      (this.needsUpdate = !0), (this._value = e);
    }
    updateValueArray3F() {
      this._isValidLoc()
        ? (this.needsUpdate = !1)
        : (this._loc = this._shader
            .getCgl()
            .gl.getUniformLocation(this._shader.getProgram(), this._name)),
        this._value &&
          (this._shader.getCgl().gl.uniform3fv(this._loc, this._value),
          this._cgl.profileData.profileUniformCount++);
    }
    setValueArray2F(e) {
      (this.needsUpdate = !0), (this._value = e);
    }
    updateValueArray2F() {
      this._isValidLoc()
        ? (this.needsUpdate = !1)
        : (this._loc = this._shader
            .getCgl()
            .gl.getUniformLocation(this._shader.getProgram(), this._name)),
        this._value &&
          (this._shader.getCgl().gl.uniform2fv(this._loc, this._value),
          this._cgl.profileData.profileUniformCount++);
    }
    setValueArrayF(e) {
      (this.needsUpdate = !0), (this._value = e);
    }
    updateValueArrayF() {
      this._isValidLoc()
        ? (this.needsUpdate = !1)
        : (this._loc = this._shader
            .getCgl()
            .gl.getUniformLocation(this._shader.getProgram(), this._name)),
        this._value &&
          (this._shader.getCgl().gl.uniform1fv(this._loc, this._value),
          this._cgl.profileData.profileUniformCount++);
    }
    setValueArrayT(e) {
      (this.needsUpdate = !0), (this._value = e);
    }
    updateValue3F() {
      this._value &&
        (this._isValidLoc() ||
          ((this._loc = this._shader
            .getCgl()
            .gl.getUniformLocation(this._shader.getProgram(), this._name)),
          this._cgl.profileData.profileShaderGetUniform++,
          (this._cgl.profileData.profileShaderGetUniformName = this._name)),
        this._shader
          .getCgl()
          .gl.uniform3f(
            this._loc,
            this._value[0],
            this._value[1],
            this._value[2],
          ),
        (this.needsUpdate = !1),
        this._cgl.profileData.profileUniformCount++);
    }
    setValue3F(e) {
      e &&
        (this._oldValue
          ? (e[0] == this._oldValue[0] &&
              e[1] == this._oldValue[1] &&
              e[2] == this._oldValue[2]) ||
            ((this._oldValue[0] = e[0]),
            (this._oldValue[1] = e[1]),
            (this._oldValue[2] = e[2]),
            (this.needsUpdate = !0))
          : ((this._oldValue = [e[0] - 1, 1, 2]), (this.needsUpdate = !0)),
        (this._value = e));
    }
    updateValue2F() {
      this._value &&
        (this._isValidLoc() ||
          ((this._loc = this._shader
            .getCgl()
            .gl.getUniformLocation(this._shader.getProgram(), this._name)),
          this._cgl.profileData.profileShaderGetUniform++,
          (this._cgl.profileData.profileShaderGetUniformName = this._name)),
        this._shader
          .getCgl()
          .gl.uniform2f(this._loc, this._value[0], this._value[1]),
        (this.needsUpdate = !1),
        this._cgl.profileData.profileUniformCount++);
    }
    setValue2F(e) {
      e &&
        (this._oldValue
          ? (e[0] == this._oldValue[0] && e[1] == this._oldValue[1]) ||
            ((this._oldValue[0] = e[0]),
            (this._oldValue[1] = e[1]),
            (this.needsUpdate = !0))
          : ((this._oldValue = [e[0] - 1, 1]), (this.needsUpdate = !0)),
        (this._value = e));
    }
    updateValue4F() {
      this._isValidLoc() ||
        ((this._loc = this._shader
          .getCgl()
          .gl.getUniformLocation(this._shader.getProgram(), this._name)),
        this._cgl.profileData.profileShaderGetUniform++,
        (this._cgl.profileData.profileShaderGetUniformName = this._name)),
        this._value ||
          (this._log.warn("no value for uniform", this._name, this),
          (this._value = [0, 0, 0, 0])),
        (this.needsUpdate = !1),
        this._shader
          .getCgl()
          .gl.uniform4f(
            this._loc,
            this._value[0],
            this._value[1],
            this._value[2],
            this._value[3],
          ),
        this._cgl.profileData.profileUniformCount++;
    }
    setValue4F(e) {
      "number" == typeof this.value && (this.value = vec4.create()),
        e &&
          (this._oldValue
            ? (e[0] == this._oldValue[0] &&
                e[1] == this._oldValue[1] &&
                e[2] == this._oldValue[2] &&
                e[3] == this._oldValue[3]) ||
              ((this._oldValue[0] = e[0]),
              (this._oldValue[1] = e[1]),
              (this._oldValue[2] = e[2]),
              (this.needsUpdate = !0))
            : ((this._oldValue = [e[0] - 1, 1, 2, 3]), (this.needsUpdate = !0)),
          (this._value = e));
    }
    updateValueM4() {
      if (
        (this._isValidLoc() ||
          ((this._loc = this._shader
            .getCgl()
            .gl.getUniformLocation(this._shader.getProgram(), this._name)),
          this._cgl.profileData.profileShaderGetUniform++,
          (this._cgl.profileData.profileShaderGetUniformName = this._name)),
        !this._value || this._value.length % 16 != 0)
      )
        return console.log("this.name", this._name, this._value);
      this._shader.getCgl().gl.uniformMatrix4fv(this._loc, !1, this._value),
        this._cgl.profileData.profileUniformCount++;
    }
    setValueM4(e) {
      (this.needsUpdate = !0), (this._value = e || mat4.create());
    }
    updateValueArrayT() {
      this._isValidLoc()
        ? (this.needsUpdate = !1)
        : (this._loc = this._shader
            .getCgl()
            .gl.getUniformLocation(this._shader.getProgram(), this._name)),
        this._value &&
          (this._shader.getCgl().gl.uniform1iv(this._loc, this._value),
          this._cgl.profileData.profileUniformCount++);
    }
    updateValueT() {
      this._isValidLoc() ||
        ((this._loc = this._shader
          .getCgl()
          .gl.getUniformLocation(this._shader.getProgram(), this._name)),
        this._cgl.profileData.profileShaderGetUniform++,
        (this._cgl.profileData.profileShaderGetUniformName = this._name)),
        this._cgl.profileData.profileUniformCount++,
        this._shader.getCgl().gl.uniform1i(this._loc, this._value),
        (this.needsUpdate = !1);
    }
    setValueT(e) {
      (this.needsUpdate = !0), (this._value = e);
    }
  }
  T.glslTypeString = (e) =>
    "f" == e
      ? "float"
      : "b" == e
        ? "bool"
        : "i" == e
          ? "int"
          : "2i" == e
            ? "ivec2"
            : "2f" == e
              ? "vec2"
              : "3f" == e
                ? "vec3"
                : "4f" == e
                  ? "vec4"
                  : "m4" == e
                    ? "mat4"
                    : "t" == e
                      ? "sampler2D"
                      : "tc" == e
                        ? "samplerCube"
                        : "3f[]" == e || "m4[]" == e || "f[]" == e
                          ? null
                          : void console.warn(
                              "[CGL UNIFORM] unknown glsl type string ",
                              e,
                            );
  Math.PI;
  const S =
      (Math.PI,
      {
        SHADERVAR_VERTEX_POSITION: "vPosition",
        SHADERVAR_VERTEX_NUMBER: "attrVertIndex",
        SHADERVAR_VERTEX_NORMAL: "attrVertNormal",
        SHADERVAR_VERTEX_TEXCOORD: "attrTexCoord",
        SHADERVAR_INSTANCE_MMATRIX: "instMat",
        SHADERVAR_VERTEX_COLOR: "attrVertColor",
        SHADERVAR_INSTANCE_INDEX: "instanceIndex",
        SHADERVAR_UNI_PROJMAT: "projMatrix",
        SHADERVAR_UNI_VIEWMAT: "viewMatrix",
        SHADERVAR_UNI_MODELMAT: "modelMatrix",
        SHADERVAR_UNI_NORMALMAT: "normalMatrix",
        SHADERVAR_UNI_INVVIEWMAT: "inverseViewMatrix",
        SHADERVAR_UNI_INVPROJMAT: "invProjMatrix",
        SHADERVAR_UNI_MATERIALID: "materialId",
        SHADERVAR_UNI_OBJECTID: "objectId",
        SHADERVAR_UNI_VIEWPOS: "camPos",
      }),
    C = { lastMesh: null },
    j = function (e, t, n) {
      (this._cgl = e),
        (this._log = new b("cgl_mesh")),
        (this._bufVertexAttrib = null),
        (this._bufVerticesIndizes = this._cgl.gl.createBuffer()),
        (this._indexType = this._cgl.gl.UNSIGNED_SHORT),
        (this._attributes = []),
        (this._attribLocs = {}),
        (this._geom = null),
        (this._lastShader = null),
        (this._numInstances = 0),
        (this._glPrimitive = n),
        (this._preWireframeGeom = null),
        (this.addVertexNumbers = !1),
        (this._name = "unknown"),
        (this.feedBackAttributes = []),
        this.setGeom(t),
        (this._feedBacks = []),
        (this._feedBacksChanged = !1),
        (this._transformFeedBackLoc = -1),
        (this._lastAttrUpdate = 0),
        (this.memFreed = !1),
        this._cgl.profileData.addHeavyEvent("mesh constructed", this._name),
        (this._queryExt = null),
        Object.defineProperty(this, "numInstances", {
          get() {
            return this._numInstances;
          },
          set(e) {
            this.setNumInstances(e);
          },
        });
    };
  (j.prototype.freeMem = function () {
    this.memFreed = !0;
    for (let e = 0; e < this._attributes.length; e++)
      this._attributes[e].floatArray = null;
  }),
    (j.prototype.updateVertices = function (e) {
      this.setAttribute(S.SHADERVAR_VERTEX_POSITION, e.vertices, 3),
        (this._numVerts = e.vertices.length / 3);
    }),
    (j.prototype.setAttributePointer = function (t, n, a, r) {
      for (let e = 0; e < this._attributes.length; e++)
        this._attributes[e].name == t &&
          (this._attributes[e].pointer || (this._attributes[e].pointer = []),
          this._attributes[e].pointer.push({
            loc: -1,
            name: n,
            stride: a,
            offset: r,
            instanced: t == S.SHADERVAR_INSTANCE_MMATRIX,
          }));
    }),
    (j.prototype.getAttribute = function (t) {
      for (let e = 0; e < this._attributes.length; e++)
        if (this._attributes[e].name == t) return this._attributes[e];
    }),
    (j.prototype.setAttributeRange = function (e, t, n, a) {
      e &&
        (n || a) &&
        (e.name || this._log.stack("no attrname?!"),
        this._cgl.gl.bindBuffer(this._cgl.gl.ARRAY_BUFFER, e.buffer),
        (this._cgl.profileData.profileMeshAttributes += a - n || 0),
        (this._cgl.profileData.profileSingleMeshAttribute[this._name] =
          this._cgl.profileData.profileSingleMeshAttribute[this._name] || 0),
        (this._cgl.profileData.profileSingleMeshAttribute[this._name] +=
          a - n || 0),
        e.numItems < t.length / e.itemSize && this._resizeAttr(t, e),
        a >= t.length - 1 &&
          this._log.log(
            this._cgl.canvas.id +
              " " +
              e.name +
              " buffersubdata out of bounds ?",
            t.length,
            a,
            n,
            e,
          ),
        1 == this._cgl.glVersion
          ? this._cgl.gl.bufferSubData(this._cgl.gl.ARRAY_BUFFER, 0, t)
          : this._cgl.gl.bufferSubData(
              this._cgl.gl.ARRAY_BUFFER,
              4 * n,
              t,
              n,
              a - n,
            ));
    }),
    (j.prototype._resizeAttr = function (e, t) {
      t.buffer && this._cgl.gl.deleteBuffer(t.buffer),
        (t.buffer = this._cgl.gl.createBuffer()),
        this._cgl.gl.bindBuffer(this._cgl.gl.ARRAY_BUFFER, t.buffer),
        this._bufferArray(e, t),
        (t.numItems = e.length / t.itemSize);
    }),
    (j.prototype._bufferArray = function (e, t) {
      let n = t.floatArray || null;
      e &&
        (this._cgl.debugOneFrame &&
          console.log("_bufferArray", e.length, t.name),
        e instanceof Float32Array
          ? (n = e)
          : t && n && n.length == e.length
            ? n.set(e)
            : ((n = new Float32Array(e)),
              this._cgl.debugOneFrame &&
                console.log(
                  "_bufferArray create new float32array",
                  e.length,
                  t.name,
                ),
              e.length > 1e4 &&
                (this._cgl.profileData.profileNonTypedAttrib++,
                (this._cgl.profileData.profileNonTypedAttribNames =
                  "(" + this._name + ":" + t.name + ")"))),
        (t.arrayLength = n.length),
        (t.floatArray = null),
        this._cgl.gl.bufferData(
          this._cgl.gl.ARRAY_BUFFER,
          n,
          this._cgl.gl.DYNAMIC_DRAW,
        ));
    }),
    (j.prototype.addAttribute =
      j.prototype.updateAttribute =
      j.prototype.setAttribute =
        function (e, t, n, a) {
          if (!t)
            throw (
              (this._log.error("mesh addAttribute - no array given! " + e),
              new Error())
            );
          let r = null,
            i = !1,
            s = 0;
          const o = t.length / n;
          for (
            this._cgl.profileData.profileMeshAttributes += o || 0,
              "function" == typeof a && (r = a),
              "object" == typeof a &&
                (a.cb && (r = a.cb), a.instanced && (i = a.instanced)),
              e == S.SHADERVAR_INSTANCE_MMATRIX && (i = !0),
              s = 0;
            s < this._attributes.length;
            s++
          ) {
            const n = this._attributes[s];
            if (n.name == e)
              return (
                n.numItems === o || this._resizeAttr(t, n),
                this._cgl.gl.bindBuffer(this._cgl.gl.ARRAY_BUFFER, n.buffer),
                this._bufferArray(t, n),
                n
              );
          }
          const l = this._cgl.gl.createBuffer();
          this._cgl.gl.bindBuffer(this._cgl.gl.ARRAY_BUFFER, l);
          let u = this._cgl.gl.FLOAT;
          a && a.type && (u = a.type);
          const h = {
            buffer: l,
            name: e,
            cb: r,
            itemSize: n,
            numItems: o,
            startItem: 0,
            instanced: i,
            type: u,
          };
          return (
            this._bufferArray(t, h),
            e == S.SHADERVAR_VERTEX_POSITION && (this._bufVertexAttrib = h),
            this._attributes.push(h),
            (this._attribLocs = {}),
            h
          );
        }),
    (j.prototype.getAttributes = function () {
      return this._attributes;
    }),
    (j.prototype.updateTexCoords = function (t) {
      if (t.texCoords && t.texCoords.length > 0)
        this.setAttribute(S.SHADERVAR_VERTEX_TEXCOORD, t.texCoords, 2);
      else {
        const e = new Float32Array(Math.round((t.vertices.length / 3) * 2));
        this.setAttribute(S.SHADERVAR_VERTEX_TEXCOORD, e, 2);
      }
    }),
    (j.prototype.updateNormals = function (t) {
      if (t.vertexNormals && t.vertexNormals.length > 0)
        this.setAttribute(S.SHADERVAR_VERTEX_NORMAL, t.vertexNormals, 3);
      else {
        const e = new Float32Array(Math.round(t.vertices.length));
        this.setAttribute(S.SHADERVAR_VERTEX_NORMAL, e, 3);
      }
    }),
    (j.prototype._setVertexNumbers = function (e) {
      if (
        !this._verticesNumbers ||
        this._verticesNumbers.length != this._numVerts ||
        e
      ) {
        if (e) this._verticesNumbers = e;
        else {
          this._verticesNumbers = new Float32Array(this._numVerts);
          for (let e = 0; e < this._numVerts; e++) this._verticesNumbers[e] = e;
        }
        this.setAttribute(
          S.SHADERVAR_VERTEX_NUMBER,
          this._verticesNumbers,
          1,
          (e, t, n) => {
            n.uniformNumVertices ||
              (n.uniformNumVertices = new T(
                n,
                "f",
                "numVertices",
                this._numVerts,
              )),
              n.uniformNumVertices.setValue(this._numVerts);
          },
        );
      }
    }),
    (j.prototype.setVertexIndices = function (t) {
      if (this._bufVerticesIndizes)
        if (t.length > 0) {
          t instanceof Float32Array &&
            this._log.warn("vertIndices float32Array: " + this._name);
          for (let e = 0; e < t.length; e++)
            if (t[e] >= this._numVerts)
              return void this._log.warn(
                "invalid index in " + this._name,
                e,
                t[e],
              );
          this._cgl.gl.bindBuffer(
            this._cgl.gl.ELEMENT_ARRAY_BUFFER,
            this._bufVerticesIndizes,
          ),
            t.length > 65535
              ? ((this.vertIndicesTyped = new Uint32Array(t)),
                (this._indexType = this._cgl.gl.UNSIGNED_INT))
              : t instanceof Uint32Array
                ? ((this.vertIndicesTyped = t),
                  (this._indexType = this._cgl.gl.UNSIGNED_INT))
                : t instanceof Uint16Array
                  ? (this.vertIndicesTyped = t)
                  : ((this.vertIndicesTyped = new Uint16Array(t)),
                    (this._indexType = this._cgl.gl.UNSIGNED_SHORT)),
            this._cgl.gl.bufferData(
              this._cgl.gl.ELEMENT_ARRAY_BUFFER,
              this.vertIndicesTyped,
              this._cgl.gl.DYNAMIC_DRAW,
            ),
            (this._bufVerticesIndizes.itemSize = 1),
            (this._bufVerticesIndizes.numItems = t.length);
        } else this._bufVerticesIndizes.numItems = 0;
      else this._log.warn("no bufVerticesIndizes: " + this._name);
    }),
    (j.prototype.setGeom = function (e, t) {
      (this._geom = e),
        null != e.glPrimitive && (this._glPrimitive = e.glPrimitive),
        this._geom &&
          this._geom.name &&
          (this._name = "mesh " + this._geom.name),
        (C.lastMesh = null),
        this._cgl.profileData.profileMeshSetGeom++,
        this._disposeAttributes(),
        this.updateVertices(this._geom),
        this.setVertexIndices(this._geom.verticesIndices),
        this.addVertexNumbers && this._setVertexNumbers();
      const n = this._geom.getAttributes(),
        a = {
          texCoords: S.SHADERVAR_VERTEX_TEXCOORD,
          vertexNormals: S.SHADERVAR_VERTEX_NORMAL,
          vertexColors: S.SHADERVAR_VERTEX_COLOR,
          tangents: "attrTangent",
          biTangents: "attrBiTangent",
        };
      for (const e in n)
        n[e].data &&
          n[e].data.length &&
          this.setAttribute(a[e] || e, n[e].data, n[e].itemSize);
      t && (this._geom = null);
    }),
    (j.prototype._preBind = function (t) {
      for (let e = 0; e < this._attributes.length; e++)
        this._attributes[e].cb &&
          this._attributes[e].cb(this._attributes[e], this._geom, t);
    }),
    (j.prototype._checkAttrLengths = function () {
      if (!this.memFreed)
        for (let e = 0; e < this._attributes.length; e++)
          if (
            this._attributes[e].arrayLength / this._attributes[e].itemSize <
            this._attributes[0].arrayLength / this._attributes[0].itemSize
          ) {
            let e = "unknown";
            this._geom && (e = this._geom.name);
          }
    }),
    (j.prototype._bind = function (a) {
      if (!a.isValid()) return;
      let t = [];
      if (
        (this._attribLocs[a.id]
          ? (t = this._attribLocs[a.id])
          : (this._attribLocs[a.id] = t),
        (this._lastShader = a),
        a.lastCompile > this._lastAttrUpdate ||
          t.length != this._attributes.length)
      ) {
        this._lastAttrUpdate = a.lastCompile;
        for (let e = 0; e < this._attributes.length; e++) t[e] = -1;
      }
      for (let e = 0; e < this._attributes.length; e++) {
        const n = this._attributes[e];
        if (
          (-1 == t[e] &&
            n._attrLocationLastShaderTime != a.lastCompile &&
            ((n._attrLocationLastShaderTime = a.lastCompile),
            (t[e] = this._cgl.glGetAttribLocation(a.getProgram(), n.name)),
            this._cgl.profileData.profileAttrLoc++),
          -1 != t[e])
        )
          if (
            (this._cgl.gl.enableVertexAttribArray(t[e]),
            this._cgl.gl.bindBuffer(this._cgl.gl.ARRAY_BUFFER, n.buffer),
            n.instanced)
          )
            if (n.itemSize <= 4)
              (n.itemSize && 0 != n.itemSize) ||
                this._log.warn(
                  "instanced attrib itemsize error",
                  this._geom.name,
                  n,
                ),
                this._cgl.gl.vertexAttribPointer(
                  t[e],
                  n.itemSize,
                  n.type,
                  !1,
                  4 * n.itemSize,
                  0,
                ),
                this._cgl.gl.vertexAttribDivisor(t[e], 1);
            else if (16 == n.itemSize) {
              const a = 64;
              this._cgl.gl.vertexAttribPointer(t[e], 4, n.type, !1, a, 0),
                this._cgl.gl.enableVertexAttribArray(t[e] + 1),
                this._cgl.gl.vertexAttribPointer(
                  t[e] + 1,
                  4,
                  n.type,
                  !1,
                  a,
                  16,
                ),
                this._cgl.gl.enableVertexAttribArray(t[e] + 2),
                this._cgl.gl.vertexAttribPointer(
                  t[e] + 2,
                  4,
                  n.type,
                  !1,
                  a,
                  32,
                ),
                this._cgl.gl.enableVertexAttribArray(t[e] + 3),
                this._cgl.gl.vertexAttribPointer(
                  t[e] + 3,
                  4,
                  n.type,
                  !1,
                  a,
                  48,
                ),
                this._cgl.gl.vertexAttribDivisor(t[e], 1),
                this._cgl.gl.vertexAttribDivisor(t[e] + 1, 1),
                this._cgl.gl.vertexAttribDivisor(t[e] + 2, 1),
                this._cgl.gl.vertexAttribDivisor(t[e] + 3, 1);
            } else this._log.warn("unknown instance attrib size", n.name);
          else {
            if (
              ((n.itemSize && 0 != n.itemSize) ||
                this._log.warn("attrib itemsize error", this._name, n),
              this._cgl.gl.vertexAttribPointer(
                t[e],
                n.itemSize,
                n.type,
                !1,
                4 * n.itemSize,
                0,
              ),
              n.pointer)
            )
              for (let t = 0; t < n.pointer.length; t++) {
                const e = n.pointer[t];
                -1 == e.loc &&
                  (e.loc = this._cgl.glGetAttribLocation(
                    a.getProgram(),
                    e.name,
                  )),
                  this._cgl.profileData.profileAttrLoc++,
                  this._cgl.gl.enableVertexAttribArray(e.loc),
                  this._cgl.gl.vertexAttribPointer(
                    e.loc,
                    n.itemSize,
                    n.type,
                    !1,
                    e.stride,
                    e.offset,
                  );
              }
            this.bindFeedback(n);
          }
      }
      this._bufVerticesIndizes &&
        0 !== this._bufVerticesIndizes.numItems &&
        this._cgl.gl.bindBuffer(
          this._cgl.gl.ELEMENT_ARRAY_BUFFER,
          this._bufVerticesIndizes,
        );
    }),
    (j.prototype.unBind = function () {
      const e = this._lastShader;
      if (((this._lastShader = null), !e)) return;
      let t = [];
      this._attribLocs[e.id]
        ? (t = this._attribLocs[e.id])
        : (this._attribLocs[e.id] = t),
        (C.lastMesh = null);
      for (let e = 0; e < this._attributes.length; e++)
        this._attributes[e].instanced &&
          (this._attributes[e].itemSize <= 4
            ? (-1 != t[e] && this._cgl.gl.vertexAttribDivisor(t[e], 0),
              t[e] >= 0 && this._cgl.gl.disableVertexAttribArray(t[e]))
            : (this._cgl.gl.vertexAttribDivisor(t[e], 0),
              this._cgl.gl.vertexAttribDivisor(t[e] + 1, 0),
              this._cgl.gl.vertexAttribDivisor(t[e] + 2, 0),
              this._cgl.gl.vertexAttribDivisor(t[e] + 3, 0),
              this._cgl.gl.disableVertexAttribArray(t[e] + 1),
              this._cgl.gl.disableVertexAttribArray(t[e] + 2),
              this._cgl.gl.disableVertexAttribArray(t[e] + 3))),
          -1 != t[e] && this._cgl.gl.disableVertexAttribArray(t[e]);
    }),
    (j.prototype.meshChanged = function () {
      return this._cgl.lastMesh && this._cgl.lastMesh != this;
    }),
    (j.prototype.printDebug = function (e) {
      console.log("--attributes");
      for (let e = 0; e < this._attributes.length; e++)
        console.log("attribute " + e + " " + this._attributes[e].name);
    }),
    (j.prototype.setNumVertices = function (e) {
      this._bufVertexAttrib.numItems = e;
    }),
    (j.prototype.getNumVertices = function () {
      return this._bufVertexAttrib.numItems;
    }),
    (j.prototype.render = function (n) {
      if (!n || !n.isValid() || this._cgl.aborted) return;
      if (
        (this._checkAttrLengths(),
        this._geom &&
          (!this._preWireframeGeom ||
            n.wireframe ||
            this._geom.isIndexed() ||
            (this.setGeom(this._preWireframeGeom),
            (this._preWireframeGeom = null)),
          n.wireframe))
      ) {
        let e = !1;
        this._geom.isIndexed() &&
          (this._preWireframeGeom ||
            ((this._preWireframeGeom = this._geom),
            (this._geom = this._geom.copy())),
          this._geom.unIndex(),
          (e = !0)),
          this._geom.getAttribute("attrBarycentric") ||
            (this._preWireframeGeom ||
              ((this._preWireframeGeom = this._geom),
              (this._geom = this._geom.copy())),
            (e = !0),
            this._geom.calcBarycentric()),
          e && this.setGeom(this._geom);
      }
      let e = !1;
      if (
        (C.lastMesh != this && (C.lastMesh && C.lastMesh.unBind(), (e = !0)),
        e && this._preBind(n),
        !n.bind())
      )
        return;
      this._bind(n),
        this.addVertexNumbers && this._setVertexNumbers(),
        (C.lastMesh = this);
      let t = this._cgl.gl.TRIANGLES;
      void 0 !== this._glPrimitive && (t = this._glPrimitive),
        null !== n.glPrimitive && (t = n.glPrimitive);
      let a = 1,
        r = this._cgl.profileData.doProfileGlQuery,
        i = !1;
      if (r) {
        let e = this._name + " - " + n.getName() + " #" + n.id;
        this._numInstances && (e += " instanced " + this._numInstances + "x");
        let t = this._cgl.profileData.glQueryData[e];
        if (
          (t || (t = { id: e, num: 0 }),
          (this._cgl.profileData.glQueryData[e] = t),
          this._queryExt ||
            !1 === this._queryExt ||
            (this._queryExt =
              this._cgl.enableExtension("EXT_disjoint_timer_query_webgl2") ||
              !1),
          this._queryExt)
        ) {
          if (
            t._drawQuery &&
            this._cgl.gl.getQueryParameter(
              t._drawQuery,
              this._cgl.gl.QUERY_RESULT_AVAILABLE,
            )
          ) {
            const n =
              this._cgl.gl.getQueryParameter(
                t._drawQuery,
                this._cgl.gl.QUERY_RESULT,
              ) / 1e6;
            (t._times = t._times || 0),
              (t._times += n),
              t._numcount++,
              (t.when = performance.now()),
              (t._drawQuery = null),
              (t.queryStarted = !1);
          }
          t.queryStarted ||
            ((t._drawQuery = this._cgl.gl.createQuery()),
            this._cgl.gl.beginQuery(
              this._queryExt.TIME_ELAPSED_EXT,
              t._drawQuery,
            ),
            (i = t.queryStarted = !0));
        }
      }
      if (
        (this.hasFeedbacks()
          ? this.drawFeedbacks(n, t)
          : this._bufVerticesIndizes && 0 !== this._bufVerticesIndizes.numItems
            ? (t == this._cgl.gl.TRIANGLES && (a = 3),
              0 === this._numInstances
                ? this._cgl.gl.drawElements(
                    t,
                    this._bufVerticesIndizes.numItems,
                    this._indexType,
                    0,
                  )
                : this._cgl.gl.drawElementsInstanced(
                    t,
                    this._bufVerticesIndizes.numItems,
                    this._indexType,
                    0,
                    this._numInstances,
                  ))
            : (t == this._cgl.gl.TRIANGLES && (a = 3),
              0 === this._numInstances
                ? this._cgl.gl.drawArrays(
                    t,
                    this._bufVertexAttrib.startItem,
                    this._bufVertexAttrib.numItems -
                      this._bufVertexAttrib.startItem,
                  )
                : this._cgl.gl.drawArraysInstanced(
                    t,
                    this._bufVertexAttrib.startItem,
                    this._bufVertexAttrib.numItems,
                    this._numInstances,
                  )),
        this._cgl.debugOneFrame &&
          this._cgl.gl.getError() != this._cgl.gl.NO_ERROR)
      ) {
        this._log.error("mesh draw gl error"),
          this._log.error("mesh", this),
          this._log.error("shader", n);
        for (
          let e = 0;
          e <
          this._cgl.gl.getProgramParameter(
            n.getProgram(),
            this._cgl.gl.ACTIVE_ATTRIBUTES,
          );
          e++
        ) {
          const t = this._cgl.gl.getActiveAttrib(n.getProgram(), e).name;
          this._log.error("attrib ", t);
        }
      }
      (this._cgl.profileData.profileMeshNumElements +=
        (this._bufVertexAttrib.numItems / a) * (this._numInstances || 1)),
        this._cgl.profileData.profileMeshDraw++,
        r && i && this._cgl.gl.endQuery(this._queryExt.TIME_ELAPSED_EXT),
        this._cgl.printError("mesh render " + this._name),
        this.unBind();
    }),
    (j.prototype.setNumInstances = function (n) {
      if (((n = Math.max(0, n)), this._numInstances != n)) {
        this._numInstances = n;
        const t = new Float32Array(n);
        for (let e = 0; e < n; e++) t[e] = e;
        this.setAttribute(S.SHADERVAR_INSTANCE_INDEX, t, 1, { instanced: !0 });
      }
    }),
    (j.prototype._disposeAttributes = function () {
      if (this._attributes) {
        for (let e = 0; e < this._attributes.length; e++)
          this._attributes[e].buffer &&
            (this._cgl.gl.deleteBuffer(this._attributes[e].buffer),
            (this._attributes[e].buffer = null));
        this._attributes.length = 0;
      }
    }),
    (j.prototype.dispose = function () {
      this._bufVertexAttrib &&
        this._bufVertexAttrib.buffer &&
        this._cgl.gl.deleteBuffer(this._bufVertexAttrib.buffer),
        this._bufVerticesIndizes &&
          this._cgl.gl.deleteBuffer(this._bufVerticesIndizes),
        (this._bufVerticesIndizes = null),
        this._disposeAttributes();
    }),
    (function (e) {
      (e.prototype.hasFeedbacks = function () {
        return this._feedBacks.length > 0;
      }),
        (e.prototype.removeFeedbacks = function (e) {
          this._feedbacks &&
            ((this._feedbacks.length = 0), (this._feedBacksChanged = !0));
        }),
        (e.prototype.setAttributeFeedback = function () {}),
        (e.prototype.setFeedback = function (e, t, n) {
          let a = { nameOut: t },
            r = !1;
          this.unBindFeedbacks();
          for (let e = 0; e < this._feedBacks.length; e++)
            this._feedBacks[e].nameOut == t &&
              ((a = this._feedBacks[e]), (r = !0));
          return (
            r || (this._feedBacksChanged = !0),
            (a.initialArr = n),
            (a.attrib = e),
            a.outBuffer && this._cgl.gl.deleteBuffer(a.outBuffer),
            (a.outBuffer = this._cgl.gl.createBuffer()),
            this._cgl.gl.bindBuffer(this._cgl.gl.ARRAY_BUFFER, a.outBuffer),
            this._cgl.gl.bufferData(
              this._cgl.gl.ARRAY_BUFFER,
              a.initialArr,
              this._cgl.gl.STATIC_DRAW,
            ),
            this._cgl.gl.bindBuffer(this._cgl.gl.ARRAY_BUFFER, a.attrib.buffer),
            this._cgl.gl.bufferData(
              this._cgl.gl.ARRAY_BUFFER,
              a.initialArr,
              this._cgl.gl.STATIC_DRAW,
            ),
            r || this._feedBacks.push(a),
            a
          );
        }),
        (e.prototype.bindFeedback = function (n) {
          if (!this._feedBacks || 0 === this._feedBacks.length) return;
          -1 == this._transformFeedBackLoc &&
            (this._transformFeedBackLoc =
              this._cgl.gl.createTransformFeedback()),
            this._cgl.gl.bindTransformFeedback(
              this._cgl.gl.TRANSFORM_FEEDBACK,
              this._transformFeedBackLoc,
            );
          let a = !1;
          for (let t = 0; t < this._feedBacks.length; t++) {
            const e = this._feedBacks[t];
            e.attrib == n &&
              ((a = !0),
              this._cgl.gl.bindBufferBase(
                this._cgl.gl.TRANSFORM_FEEDBACK_BUFFER,
                t,
                e.outBuffer,
              ));
          }
        }),
        (e.prototype.drawFeedbacks = function (e, t) {
          let n = 0;
          if (this._feedBacksChanged) {
            const t = [];
            for (
              this._cgl.gl.bindTransformFeedback(
                this._cgl.gl.TRANSFORM_FEEDBACK,
                this._transformFeedBackLoc,
              ),
                n = 0;
              n < this._feedBacks.length;
              n++
            )
              t.push(this._feedBacks[n].nameOut);
            return (
              e.setFeedbackNames(t),
              console.log("feedbacknames", t),
              e.compile(),
              (this._feedBacksChanged = !1),
              this._cgl.gl.bindTransformFeedback(
                this._cgl.gl.TRANSFORM_FEEDBACK,
                null,
              ),
              void console.log("changed finished")
            );
          }
          this._cgl.gl.beginTransformFeedback(this.glPrimitive),
            this._cgl.gl.drawArrays(t, 0, this._feedBacks[0].attrib.numItems),
            this._cgl.gl.endTransformFeedback(),
            this.unBindFeedbacks(),
            this.feedBacksSwapBuffers();
        }),
        (e.prototype.unBindFeedbacks = function () {
          for (let e = 0; e < this._feedBacks.length; e++)
            this._cgl.gl.bindBufferBase(
              this._cgl.gl.TRANSFORM_FEEDBACK_BUFFER,
              e,
              null,
            );
          this._cgl.gl.bindTransformFeedback(
            this._cgl.gl.TRANSFORM_FEEDBACK,
            null,
          );
        }),
        (e.prototype.feedBacksSwapBuffers = function () {
          for (let t = 0; t < this._feedBacks.length; t++) {
            const e = this._feedBacks[t].attrib.buffer;
            (this._feedBacks[t].attrib.buffer = this._feedBacks[t].outBuffer),
              (this._feedBacks[t].outBuffer = e);
          }
        });
    })(j);
  const N = function (e, t) {
    const n = new v(t);
    return (
      (n.vertices = [1, 1, 0, -1, 1, 0, 1, -1, 0, -1, -1, 0]),
      (n.texCoords = [1, 1, 0, 1, 1, 0, 0, 0]),
      (n.verticesIndices = [0, 1, 2, 2, 1, 3]),
      (n.vertexNormals = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
      new j(e, n)
    );
  };
  (CGL.CopyTexture = class {
    constructor(e, t, n) {
      (this.cgl = e), (this._options = n), (this.fb = null);
      let a = n.shader;
      if (
        ((this._useDefaultShader = !0),
        n.shader && (this._useDefaultShader = !1),
        (n.numRenderBuffers = n.numRenderBuffers || 1),
        !a)
      ) {
        a = "".endl() + "IN vec2 texCoord;";
        for (let e = 0; e < n.numRenderBuffers; e++)
          a = a.endl() + "UNI sampler2D tex" + e + ";".endl();
        if (
          ((a = a.endl() + "void main()".endl() + "{"), 1 == n.numRenderBuffers)
        )
          a = a.endl() + "    outColor= texture(tex0,texCoord);;".endl();
        else
          for (let e = 0; e < n.numRenderBuffers; e++)
            a =
              a.endl() +
              "outColor" +
              e +
              " = texture(tex" +
              e +
              ",texCoord);".endl();
        a = a.endl() + "}";
      }
      const r =
        n.vertexShader ||
        "".endl() +
          "IN vec3 vPosition;".endl() +
          "IN vec2 attrTexCoord;".endl() +
          "OUT vec2 texCoord;".endl() +
          "void main()".endl() +
          "{".endl() +
          "   texCoord=attrTexCoord;".endl() +
          "   gl_Position = vec4(vPosition,  1.0);".endl() +
          "}";
      (this.bgShader = new CGL.Shader(e, "corelib copytexture " + t)),
        this.bgShader.setSource(r, a),
        n.vertexShader || (this.bgShader.ignoreMissingUniforms = !0),
        new CGL.Uniform(this.bgShader, "t", "tex", 0),
        new CGL.Uniform(this.bgShader, "t", "tex1", 1),
        new CGL.Uniform(this.bgShader, "t", "tex2", 2),
        new CGL.Uniform(this.bgShader, "t", "tex3", 3),
        (this.mesh = N(this.cgl, "texEffectRect"));
    }
    setSize(e, t) {
      (this._options.width = e), (this._options.height = t);
    }
    copy(e, t, n, a, r) {
      e || (e = CGL.Texture.getEmptyTexture(this.cgl));
      const i = this._options.width || e.width,
        s = this._options.height || e.height,
        o = this.cgl;
      if (this.fb)
        (this.fb.getWidth() == i && this.fb.getHeight() == s) ||
          this.fb.setSize(i, s);
      else {
        let e = CGL.Texture.FILTER_LINEAR,
          t = CGL.Texture.WRAP_CLAMP_TO_EDGE;
        this._options.isFloatingPointTexture &&
          (e = CGL.Texture.FILTER_NEAREST),
          this._options.hasOwnProperty("filter") && (e = this._options.filter),
          this._options.hasOwnProperty("wrap") && (t = this._options.wrap);
        const n = {
          isFloatingPointTexture: this._options.isFloatingPointTexture,
          pixelFormat: this._options.pixelFormat,
          numRenderBuffers: this._options.numRenderBuffers || 1,
          filter: e,
          wrap: t,
        };
        1 == o.glVersion
          ? (this.fb = new CGL.Framebuffer(o, i, s, n))
          : (this.fb = new CGL.Framebuffer2(o, i, s, n));
      }
      return (
        (o.frameStore.renderOffscreen = !0),
        this.fb.renderStart(o),
        o.setTexture(0, e.tex),
        t && o.setTexture(1, t.tex),
        n && o.setTexture(2, n.tex),
        a && o.setTexture(3, a.tex),
        r && o.setTexture(4, r.tex),
        o.pushShader(this.bgShader),
        this.mesh.render(this.bgShader),
        o.popShader(),
        this.fb.renderEnd(),
        (o.frameStore.renderOffscreen = !1),
        this.fb.getTextureColor()
      );
    }
    dispose() {
      this.fb && this.fb.dispose(),
        this.bgShader && this.bgShader.dispose(),
        this.mesh && this.mesh.dispose();
    }
  }),
    (((this.CGL = this.CGL || {}).COREMODULES =
      this.CGL.COREMODULES || {}).Copytexture = {}.Copytexture);
})();
(() => {
  (CABLES.interActionNeededButton =
    CABLES.interActionNeededButton ||
    new (class {
      constructor() {
        (this.patch = null), (this.fsElement = null), (this.callbacks = {});
      }
      add(e, t, n) {
        (this.patch = e), (this.callbacks[t] = n), this.show();
      }
      remove(e) {
        delete this.callbacks[e],
          0 == Object.keys(this.callbacks).length &&
            (this.fsElement && this.fsElement.remove(),
            (this.fsElement = null));
      }
      show() {
        if (!this.fsElement) {
          this.fsElement = document.createElement("div");
          const e = this.patch.cgl.canvas.parentElement;
          e && e.appendChild(this.fsElement),
            this.fsElement.addEventListener("pointerdown", (e) => {
              for (const e in this.callbacks) this.callbacks[e]();
            });
        }
        (this.fsElement.style.padding = "10px"),
          (this.fsElement.style.position = "absolute"),
          (this.fsElement.style.right = "20px"),
          (this.fsElement.style.bottom = "20px"),
          (this.fsElement.style.width = "24px"),
          (this.fsElement.style.height = "24px"),
          (this.fsElement.style.cursor = "pointer"),
          (this.fsElement.style["border-radius"] = "40px"),
          (this.fsElement.style.background = "#444"),
          (this.fsElement.style["z-index"] = "9999"),
          (this.fsElement.style.display = "block"),
          (this.fsElement.innerHTML =
            '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" class="feather feather-volume-2"><polygon points="11 5 6 9 2 9 2 15 6 15 11 19 11 5"></polygon><path d="M19.07 4.93a10 10 0 0 1 0 14.14M15.54 8.46a5 5 0 0 1 0 7.07"></path></svg>');
      }
    })()),
    (((this.CABLES = this.CABLES || {}).COREMODULES =
      this.CABLES.COREMODULES || {}).Interactionneededbutton = {}.Cables);
})();
